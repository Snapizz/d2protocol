var StatisticData = require('./types/common/basic/statistic-data');
var StatisticDataBoolean = require('./types/common/basic/statistic-data-boolean');
var StatisticDataByte = require('./types/common/basic/statistic-data-byte');
var StatisticDataInt = require('./types/common/basic/statistic-data-int');
var StatisticDataShort = require('./types/common/basic/statistic-data-short');
var StatisticDataString = require('./types/common/basic/statistic-data-string');
var GameServerInformations = require('./types/connection/game-server-informations');
var Achievement = require('./types/game/achievement/achievement');
var AchievementObjective = require('./types/game/achievement/achievement-objective');
var AchievementRewardable = require('./types/game/achievement/achievement-rewardable');
var AchievementStartedObjective = require('./types/game/achievement/achievement-started-objective');
var FightDispellableEffectExtendedInformations = require('./types/game/action/fight/fight-dispellable-effect-extended-informations');
var AbstractFightDispellableEffect = require('./types/game/actions/fight/abstract-fight-dispellable-effect');
var FightTemporaryBoostEffect = require('./types/game/actions/fight/fight-temporary-boost-effect');
var FightTemporaryBoostStateEffect = require('./types/game/actions/fight/fight-temporary-boost-state-effect');
var FightTemporaryBoostWeaponDamagesEffect = require('./types/game/actions/fight/fight-temporary-boost-weapon-damages-effect');
var FightTemporarySpellBoostEffect = require('./types/game/actions/fight/fight-temporary-spell-boost-effect');
var FightTemporarySpellImmunityEffect = require('./types/game/actions/fight/fight-temporary-spell-immunity-effect');
var FightTriggeredEffect = require('./types/game/actions/fight/fight-triggered-effect');
var GameActionMark = require('./types/game/actions/fight/game-action-mark');
var GameActionMarkedCell = require('./types/game/actions/fight/game-action-marked-cell');
var ServerSessionConstant = require('./types/game/approach/server-session-constant');
var ServerSessionConstantInteger = require('./types/game/approach/server-session-constant-integer');
var ServerSessionConstantLong = require('./types/game/approach/server-session-constant-long');
var ServerSessionConstantString = require('./types/game/approach/server-session-constant-string');
var AbstractCharacterInformation = require('./types/game/character/abstract-character-information');
var CharacterMinimalAllianceInformations = require('./types/game/character/character-minimal-alliance-informations');
var CharacterMinimalGuildInformations = require('./types/game/character/character-minimal-guild-informations');
var CharacterMinimalInformations = require('./types/game/character/character-minimal-informations');
var CharacterMinimalPlusLookAndGradeInformations = require('./types/game/character/character-minimal-plus-look-and-grade-informations');
var CharacterMinimalPlusLookInformations = require('./types/game/character/character-minimal-plus-look-informations');
var ActorAlignmentInformations = require('./types/game/character/alignment/actor-alignment-informations');
var ActorExtendedAlignmentInformations = require('./types/game/character/alignment/actor-extended-alignment-informations');
var CharacterBaseCharacteristic = require('./types/game/character/characteristic/character-base-characteristic');
var CharacterCharacteristicsInformations = require('./types/game/character/characteristic/character-characteristics-informations');
var CharacterSpellModification = require('./types/game/character/characteristic/character-spell-modification');
var AbstractCharacterToRefurbishInformation = require('./types/game/character/choice/abstract-character-to-refurbish-information');
var CharacterBaseInformations = require('./types/game/character/choice/character-base-informations');
var CharacterHardcoreOrEpicInformations = require('./types/game/character/choice/character-hardcore-or-epic-informations');
var CharacterRemodelingInformation = require('./types/game/character/choice/character-remodeling-information');
var CharacterToRecolorInformation = require('./types/game/character/choice/character-to-recolor-information');
var CharacterToRelookInformation = require('./types/game/character/choice/character-to-relook-information');
var CharacterToRemodelInformations = require('./types/game/character/choice/character-to-remodel-informations');
var RemodelingInformation = require('./types/game/character/choice/remodeling-information');
var ActorRestrictionsInformations = require('./types/game/character/restriction/actor-restrictions-informations');
var PlayerStatus = require('./types/game/character/status/player-status');
var PlayerStatusExtended = require('./types/game/character/status/player-status-extended');
var ActorOrientation = require('./types/game/context/actor-orientation');
var EntityDispositionInformations = require('./types/game/context/entity-disposition-informations');
var EntityMovementInformations = require('./types/game/context/entity-movement-informations');
var FightEntityDispositionInformations = require('./types/game/context/fight-entity-disposition-informations');
var GameContextActorInformations = require('./types/game/context/game-context-actor-informations');
var GameRolePlayTaxCollectorInformations = require('./types/game/context/game-role-play-tax-collector-informations');
var IdentifiedEntityDispositionInformations = require('./types/game/context/identified-entity-disposition-informations');
var MapCoordinates = require('./types/game/context/map-coordinates');
var MapCoordinatesAndId = require('./types/game/context/map-coordinates-and-id');
var MapCoordinatesExtended = require('./types/game/context/map-coordinates-extended');
var TaxCollectorStaticExtendedInformations = require('./types/game/context/tax-collector-static-extended-informations');
var TaxCollectorStaticInformations = require('./types/game/context/tax-collector-static-informations');
var AbstractFightTeamInformations = require('./types/game/context/fight/abstract-fight-team-informations');
var FightAllianceTeamInformations = require('./types/game/context/fight/fight-alliance-team-informations');
var FightCommonInformations = require('./types/game/context/fight/fight-common-informations');
var FightExternalInformations = require('./types/game/context/fight/fight-external-informations');
var FightLoot = require('./types/game/context/fight/fight-loot');
var FightOptionsInformations = require('./types/game/context/fight/fight-options-informations');
var FightResultAdditionalData = require('./types/game/context/fight/fight-result-additional-data');
var FightResultExperienceData = require('./types/game/context/fight/fight-result-experience-data');
var FightResultFighterListEntry = require('./types/game/context/fight/fight-result-fighter-list-entry');
var FightResultListEntry = require('./types/game/context/fight/fight-result-list-entry');
var FightResultMutantListEntry = require('./types/game/context/fight/fight-result-mutant-list-entry');
var FightResultPlayerListEntry = require('./types/game/context/fight/fight-result-player-list-entry');
var FightResultPvpData = require('./types/game/context/fight/fight-result-pvp-data');
var FightResultTaxCollectorListEntry = require('./types/game/context/fight/fight-result-tax-collector-list-entry');
var FightTeamInformations = require('./types/game/context/fight/fight-team-informations');
var FightTeamLightInformations = require('./types/game/context/fight/fight-team-light-informations');
var FightTeamMemberCharacterInformations = require('./types/game/context/fight/fight-team-member-character-informations');
var FightTeamMemberCompanionInformations = require('./types/game/context/fight/fight-team-member-companion-informations');
var FightTeamMemberInformations = require('./types/game/context/fight/fight-team-member-informations');
var FightTeamMemberMonsterInformations = require('./types/game/context/fight/fight-team-member-monster-informations');
var FightTeamMemberTaxCollectorInformations = require('./types/game/context/fight/fight-team-member-tax-collector-informations');
var FightTeamMemberWithAllianceCharacterInformations = require('./types/game/context/fight/fight-team-member-with-alliance-character-informations');
var GameFightAIInformations = require('./types/game/context/fight/game-fight-a-i-informations');
var GameFightCharacterInformations = require('./types/game/context/fight/game-fight-character-informations');
var GameFightCompanionInformations = require('./types/game/context/fight/game-fight-companion-informations');
var GameFightFighterCompanionLightInformations = require('./types/game/context/fight/game-fight-fighter-companion-light-informations');
var GameFightFighterInformations = require('./types/game/context/fight/game-fight-fighter-informations');
var GameFightFighterLightInformations = require('./types/game/context/fight/game-fight-fighter-light-informations');
var GameFightFighterMonsterLightInformations = require('./types/game/context/fight/game-fight-fighter-monster-light-informations');
var GameFightFighterNamedInformations = require('./types/game/context/fight/game-fight-fighter-named-informations');
var GameFightFighterNamedLightInformations = require('./types/game/context/fight/game-fight-fighter-named-light-informations');
var GameFightFighterTaxCollectorLightInformations = require('./types/game/context/fight/game-fight-fighter-tax-collector-light-informations');
var GameFightMinimalStats = require('./types/game/context/fight/game-fight-minimal-stats');
var GameFightMinimalStatsPreparation = require('./types/game/context/fight/game-fight-minimal-stats-preparation');
var GameFightMonsterInformations = require('./types/game/context/fight/game-fight-monster-informations');
var GameFightMonsterWithAlignmentInformations = require('./types/game/context/fight/game-fight-monster-with-alignment-informations');
var GameFightMutantInformations = require('./types/game/context/fight/game-fight-mutant-informations');
var GameFightResumeSlaveInfo = require('./types/game/context/fight/game-fight-resume-slave-info');
var GameFightSpellCooldown = require('./types/game/context/fight/game-fight-spell-cooldown');
var GameFightTaxCollectorInformations = require('./types/game/context/fight/game-fight-tax-collector-informations');
var AllianceInformations = require('./types/game/context/roleplay/alliance-informations');
var AlternativeMonstersInGroupLightInformations = require('./types/game/context/roleplay/alternative-monsters-in-group-light-informations');
var AtlasPointsInformations = require('./types/game/context/roleplay/atlas-points-informations');
var BasicAllianceInformations = require('./types/game/context/roleplay/basic-alliance-informations');
var BasicGuildInformations = require('./types/game/context/roleplay/basic-guild-informations');
var BasicNamedAllianceInformations = require('./types/game/context/roleplay/basic-named-alliance-informations');
var GameRolePlayActorInformations = require('./types/game/context/roleplay/game-role-play-actor-informations');
var GameRolePlayCharacterInformations = require('./types/game/context/roleplay/game-role-play-character-informations');
var GameRolePlayGroupMonsterInformations = require('./types/game/context/roleplay/game-role-play-group-monster-informations');
var GameRolePlayGroupMonsterWaveInformations = require('./types/game/context/roleplay/game-role-play-group-monster-wave-informations');
var GameRolePlayHumanoidInformations = require('./types/game/context/roleplay/game-role-play-humanoid-informations');
var GameRolePlayMerchantInformations = require('./types/game/context/roleplay/game-role-play-merchant-informations');
var GameRolePlayMountInformations = require('./types/game/context/roleplay/game-role-play-mount-informations');
var GameRolePlayMutantInformations = require('./types/game/context/roleplay/game-role-play-mutant-informations');
var GameRolePlayNamedActorInformations = require('./types/game/context/roleplay/game-role-play-named-actor-informations');
var GameRolePlayNpcInformations = require('./types/game/context/roleplay/game-role-play-npc-informations');
var GameRolePlayNpcWithQuestInformations = require('./types/game/context/roleplay/game-role-play-npc-with-quest-informations');
var GameRolePlayPortalInformations = require('./types/game/context/roleplay/game-role-play-portal-informations');
var GameRolePlayPrismInformations = require('./types/game/context/roleplay/game-role-play-prism-informations');
var GameRolePlayTreasureHintInformations = require('./types/game/context/roleplay/game-role-play-treasure-hint-informations');
var GroupMonsterStaticInformations = require('./types/game/context/roleplay/group-monster-static-informations');
var GroupMonsterStaticInformationsWithAlternatives = require('./types/game/context/roleplay/group-monster-static-informations-with-alternatives');
var GuildInAllianceInformations = require('./types/game/context/roleplay/guild-in-alliance-informations');
var GuildInformations = require('./types/game/context/roleplay/guild-informations');
var HumanInformations = require('./types/game/context/roleplay/human-informations');
var HumanOption = require('./types/game/context/roleplay/human-option');
var HumanOptionAlliance = require('./types/game/context/roleplay/human-option-alliance');
var HumanOptionEmote = require('./types/game/context/roleplay/human-option-emote');
var HumanOptionFollowers = require('./types/game/context/roleplay/human-option-followers');
var HumanOptionGuild = require('./types/game/context/roleplay/human-option-guild');
var HumanOptionObjectUse = require('./types/game/context/roleplay/human-option-object-use');
var HumanOptionOrnament = require('./types/game/context/roleplay/human-option-ornament');
var HumanOptionTitle = require('./types/game/context/roleplay/human-option-title');
var MonsterInGroupInformations = require('./types/game/context/roleplay/monster-in-group-informations');
var MonsterInGroupLightInformations = require('./types/game/context/roleplay/monster-in-group-light-informations');
var ObjectItemInRolePlay = require('./types/game/context/roleplay/object-item-in-role-play');
var DecraftedItemStackInfo = require('./types/game/context/roleplay/job/decrafted-item-stack-info');
var JobCrafterDirectoryEntryJobInfo = require('./types/game/context/roleplay/job/job-crafter-directory-entry-job-info');
var JobCrafterDirectoryEntryPlayerInfo = require('./types/game/context/roleplay/job/job-crafter-directory-entry-player-info');
var JobCrafterDirectoryListEntry = require('./types/game/context/roleplay/job/job-crafter-directory-list-entry');
var JobCrafterDirectorySettings = require('./types/game/context/roleplay/job/job-crafter-directory-settings');
var JobDescription = require('./types/game/context/roleplay/job/job-description');
var JobExperience = require('./types/game/context/roleplay/job/job-experience');
var DungeonPartyFinderPlayer = require('./types/game/context/roleplay/party/dungeon-party-finder-player');
var NamedPartyTeam = require('./types/game/context/roleplay/party/named-party-team');
var NamedPartyTeamWithOutcome = require('./types/game/context/roleplay/party/named-party-team-with-outcome');
var PartyGuestInformations = require('./types/game/context/roleplay/party/party-guest-informations');
var PartyInvitationMemberInformations = require('./types/game/context/roleplay/party/party-invitation-member-informations');
var PartyMemberArenaInformations = require('./types/game/context/roleplay/party/party-member-arena-informations');
var PartyMemberGeoPosition = require('./types/game/context/roleplay/party/party-member-geo-position');
var PartyMemberInformations = require('./types/game/context/roleplay/party/party-member-informations');
var PartyCompanionBaseInformations = require('./types/game/context/roleplay/party/companion/party-companion-base-informations');
var PartyCompanionMemberInformations = require('./types/game/context/roleplay/party/companion/party-companion-member-informations');
var GameRolePlayNpcQuestFlag = require('./types/game/context/roleplay/quest/game-role-play-npc-quest-flag');
var QuestActiveDetailedInformations = require('./types/game/context/roleplay/quest/quest-active-detailed-informations');
var QuestActiveInformations = require('./types/game/context/roleplay/quest/quest-active-informations');
var QuestObjectiveInformations = require('./types/game/context/roleplay/quest/quest-objective-informations');
var QuestObjectiveInformationsWithCompletion = require('./types/game/context/roleplay/quest/quest-objective-informations-with-completion');
var PortalInformation = require('./types/game/context/roleplay/treasureHunt/portal-information');
var TreasureHuntFlag = require('./types/game/context/roleplay/treasureHunt/treasure-hunt-flag');
var TreasureHuntStep = require('./types/game/context/roleplay/treasureHunt/treasure-hunt-step');
var TreasureHuntStepDig = require('./types/game/context/roleplay/treasureHunt/treasure-hunt-step-dig');
var TreasureHuntStepFight = require('./types/game/context/roleplay/treasureHunt/treasure-hunt-step-fight');
var TreasureHuntStepFollowDirection = require('./types/game/context/roleplay/treasureHunt/treasure-hunt-step-follow-direction');
var TreasureHuntStepFollowDirectionToHint = require('./types/game/context/roleplay/treasureHunt/treasure-hunt-step-follow-direction-to-hint');
var TreasureHuntStepFollowDirectionToPOI = require('./types/game/context/roleplay/treasureHunt/treasure-hunt-step-follow-direction-to-p-o-i');
var BidExchangerObjectInfo = require('./types/game/data/items/bid-exchanger-object-info');
var GoldItem = require('./types/game/data/items/gold-item');
var Item = require('./types/game/data/items/item');
var ObjectItem = require('./types/game/data/items/object-item');
var ObjectItemGenericQuantity = require('./types/game/data/items/object-item-generic-quantity');
var ObjectItemInformationWithQuantity = require('./types/game/data/items/object-item-information-with-quantity');
var ObjectItemMinimalInformation = require('./types/game/data/items/object-item-minimal-information');
var ObjectItemNotInContainer = require('./types/game/data/items/object-item-not-in-container');
var ObjectItemQuantity = require('./types/game/data/items/object-item-quantity');
var ObjectItemToSell = require('./types/game/data/items/object-item-to-sell');
var ObjectItemToSellInBid = require('./types/game/data/items/object-item-to-sell-in-bid');
var ObjectItemToSellInHumanVendorShop = require('./types/game/data/items/object-item-to-sell-in-human-vendor-shop');
var ObjectItemToSellInNpcShop = require('./types/game/data/items/object-item-to-sell-in-npc-shop');
var SellerBuyerDescriptor = require('./types/game/data/items/seller-buyer-descriptor');
var SpellItem = require('./types/game/data/items/spell-item');
var ObjectEffect = require('./types/game/data/items/effects/object-effect');
var ObjectEffectCreature = require('./types/game/data/items/effects/object-effect-creature');
var ObjectEffectDate = require('./types/game/data/items/effects/object-effect-date');
var ObjectEffectDice = require('./types/game/data/items/effects/object-effect-dice');
var ObjectEffectDuration = require('./types/game/data/items/effects/object-effect-duration');
var ObjectEffectInteger = require('./types/game/data/items/effects/object-effect-integer');
var ObjectEffectLadder = require('./types/game/data/items/effects/object-effect-ladder');
var ObjectEffectMinMax = require('./types/game/data/items/effects/object-effect-min-max');
var ObjectEffectMount = require('./types/game/data/items/effects/object-effect-mount');
var ObjectEffectString = require('./types/game/data/items/effects/object-effect-string');
var ProtectedEntityWaitingForHelpInfo = require('./types/game/fight/protected-entity-waiting-for-help-info');
var AbstractContactInformations = require('./types/game/friend/abstract-contact-informations');
var FriendInformations = require('./types/game/friend/friend-informations');
var FriendOnlineInformations = require('./types/game/friend/friend-online-informations');
var FriendSpouseInformations = require('./types/game/friend/friend-spouse-informations');
var FriendSpouseOnlineInformations = require('./types/game/friend/friend-spouse-online-informations');
var IgnoredInformations = require('./types/game/friend/ignored-informations');
var IgnoredOnlineInformations = require('./types/game/friend/ignored-online-informations');
var GuildEmblem = require('./types/game/guild/guild-emblem');
var GuildMember = require('./types/game/guild/guild-member');
var AdditionalTaxCollectorInformations = require('./types/game/guild/tax/additional-tax-collector-informations');
var TaxCollectorBasicInformations = require('./types/game/guild/tax/tax-collector-basic-informations');
var TaxCollectorComplementaryInformations = require('./types/game/guild/tax/tax-collector-complementary-informations');
var TaxCollectorFightersInformation = require('./types/game/guild/tax/tax-collector-fighters-information');
var TaxCollectorGuildInformations = require('./types/game/guild/tax/tax-collector-guild-informations');
var TaxCollectorInformations = require('./types/game/guild/tax/tax-collector-informations');
var TaxCollectorLootInformations = require('./types/game/guild/tax/tax-collector-loot-informations');
var TaxCollectorWaitingForHelpInformations = require('./types/game/guild/tax/tax-collector-waiting-for-help-informations');
var AccountHouseInformations = require('./types/game/house/account-house-informations');
var HouseInformations = require('./types/game/house/house-informations');
var HouseInformationsExtended = require('./types/game/house/house-informations-extended');
var HouseInformationsForGuild = require('./types/game/house/house-informations-for-guild');
var HouseInformationsForSell = require('./types/game/house/house-informations-for-sell');
var HouseInformationsInside = require('./types/game/house/house-informations-inside');
var Idol = require('./types/game/idol/idol');
var PartyIdol = require('./types/game/idol/party-idol');
var InteractiveElement = require('./types/game/interactive/interactive-element');
var InteractiveElementNamedSkill = require('./types/game/interactive/interactive-element-named-skill');
var InteractiveElementSkill = require('./types/game/interactive/interactive-element-skill');
var InteractiveElementWithAgeBonus = require('./types/game/interactive/interactive-element-with-age-bonus');
var MapObstacle = require('./types/game/interactive/map-obstacle');
var StatedElement = require('./types/game/interactive/stated-element');
var SkillActionDescription = require('./types/game/interactive/skill/skill-action-description');
var SkillActionDescriptionCollect = require('./types/game/interactive/skill/skill-action-description-collect');
var SkillActionDescriptionCraft = require('./types/game/interactive/skill/skill-action-description-craft');
var SkillActionDescriptionTimed = require('./types/game/interactive/skill/skill-action-description-timed');
var IdolsPreset = require('./types/game/inventory/preset/idols-preset');
var Preset = require('./types/game/inventory/preset/preset');
var PresetItem = require('./types/game/inventory/preset/preset-item');
var EntityLook = require('./types/game/look/entity-look');
var IndexedEntityLook = require('./types/game/look/indexed-entity-look');
var SubEntity = require('./types/game/look/sub-entity');
var ItemDurability = require('./types/game/mount/item-durability');
var MountClientData = require('./types/game/mount/mount-client-data');
var UpdateMountBoost = require('./types/game/mount/update-mount-boost');
var UpdateMountIntBoost = require('./types/game/mount/update-mount-int-boost');
var MountInformationsForPaddock = require('./types/game/paddock/mount-informations-for-paddock');
var PaddockAbandonnedInformations = require('./types/game/paddock/paddock-abandonned-informations');
var PaddockBuyableInformations = require('./types/game/paddock/paddock-buyable-informations');
var PaddockContentInformations = require('./types/game/paddock/paddock-content-informations');
var PaddockInformations = require('./types/game/paddock/paddock-informations');
var PaddockInformationsForSell = require('./types/game/paddock/paddock-informations-for-sell');
var PaddockItem = require('./types/game/paddock/paddock-item');
var PaddockPrivateInformations = require('./types/game/paddock/paddock-private-informations');
var AllianceInsiderPrismInformation = require('./types/game/prism/alliance-insider-prism-information');
var AlliancePrismInformation = require('./types/game/prism/alliance-prism-information');
var PrismFightersInformation = require('./types/game/prism/prism-fighters-information');
var PrismGeolocalizedInformation = require('./types/game/prism/prism-geolocalized-information');
var PrismInformation = require('./types/game/prism/prism-information');
var PrismSubareaEmptyInfo = require('./types/game/prism/prism-subarea-empty-info');
var Shortcut = require('./types/game/shortcut/shortcut');
var ShortcutEmote = require('./types/game/shortcut/shortcut-emote');
var ShortcutObject = require('./types/game/shortcut/shortcut-object');
var ShortcutObjectIdolsPreset = require('./types/game/shortcut/shortcut-object-idols-preset');
var ShortcutObjectItem = require('./types/game/shortcut/shortcut-object-item');
var ShortcutObjectPreset = require('./types/game/shortcut/shortcut-object-preset');
var ShortcutSmiley = require('./types/game/shortcut/shortcut-smiley');
var ShortcutSpell = require('./types/game/shortcut/shortcut-spell');
var AbstractSocialGroupInfos = require('./types/game/social/abstract-social-group-infos');
var AllianceFactSheetInformations = require('./types/game/social/alliance-fact-sheet-informations');
var AllianceVersatileInformations = require('./types/game/social/alliance-versatile-informations');
var AlliancedGuildFactSheetInformations = require('./types/game/social/allianced-guild-fact-sheet-informations');
var GuildFactSheetInformations = require('./types/game/social/guild-fact-sheet-informations');
var GuildInAllianceVersatileInformations = require('./types/game/social/guild-in-alliance-versatile-informations');
var GuildInsiderFactSheetInformations = require('./types/game/social/guild-insider-fact-sheet-informations');
var GuildVersatileInformations = require('./types/game/social/guild-versatile-informations');
var StartupActionAddObject = require('./types/game/startup/startup-action-add-object');
var TrustCertificate = require('./types/secure/trust-certificate');
var ContentPart = require('./types/updater/content-part');
var Version = require('./types/version/version');
var VersionExtended = require('./types/version/version-extended');
var KrosmasterFigure = require('./types/web/krosmaster/krosmaster-figure');
var ProtocolTypeManager = (function () {
    function ProtocolTypeManager() {
        ProtocolTypeManager._list = {};
        ProtocolTypeManager._list[StatisticData.ID] = function () { return new StatisticData(); };
        ProtocolTypeManager._list[StatisticDataBoolean.ID] = function () { return new StatisticDataBoolean(); };
        ProtocolTypeManager._list[StatisticDataByte.ID] = function () { return new StatisticDataByte(); };
        ProtocolTypeManager._list[StatisticDataInt.ID] = function () { return new StatisticDataInt(); };
        ProtocolTypeManager._list[StatisticDataShort.ID] = function () { return new StatisticDataShort(); };
        ProtocolTypeManager._list[StatisticDataString.ID] = function () { return new StatisticDataString(); };
        ProtocolTypeManager._list[GameServerInformations.ID] = function () { return new GameServerInformations(); };
        ProtocolTypeManager._list[Achievement.ID] = function () { return new Achievement(); };
        ProtocolTypeManager._list[AchievementObjective.ID] = function () { return new AchievementObjective(); };
        ProtocolTypeManager._list[AchievementRewardable.ID] = function () { return new AchievementRewardable(); };
        ProtocolTypeManager._list[AchievementStartedObjective.ID] = function () { return new AchievementStartedObjective(); };
        ProtocolTypeManager._list[FightDispellableEffectExtendedInformations.ID] = function () { return new FightDispellableEffectExtendedInformations(); };
        ProtocolTypeManager._list[AbstractFightDispellableEffect.ID] = function () { return new AbstractFightDispellableEffect(); };
        ProtocolTypeManager._list[FightTemporaryBoostEffect.ID] = function () { return new FightTemporaryBoostEffect(); };
        ProtocolTypeManager._list[FightTemporaryBoostStateEffect.ID] = function () { return new FightTemporaryBoostStateEffect(); };
        ProtocolTypeManager._list[FightTemporaryBoostWeaponDamagesEffect.ID] = function () { return new FightTemporaryBoostWeaponDamagesEffect(); };
        ProtocolTypeManager._list[FightTemporarySpellBoostEffect.ID] = function () { return new FightTemporarySpellBoostEffect(); };
        ProtocolTypeManager._list[FightTemporarySpellImmunityEffect.ID] = function () { return new FightTemporarySpellImmunityEffect(); };
        ProtocolTypeManager._list[FightTriggeredEffect.ID] = function () { return new FightTriggeredEffect(); };
        ProtocolTypeManager._list[GameActionMark.ID] = function () { return new GameActionMark(); };
        ProtocolTypeManager._list[GameActionMarkedCell.ID] = function () { return new GameActionMarkedCell(); };
        ProtocolTypeManager._list[ServerSessionConstant.ID] = function () { return new ServerSessionConstant(); };
        ProtocolTypeManager._list[ServerSessionConstantInteger.ID] = function () { return new ServerSessionConstantInteger(); };
        ProtocolTypeManager._list[ServerSessionConstantLong.ID] = function () { return new ServerSessionConstantLong(); };
        ProtocolTypeManager._list[ServerSessionConstantString.ID] = function () { return new ServerSessionConstantString(); };
        ProtocolTypeManager._list[AbstractCharacterInformation.ID] = function () { return new AbstractCharacterInformation(); };
        ProtocolTypeManager._list[CharacterMinimalAllianceInformations.ID] = function () { return new CharacterMinimalAllianceInformations(); };
        ProtocolTypeManager._list[CharacterMinimalGuildInformations.ID] = function () { return new CharacterMinimalGuildInformations(); };
        ProtocolTypeManager._list[CharacterMinimalInformations.ID] = function () { return new CharacterMinimalInformations(); };
        ProtocolTypeManager._list[CharacterMinimalPlusLookAndGradeInformations.ID] = function () { return new CharacterMinimalPlusLookAndGradeInformations(); };
        ProtocolTypeManager._list[CharacterMinimalPlusLookInformations.ID] = function () { return new CharacterMinimalPlusLookInformations(); };
        ProtocolTypeManager._list[ActorAlignmentInformations.ID] = function () { return new ActorAlignmentInformations(); };
        ProtocolTypeManager._list[ActorExtendedAlignmentInformations.ID] = function () { return new ActorExtendedAlignmentInformations(); };
        ProtocolTypeManager._list[CharacterBaseCharacteristic.ID] = function () { return new CharacterBaseCharacteristic(); };
        ProtocolTypeManager._list[CharacterCharacteristicsInformations.ID] = function () { return new CharacterCharacteristicsInformations(); };
        ProtocolTypeManager._list[CharacterSpellModification.ID] = function () { return new CharacterSpellModification(); };
        ProtocolTypeManager._list[AbstractCharacterToRefurbishInformation.ID] = function () { return new AbstractCharacterToRefurbishInformation(); };
        ProtocolTypeManager._list[CharacterBaseInformations.ID] = function () { return new CharacterBaseInformations(); };
        ProtocolTypeManager._list[CharacterHardcoreOrEpicInformations.ID] = function () { return new CharacterHardcoreOrEpicInformations(); };
        ProtocolTypeManager._list[CharacterRemodelingInformation.ID] = function () { return new CharacterRemodelingInformation(); };
        ProtocolTypeManager._list[CharacterToRecolorInformation.ID] = function () { return new CharacterToRecolorInformation(); };
        ProtocolTypeManager._list[CharacterToRelookInformation.ID] = function () { return new CharacterToRelookInformation(); };
        ProtocolTypeManager._list[CharacterToRemodelInformations.ID] = function () { return new CharacterToRemodelInformations(); };
        ProtocolTypeManager._list[RemodelingInformation.ID] = function () { return new RemodelingInformation(); };
        ProtocolTypeManager._list[ActorRestrictionsInformations.ID] = function () { return new ActorRestrictionsInformations(); };
        ProtocolTypeManager._list[PlayerStatus.ID] = function () { return new PlayerStatus(); };
        ProtocolTypeManager._list[PlayerStatusExtended.ID] = function () { return new PlayerStatusExtended(); };
        ProtocolTypeManager._list[ActorOrientation.ID] = function () { return new ActorOrientation(); };
        ProtocolTypeManager._list[EntityDispositionInformations.ID] = function () { return new EntityDispositionInformations(); };
        ProtocolTypeManager._list[EntityMovementInformations.ID] = function () { return new EntityMovementInformations(); };
        ProtocolTypeManager._list[FightEntityDispositionInformations.ID] = function () { return new FightEntityDispositionInformations(); };
        ProtocolTypeManager._list[GameContextActorInformations.ID] = function () { return new GameContextActorInformations(); };
        ProtocolTypeManager._list[GameRolePlayTaxCollectorInformations.ID] = function () { return new GameRolePlayTaxCollectorInformations(); };
        ProtocolTypeManager._list[IdentifiedEntityDispositionInformations.ID] = function () { return new IdentifiedEntityDispositionInformations(); };
        ProtocolTypeManager._list[MapCoordinates.ID] = function () { return new MapCoordinates(); };
        ProtocolTypeManager._list[MapCoordinatesAndId.ID] = function () { return new MapCoordinatesAndId(); };
        ProtocolTypeManager._list[MapCoordinatesExtended.ID] = function () { return new MapCoordinatesExtended(); };
        ProtocolTypeManager._list[TaxCollectorStaticExtendedInformations.ID] = function () { return new TaxCollectorStaticExtendedInformations(); };
        ProtocolTypeManager._list[TaxCollectorStaticInformations.ID] = function () { return new TaxCollectorStaticInformations(); };
        ProtocolTypeManager._list[AbstractFightTeamInformations.ID] = function () { return new AbstractFightTeamInformations(); };
        ProtocolTypeManager._list[FightAllianceTeamInformations.ID] = function () { return new FightAllianceTeamInformations(); };
        ProtocolTypeManager._list[FightCommonInformations.ID] = function () { return new FightCommonInformations(); };
        ProtocolTypeManager._list[FightExternalInformations.ID] = function () { return new FightExternalInformations(); };
        ProtocolTypeManager._list[FightLoot.ID] = function () { return new FightLoot(); };
        ProtocolTypeManager._list[FightOptionsInformations.ID] = function () { return new FightOptionsInformations(); };
        ProtocolTypeManager._list[FightResultAdditionalData.ID] = function () { return new FightResultAdditionalData(); };
        ProtocolTypeManager._list[FightResultExperienceData.ID] = function () { return new FightResultExperienceData(); };
        ProtocolTypeManager._list[FightResultFighterListEntry.ID] = function () { return new FightResultFighterListEntry(); };
        ProtocolTypeManager._list[FightResultListEntry.ID] = function () { return new FightResultListEntry(); };
        ProtocolTypeManager._list[FightResultMutantListEntry.ID] = function () { return new FightResultMutantListEntry(); };
        ProtocolTypeManager._list[FightResultPlayerListEntry.ID] = function () { return new FightResultPlayerListEntry(); };
        ProtocolTypeManager._list[FightResultPvpData.ID] = function () { return new FightResultPvpData(); };
        ProtocolTypeManager._list[FightResultTaxCollectorListEntry.ID] = function () { return new FightResultTaxCollectorListEntry(); };
        ProtocolTypeManager._list[FightTeamInformations.ID] = function () { return new FightTeamInformations(); };
        ProtocolTypeManager._list[FightTeamLightInformations.ID] = function () { return new FightTeamLightInformations(); };
        ProtocolTypeManager._list[FightTeamMemberCharacterInformations.ID] = function () { return new FightTeamMemberCharacterInformations(); };
        ProtocolTypeManager._list[FightTeamMemberCompanionInformations.ID] = function () { return new FightTeamMemberCompanionInformations(); };
        ProtocolTypeManager._list[FightTeamMemberInformations.ID] = function () { return new FightTeamMemberInformations(); };
        ProtocolTypeManager._list[FightTeamMemberMonsterInformations.ID] = function () { return new FightTeamMemberMonsterInformations(); };
        ProtocolTypeManager._list[FightTeamMemberTaxCollectorInformations.ID] = function () { return new FightTeamMemberTaxCollectorInformations(); };
        ProtocolTypeManager._list[FightTeamMemberWithAllianceCharacterInformations.ID] = function () { return new FightTeamMemberWithAllianceCharacterInformations(); };
        ProtocolTypeManager._list[GameFightAIInformations.ID] = function () { return new GameFightAIInformations(); };
        ProtocolTypeManager._list[GameFightCharacterInformations.ID] = function () { return new GameFightCharacterInformations(); };
        ProtocolTypeManager._list[GameFightCompanionInformations.ID] = function () { return new GameFightCompanionInformations(); };
        ProtocolTypeManager._list[GameFightFighterCompanionLightInformations.ID] = function () { return new GameFightFighterCompanionLightInformations(); };
        ProtocolTypeManager._list[GameFightFighterInformations.ID] = function () { return new GameFightFighterInformations(); };
        ProtocolTypeManager._list[GameFightFighterLightInformations.ID] = function () { return new GameFightFighterLightInformations(); };
        ProtocolTypeManager._list[GameFightFighterMonsterLightInformations.ID] = function () { return new GameFightFighterMonsterLightInformations(); };
        ProtocolTypeManager._list[GameFightFighterNamedInformations.ID] = function () { return new GameFightFighterNamedInformations(); };
        ProtocolTypeManager._list[GameFightFighterNamedLightInformations.ID] = function () { return new GameFightFighterNamedLightInformations(); };
        ProtocolTypeManager._list[GameFightFighterTaxCollectorLightInformations.ID] = function () { return new GameFightFighterTaxCollectorLightInformations(); };
        ProtocolTypeManager._list[GameFightMinimalStats.ID] = function () { return new GameFightMinimalStats(); };
        ProtocolTypeManager._list[GameFightMinimalStatsPreparation.ID] = function () { return new GameFightMinimalStatsPreparation(); };
        ProtocolTypeManager._list[GameFightMonsterInformations.ID] = function () { return new GameFightMonsterInformations(); };
        ProtocolTypeManager._list[GameFightMonsterWithAlignmentInformations.ID] = function () { return new GameFightMonsterWithAlignmentInformations(); };
        ProtocolTypeManager._list[GameFightMutantInformations.ID] = function () { return new GameFightMutantInformations(); };
        ProtocolTypeManager._list[GameFightResumeSlaveInfo.ID] = function () { return new GameFightResumeSlaveInfo(); };
        ProtocolTypeManager._list[GameFightSpellCooldown.ID] = function () { return new GameFightSpellCooldown(); };
        ProtocolTypeManager._list[GameFightTaxCollectorInformations.ID] = function () { return new GameFightTaxCollectorInformations(); };
        ProtocolTypeManager._list[AllianceInformations.ID] = function () { return new AllianceInformations(); };
        ProtocolTypeManager._list[AlternativeMonstersInGroupLightInformations.ID] = function () { return new AlternativeMonstersInGroupLightInformations(); };
        ProtocolTypeManager._list[AtlasPointsInformations.ID] = function () { return new AtlasPointsInformations(); };
        ProtocolTypeManager._list[BasicAllianceInformations.ID] = function () { return new BasicAllianceInformations(); };
        ProtocolTypeManager._list[BasicGuildInformations.ID] = function () { return new BasicGuildInformations(); };
        ProtocolTypeManager._list[BasicNamedAllianceInformations.ID] = function () { return new BasicNamedAllianceInformations(); };
        ProtocolTypeManager._list[GameRolePlayActorInformations.ID] = function () { return new GameRolePlayActorInformations(); };
        ProtocolTypeManager._list[GameRolePlayCharacterInformations.ID] = function () { return new GameRolePlayCharacterInformations(); };
        ProtocolTypeManager._list[GameRolePlayGroupMonsterInformations.ID] = function () { return new GameRolePlayGroupMonsterInformations(); };
        ProtocolTypeManager._list[GameRolePlayGroupMonsterWaveInformations.ID] = function () { return new GameRolePlayGroupMonsterWaveInformations(); };
        ProtocolTypeManager._list[GameRolePlayHumanoidInformations.ID] = function () { return new GameRolePlayHumanoidInformations(); };
        ProtocolTypeManager._list[GameRolePlayMerchantInformations.ID] = function () { return new GameRolePlayMerchantInformations(); };
        ProtocolTypeManager._list[GameRolePlayMountInformations.ID] = function () { return new GameRolePlayMountInformations(); };
        ProtocolTypeManager._list[GameRolePlayMutantInformations.ID] = function () { return new GameRolePlayMutantInformations(); };
        ProtocolTypeManager._list[GameRolePlayNamedActorInformations.ID] = function () { return new GameRolePlayNamedActorInformations(); };
        ProtocolTypeManager._list[GameRolePlayNpcInformations.ID] = function () { return new GameRolePlayNpcInformations(); };
        ProtocolTypeManager._list[GameRolePlayNpcWithQuestInformations.ID] = function () { return new GameRolePlayNpcWithQuestInformations(); };
        ProtocolTypeManager._list[GameRolePlayPortalInformations.ID] = function () { return new GameRolePlayPortalInformations(); };
        ProtocolTypeManager._list[GameRolePlayPrismInformations.ID] = function () { return new GameRolePlayPrismInformations(); };
        ProtocolTypeManager._list[GameRolePlayTreasureHintInformations.ID] = function () { return new GameRolePlayTreasureHintInformations(); };
        ProtocolTypeManager._list[GroupMonsterStaticInformations.ID] = function () { return new GroupMonsterStaticInformations(); };
        ProtocolTypeManager._list[GroupMonsterStaticInformationsWithAlternatives.ID] = function () { return new GroupMonsterStaticInformationsWithAlternatives(); };
        ProtocolTypeManager._list[GuildInAllianceInformations.ID] = function () { return new GuildInAllianceInformations(); };
        ProtocolTypeManager._list[GuildInformations.ID] = function () { return new GuildInformations(); };
        ProtocolTypeManager._list[HumanInformations.ID] = function () { return new HumanInformations(); };
        ProtocolTypeManager._list[HumanOption.ID] = function () { return new HumanOption(); };
        ProtocolTypeManager._list[HumanOptionAlliance.ID] = function () { return new HumanOptionAlliance(); };
        ProtocolTypeManager._list[HumanOptionEmote.ID] = function () { return new HumanOptionEmote(); };
        ProtocolTypeManager._list[HumanOptionFollowers.ID] = function () { return new HumanOptionFollowers(); };
        ProtocolTypeManager._list[HumanOptionGuild.ID] = function () { return new HumanOptionGuild(); };
        ProtocolTypeManager._list[HumanOptionObjectUse.ID] = function () { return new HumanOptionObjectUse(); };
        ProtocolTypeManager._list[HumanOptionOrnament.ID] = function () { return new HumanOptionOrnament(); };
        ProtocolTypeManager._list[HumanOptionTitle.ID] = function () { return new HumanOptionTitle(); };
        ProtocolTypeManager._list[MonsterInGroupInformations.ID] = function () { return new MonsterInGroupInformations(); };
        ProtocolTypeManager._list[MonsterInGroupLightInformations.ID] = function () { return new MonsterInGroupLightInformations(); };
        ProtocolTypeManager._list[ObjectItemInRolePlay.ID] = function () { return new ObjectItemInRolePlay(); };
        ProtocolTypeManager._list[DecraftedItemStackInfo.ID] = function () { return new DecraftedItemStackInfo(); };
        ProtocolTypeManager._list[JobCrafterDirectoryEntryJobInfo.ID] = function () { return new JobCrafterDirectoryEntryJobInfo(); };
        ProtocolTypeManager._list[JobCrafterDirectoryEntryPlayerInfo.ID] = function () { return new JobCrafterDirectoryEntryPlayerInfo(); };
        ProtocolTypeManager._list[JobCrafterDirectoryListEntry.ID] = function () { return new JobCrafterDirectoryListEntry(); };
        ProtocolTypeManager._list[JobCrafterDirectorySettings.ID] = function () { return new JobCrafterDirectorySettings(); };
        ProtocolTypeManager._list[JobDescription.ID] = function () { return new JobDescription(); };
        ProtocolTypeManager._list[JobExperience.ID] = function () { return new JobExperience(); };
        ProtocolTypeManager._list[DungeonPartyFinderPlayer.ID] = function () { return new DungeonPartyFinderPlayer(); };
        ProtocolTypeManager._list[NamedPartyTeam.ID] = function () { return new NamedPartyTeam(); };
        ProtocolTypeManager._list[NamedPartyTeamWithOutcome.ID] = function () { return new NamedPartyTeamWithOutcome(); };
        ProtocolTypeManager._list[PartyGuestInformations.ID] = function () { return new PartyGuestInformations(); };
        ProtocolTypeManager._list[PartyInvitationMemberInformations.ID] = function () { return new PartyInvitationMemberInformations(); };
        ProtocolTypeManager._list[PartyMemberArenaInformations.ID] = function () { return new PartyMemberArenaInformations(); };
        ProtocolTypeManager._list[PartyMemberGeoPosition.ID] = function () { return new PartyMemberGeoPosition(); };
        ProtocolTypeManager._list[PartyMemberInformations.ID] = function () { return new PartyMemberInformations(); };
        ProtocolTypeManager._list[PartyCompanionBaseInformations.ID] = function () { return new PartyCompanionBaseInformations(); };
        ProtocolTypeManager._list[PartyCompanionMemberInformations.ID] = function () { return new PartyCompanionMemberInformations(); };
        ProtocolTypeManager._list[GameRolePlayNpcQuestFlag.ID] = function () { return new GameRolePlayNpcQuestFlag(); };
        ProtocolTypeManager._list[QuestActiveDetailedInformations.ID] = function () { return new QuestActiveDetailedInformations(); };
        ProtocolTypeManager._list[QuestActiveInformations.ID] = function () { return new QuestActiveInformations(); };
        ProtocolTypeManager._list[QuestObjectiveInformations.ID] = function () { return new QuestObjectiveInformations(); };
        ProtocolTypeManager._list[QuestObjectiveInformationsWithCompletion.ID] = function () { return new QuestObjectiveInformationsWithCompletion(); };
        ProtocolTypeManager._list[PortalInformation.ID] = function () { return new PortalInformation(); };
        ProtocolTypeManager._list[TreasureHuntFlag.ID] = function () { return new TreasureHuntFlag(); };
        ProtocolTypeManager._list[TreasureHuntStep.ID] = function () { return new TreasureHuntStep(); };
        ProtocolTypeManager._list[TreasureHuntStepDig.ID] = function () { return new TreasureHuntStepDig(); };
        ProtocolTypeManager._list[TreasureHuntStepFight.ID] = function () { return new TreasureHuntStepFight(); };
        ProtocolTypeManager._list[TreasureHuntStepFollowDirection.ID] = function () { return new TreasureHuntStepFollowDirection(); };
        ProtocolTypeManager._list[TreasureHuntStepFollowDirectionToHint.ID] = function () { return new TreasureHuntStepFollowDirectionToHint(); };
        ProtocolTypeManager._list[TreasureHuntStepFollowDirectionToPOI.ID] = function () { return new TreasureHuntStepFollowDirectionToPOI(); };
        ProtocolTypeManager._list[BidExchangerObjectInfo.ID] = function () { return new BidExchangerObjectInfo(); };
        ProtocolTypeManager._list[GoldItem.ID] = function () { return new GoldItem(); };
        ProtocolTypeManager._list[Item.ID] = function () { return new Item(); };
        ProtocolTypeManager._list[ObjectItem.ID] = function () { return new ObjectItem(); };
        ProtocolTypeManager._list[ObjectItemGenericQuantity.ID] = function () { return new ObjectItemGenericQuantity(); };
        ProtocolTypeManager._list[ObjectItemInformationWithQuantity.ID] = function () { return new ObjectItemInformationWithQuantity(); };
        ProtocolTypeManager._list[ObjectItemMinimalInformation.ID] = function () { return new ObjectItemMinimalInformation(); };
        ProtocolTypeManager._list[ObjectItemNotInContainer.ID] = function () { return new ObjectItemNotInContainer(); };
        ProtocolTypeManager._list[ObjectItemQuantity.ID] = function () { return new ObjectItemQuantity(); };
        ProtocolTypeManager._list[ObjectItemToSell.ID] = function () { return new ObjectItemToSell(); };
        ProtocolTypeManager._list[ObjectItemToSellInBid.ID] = function () { return new ObjectItemToSellInBid(); };
        ProtocolTypeManager._list[ObjectItemToSellInHumanVendorShop.ID] = function () { return new ObjectItemToSellInHumanVendorShop(); };
        ProtocolTypeManager._list[ObjectItemToSellInNpcShop.ID] = function () { return new ObjectItemToSellInNpcShop(); };
        ProtocolTypeManager._list[SellerBuyerDescriptor.ID] = function () { return new SellerBuyerDescriptor(); };
        ProtocolTypeManager._list[SpellItem.ID] = function () { return new SpellItem(); };
        ProtocolTypeManager._list[ObjectEffect.ID] = function () { return new ObjectEffect(); };
        ProtocolTypeManager._list[ObjectEffectCreature.ID] = function () { return new ObjectEffectCreature(); };
        ProtocolTypeManager._list[ObjectEffectDate.ID] = function () { return new ObjectEffectDate(); };
        ProtocolTypeManager._list[ObjectEffectDice.ID] = function () { return new ObjectEffectDice(); };
        ProtocolTypeManager._list[ObjectEffectDuration.ID] = function () { return new ObjectEffectDuration(); };
        ProtocolTypeManager._list[ObjectEffectInteger.ID] = function () { return new ObjectEffectInteger(); };
        ProtocolTypeManager._list[ObjectEffectLadder.ID] = function () { return new ObjectEffectLadder(); };
        ProtocolTypeManager._list[ObjectEffectMinMax.ID] = function () { return new ObjectEffectMinMax(); };
        ProtocolTypeManager._list[ObjectEffectMount.ID] = function () { return new ObjectEffectMount(); };
        ProtocolTypeManager._list[ObjectEffectString.ID] = function () { return new ObjectEffectString(); };
        ProtocolTypeManager._list[ProtectedEntityWaitingForHelpInfo.ID] = function () { return new ProtectedEntityWaitingForHelpInfo(); };
        ProtocolTypeManager._list[AbstractContactInformations.ID] = function () { return new AbstractContactInformations(); };
        ProtocolTypeManager._list[FriendInformations.ID] = function () { return new FriendInformations(); };
        ProtocolTypeManager._list[FriendOnlineInformations.ID] = function () { return new FriendOnlineInformations(); };
        ProtocolTypeManager._list[FriendSpouseInformations.ID] = function () { return new FriendSpouseInformations(); };
        ProtocolTypeManager._list[FriendSpouseOnlineInformations.ID] = function () { return new FriendSpouseOnlineInformations(); };
        ProtocolTypeManager._list[IgnoredInformations.ID] = function () { return new IgnoredInformations(); };
        ProtocolTypeManager._list[IgnoredOnlineInformations.ID] = function () { return new IgnoredOnlineInformations(); };
        ProtocolTypeManager._list[GuildEmblem.ID] = function () { return new GuildEmblem(); };
        ProtocolTypeManager._list[GuildMember.ID] = function () { return new GuildMember(); };
        ProtocolTypeManager._list[AdditionalTaxCollectorInformations.ID] = function () { return new AdditionalTaxCollectorInformations(); };
        ProtocolTypeManager._list[TaxCollectorBasicInformations.ID] = function () { return new TaxCollectorBasicInformations(); };
        ProtocolTypeManager._list[TaxCollectorComplementaryInformations.ID] = function () { return new TaxCollectorComplementaryInformations(); };
        ProtocolTypeManager._list[TaxCollectorFightersInformation.ID] = function () { return new TaxCollectorFightersInformation(); };
        ProtocolTypeManager._list[TaxCollectorGuildInformations.ID] = function () { return new TaxCollectorGuildInformations(); };
        ProtocolTypeManager._list[TaxCollectorInformations.ID] = function () { return new TaxCollectorInformations(); };
        ProtocolTypeManager._list[TaxCollectorLootInformations.ID] = function () { return new TaxCollectorLootInformations(); };
        ProtocolTypeManager._list[TaxCollectorWaitingForHelpInformations.ID] = function () { return new TaxCollectorWaitingForHelpInformations(); };
        ProtocolTypeManager._list[AccountHouseInformations.ID] = function () { return new AccountHouseInformations(); };
        ProtocolTypeManager._list[HouseInformations.ID] = function () { return new HouseInformations(); };
        ProtocolTypeManager._list[HouseInformationsExtended.ID] = function () { return new HouseInformationsExtended(); };
        ProtocolTypeManager._list[HouseInformationsForGuild.ID] = function () { return new HouseInformationsForGuild(); };
        ProtocolTypeManager._list[HouseInformationsForSell.ID] = function () { return new HouseInformationsForSell(); };
        ProtocolTypeManager._list[HouseInformationsInside.ID] = function () { return new HouseInformationsInside(); };
        ProtocolTypeManager._list[Idol.ID] = function () { return new Idol(); };
        ProtocolTypeManager._list[PartyIdol.ID] = function () { return new PartyIdol(); };
        ProtocolTypeManager._list[InteractiveElement.ID] = function () { return new InteractiveElement(); };
        ProtocolTypeManager._list[InteractiveElementNamedSkill.ID] = function () { return new InteractiveElementNamedSkill(); };
        ProtocolTypeManager._list[InteractiveElementSkill.ID] = function () { return new InteractiveElementSkill(); };
        ProtocolTypeManager._list[InteractiveElementWithAgeBonus.ID] = function () { return new InteractiveElementWithAgeBonus(); };
        ProtocolTypeManager._list[MapObstacle.ID] = function () { return new MapObstacle(); };
        ProtocolTypeManager._list[StatedElement.ID] = function () { return new StatedElement(); };
        ProtocolTypeManager._list[SkillActionDescription.ID] = function () { return new SkillActionDescription(); };
        ProtocolTypeManager._list[SkillActionDescriptionCollect.ID] = function () { return new SkillActionDescriptionCollect(); };
        ProtocolTypeManager._list[SkillActionDescriptionCraft.ID] = function () { return new SkillActionDescriptionCraft(); };
        ProtocolTypeManager._list[SkillActionDescriptionTimed.ID] = function () { return new SkillActionDescriptionTimed(); };
        ProtocolTypeManager._list[IdolsPreset.ID] = function () { return new IdolsPreset(); };
        ProtocolTypeManager._list[Preset.ID] = function () { return new Preset(); };
        ProtocolTypeManager._list[PresetItem.ID] = function () { return new PresetItem(); };
        ProtocolTypeManager._list[EntityLook.ID] = function () { return new EntityLook(); };
        ProtocolTypeManager._list[IndexedEntityLook.ID] = function () { return new IndexedEntityLook(); };
        ProtocolTypeManager._list[SubEntity.ID] = function () { return new SubEntity(); };
        ProtocolTypeManager._list[ItemDurability.ID] = function () { return new ItemDurability(); };
        ProtocolTypeManager._list[MountClientData.ID] = function () { return new MountClientData(); };
        ProtocolTypeManager._list[UpdateMountBoost.ID] = function () { return new UpdateMountBoost(); };
        ProtocolTypeManager._list[UpdateMountIntBoost.ID] = function () { return new UpdateMountIntBoost(); };
        ProtocolTypeManager._list[MountInformationsForPaddock.ID] = function () { return new MountInformationsForPaddock(); };
        ProtocolTypeManager._list[PaddockAbandonnedInformations.ID] = function () { return new PaddockAbandonnedInformations(); };
        ProtocolTypeManager._list[PaddockBuyableInformations.ID] = function () { return new PaddockBuyableInformations(); };
        ProtocolTypeManager._list[PaddockContentInformations.ID] = function () { return new PaddockContentInformations(); };
        ProtocolTypeManager._list[PaddockInformations.ID] = function () { return new PaddockInformations(); };
        ProtocolTypeManager._list[PaddockInformationsForSell.ID] = function () { return new PaddockInformationsForSell(); };
        ProtocolTypeManager._list[PaddockItem.ID] = function () { return new PaddockItem(); };
        ProtocolTypeManager._list[PaddockPrivateInformations.ID] = function () { return new PaddockPrivateInformations(); };
        ProtocolTypeManager._list[AllianceInsiderPrismInformation.ID] = function () { return new AllianceInsiderPrismInformation(); };
        ProtocolTypeManager._list[AlliancePrismInformation.ID] = function () { return new AlliancePrismInformation(); };
        ProtocolTypeManager._list[PrismFightersInformation.ID] = function () { return new PrismFightersInformation(); };
        ProtocolTypeManager._list[PrismGeolocalizedInformation.ID] = function () { return new PrismGeolocalizedInformation(); };
        ProtocolTypeManager._list[PrismInformation.ID] = function () { return new PrismInformation(); };
        ProtocolTypeManager._list[PrismSubareaEmptyInfo.ID] = function () { return new PrismSubareaEmptyInfo(); };
        ProtocolTypeManager._list[Shortcut.ID] = function () { return new Shortcut(); };
        ProtocolTypeManager._list[ShortcutEmote.ID] = function () { return new ShortcutEmote(); };
        ProtocolTypeManager._list[ShortcutObject.ID] = function () { return new ShortcutObject(); };
        ProtocolTypeManager._list[ShortcutObjectIdolsPreset.ID] = function () { return new ShortcutObjectIdolsPreset(); };
        ProtocolTypeManager._list[ShortcutObjectItem.ID] = function () { return new ShortcutObjectItem(); };
        ProtocolTypeManager._list[ShortcutObjectPreset.ID] = function () { return new ShortcutObjectPreset(); };
        ProtocolTypeManager._list[ShortcutSmiley.ID] = function () { return new ShortcutSmiley(); };
        ProtocolTypeManager._list[ShortcutSpell.ID] = function () { return new ShortcutSpell(); };
        ProtocolTypeManager._list[AbstractSocialGroupInfos.ID] = function () { return new AbstractSocialGroupInfos(); };
        ProtocolTypeManager._list[AllianceFactSheetInformations.ID] = function () { return new AllianceFactSheetInformations(); };
        ProtocolTypeManager._list[AllianceVersatileInformations.ID] = function () { return new AllianceVersatileInformations(); };
        ProtocolTypeManager._list[AlliancedGuildFactSheetInformations.ID] = function () { return new AlliancedGuildFactSheetInformations(); };
        ProtocolTypeManager._list[GuildFactSheetInformations.ID] = function () { return new GuildFactSheetInformations(); };
        ProtocolTypeManager._list[GuildInAllianceVersatileInformations.ID] = function () { return new GuildInAllianceVersatileInformations(); };
        ProtocolTypeManager._list[GuildInsiderFactSheetInformations.ID] = function () { return new GuildInsiderFactSheetInformations(); };
        ProtocolTypeManager._list[GuildVersatileInformations.ID] = function () { return new GuildVersatileInformations(); };
        ProtocolTypeManager._list[StartupActionAddObject.ID] = function () { return new StartupActionAddObject(); };
        ProtocolTypeManager._list[TrustCertificate.ID] = function () { return new TrustCertificate(); };
        ProtocolTypeManager._list[ContentPart.ID] = function () { return new ContentPart(); };
        ProtocolTypeManager._list[Version.ID] = function () { return new Version(); };
        ProtocolTypeManager._list[VersionExtended.ID] = function () { return new VersionExtended(); };
        ProtocolTypeManager._list[KrosmasterFigure.ID] = function () { return new KrosmasterFigure(); };
    }
    ProtocolTypeManager.getInstance = function (networkType, param2) {
        var _loc3_ = ProtocolTypeManager._list[param2];
        if (!_loc3_) {
            throw new Error('Type with id ' + param2 + ' is unknown.');
        }
        return _loc3_();
    };
    return ProtocolTypeManager;
})();
module.exports = ProtocolTypeManager;
