/// <reference path="../../../../../../node_modules/ts-bytearray/ts-bytearray.d.ts" />
import INetworkType = require('../../../../network-type');
import { ICustomDataOutput, ICustomDataInput } from '../../../../custom-data-wrapper';
import CharacterBaseCharacteristic = require('./character-base-characteristic');
import CharacterSpellModification = require('./character-spell-modification');
import ActorExtendedAlignmentInformations = require('../alignment/actor-extended-alignment-informations');
declare class CharacterCharacteristicsInformations implements INetworkType {
    static ID: number;
    experience: number;
    experienceLevelFloor: number;
    experienceNextLevelFloor: number;
    kamas: number;
    statsPoints: number;
    additionnalPoints: number;
    spellsPoints: number;
    alignmentInfos: ActorExtendedAlignmentInformations;
    lifePoints: number;
    maxLifePoints: number;
    energyPoints: number;
    maxEnergyPoints: number;
    actionPointsCurrent: number;
    movementPointsCurrent: number;
    initiative: CharacterBaseCharacteristic;
    prospecting: CharacterBaseCharacteristic;
    actionPoints: CharacterBaseCharacteristic;
    movementPoints: CharacterBaseCharacteristic;
    strength: CharacterBaseCharacteristic;
    vitality: CharacterBaseCharacteristic;
    wisdom: CharacterBaseCharacteristic;
    chance: CharacterBaseCharacteristic;
    agility: CharacterBaseCharacteristic;
    intelligence: CharacterBaseCharacteristic;
    range: CharacterBaseCharacteristic;
    summonableCreaturesBoost: CharacterBaseCharacteristic;
    reflect: CharacterBaseCharacteristic;
    criticalHit: CharacterBaseCharacteristic;
    criticalHitWeapon: number;
    criticalMiss: CharacterBaseCharacteristic;
    healBonus: CharacterBaseCharacteristic;
    allDamagesBonus: CharacterBaseCharacteristic;
    weaponDamagesBonusPercent: CharacterBaseCharacteristic;
    damagesBonusPercent: CharacterBaseCharacteristic;
    trapBonus: CharacterBaseCharacteristic;
    trapBonusPercent: CharacterBaseCharacteristic;
    glyphBonusPercent: CharacterBaseCharacteristic;
    permanentDamagePercent: CharacterBaseCharacteristic;
    tackleBlock: CharacterBaseCharacteristic;
    tackleEvade: CharacterBaseCharacteristic;
    PAAttack: CharacterBaseCharacteristic;
    PMAttack: CharacterBaseCharacteristic;
    pushDamageBonus: CharacterBaseCharacteristic;
    criticalDamageBonus: CharacterBaseCharacteristic;
    neutralDamageBonus: CharacterBaseCharacteristic;
    earthDamageBonus: CharacterBaseCharacteristic;
    waterDamageBonus: CharacterBaseCharacteristic;
    airDamageBonus: CharacterBaseCharacteristic;
    fireDamageBonus: CharacterBaseCharacteristic;
    dodgePALostProbability: CharacterBaseCharacteristic;
    dodgePMLostProbability: CharacterBaseCharacteristic;
    neutralElementResistPercent: CharacterBaseCharacteristic;
    earthElementResistPercent: CharacterBaseCharacteristic;
    waterElementResistPercent: CharacterBaseCharacteristic;
    airElementResistPercent: CharacterBaseCharacteristic;
    fireElementResistPercent: CharacterBaseCharacteristic;
    neutralElementReduction: CharacterBaseCharacteristic;
    earthElementReduction: CharacterBaseCharacteristic;
    waterElementReduction: CharacterBaseCharacteristic;
    airElementReduction: CharacterBaseCharacteristic;
    fireElementReduction: CharacterBaseCharacteristic;
    pushDamageReduction: CharacterBaseCharacteristic;
    criticalDamageReduction: CharacterBaseCharacteristic;
    pvpNeutralElementResistPercent: CharacterBaseCharacteristic;
    pvpEarthElementResistPercent: CharacterBaseCharacteristic;
    pvpWaterElementResistPercent: CharacterBaseCharacteristic;
    pvpAirElementResistPercent: CharacterBaseCharacteristic;
    pvpFireElementResistPercent: CharacterBaseCharacteristic;
    pvpNeutralElementReduction: CharacterBaseCharacteristic;
    pvpEarthElementReduction: CharacterBaseCharacteristic;
    pvpWaterElementReduction: CharacterBaseCharacteristic;
    pvpAirElementReduction: CharacterBaseCharacteristic;
    pvpFireElementReduction: CharacterBaseCharacteristic;
    spellModifications: CharacterSpellModification[];
    probationTime: number;
    constructor();
    getTypeId(): number;
    reset(): void;
    serialize(param1: ICustomDataOutput): void;
    serializeAs_CharacterCharacteristicsInformations(param1: ICustomDataOutput): void;
    deserialize(param1: ICustomDataInput): void;
    deserializeAs_CharacterCharacteristicsInformations(param1: ICustomDataInput): void;
}
export = CharacterCharacteristicsInformations;
