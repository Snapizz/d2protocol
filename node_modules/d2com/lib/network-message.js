var CustomDataWrapper = require('./custom-data-wrapper.js');
var GLOBAL_INSTANCE_ID = 0,
    BIT_RIGHT_SHIFT_LEN_PACKET_ID = 2,
    BIT_MASK = 3;

var NetworkMessage = function () {
  
};

module.exports.class = NetworkMessage;
module.exports.GLOBAL_INSTANCE_ID = GLOBAL_INSTANCE_ID;
module.exports.BIT_RIGHT_SHIFT_LEN_PACKET_ID = BIT_RIGHT_SHIFT_LEN_PACKET_ID;
module.exports.BIT_MASK = BIT_MASK;

NetworkMessage.prototype.writePacket = function (output, id, data) {
  var _local_5 = 0;
  var _local_6 = 0;
  var typeLen = this.computeTypeLen(data.length);
  output.writeShort(this.subComputeStaticHeader(id, typeLen));
  switch (typeLen)
  {
    case 0:
      return;
    case 1:
      output.writeByte(data.length);
      break;
    case 2:
      output.writeShort(data.length);
      break;
    case 3:
      _local_5 = ((data.length >> 16) & 0xFF);
      _local_6 = (data.length & 0xFFFF);
      output.writeByte(_local_5);
      output.writeShort(_local_6);
      break;
  };
  output.writeBytes(data, 0, data.length);
};

NetworkMessage.prototype.computeTypeLen = function (len) {
  if (len > 0xFFFF)
  {
    return (3);
  };
  if (len > 0xFF)
  {
    return (2);
  };
  if (len > 0)
  {
    return (1);
  };
  return (0);
};

NetworkMessage.prototype.subComputeStaticHeader = function (msgId, typeLen) {
  return (((msgId << BIT_RIGHT_SHIFT_LEN_PACKET_ID) | typeLen));
};

NetworkMessage.prototype.toString = function () {
  return this.getClassName().concat(':: @', this.getMessageId());
};

NetworkMessage.prototype.pack = function (output) {
  var data = new Buffer(32);
  this.serialize(new CustomDataWrapper(data));
  this.writePacket(output, this.getMessageId(), data);
};

NetworkMessage.prototype.unpack = function (intput, len) {
  this.deserialize(intput);
};