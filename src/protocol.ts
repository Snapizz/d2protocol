/// <reference path="../typings/ts-bytearray/ts-bytearray.d.ts" />

import ByteArray = require('ts-bytearray');

module Protocol {
    export class Binary64 {
        low: number;
        high: number;

        constructor(low: number = 0, high: number = 0) {
            this.high = high;
            this.low = low;
        }

        div(n: number): number {
            var modHigh = 0;
            modHigh = (this.high % n);
            var mod = (((this.low % n) + (modHigh * 6)) % n);
            this.high = (this.high / n);
            var newLow = (((modHigh * 4294967296) + this.low) / n);
            this.high = (this.high + Number((newLow / 4294967296)));
            this.low = newLow;
            return mod;
        };

        mul(n: number): void {
            var newLow = (Number(this.low) * n);
            this.high = (this.high * n);
            this.high = (this.high + Number((newLow / 4294967296)));
            this.low = (this.low * n);
        };

        add(n: number): void {
            var newLow = (Number(this.low) + n);
            this.high = (this.high + Number((newLow / 4294967296)));
            this.low = newLow;
        };

        bitwiseNot(n: number): void {
            this.low = ~(this.low);
            this.high = ~(this.high);
        };
    }

    export class BooleanByteWrapper {
        static setFlag(param1?: number, param2?: number, param3?: boolean): number {
            switch (param2) {
                case 0:
                    if (param3) {
                        param1 = param1 | 1;
                    } else {
                        param1 = param1 & 255 - 1;
                    }
                    break;
                case 1:
                    if (param3) {
                        param1 = param1 | 2;
                    } else {
                        param1 = param1 & 255 - 2;
                    }
                    break;
                case 2:
                    if (param3) {
                        param1 = param1 | 4;
                    } else {
                        param1 = param1 & 255 - 4;
                    }
                    break;
                case 3:
                    if (param3) {
                        param1 = param1 | 8;
                    } else {
                        param1 = param1 & 255 - 8;
                    }
                    break;
                case 4:
                    if (param3) {
                        param1 = param1 | 16;
                    } else {
                        param1 = param1 & 255 - 16;
                    }
                    break;
                case 5:
                    if (param3) {
                        param1 = param1 | 32;
                    } else {
                        param1 = param1 & 255 - 32;
                    }
                    break;
                case 6:
                    if (param3) {
                        param1 = param1 | 64;
                    } else {
                        param1 = param1 & 255 - 64;
                    }
                    break;
                case 7:
                    if (param3) {
                        param1 = param1 | 128;
                    } else {
                        param1 = param1 & 255 - 128;
                    }
                    break;
                default:
                    throw new Error('Bytebox overflow.');
            }
            return param1;
        }

        static getFlag(param1: number, param2: number): boolean {
            switch (param2) {
                case 0:
                    return !((param1 & 1) === 0);
                case 1:
                    return !((param1 & 2) === 0);
                case 2:
                    return !((param1 & 4) === 0);
                case 3:
                    return !((param1 & 8) === 0);
                case 4:
                    return !((param1 & 16) === 0);
                case 5:
                    return !((param1 & 32) === 0);
                case 6:
                    return !((param1 & 64) === 0);
                case 7:
                    return !((param1 & 128) === 0);
                default:
                    throw new Error('Bytebox overflow.');
            }
        }
    }
    export interface ICustomDataOutput {
        writeVarInt(param1: number): void;
        writeVarShort(param1: number): void;
        writeVarLong(param1: number): void;
        writeBytes(param1: ByteArray, param2?: number, param3?: number): void;
        writeBoolean(param1: boolean): void;
        writeByte(param1: number): void;
        writeShort(param1: number): void;
        writeInt(param1: number): void;
        writeUnsignedInt(param1: number): void;
        writeFloat(param1: number): void;
        writeDouble(param1: number): void;
        writeMultiByte(param1: string, param2: string): void;
        writeUTF(param1: string): void;
        writeUTFBytes(param1: string): void;
        writeObject(param1: any): void;
    }
    export interface ICustomDataInput {
        readVarInt(): number;
        readVarUhInt(): number;
        readVarShort(): number;
        readVarUhShort(): number;
        readVarLong(): number;
        readVarUhLong(): number;
        readBytes(param1: ByteArray, param2?: number, param3?: number): void;
        readBoolean(): boolean;
        readByte(): number;
        readUnsignedByte(): number;
        readShort(): number;
        readUnsignedShort(): number;
        readInt(): number;
        readUnsignedInt(): number;
        readFloat(): number;
        readDouble(): number;
        readMultiByte(param1: number, param2: string): string;
        readUTF(): string;
        readUTFBytes(param1: number): string;
        bytesAvailable: number;
        readObject(): any;
    }
    export class CustomDataWrapper implements ICustomDataOutput, ICustomDataInput {
        private static INT_SIZE: number = 32;
        private static SHORT_SIZE: number = 16;
        private static SHORT_MIN_VALUE: number = -32768;
        private static SHORT_MAX_VALUE: number = 32767;
        private static UNSIGNED_SHORT_MAX_VALUE: number = 65536;
        private static CHUNCK_BIT_SIZE: number = 7;
        private static MAX_ENCODING_LENGTH: number = Math.ceil(CustomDataWrapper.INT_SIZE / CustomDataWrapper.CHUNCK_BIT_SIZE);
        private static MASK_10000000: number = 128;
        private static MASK_01111111: number = 127;
        private _data: ByteArray;

        constructor(data: ByteArray) {
            this._data = data;
        }

        public set position(param1: number) {
            this._data.position = param1;
        }

        public get position(): number {
            return this._data.position;
        }

        public readVarInt(): number {
            var _loc4_: number = 0;
            var _loc1_: number = 0;
            var _loc2_: number = 0;
            var _loc3_: boolean = false;
            while (_loc2_ < CustomDataWrapper.INT_SIZE) {
                _loc4_ = this._data.readByte();
                _loc3_ = (_loc4_ & CustomDataWrapper.MASK_10000000) === CustomDataWrapper.MASK_10000000;
                if (_loc2_ > 0) {
                    _loc1_ = _loc1_ + ((_loc4_ & CustomDataWrapper.MASK_01111111) << _loc2_);
                } else {
                    _loc1_ = _loc1_ + (_loc4_ & CustomDataWrapper.MASK_01111111);
                }
                _loc2_ = _loc2_ + CustomDataWrapper.CHUNCK_BIT_SIZE;
                if (!_loc3_) {
                    return _loc1_;
                }
            }
            throw new Error('Too much data');
        }

        public readVarUhInt(): number {
            return this.readVarInt();
        }

        public readVarShort(): number {
            var _loc4_: number = 0;
            var _loc1_: number = 0;
            var _loc2_: number = 0;
            var _loc3_: boolean = false;
            while (_loc2_ < CustomDataWrapper.SHORT_SIZE) {
                _loc4_ = this._data.readByte();
                _loc3_ = (_loc4_ & CustomDataWrapper.MASK_10000000) === CustomDataWrapper.MASK_10000000;
                if (_loc2_ > 0) {
                    _loc1_ = _loc1_ + ((_loc4_ & CustomDataWrapper.MASK_01111111) << _loc2_);
                } else {
                    _loc1_ = _loc1_ + (_loc4_ & CustomDataWrapper.MASK_01111111);
                }
                _loc2_ = _loc2_ + CustomDataWrapper.CHUNCK_BIT_SIZE;
                if (!_loc3_) {
                    if (_loc1_ > CustomDataWrapper.SHORT_MAX_VALUE) {
                        _loc1_ = _loc1_ - CustomDataWrapper.UNSIGNED_SHORT_MAX_VALUE;
                    }
                    return _loc1_;
                }
            }
            throw new Error('Too much data');
        }

        public readVarUhShort(): number {
            return this.readVarShort();
        }

        public readVarLong(): number {
            return this.readInt64(this._data).value();
        }

        public readVarUhLong(): number {
            return this.readUInt64(this._data).value();
        }

        public readBytes(param1: ByteArray, param2: number = 0, param3: number = 0): void {
            this._data.readBytes(param1, param2, param3);
        }

        public readBoolean(): boolean {
            return this._data.readBoolean();
        }

        public readByte(): number {
            return this._data.readByte();
        }

        public readUnsignedByte(): number {
            return this._data.readUnsignedByte();
        }

        public readShort(): number {
            return this._data.readShort();
        }

        public readUnsignedShort(): number {
            return this._data.readUnsignedShort();
        }

        public readInt(): number {
            return this._data.readInt();
        }

        public readUnsignedInt(): number {
            return this._data.readUnsignedInt();
        }

        public readFloat(): number {
            return this._data.readFloat();
        }

        public readDouble(): number {
            return this._data.readDouble();
        }

        public readMultiByte(param1: number, param2: string): string {
            return this._data.readMultiByte(param1, param2);
        }

        public readUTF(): string {
            return this._data.readUTF();
        }

        public readUTFBytes(param1: number): string {
            return this._data.readUTFBytes(param1);
        }

        public get bytesAvailable(): number {
            return this._data.bytesAvailable;
        }

        public readObject(): any {
            //return this._data.readObject();
            return null;
        }

        /*public get objectEncoding(): number {
              return this._data.objectEncoding;
        }
   
        public set objectEncoding(param1: number) {
              this._data.objectEncoding = param1;
        }*/

        public get endian(): string {
            return this._data.endian;
        }

        public set endian(param1: string) {
            this._data.endian = param1;
        }

        public writeVarInt(param1: number): void {
            var _loc5_: number = 0;
            var _loc2_: ByteArray = new ByteArray();
            if (param1 >= 0 && param1 <= CustomDataWrapper.MASK_01111111) {
                _loc2_.writeByte(param1);
                this._data.writeBytes(_loc2_);
                return;
            }
            var _loc3_: number = param1;
            var _loc4_: ByteArray = new ByteArray();
            while (_loc3_ !== 0) {
                _loc4_.writeByte(_loc3_ & CustomDataWrapper.MASK_01111111);
                _loc4_.position = _loc4_.length - 1;
                _loc5_ = _loc4_.readByte();
                _loc3_ = _loc3_ >>> CustomDataWrapper.CHUNCK_BIT_SIZE;
                if (_loc3_ > 0) {
                    _loc5_ = _loc5_ | CustomDataWrapper.MASK_10000000;
                }
                _loc2_.writeByte(_loc5_);
            }
            this._data.writeBytes(_loc2_);
        }

        public writeVarShort(param1: number): void {
            var _loc5_: number = 0;
            if (param1 > CustomDataWrapper.SHORT_MAX_VALUE || param1 < CustomDataWrapper.SHORT_MIN_VALUE) {
                throw new Error('Forbidden value');
            }
            var _loc2_: ByteArray = new ByteArray();
            if (param1 >= 0 && param1 <= CustomDataWrapper.MASK_01111111) {
                _loc2_.writeByte(param1);
                this._data.writeBytes(_loc2_);
                return;
            }
            var _loc3_: any = param1 & 65535;
            var _loc4_: ByteArray = new ByteArray();
            while (_loc3_ !== 0) {
                _loc4_.writeByte(_loc3_ & CustomDataWrapper.MASK_01111111);
                _loc4_.position = _loc4_.length - 1;
                _loc5_ = _loc4_.readByte();
                _loc3_ = _loc3_ >>> CustomDataWrapper.CHUNCK_BIT_SIZE;
                if (_loc3_ > 0) {
                    _loc5_ = _loc5_ | CustomDataWrapper.MASK_10000000;
                }
                _loc2_.writeByte(_loc5_);
            }
            this._data.writeBytes(_loc2_);
        }

        public writeVarLong(param1: number): void {
            var _loc3_: number = 0;
            var _loc2_: ByteArray.Int64 = new ByteArray.Int64(param1, 0);
            if (_loc2_.high === 0) {
                this.writeint32(this._data, _loc2_.low);
            } else {
                _loc3_ = 0;
                while (_loc3_ < 4) {
                    this._data.writeByte(_loc2_.low & 127 | 128);
                    _loc2_.low = _loc2_.low >>> 7;
                    _loc3_++;
                }
                if ((_loc2_.high & 268435455 << 3) === 0) {
                    this._data.writeByte(_loc2_.high << 4 | _loc2_.low);
                } else {
                    this._data.writeByte((_loc2_.high << 4 | _loc2_.low) & 127 | 128);
                    this.writeint32(this._data, _loc2_.high >>> 3);
                }
            }
        }

        public writeBytes(param1: ByteArray, param2: number = 0, param3: number = 0): void {
            this._data.writeBytes(param1, param2, param3);
        }

        public writeBoolean(param1: boolean): void {
            this._data.writeBoolean(param1);
        }

        public writeByte(param1: number): void {
            this._data.writeByte(param1);
        }

        public writeShort(param1: number): void {
            this._data.writeShort(param1);
        }

        public writeInt(param1: number): void {
            this._data.writeInt(param1);
        }

        public writeUnsignedInt(param1: number): void {
            this._data.writeUnsignedInt(param1);
        }

        public writeFloat(param1: number): void {
            this._data.writeFloat(param1);
        }

        public writeDouble(param1: number): void {
            this._data.writeDouble(param1);
        }

        public writeMultiByte(param1: string, param2: string): void {
            this._data.writeMultiByte(param1, param2);
        }

        public writeUTF(param1: string): void {
            this._data.writeUTF(param1);
        }

        public writeUTFBytes(param1: string): void {
            this._data.writeUTFBytes(param1);
        }

        public writeObject(param1: any): void {
            //this._data.writeObject(param1);
        }

        private readInt64(param1: ByteArray): ByteArray.Int64 {
            var _loc3_: number = 0;
            var _loc2_: ByteArray.Int64 = new ByteArray.Int64(0, 0);
            var _loc4_: number = 0;
            while (true) {
                _loc3_ = param1.readUnsignedByte();
                if (_loc4_ === 28) {
                    break;
                }
                if (_loc3_ >= 128) {
                    _loc2_.low = _loc2_.low | (_loc3_ & 127) << _loc4_;
                    _loc4_ = _loc4_ + 7;
                    continue;
                }
                _loc2_.low = _loc2_.low | _loc3_ << _loc4_;
                return _loc2_;
            }
            if (_loc3_ >= 128) {
                _loc3_ = _loc3_ & 127;
                _loc2_.low = _loc2_.low | _loc3_ << _loc4_;
                _loc2_.high = _loc3_ >>> 4;
                _loc4_ = 3;
                while (true) {
                    _loc3_ = param1.readUnsignedByte();
                    if (_loc4_ < 32) {
                        if (_loc3_ >= 128) {
                            _loc2_.high = _loc2_.high | (_loc3_ & 127) << _loc4_;
                        } else {
                            break;
                        }
                    }
                    _loc4_ = _loc4_ + 7;
                }
                _loc2_.high = _loc2_.high | _loc3_ << _loc4_;
                return _loc2_;
            }
            _loc2_.low = _loc2_.low | _loc3_ << _loc4_;
            _loc2_.high = _loc3_ >>> 4;
            return _loc2_;
        }

        private readUInt64(param1: ByteArray): ByteArray.UInt64 {
            var _loc3_: number = 0;
            var _loc2_: ByteArray.UInt64 = new ByteArray.UInt64();
            var _loc4_: number = 0;
            while (true) {
                _loc3_ = param1.readUnsignedByte();
                if (_loc4_ === 28) {
                    break;
                }
                if (_loc3_ >= 128) {
                    _loc2_.low = _loc2_.low | (_loc3_ & 127) << _loc4_;
                    _loc4_ = _loc4_ + 7;
                    continue;
                }
                _loc2_.low = _loc2_.low | _loc3_ << _loc4_;
                return _loc2_;
            }
            if (_loc3_ >= 128) {
                _loc3_ = _loc3_ & 127;
                _loc2_.low = _loc2_.low | _loc3_ << _loc4_;
                _loc2_.high = _loc3_ >>> 4;
                _loc4_ = 3;
                while (true) {
                    _loc3_ = param1.readUnsignedByte();
                    if (_loc4_ < 32) {
                        if (_loc3_ >= 128) {
                            _loc2_.high = _loc2_.high | (_loc3_ & 127) << _loc4_;
                        } else {
                            break;
                        }
                    }
                    _loc4_ = _loc4_ + 7;
                }
                _loc2_.high = _loc2_.high | _loc3_ << _loc4_;
                return _loc2_;
            }
            _loc2_.low = _loc2_.low | _loc3_ << _loc4_;
            _loc2_.high = _loc3_ >>> 4;
            return _loc2_;
        }

        private writeint32(param1: ByteArray, param2: number): void {
            while (param2 >= 128) {
                param1.writeByte(param2 & 127 | 128);
                param2 = param2 >>> 7;
            }
            param1.writeByte(param2);
        }
    }
    export class NetworkMessage {
        public static BIT_RIGHT_SHIFT_LEN_PACKET_ID: number = 2;
        public static writePacket(param1: ICustomDataOutput, param2: number, param3: ByteArray): void {
            var _loc5_: number = 0;
            var _loc6_: number = 0;
            var _loc4_: number = this.computeTypeLen(param3.buffer.byteLength);
            param1.writeShort(this.subComputeStaticHeader(param2, _loc4_));
            switch (_loc4_) {
                case 0:
                    return;
                case 1:
                    param1.writeByte(param3.buffer.byteLength);
                    break;
                case 2:
                    param1.writeShort(param3.buffer.byteLength);
                    break;
                case 3:
                    _loc5_ = param3.buffer.byteLength >> 16 & 255;
                    _loc6_ = param3.buffer.byteLength & 65535;
                    param1.writeByte(_loc5_);
                    param1.writeShort(_loc6_);
                    break;
            }
            param1.writeBytes(param3, 0, param3.buffer.byteLength);
        }

        private static computeTypeLen(param1: number): number {
            if (param1 > 65535) {
                return 3;
            }
            if (param1 > 255) {
                return 2;
            }
            if (param1 > 0) {
                return 1;
            }
            return 0;
        }

        private static subComputeStaticHeader(param1: number, param2: number): number {
            return param1 << NetworkMessage.BIT_RIGHT_SHIFT_LEN_PACKET_ID | param2;
        }
    }
    export interface INetworkMessage {
        pack(param1: ICustomDataOutput): void;
        unpack(param1: ICustomDataInput, param2: number): void;
        getMessageId(): number;
        reset(): void;
    }
    export interface INetworkType {
        serialize(param1: ICustomDataOutput): void;
        deserialize(param1: ICustomDataInput): void;
        getTypeId(): number;
        reset(): void;
    }
    export class ProtocolTypeManager {
        private static _list: { [idx: number]: () => INetworkType } = {
            484: () => { return new StatisticData(); },
            482: () => { return new StatisticDataBoolean(); },
            486: () => { return new StatisticDataByte(); },
            485: () => { return new StatisticDataInt(); },
            488: () => { return new StatisticDataShort(); },
            487: () => { return new StatisticDataString(); },
            25: () => { return new GameServerInformations(); },
            363: () => { return new Achievement(); },
            404: () => { return new AchievementObjective(); },
            412: () => { return new AchievementRewardable(); },
            402: () => { return new AchievementStartedObjective(); },
            208: () => { return new FightDispellableEffectExtendedInformations(); },
            206: () => { return new AbstractFightDispellableEffect(); },
            209: () => { return new FightTemporaryBoostEffect(); },
            214: () => { return new FightTemporaryBoostStateEffect(); },
            211: () => { return new FightTemporaryBoostWeaponDamagesEffect(); },
            207: () => { return new FightTemporarySpellBoostEffect(); },
            366: () => { return new FightTemporarySpellImmunityEffect(); },
            210: () => { return new FightTriggeredEffect(); },
            351: () => { return new GameActionMark(); },
            85: () => { return new GameActionMarkedCell(); },
            430: () => { return new ServerSessionConstant(); },
            433: () => { return new ServerSessionConstantInteger(); },
            429: () => { return new ServerSessionConstantLong(); },
            436: () => { return new ServerSessionConstantString(); },
            400: () => { return new AbstractCharacterInformation(); },
            444: () => { return new CharacterMinimalAllianceInformations(); },
            445: () => { return new CharacterMinimalGuildInformations(); },
            110: () => { return new CharacterMinimalInformations(); },
            193: () => { return new CharacterMinimalPlusLookAndGradeInformations(); },
            163: () => { return new CharacterMinimalPlusLookInformations(); },
            201: () => { return new ActorAlignmentInformations(); },
            202: () => { return new ActorExtendedAlignmentInformations(); },
            4: () => { return new CharacterBaseCharacteristic(); },
            8: () => { return new CharacterCharacteristicsInformations(); },
            215: () => { return new CharacterSpellModification(); },
            475: () => { return new AbstractCharacterToRefurbishInformation(); },
            45: () => { return new CharacterBaseInformations(); },
            474: () => { return new CharacterHardcoreOrEpicInformations(); },
            479: () => { return new CharacterRemodelingInformation(); },
            212: () => { return new CharacterToRecolorInformation(); },
            399: () => { return new CharacterToRelookInformation(); },
            477: () => { return new CharacterToRemodelInformations(); },
            480: () => { return new RemodelingInformation(); },
            204: () => { return new ActorRestrictionsInformations(); },
            415: () => { return new PlayerStatus(); },
            414: () => { return new PlayerStatusExtended(); },
            353: () => { return new ActorOrientation(); },
            60: () => { return new EntityDispositionInformations(); },
            63: () => { return new EntityMovementInformations(); },
            217: () => { return new FightEntityDispositionInformations(); },
            150: () => { return new GameContextActorInformations(); },
            148: () => { return new GameRolePlayTaxCollectorInformations(); },
            107: () => { return new IdentifiedEntityDispositionInformations(); },
            174: () => { return new MapCoordinates(); },
            392: () => { return new MapCoordinatesAndId(); },
            176: () => { return new MapCoordinatesExtended(); },
            440: () => { return new TaxCollectorStaticExtendedInformations(); },
            147: () => { return new TaxCollectorStaticInformations(); },
            116: () => { return new AbstractFightTeamInformations(); },
            439: () => { return new FightAllianceTeamInformations(); },
            43: () => { return new FightCommonInformations(); },
            117: () => { return new FightExternalInformations(); },
            41: () => { return new FightLoot(); },
            20: () => { return new FightOptionsInformations(); },
            191: () => { return new FightResultAdditionalData(); },
            192: () => { return new FightResultExperienceData(); },
            189: () => { return new FightResultFighterListEntry(); },
            16: () => { return new FightResultListEntry(); },
            216: () => { return new FightResultMutantListEntry(); },
            24: () => { return new FightResultPlayerListEntry(); },
            190: () => { return new FightResultPvpData(); },
            84: () => { return new FightResultTaxCollectorListEntry(); },
            33: () => { return new FightTeamInformations(); },
            115: () => { return new FightTeamLightInformations(); },
            13: () => { return new FightTeamMemberCharacterInformations(); },
            451: () => { return new FightTeamMemberCompanionInformations(); },
            44: () => { return new FightTeamMemberInformations(); },
            6: () => { return new FightTeamMemberMonsterInformations(); },
            177: () => { return new FightTeamMemberTaxCollectorInformations(); },
            426: () => { return new FightTeamMemberWithAllianceCharacterInformations(); },
            151: () => { return new GameFightAIInformations(); },
            46: () => { return new GameFightCharacterInformations(); },
            450: () => { return new GameFightCompanionInformations(); },
            454: () => { return new GameFightFighterCompanionLightInformations(); },
            143: () => { return new GameFightFighterInformations(); },
            413: () => { return new GameFightFighterLightInformations(); },
            455: () => { return new GameFightFighterMonsterLightInformations(); },
            158: () => { return new GameFightFighterNamedInformations(); },
            456: () => { return new GameFightFighterNamedLightInformations(); },
            457: () => { return new GameFightFighterTaxCollectorLightInformations(); },
            31: () => { return new GameFightMinimalStats(); },
            360: () => { return new GameFightMinimalStatsPreparation(); },
            29: () => { return new GameFightMonsterInformations(); },
            203: () => { return new GameFightMonsterWithAlignmentInformations(); },
            50: () => { return new GameFightMutantInformations(); },
            364: () => { return new GameFightResumeSlaveInfo(); },
            205: () => { return new GameFightSpellCooldown(); },
            48: () => { return new GameFightTaxCollectorInformations(); },
            417: () => { return new AllianceInformations(); },
            394: () => { return new AlternativeMonstersInGroupLightInformations(); },
            175: () => { return new AtlasPointsInformations(); },
            419: () => { return new BasicAllianceInformations(); },
            365: () => { return new BasicGuildInformations(); },
            418: () => { return new BasicNamedAllianceInformations(); },
            141: () => { return new GameRolePlayActorInformations(); },
            36: () => { return new GameRolePlayCharacterInformations(); },
            160: () => { return new GameRolePlayGroupMonsterInformations(); },
            464: () => { return new GameRolePlayGroupMonsterWaveInformations(); },
            159: () => { return new GameRolePlayHumanoidInformations(); },
            129: () => { return new GameRolePlayMerchantInformations(); },
            180: () => { return new GameRolePlayMountInformations(); },
            3: () => { return new GameRolePlayMutantInformations(); },
            154: () => { return new GameRolePlayNamedActorInformations(); },
            156: () => { return new GameRolePlayNpcInformations(); },
            383: () => { return new GameRolePlayNpcWithQuestInformations(); },
            467: () => { return new GameRolePlayPortalInformations(); },
            161: () => { return new GameRolePlayPrismInformations(); },
            471: () => { return new GameRolePlayTreasureHintInformations(); },
            140: () => { return new GroupMonsterStaticInformations(); },
            396: () => { return new GroupMonsterStaticInformationsWithAlternatives(); },
            420: () => { return new GuildInAllianceInformations(); },
            127: () => { return new GuildInformations(); },
            157: () => { return new HumanInformations(); },
            406: () => { return new HumanOption(); },
            425: () => { return new HumanOptionAlliance(); },
            407: () => { return new HumanOptionEmote(); },
            410: () => { return new HumanOptionFollowers(); },
            409: () => { return new HumanOptionGuild(); },
            449: () => { return new HumanOptionObjectUse(); },
            411: () => { return new HumanOptionOrnament(); },
            408: () => { return new HumanOptionTitle(); },
            144: () => { return new MonsterInGroupInformations(); },
            395: () => { return new MonsterInGroupLightInformations(); },
            198: () => { return new ObjectItemInRolePlay(); },
            481: () => { return new DecraftedItemStackInfo(); },
            195: () => { return new JobCrafterDirectoryEntryJobInfo(); },
            194: () => { return new JobCrafterDirectoryEntryPlayerInfo(); },
            196: () => { return new JobCrafterDirectoryListEntry(); },
            97: () => { return new JobCrafterDirectorySettings(); },
            101: () => { return new JobDescription(); },
            98: () => { return new JobExperience(); },
            373: () => { return new DungeonPartyFinderPlayer(); },
            469: () => { return new NamedPartyTeam(); },
            470: () => { return new NamedPartyTeamWithOutcome(); },
            374: () => { return new PartyGuestInformations(); },
            376: () => { return new PartyInvitationMemberInformations(); },
            391: () => { return new PartyMemberArenaInformations(); },
            378: () => { return new PartyMemberGeoPosition(); },
            90: () => { return new PartyMemberInformations(); },
            453: () => { return new PartyCompanionBaseInformations(); },
            452: () => { return new PartyCompanionMemberInformations(); },
            384: () => { return new GameRolePlayNpcQuestFlag(); },
            382: () => { return new QuestActiveDetailedInformations(); },
            381: () => { return new QuestActiveInformations(); },
            385: () => { return new QuestObjectiveInformations(); },
            386: () => { return new QuestObjectiveInformationsWithCompletion(); },
            466: () => { return new PortalInformation(); },
            473: () => { return new TreasureHuntFlag(); },
            463: () => { return new TreasureHuntStep(); },
            465: () => { return new TreasureHuntStepDig(); },
            462: () => { return new TreasureHuntStepFight(); },
            468: () => { return new TreasureHuntStepFollowDirection(); },
            472: () => { return new TreasureHuntStepFollowDirectionToHint(); },
            461: () => { return new TreasureHuntStepFollowDirectionToPOI(); },
            122: () => { return new BidExchangerObjectInfo(); },
            123: () => { return new GoldItem(); },
            7: () => { return new Item(); },
            37: () => { return new ObjectItem(); },
            483: () => { return new ObjectItemGenericQuantity(); },
            387: () => { return new ObjectItemInformationWithQuantity(); },
            124: () => { return new ObjectItemMinimalInformation(); },
            134: () => { return new ObjectItemNotInContainer(); },
            119: () => { return new ObjectItemQuantity(); },
            120: () => { return new ObjectItemToSell(); },
            164: () => { return new ObjectItemToSellInBid(); },
            359: () => { return new ObjectItemToSellInHumanVendorShop(); },
            352: () => { return new ObjectItemToSellInNpcShop(); },
            121: () => { return new SellerBuyerDescriptor(); },
            49: () => { return new SpellItem(); },
            76: () => { return new ObjectEffect(); },
            71: () => { return new ObjectEffectCreature(); },
            72: () => { return new ObjectEffectDate(); },
            73: () => { return new ObjectEffectDice(); },
            75: () => { return new ObjectEffectDuration(); },
            70: () => { return new ObjectEffectInteger(); },
            81: () => { return new ObjectEffectLadder(); },
            82: () => { return new ObjectEffectMinMax(); },
            179: () => { return new ObjectEffectMount(); },
            74: () => { return new ObjectEffectString(); },
            186: () => { return new ProtectedEntityWaitingForHelpInfo(); },
            380: () => { return new AbstractContactInformations(); },
            78: () => { return new FriendInformations(); },
            92: () => { return new FriendOnlineInformations(); },
            77: () => { return new FriendSpouseInformations(); },
            93: () => { return new FriendSpouseOnlineInformations(); },
            106: () => { return new IgnoredInformations(); },
            105: () => { return new IgnoredOnlineInformations(); },
            87: () => { return new GuildEmblem(); },
            88: () => { return new GuildMember(); },
            165: () => { return new AdditionalTaxCollectorInformations(); },
            96: () => { return new TaxCollectorBasicInformations(); },
            448: () => { return new TaxCollectorComplementaryInformations(); },
            169: () => { return new TaxCollectorFightersInformation(); },
            446: () => { return new TaxCollectorGuildInformations(); },
            167: () => { return new TaxCollectorInformations(); },
            372: () => { return new TaxCollectorLootInformations(); },
            447: () => { return new TaxCollectorWaitingForHelpInformations(); },
            390: () => { return new AccountHouseInformations(); },
            111: () => { return new HouseInformations(); },
            112: () => { return new HouseInformationsExtended(); },
            170: () => { return new HouseInformationsForGuild(); },
            221: () => { return new HouseInformationsForSell(); },
            218: () => { return new HouseInformationsInside(); },
            489: () => { return new Idol(); },
            490: () => { return new PartyIdol(); },
            80: () => { return new InteractiveElement(); },
            220: () => { return new InteractiveElementNamedSkill(); },
            219: () => { return new InteractiveElementSkill(); },
            398: () => { return new InteractiveElementWithAgeBonus(); },
            200: () => { return new MapObstacle(); },
            108: () => { return new StatedElement(); },
            102: () => { return new SkillActionDescription(); },
            99: () => { return new SkillActionDescriptionCollect(); },
            100: () => { return new SkillActionDescriptionCraft(); },
            103: () => { return new SkillActionDescriptionTimed(); },
            491: () => { return new IdolsPreset(); },
            355: () => { return new Preset(); },
            354: () => { return new PresetItem(); },
            55: () => { return new EntityLook(); },
            405: () => { return new IndexedEntityLook(); },
            54: () => { return new SubEntity(); },
            168: () => { return new ItemDurability(); },
            178: () => { return new MountClientData(); },
            356: () => { return new UpdateMountBoost(); },
            357: () => { return new UpdateMountIntBoost(); },
            184: () => { return new MountInformationsForPaddock(); },
            133: () => { return new PaddockAbandonnedInformations(); },
            130: () => { return new PaddockBuyableInformations(); },
            183: () => { return new PaddockContentInformations(); },
            132: () => { return new PaddockInformations(); },
            222: () => { return new PaddockInformationsForSell(); },
            185: () => { return new PaddockItem(); },
            131: () => { return new PaddockPrivateInformations(); },
            431: () => { return new AllianceInsiderPrismInformation(); },
            427: () => { return new AlliancePrismInformation(); },
            443: () => { return new PrismFightersInformation(); },
            434: () => { return new PrismGeolocalizedInformation(); },
            428: () => { return new PrismInformation(); },
            438: () => { return new PrismSubareaEmptyInfo(); },
            369: () => { return new Shortcut(); },
            389: () => { return new ShortcutEmote(); },
            367: () => { return new ShortcutObject(); },
            492: () => { return new ShortcutObjectIdolsPreset(); },
            371: () => { return new ShortcutObjectItem(); },
            370: () => { return new ShortcutObjectPreset(); },
            388: () => { return new ShortcutSmiley(); },
            368: () => { return new ShortcutSpell(); },
            416: () => { return new AbstractSocialGroupInfos(); },
            421: () => { return new AllianceFactSheetInformations(); },
            432: () => { return new AllianceVersatileInformations(); },
            422: () => { return new AlliancedGuildFactSheetInformations(); },
            424: () => { return new GuildFactSheetInformations(); },
            437: () => { return new GuildInAllianceVersatileInformations(); },
            423: () => { return new GuildInsiderFactSheetInformations(); },
            435: () => { return new GuildVersatileInformations(); },
            52: () => { return new StartupActionAddObject(); },
            377: () => { return new TrustCertificate(); },
            350: () => { return new ContentPart(); },
            11: () => { return new Version(); },
            393: () => { return new VersionExtended(); },
            397: () => { return new KrosmasterFigure(); }
        };

        public static getInstance(networkType: any, param2: number): INetworkType {
            let _loc3_ = ProtocolTypeManager._list[param2];
            if (!_loc3_) {
                throw new Error('Type with id ' + param2 + ' is unknown.');
            }
            return _loc3_();
        }
    }
    export class MessageReceiver {
        private static _list: { [idx: number]: () => INetworkMessage } = {
            76: () => { return new AdminCommandMessage(); },
            5662: () => { return new AdminQuietCommandMessage(); },
            6127: () => { return new ConsoleCommandsListMessage(); },
            75: () => { return new ConsoleMessage(); },
            2: () => { return new NetworkDataContainerMessage(); },
            182: () => { return new BasicPingMessage(); },
            183: () => { return new BasicPongMessage(); },
            6530: () => { return new BasicStatMessage(); },
            6314: () => { return new CredentialsAcknowledgementMessage(); },
            3: () => { return new HelloConnectMessage(); },
            6119: () => { return new IdentificationAccountForceMessage(); },
            6174: () => { return new IdentificationFailedBannedMessage(); },
            21: () => { return new IdentificationFailedForBadVersionMessage(); },
            20: () => { return new IdentificationFailedMessage(); },
            4: () => { return new IdentificationMessage(); },
            22: () => { return new IdentificationSuccessMessage(); },
            6209: () => { return new IdentificationSuccessWithLoginTokenMessage(); },
            6469: () => { return new SelectedServerDataExtendedMessage(); },
            42: () => { return new SelectedServerDataMessage(); },
            41: () => { return new SelectedServerRefusedMessage(); },
            40: () => { return new ServerSelectionMessage(); },
            50: () => { return new ServerStatusUpdateMessage(); },
            30: () => { return new ServersListMessage(); },
            6607: () => { return new AccountLinkRequiredMessage(); },
            5641: () => { return new NicknameAcceptedMessage(); },
            5639: () => { return new NicknameChoiceRequestMessage(); },
            5638: () => { return new NicknameRefusedMessage(); },
            5640: () => { return new NicknameRegistrationMessage(); },
            6143: () => { return new AcquaintanceSearchErrorMessage(); },
            6144: () => { return new AcquaintanceSearchMessage(); },
            6142: () => { return new AcquaintanceServerListMessage(); },
            2002: () => { return new DebugClearHighlightCellsMessage(); },
            2001: () => { return new DebugHighlightCellsMessage(); },
            6028: () => { return new DebugInClientMessage(); },
            6358: () => { return new AchievementDetailedListMessage(); },
            6357: () => { return new AchievementDetailedListRequestMessage(); },
            6378: () => { return new AchievementDetailsMessage(); },
            6380: () => { return new AchievementDetailsRequestMessage(); },
            6381: () => { return new AchievementFinishedInformationMessage(); },
            6208: () => { return new AchievementFinishedMessage(); },
            6205: () => { return new AchievementListMessage(); },
            6375: () => { return new AchievementRewardErrorMessage(); },
            6377: () => { return new AchievementRewardRequestMessage(); },
            6376: () => { return new AchievementRewardSuccessMessage(); },
            6382: () => { return new FriendGuildSetWarnOnAchievementCompleteMessage(); },
            6383: () => { return new FriendGuildWarnOnAchievementCompleteStateMessage(); },
            1000: () => { return new AbstractGameActionMessage(); },
            1001: () => { return new AbstractGameActionWithAckMessage(); },
            957: () => { return new GameActionAcknowledgementMessage(); },
            1002: () => { return new GameActionNoopMessage(); },
            6118: () => { return new AbstractGameActionFightTargetedAbilityMessage(); },
            6545: () => { return new GameActionFightActivateGlyphTrapMessage(); },
            5830: () => { return new GameActionFightCarryCharacterMessage(); },
            6330: () => { return new GameActionFightCastOnTargetRequestMessage(); },
            1005: () => { return new GameActionFightCastRequestMessage(); },
            5532: () => { return new GameActionFightChangeLookMessage(); },
            6116: () => { return new GameActionFightCloseCombatMessage(); },
            1099: () => { return new GameActionFightDeathMessage(); },
            6113: () => { return new GameActionFightDispellEffectMessage(); },
            5533: () => { return new GameActionFightDispellMessage(); },
            6176: () => { return new GameActionFightDispellSpellMessage(); },
            6070: () => { return new GameActionFightDispellableEffectMessage(); },
            5828: () => { return new GameActionFightDodgePointLossMessage(); },
            5826: () => { return new GameActionFightDropCharacterMessage(); },
            5527: () => { return new GameActionFightExchangePositionsMessage(); },
            5821: () => { return new GameActionFightInvisibilityMessage(); },
            6320: () => { return new GameActionFightInvisibleDetectedMessage(); },
            5571: () => { return new GameActionFightKillMessage(); },
            6310: () => { return new GameActionFightLifeAndShieldPointsLostMessage(); },
            6311: () => { return new GameActionFightLifePointsGainMessage(); },
            6312: () => { return new GameActionFightLifePointsLostMessage(); },
            5540: () => { return new GameActionFightMarkCellsMessage(); },
            6304: () => { return new GameActionFightModifyEffectsDurationMessage(); },
            6132: () => { return new GameActionFightNoSpellCastMessage(); },
            1030: () => { return new GameActionFightPointsVariationMessage(); },
            5526: () => { return new GameActionFightReduceDamagesMessage(); },
            5530: () => { return new GameActionFightReflectDamagesMessage(); },
            5531: () => { return new GameActionFightReflectSpellMessage(); },
            5525: () => { return new GameActionFightSlideMessage(); },
            1010: () => { return new GameActionFightSpellCastMessage(); },
            6219: () => { return new GameActionFightSpellCooldownVariationMessage(); },
            6221: () => { return new GameActionFightSpellImmunityMessage(); },
            5535: () => { return new GameActionFightStealKamaMessage(); },
            5825: () => { return new GameActionFightSummonMessage(); },
            1004: () => { return new GameActionFightTackledMessage(); },
            5528: () => { return new GameActionFightTeleportOnSameMapMessage(); },
            5829: () => { return new GameActionFightThrowCharacterMessage(); },
            6147: () => { return new GameActionFightTriggerEffectMessage(); },
            5741: () => { return new GameActionFightTriggerGlyphTrapMessage(); },
            5570: () => { return new GameActionFightUnmarkCellsMessage(); },
            6217: () => { return new GameActionFightVanishMessage(); },
            956: () => { return new SequenceEndMessage(); },
            955: () => { return new SequenceStartMessage(); },
            6426: () => { return new AllianceChangeGuildRightsMessage(); },
            6391: () => { return new AllianceCreationResultMessage(); },
            6394: () => { return new AllianceCreationStartedMessage(); },
            6393: () => { return new AllianceCreationValidMessage(); },
            6423: () => { return new AllianceFactsErrorMessage(); },
            6414: () => { return new AllianceFactsMessage(); },
            6409: () => { return new AllianceFactsRequestMessage(); },
            6399: () => { return new AllianceGuildLeavingMessage(); },
            6403: () => { return new AllianceInsiderInfoMessage(); },
            6417: () => { return new AllianceInsiderInfoRequestMessage(); },
            6401: () => { return new AllianceInvitationAnswerMessage(); },
            6395: () => { return new AllianceInvitationMessage(); },
            6392: () => { return new AllianceInvitationStateRecrutedMessage(); },
            6396: () => { return new AllianceInvitationStateRecruterMessage(); },
            6397: () => { return new AllianceInvitedMessage(); },
            6402: () => { return new AllianceJoinedMessage(); },
            6400: () => { return new AllianceKickRequestMessage(); },
            6398: () => { return new AllianceLeftMessage(); },
            6408: () => { return new AllianceListMessage(); },
            6390: () => { return new AllianceMembershipMessage(); },
            6447: () => { return new AllianceModificationEmblemValidMessage(); },
            6449: () => { return new AllianceModificationNameAndTagValidMessage(); },
            6444: () => { return new AllianceModificationStartedMessage(); },
            6450: () => { return new AllianceModificationValidMessage(); },
            6427: () => { return new AlliancePartialListMessage(); },
            6436: () => { return new AllianceVersatileInfoListMessage(); },
            6439: () => { return new KohUpdateMessage(); },
            6341: () => { return new AlmanachCalendarDateMessage(); },
            6216: () => { return new AccountCapabilitiesMessage(); },
            6029: () => { return new AccountLoggingKickedMessage(); },
            109: () => { return new AlreadyConnectedMessage(); },
            111: () => { return new AuthenticationTicketAcceptedMessage(); },
            110: () => { return new AuthenticationTicketMessage(); },
            112: () => { return new AuthenticationTicketRefusedMessage(); },
            101: () => { return new HelloGameMessage(); },
            6540: () => { return new ReloginTokenRequestMessage(); },
            6539: () => { return new ReloginTokenStatusMessage(); },
            6305: () => { return new ServerOptionalFeaturesMessage(); },
            6434: () => { return new ServerSessionConstantsMessage(); },
            6340: () => { return new ServerSettingsMessage(); },
            5956: () => { return new AtlasPointInformationsMessage(); },
            5584: () => { return new CompassResetMessage(); },
            5591: () => { return new CompassUpdateMessage(); },
            5589: () => { return new CompassUpdatePartyMemberMessage(); },
            6013: () => { return new CompassUpdatePvpSeekMessage(); },
            6362: () => { return new BasicAckMessage(); },
            177: () => { return new BasicDateMessage(); },
            5663: () => { return new BasicLatencyStatsMessage(); },
            5816: () => { return new BasicLatencyStatsRequestMessage(); },
            176: () => { return new BasicNoOperationMessage(); },
            175: () => { return new BasicTimeMessage(); },
            5664: () => { return new BasicWhoAmIRequestMessage(); },
            180: () => { return new BasicWhoIsMessage(); },
            179: () => { return new BasicWhoIsNoMatchMessage(); },
            181: () => { return new BasicWhoIsRequestMessage(); },
            6525: () => { return new CurrentServerStatusUpdateMessage(); },
            6297: () => { return new NumericWhoIsMessage(); },
            6298: () => { return new NumericWhoIsRequestMessage(); },
            6317: () => { return new SequenceNumberMessage(); },
            6316: () => { return new SequenceNumberRequestMessage(); },
            780: () => { return new TextInformationMessage(); },
            6475: () => { return new BasicCharactersListMessage(); },
            6084: () => { return new CharacterFirstSelectionMessage(); },
            6551: () => { return new CharacterReplayWithRemodelRequestMessage(); },
            5836: () => { return new CharacterSelectedErrorMessage(); },
            6068: () => { return new CharacterSelectedForceMessage(); },
            6072: () => { return new CharacterSelectedForceReadyMessage(); },
            153: () => { return new CharacterSelectedSuccessMessage(); },
            152: () => { return new CharacterSelectionMessage(); },
            6549: () => { return new CharacterSelectionWithRemodelMessage(); },
            5545: () => { return new CharactersListErrorMessage(); },
            151: () => { return new CharactersListMessage(); },
            150: () => { return new CharactersListRequestMessage(); },
            6120: () => { return new CharactersListWithModificationsMessage(); },
            6550: () => { return new CharactersListWithRemodelingMessage(); },
            160: () => { return new CharacterCreationRequestMessage(); },
            161: () => { return new CharacterCreationResultMessage(); },
            164: () => { return new CharacterNameSuggestionFailureMessage(); },
            162: () => { return new CharacterNameSuggestionRequestMessage(); },
            5544: () => { return new CharacterNameSuggestionSuccessMessage(); },
            166: () => { return new CharacterDeletionErrorMessage(); },
            165: () => { return new CharacterDeletionRequestMessage(); },
            167: () => { return new CharacterReplayRequestMessage(); },
            6321: () => { return new CharacterExperienceGainMessage(); },
            6076: () => { return new CharacterLevelUpInformationMessage(); },
            5670: () => { return new CharacterLevelUpMessage(); },
            500: () => { return new CharacterStatsListMessage(); },
            6322: () => { return new FighterStatsListMessage(); },
            5684: () => { return new LifePointsRegenBeginMessage(); },
            5686: () => { return new LifePointsRegenEndMessage(); },
            5658: () => { return new UpdateLifePointsMessage(); },
            6385: () => { return new PlayerStatusUpdateErrorMessage(); },
            6386: () => { return new PlayerStatusUpdateMessage(); },
            6387: () => { return new PlayerStatusUpdateRequestMessage(); },
            850: () => { return new ChatAbstractClientMessage(); },
            880: () => { return new ChatAbstractServerMessage(); },
            6135: () => { return new ChatAdminServerMessage(); },
            861: () => { return new ChatClientMultiMessage(); },
            862: () => { return new ChatClientMultiWithObjectMessage(); },
            851: () => { return new ChatClientPrivateMessage(); },
            852: () => { return new ChatClientPrivateWithObjectMessage(); },
            870: () => { return new ChatErrorMessage(); },
            882: () => { return new ChatServerCopyMessage(); },
            884: () => { return new ChatServerCopyWithObjectMessage(); },
            881: () => { return new ChatServerMessage(); },
            883: () => { return new ChatServerWithObjectMessage(); },
            891: () => { return new ChannelEnablingChangeMessage(); },
            890: () => { return new ChannelEnablingMessage(); },
            892: () => { return new EnabledChannelsMessage(); },
            821: () => { return new ChatMessageReportMessage(); },
            6596: () => { return new ChatSmileyExtraPackListMessage(); },
            801: () => { return new ChatSmileyMessage(); },
            800: () => { return new ChatSmileyRequestMessage(); },
            6185: () => { return new LocalizedChatSmileyMessage(); },
            6192: () => { return new MoodSmileyRequestMessage(); },
            6196: () => { return new MoodSmileyResultMessage(); },
            6388: () => { return new MoodSmileyUpdateMessage(); },
            6497: () => { return new GameCautiousMapMovementMessage(); },
            6496: () => { return new GameCautiousMapMovementRequestMessage(); },
            6024: () => { return new GameContextCreateErrorMessage(); },
            200: () => { return new GameContextCreateMessage(); },
            250: () => { return new GameContextCreateRequestMessage(); },
            201: () => { return new GameContextDestroyMessage(); },
            6081: () => { return new GameContextKickMessage(); },
            253: () => { return new GameContextMoveElementMessage(); },
            254: () => { return new GameContextMoveMultipleElementsMessage(); },
            255: () => { return new GameContextQuitMessage(); },
            6071: () => { return new GameContextReadyMessage(); },
            5637: () => { return new GameContextRefreshEntityLookMessage(); },
            251: () => { return new GameContextRemoveElementMessage(); },
            6412: () => { return new GameContextRemoveElementWithEventMessage(); },
            252: () => { return new GameContextRemoveMultipleElementsMessage(); },
            6416: () => { return new GameContextRemoveMultipleElementsWithEventsMessage(); },
            5696: () => { return new GameEntitiesDispositionMessage(); },
            5695: () => { return new GameEntityDispositionErrorMessage(); },
            5693: () => { return new GameEntityDispositionMessage(); },
            946: () => { return new GameMapChangeOrientationMessage(); },
            945: () => { return new GameMapChangeOrientationRequestMessage(); },
            6155: () => { return new GameMapChangeOrientationsMessage(); },
            953: () => { return new GameMapMovementCancelMessage(); },
            952: () => { return new GameMapMovementConfirmMessage(); },
            951: () => { return new GameMapMovementMessage(); },
            950: () => { return new GameMapMovementRequestMessage(); },
            954: () => { return new GameMapNoMovementMessage(); },
            5612: () => { return new ShowCellMessage(); },
            5611: () => { return new ShowCellRequestMessage(); },
            6158: () => { return new ShowCellSpectatorMessage(); },
            6563: () => { return new DisplayNumericalValuePaddockMessage(); },
            6299: () => { return new DungeonKeyRingMessage(); },
            6296: () => { return new DungeonKeyRingUpdateMessage(); },
            720: () => { return new GameFightEndMessage(); },
            740: () => { return new GameFightHumanReadyStateMessage(); },
            702: () => { return new GameFightJoinMessage(); },
            701: () => { return new GameFightJoinRequestMessage(); },
            721: () => { return new GameFightLeaveMessage(); },
            6239: () => { return new GameFightNewRoundMessage(); },
            6490: () => { return new GameFightNewWaveMessage(); },
            5927: () => { return new GameFightOptionStateUpdateMessage(); },
            707: () => { return new GameFightOptionToggleMessage(); },
            704: () => { return new GameFightPlacementPositionRequestMessage(); },
            703: () => { return new GameFightPlacementPossiblePositionsMessage(); },
            6547: () => { return new GameFightPlacementSwapPositionsAcceptMessage(); },
            6543: () => { return new GameFightPlacementSwapPositionsCancelMessage(); },
            6546: () => { return new GameFightPlacementSwapPositionsCancelledMessage(); },
            6548: () => { return new GameFightPlacementSwapPositionsErrorMessage(); },
            6544: () => { return new GameFightPlacementSwapPositionsMessage(); },
            6542: () => { return new GameFightPlacementSwapPositionsOfferMessage(); },
            6541: () => { return new GameFightPlacementSwapPositionsRequestMessage(); },
            708: () => { return new GameFightReadyMessage(); },
            711: () => { return new GameFightRemoveTeamMemberMessage(); },
            6067: () => { return new GameFightResumeMessage(); },
            6215: () => { return new GameFightResumeWithSlavesMessage(); },
            6069: () => { return new GameFightSpectateMessage(); },
            6474: () => { return new GameFightSpectatePlayerRequestMessage(); },
            6504: () => { return new GameFightSpectatorJoinMessage(); },
            712: () => { return new GameFightStartMessage(); },
            700: () => { return new GameFightStartingMessage(); },
            5921: () => { return new GameFightSynchronizeMessage(); },
            719: () => { return new GameFightTurnEndMessage(); },
            718: () => { return new GameFightTurnFinishMessage(); },
            713: () => { return new GameFightTurnListMessage(); },
            716: () => { return new GameFightTurnReadyMessage(); },
            715: () => { return new GameFightTurnReadyRequestMessage(); },
            6307: () => { return new GameFightTurnResumeMessage(); },
            714: () => { return new GameFightTurnStartMessage(); },
            6465: () => { return new GameFightTurnStartPlayingMessage(); },
            5572: () => { return new GameFightUpdateTeamMessage(); },
            6214: () => { return new SlaveSwitchContextMessage(); },
            6022: () => { return new ChallengeInfoMessage(); },
            6019: () => { return new ChallengeResultMessage(); },
            6123: () => { return new ChallengeTargetUpdateMessage(); },
            5613: () => { return new ChallengeTargetsListMessage(); },
            5614: () => { return new ChallengeTargetsListRequestMessage(); },
            6309: () => { return new GameFightRefreshFighterMessage(); },
            5864: () => { return new GameFightShowFighterMessage(); },
            6218: () => { return new GameFightShowFighterRandomStaticPoseMessage(); },
            5990: () => { return new GameDataPaddockObjectAddMessage(); },
            5992: () => { return new GameDataPaddockObjectListAddMessage(); },
            5993: () => { return new GameDataPaddockObjectRemoveMessage(); },
            6172: () => { return new MountDataErrorMessage(); },
            5973: () => { return new MountDataMessage(); },
            5978: () => { return new MountEmoteIconUsedOkMessage(); },
            5963: () => { return new MountEquipedErrorMessage(); },
            6189: () => { return new MountFeedRequestMessage(); },
            5975: () => { return new MountInformationInPaddockRequestMessage(); },
            5972: () => { return new MountInformationRequestMessage(); },
            5980: () => { return new MountReleaseRequestMessage(); },
            6308: () => { return new MountReleasedMessage(); },
            5987: () => { return new MountRenameRequestMessage(); },
            5983: () => { return new MountRenamedMessage(); },
            5967: () => { return new MountRidingMessage(); },
            5968: () => { return new MountSetMessage(); },
            5989: () => { return new MountSetXpRatioRequestMessage(); },
            5962: () => { return new MountSterilizeRequestMessage(); },
            5977: () => { return new MountSterilizedMessage(); },
            5976: () => { return new MountToggleRidingRequestMessage(); },
            5982: () => { return new MountUnSetMessage(); },
            5970: () => { return new MountXpRatioMessage(); },
            5951: () => { return new PaddockBuyRequestMessage(); },
            6516: () => { return new PaddockBuyResultMessage(); },
            6052: () => { return new PaddockMoveItemRequestMessage(); },
            5958: () => { return new PaddockRemoveItemRequestMessage(); },
            5953: () => { return new PaddockSellRequestMessage(); },
            6103: () => { return new NotificationByServerMessage(); },
            6087: () => { return new NotificationListMessage(); },
            6089: () => { return new NotificationResetMessage(); },
            6090: () => { return new NotificationUpdateFlagMessage(); },
            221: () => { return new ChangeMapMessage(); },
            220: () => { return new CurrentMapMessage(); },
            6197: () => { return new ErrorMapNotFoundMessage(); },
            5632: () => { return new GameRolePlayShowActorMessage(); },
            6407: () => { return new GameRolePlayShowActorWithEventMessage(); },
            6130: () => { return new MapComplementaryInformationsDataInHouseMessage(); },
            226: () => { return new MapComplementaryInformationsDataMessage(); },
            6268: () => { return new MapComplementaryInformationsWithCoordsMessage(); },
            210: () => { return new MapFightCountMessage(); },
            225: () => { return new MapInformationsRequestMessage(); },
            6051: () => { return new MapObstacleUpdateMessage(); },
            6500: () => { return new MapRunningFightDetailsExtendedMessage(); },
            5751: () => { return new MapRunningFightDetailsMessage(); },
            5750: () => { return new MapRunningFightDetailsRequestMessage(); },
            5743: () => { return new MapRunningFightListMessage(); },
            5742: () => { return new MapRunningFightListRequestMessage(); },
            6124: () => { return new StopToListenRunningFightRequestMessage(); },
            6048: () => { return new TeleportOnSameMapMessage(); },
            745: () => { return new GameRolePlayFreeSoulRequestMessage(); },
            746: () => { return new GameRolePlayGameOverMessage(); },
            5996: () => { return new GameRolePlayPlayerLifeStatusMessage(); },
            6512: () => { return new WarnOnPermaDeathMessage(); },
            6150: () => { return new GameRolePlayDelayedActionFinishedMessage(); },
            6153: () => { return new GameRolePlayDelayedActionMessage(); },
            6425: () => { return new GameRolePlayDelayedObjectUseMessage(); },
            6536: () => { return new ComicReadingBeginMessage(); },
            5675: () => { return new DocumentReadingBeginMessage(); },
            5644: () => { return new EmoteAddMessage(); },
            5689: () => { return new EmoteListMessage(); },
            5690: () => { return new EmotePlayAbstractMessage(); },
            5688: () => { return new EmotePlayErrorMessage(); },
            5691: () => { return new EmotePlayMassiveMessage(); },
            5683: () => { return new EmotePlayMessage(); },
            5685: () => { return new EmotePlayRequestMessage(); },
            5687: () => { return new EmoteRemoveMessage(); },
            6073: () => { return new GameRolePlayAggressionMessage(); },
            6191: () => { return new GameRolePlayAttackMonsterRequestMessage(); },
            5822: () => { return new GameRolePlayFightRequestCanceledMessage(); },
            5732: () => { return new GameRolePlayPlayerFightFriendlyAnswerMessage(); },
            5733: () => { return new GameRolePlayPlayerFightFriendlyAnsweredMessage(); },
            5937: () => { return new GameRolePlayPlayerFightFriendlyRequestedMessage(); },
            5731: () => { return new GameRolePlayPlayerFightRequestMessage(); },
            300: () => { return new GameRolePlayRemoveChallengeMessage(); },
            301: () => { return new GameRolePlayShowChallengeMessage(); },
            6279: () => { return new GameRolePlayArenaFightAnswerMessage(); },
            6276: () => { return new GameRolePlayArenaFightPropositionMessage(); },
            6281: () => { return new GameRolePlayArenaFighterStatusMessage(); },
            6280: () => { return new GameRolePlayArenaRegisterMessage(); },
            6284: () => { return new GameRolePlayArenaRegistrationStatusMessage(); },
            6575: () => { return new GameRolePlayArenaSwitchToFightServerMessage(); },
            6574: () => { return new GameRolePlayArenaSwitchToGameServerMessage(); },
            6282: () => { return new GameRolePlayArenaUnregisterMessage(); },
            6301: () => { return new GameRolePlayArenaUpdatePlayerInfosMessage(); },
            6315: () => { return new AccountHouseMessage(); },
            5738: () => { return new HouseBuyRequestMessage(); },
            5735: () => { return new HouseBuyResultMessage(); },
            5661: () => { return new HouseKickIndoorMerchantRequestMessage(); },
            5698: () => { return new HouseKickRequestMessage(); },
            5885: () => { return new HouseLockFromInsideRequestMessage(); },
            5734: () => { return new HousePropertiesMessage(); },
            5884: () => { return new HouseSellFromInsideRequestMessage(); },
            5697: () => { return new HouseSellRequestMessage(); },
            5737: () => { return new HouseSoldMessage(); },
            6137: () => { return new HouseToSellFilterMessage(); },
            6140: () => { return new HouseToSellListMessage(); },
            6139: () => { return new HouseToSellListRequestMessage(); },
            5701: () => { return new HouseGuildNoneMessage(); },
            5703: () => { return new HouseGuildRightsMessage(); },
            5700: () => { return new HouseGuildRightsViewMessage(); },
            5704: () => { return new HouseGuildShareRequestMessage(); },
            5748: () => { return new JobAllowMultiCraftRequestMessage(); },
            6593: () => { return new JobBookSubscriptionMessage(); },
            5651: () => { return new JobCrafterDirectoryAddMessage(); },
            5649: () => { return new JobCrafterDirectoryDefineSettingsMessage(); },
            6044: () => { return new JobCrafterDirectoryEntryMessage(); },
            6043: () => { return new JobCrafterDirectoryEntryRequestMessage(); },
            6046: () => { return new JobCrafterDirectoryListMessage(); },
            6047: () => { return new JobCrafterDirectoryListRequestMessage(); },
            5653: () => { return new JobCrafterDirectoryRemoveMessage(); },
            5652: () => { return new JobCrafterDirectorySettingsMessage(); },
            5655: () => { return new JobDescriptionMessage(); },
            5809: () => { return new JobExperienceMultiUpdateMessage(); },
            6599: () => { return new JobExperienceOtherPlayerUpdateMessage(); },
            5654: () => { return new JobExperienceUpdateMessage(); },
            5656: () => { return new JobLevelUpMessage(); },
            5747: () => { return new JobMultiCraftAvailableSkillsMessage(); },
            5666: () => { return new LockableChangeCodeMessage(); },
            5672: () => { return new LockableCodeResultMessage(); },
            5740: () => { return new LockableShowCodeDialogMessage(); },
            5671: () => { return new LockableStateUpdateAbstractMessage(); },
            5668: () => { return new LockableStateUpdateHouseDoorMessage(); },
            5669: () => { return new LockableStateUpdateStorageMessage(); },
            5667: () => { return new LockableUseCodeMessage(); },
            6448: () => { return new AlliancePrismDialogQuestionMessage(); },
            6445: () => { return new AllianceTaxCollectorDialogQuestionExtendedMessage(); },
            6110: () => { return new EntityTalkMessage(); },
            5642: () => { return new MapNpcsQuestStatusUpdateMessage(); },
            5618: () => { return new NpcDialogCreationMessage(); },
            5617: () => { return new NpcDialogQuestionMessage(); },
            5616: () => { return new NpcDialogReplyMessage(); },
            5900: () => { return new NpcGenericActionFailureMessage(); },
            5898: () => { return new NpcGenericActionRequestMessage(); },
            5619: () => { return new TaxCollectorDialogQuestionBasicMessage(); },
            5615: () => { return new TaxCollectorDialogQuestionExtendedMessage(); },
            3017: () => { return new ObjectGroundAddedMessage(); },
            5925: () => { return new ObjectGroundListAddedMessage(); },
            3014: () => { return new ObjectGroundRemovedMessage(); },
            5944: () => { return new ObjectGroundRemovedMultipleMessage(); },
            6026: () => { return new GameDataPlayFarmObjectAnimationMessage(); },
            5824: () => { return new PaddockPropertiesMessage(); },
            6018: () => { return new PaddockSellBuyDialogMessage(); },
            6161: () => { return new PaddockToSellFilterMessage(); },
            6138: () => { return new PaddockToSellListMessage(); },
            6141: () => { return new PaddockToSellListRequestMessage(); },
            6273: () => { return new AbstractPartyEventMessage(); },
            6274: () => { return new AbstractPartyMessage(); },
            6242: () => { return new DungeonPartyFinderAvailableDungeonsMessage(); },
            6240: () => { return new DungeonPartyFinderAvailableDungeonsRequestMessage(); },
            6248: () => { return new DungeonPartyFinderListenErrorMessage(); },
            6246: () => { return new DungeonPartyFinderListenRequestMessage(); },
            6243: () => { return new DungeonPartyFinderRegisterErrorMessage(); },
            6249: () => { return new DungeonPartyFinderRegisterRequestMessage(); },
            6241: () => { return new DungeonPartyFinderRegisterSuccessMessage(); },
            6247: () => { return new DungeonPartyFinderRoomContentMessage(); },
            6250: () => { return new DungeonPartyFinderRoomContentUpdateMessage(); },
            6080: () => { return new PartyAbdicateThroneMessage(); },
            5580: () => { return new PartyAcceptInvitationMessage(); },
            6254: () => { return new PartyCancelInvitationMessage(); },
            6251: () => { return new PartyCancelInvitationNotificationMessage(); },
            5583: () => { return new PartyCannotJoinErrorMessage(); },
            6261: () => { return new PartyDeletedMessage(); },
            5577: () => { return new PartyFollowMemberRequestMessage(); },
            5581: () => { return new PartyFollowStatusUpdateMessage(); },
            5588: () => { return new PartyFollowThisMemberRequestMessage(); },
            6283: () => { return new PartyInvitationArenaRequestMessage(); },
            6256: () => { return new PartyInvitationCancelledForGuestMessage(); },
            6263: () => { return new PartyInvitationDetailsMessage(); },
            6264: () => { return new PartyInvitationDetailsRequestMessage(); },
            6262: () => { return new PartyInvitationDungeonDetailsMessage(); },
            6244: () => { return new PartyInvitationDungeonMessage(); },
            6245: () => { return new PartyInvitationDungeonRequestMessage(); },
            5586: () => { return new PartyInvitationMessage(); },
            5585: () => { return new PartyInvitationRequestMessage(); },
            5576: () => { return new PartyJoinMessage(); },
            5592: () => { return new PartyKickRequestMessage(); },
            5590: () => { return new PartyKickedByMessage(); },
            5578: () => { return new PartyLeaderUpdateMessage(); },
            5594: () => { return new PartyLeaveMessage(); },
            5593: () => { return new PartyLeaveRequestMessage(); },
            5595: () => { return new PartyLocateMembersMessage(); },
            6270: () => { return new PartyLoyaltyStatusMessage(); },
            6252: () => { return new PartyMemberEjectedMessage(); },
            6342: () => { return new PartyMemberInFightMessage(); },
            5579: () => { return new PartyMemberRemoveMessage(); },
            6277: () => { return new PartyModifiableStatusMessage(); },
            6501: () => { return new PartyNameSetErrorMessage(); },
            6503: () => { return new PartyNameSetRequestMessage(); },
            6502: () => { return new PartyNameUpdateMessage(); },
            6260: () => { return new PartyNewGuestMessage(); },
            6306: () => { return new PartyNewMemberMessage(); },
            6269: () => { return new PartyPledgeLoyaltyRequestMessage(); },
            5582: () => { return new PartyRefuseInvitationMessage(); },
            5596: () => { return new PartyRefuseInvitationNotificationMessage(); },
            6175: () => { return new PartyRestrictedMessage(); },
            5574: () => { return new PartyStopFollowRequestMessage(); },
            6054: () => { return new PartyUpdateLightMessage(); },
            5575: () => { return new PartyUpdateMessage(); },
            6472: () => { return new PartyCompanionUpdateLightMessage(); },
            5739: () => { return new PurchasableDialogMessage(); },
            6092: () => { return new GuidedModeQuitRequestMessage(); },
            6088: () => { return new GuidedModeReturnRequestMessage(); },
            5626: () => { return new QuestListMessage(); },
            5623: () => { return new QuestListRequestMessage(); },
            6098: () => { return new QuestObjectiveValidatedMessage(); },
            6085: () => { return new QuestObjectiveValidationMessage(); },
            5643: () => { return new QuestStartRequestMessage(); },
            6091: () => { return new QuestStartedMessage(); },
            5625: () => { return new QuestStepInfoMessage(); },
            5622: () => { return new QuestStepInfoRequestMessage(); },
            6096: () => { return new QuestStepStartedMessage(); },
            6099: () => { return new QuestStepValidatedMessage(); },
            6097: () => { return new QuestValidatedMessage(); },
            5565: () => { return new SpellForgetUIMessage(); },
            5834: () => { return new SpellForgottenMessage(); },
            6011: () => { return new SpellItemBoostMessage(); },
            1202: () => { return new SpellUpgradeFailureMessage(); },
            5608: () => { return new SpellUpgradeRequestMessage(); },
            1201: () => { return new SpellUpgradeSuccessMessage(); },
            1700: () => { return new ValidateSpellForgetMessage(); },
            5610: () => { return new StatsUpgradeRequestMessage(); },
            5609: () => { return new StatsUpgradeResultMessage(); },
            6492: () => { return new PortalUseRequestMessage(); },
            6491: () => { return new TreasureHuntAvailableRetryCountUpdateMessage(); },
            6509: () => { return new TreasureHuntDigRequestAnswerFailedMessage(); },
            6484: () => { return new TreasureHuntDigRequestAnswerMessage(); },
            6485: () => { return new TreasureHuntDigRequestMessage(); },
            6483: () => { return new TreasureHuntFinishedMessage(); },
            6510: () => { return new TreasureHuntFlagRemoveRequestMessage(); },
            6507: () => { return new TreasureHuntFlagRequestAnswerMessage(); },
            6508: () => { return new TreasureHuntFlagRequestMessage(); },
            6487: () => { return new TreasureHuntGiveUpRequestMessage(); },
            6499: () => { return new TreasureHuntLegendaryRequestMessage(); },
            6486: () => { return new TreasureHuntMessage(); },
            6489: () => { return new TreasureHuntRequestAnswerMessage(); },
            6488: () => { return new TreasureHuntRequestMessage(); },
            6498: () => { return new TreasureHuntShowLegendaryUIMessage(); },
            6114: () => { return new GameRolePlaySpellAnimMessage(); },
            5502: () => { return new LeaveDialogMessage(); },
            5501: () => { return new LeaveDialogRequestMessage(); },
            6012: () => { return new PauseDialogMessage(); },
            5600: () => { return new FriendAddFailureMessage(); },
            4004: () => { return new FriendAddRequestMessage(); },
            5599: () => { return new FriendAddedMessage(); },
            5603: () => { return new FriendDeleteRequestMessage(); },
            5601: () => { return new FriendDeleteResultMessage(); },
            5605: () => { return new FriendJoinRequestMessage(); },
            5602: () => { return new FriendSetWarnOnConnectionMessage(); },
            6077: () => { return new FriendSetWarnOnLevelGainMessage(); },
            5606: () => { return new FriendSpouseFollowWithCompassRequestMessage(); },
            5604: () => { return new FriendSpouseJoinRequestMessage(); },
            5924: () => { return new FriendUpdateMessage(); },
            5630: () => { return new FriendWarnOnConnectionStateMessage(); },
            6078: () => { return new FriendWarnOnLevelGainStateMessage(); },
            4001: () => { return new FriendsGetListMessage(); },
            4002: () => { return new FriendsListMessage(); },
            6159: () => { return new GuildMemberSetWarnOnConnectionMessage(); },
            6160: () => { return new GuildMemberWarnOnConnectionStateMessage(); },
            5679: () => { return new IgnoredAddFailureMessage(); },
            5673: () => { return new IgnoredAddRequestMessage(); },
            5678: () => { return new IgnoredAddedMessage(); },
            5680: () => { return new IgnoredDeleteRequestMessage(); },
            5677: () => { return new IgnoredDeleteResultMessage(); },
            5676: () => { return new IgnoredGetListMessage(); },
            5674: () => { return new IgnoredListMessage(); },
            6355: () => { return new SpouseGetInformationsMessage(); },
            6356: () => { return new SpouseInformationsMessage(); },
            6265: () => { return new SpouseStatusMessage(); },
            6513: () => { return new WarnOnPermaDeathStateMessage(); },
            6506: () => { return new GuestLimitationMessage(); },
            6505: () => { return new GuestModeMessage(); },
            5908: () => { return new ChallengeFightJoinRefusedMessage(); },
            5549: () => { return new GuildChangeMemberParametersMessage(); },
            5706: () => { return new GuildCharacsUpgradeRequestMessage(); },
            5554: () => { return new GuildCreationResultMessage(); },
            5920: () => { return new GuildCreationStartedMessage(); },
            5546: () => { return new GuildCreationValidMessage(); },
            6424: () => { return new GuildFactsErrorMessage(); },
            6415: () => { return new GuildFactsMessage(); },
            6404: () => { return new GuildFactsRequestMessage(); },
            5550: () => { return new GuildGetInformationsMessage(); },
            6180: () => { return new GuildHouseRemoveMessage(); },
            5712: () => { return new GuildHouseTeleportRequestMessage(); },
            6181: () => { return new GuildHouseUpdateInformationMessage(); },
            5919: () => { return new GuildHousesInformationMessage(); },
            6422: () => { return new GuildInAllianceFactsMessage(); },
            5557: () => { return new GuildInformationsGeneralMessage(); },
            5597: () => { return new GuildInformationsMemberUpdateMessage(); },
            5558: () => { return new GuildInformationsMembersMessage(); },
            5959: () => { return new GuildInformationsPaddocksMessage(); },
            5636: () => { return new GuildInfosUpgradeMessage(); },
            5556: () => { return new GuildInvitationAnswerMessage(); },
            6115: () => { return new GuildInvitationByNameMessage(); },
            5551: () => { return new GuildInvitationMessage(); },
            5548: () => { return new GuildInvitationStateRecrutedMessage(); },
            5563: () => { return new GuildInvitationStateRecruterMessage(); },
            5552: () => { return new GuildInvitedMessage(); },
            5564: () => { return new GuildJoinedMessage(); },
            5887: () => { return new GuildKickRequestMessage(); },
            5562: () => { return new GuildLeftMessage(); },
            6062: () => { return new GuildLevelUpMessage(); },
            6413: () => { return new GuildListMessage(); },
            5923: () => { return new GuildMemberLeavingMessage(); },
            6061: () => { return new GuildMemberOnlineStatusMessage(); },
            5835: () => { return new GuildMembershipMessage(); },
            6328: () => { return new GuildModificationEmblemValidMessage(); },
            6327: () => { return new GuildModificationNameValidMessage(); },
            6324: () => { return new GuildModificationStartedMessage(); },
            6323: () => { return new GuildModificationValidMessage(); },
            6590: () => { return new GuildMotdMessage(); },
            6591: () => { return new GuildMotdSetErrorMessage(); },
            5952: () => { return new GuildPaddockBoughtMessage(); },
            5955: () => { return new GuildPaddockRemovedMessage(); },
            5957: () => { return new GuildPaddockTeleportRequestMessage(); },
            5699: () => { return new GuildSpellUpgradeRequestMessage(); },
            6435: () => { return new GuildVersatileInfoListMessage(); },
            6568: () => { return new AbstractTaxCollectorListMessage(); },
            5954: () => { return new GameRolePlayTaxCollectorFightRequestMessage(); },
            5717: () => { return new GuildFightJoinRequestMessage(); },
            5715: () => { return new GuildFightLeaveRequestMessage(); },
            5928: () => { return new GuildFightPlayersEnemiesListMessage(); },
            5929: () => { return new GuildFightPlayersEnemyRemoveMessage(); },
            5720: () => { return new GuildFightPlayersHelpersJoinMessage(); },
            5719: () => { return new GuildFightPlayersHelpersLeaveMessage(); },
            6235: () => { return new GuildFightTakePlaceRequestMessage(); },
            5918: () => { return new TaxCollectorAttackedMessage(); },
            5635: () => { return new TaxCollectorAttackedResultMessage(); },
            5634: () => { return new TaxCollectorErrorMessage(); },
            5930: () => { return new TaxCollectorListMessage(); },
            5917: () => { return new TaxCollectorMovementAddMessage(); },
            5633: () => { return new TaxCollectorMovementMessage(); },
            5915: () => { return new TaxCollectorMovementRemoveMessage(); },
            6455: () => { return new TaxCollectorStateUpdateMessage(); },
            6565: () => { return new TopTaxCollectorListMessage(); },
            6586: () => { return new IdolFightPreparationUpdateMessage(); },
            6585: () => { return new IdolListMessage(); },
            6580: () => { return new IdolPartyLostMessage(); },
            6583: () => { return new IdolPartyRefreshMessage(); },
            6582: () => { return new IdolPartyRegisterRequestMessage(); },
            6584: () => { return new IdolSelectErrorMessage(); },
            6587: () => { return new IdolSelectRequestMessage(); },
            6581: () => { return new IdolSelectedMessage(); },
            6339: () => { return new CharacterCapabilitiesMessage(); },
            6471: () => { return new CharacterLoadingCompleteMessage(); },
            5726: () => { return new OnConnectionEventMessage(); },
            6237: () => { return new ServerExperienceModificatorMessage(); },
            170: () => { return new SetCharacterRestrictionsMessage(); },
            5708: () => { return new InteractiveElementUpdatedMessage(); },
            5002: () => { return new InteractiveMapUpdateMessage(); },
            6112: () => { return new InteractiveUseEndedMessage(); },
            6384: () => { return new InteractiveUseErrorMessage(); },
            5001: () => { return new InteractiveUseRequestMessage(); },
            5745: () => { return new InteractiveUsedMessage(); },
            5709: () => { return new StatedElementUpdatedMessage(); },
            5716: () => { return new StatedMapUpdateMessage(); },
            6294: () => { return new TeleportBuddiesAnswerMessage(); },
            6289: () => { return new TeleportBuddiesMessage(); },
            6302: () => { return new TeleportBuddiesRequestedMessage(); },
            6293: () => { return new TeleportToBuddyAnswerMessage(); },
            6303: () => { return new TeleportToBuddyCloseMessage(); },
            6287: () => { return new TeleportToBuddyOfferMessage(); },
            5960: () => { return new TeleportDestinationsListMessage(); },
            5961: () => { return new TeleportRequestMessage(); },
            1604: () => { return new ZaapListMessage(); },
            6572: () => { return new ZaapRespawnSaveRequestMessage(); },
            6571: () => { return new ZaapRespawnUpdatedMessage(); },
            5537: () => { return new KamasUpdateMessage(); },
            6336: () => { return new ObjectAveragePricesErrorMessage(); },
            6334: () => { return new ObjectAveragePricesGetMessage(); },
            6335: () => { return new ObjectAveragePricesMessage(); },
            6569: () => { return new DecraftResultMessage(); },
            5508: () => { return new ExchangeAcceptMessage(); },
            5804: () => { return new ExchangeBidHouseBuyMessage(); },
            6272: () => { return new ExchangeBidHouseBuyResultMessage(); },
            5947: () => { return new ExchangeBidHouseGenericItemAddedMessage(); },
            5948: () => { return new ExchangeBidHouseGenericItemRemovedMessage(); },
            5949: () => { return new ExchangeBidHouseInListAddedMessage(); },
            5950: () => { return new ExchangeBidHouseInListRemovedMessage(); },
            6337: () => { return new ExchangeBidHouseInListUpdatedMessage(); },
            5945: () => { return new ExchangeBidHouseItemAddOkMessage(); },
            5946: () => { return new ExchangeBidHouseItemRemoveOkMessage(); },
            5807: () => { return new ExchangeBidHouseListMessage(); },
            5805: () => { return new ExchangeBidHousePriceMessage(); },
            5806: () => { return new ExchangeBidHouseSearchMessage(); },
            5803: () => { return new ExchangeBidHouseTypeMessage(); },
            6464: () => { return new ExchangeBidPriceForSellerMessage(); },
            5755: () => { return new ExchangeBidPriceMessage(); },
            5802: () => { return new ExchangeBidSearchOkMessage(); },
            5774: () => { return new ExchangeBuyMessage(); },
            5759: () => { return new ExchangeBuyOkMessage(); },
            6595: () => { return new ExchangeCraftCountModifiedMessage(); },
            6597: () => { return new ExchangeCraftCountRequestMessage(); },
            5794: () => { return new ExchangeCraftInformationObjectMessage(); },
            6579: () => { return new ExchangeCraftPaymentModificationRequestMessage(); },
            6578: () => { return new ExchangeCraftPaymentModifiedMessage(); },
            6188: () => { return new ExchangeCraftResultMagicWithObjectDescMessage(); },
            5790: () => { return new ExchangeCraftResultMessage(); },
            5999: () => { return new ExchangeCraftResultWithObjectDescMessage(); },
            6000: () => { return new ExchangeCraftResultWithObjectIdMessage(); },
            6598: () => { return new ExchangeCrafterJobLevelupMessage(); },
            5513: () => { return new ExchangeErrorMessage(); },
            5762: () => { return new ExchangeGuildTaxCollectorGetMessage(); },
            6562: () => { return new ExchangeHandleMountsStableMessage(); },
            5509: () => { return new ExchangeIsReadyMessage(); },
            5810: () => { return new ExchangeItemAutoCraftStopedMessage(); },
            5628: () => { return new ExchangeLeaveMessage(); },
            6055: () => { return new ExchangeMountFreeFromPaddockMessage(); },
            5981: () => { return new ExchangeMountStableErrorMessage(); },
            6056: () => { return new ExchangeMountSterilizeFromPaddockMessage(); },
            6561: () => { return new ExchangeMountsPaddockAddMessage(); },
            6559: () => { return new ExchangeMountsPaddockRemoveMessage(); },
            6555: () => { return new ExchangeMountsStableAddMessage(); },
            6557: () => { return new ExchangeMountsStableBornAddMessage(); },
            6556: () => { return new ExchangeMountsStableRemoveMessage(); },
            6554: () => { return new ExchangeMountsTakenFromPaddockMessage(); },
            5516: () => { return new ExchangeObjectAddedMessage(); },
            5515: () => { return new ExchangeObjectMessage(); },
            6238: () => { return new ExchangeObjectModifyPricedMessage(); },
            5520: () => { return new ExchangeObjectMoveKamaMessage(); },
            5518: () => { return new ExchangeObjectMoveMessage(); },
            5514: () => { return new ExchangeObjectMovePricedMessage(); },
            6184: () => { return new ExchangeObjectTransfertAllFromInvMessage(); },
            6032: () => { return new ExchangeObjectTransfertAllToInvMessage(); },
            6325: () => { return new ExchangeObjectTransfertExistingFromInvMessage(); },
            6326: () => { return new ExchangeObjectTransfertExistingToInvMessage(); },
            6183: () => { return new ExchangeObjectTransfertListFromInvMessage(); },
            6039: () => { return new ExchangeObjectTransfertListToInvMessage(); },
            6470: () => { return new ExchangeObjectTransfertListWithQuantityToInvMessage(); },
            6004: () => { return new ExchangeObjectUseInWorkshopMessage(); },
            6535: () => { return new ExchangeObjectsAddedMessage(); },
            5768: () => { return new ExchangeOkMultiCraftMessage(); },
            5772: () => { return new ExchangeOnHumanVendorRequestMessage(); },
            5784: () => { return new ExchangePlayerMultiCraftRequestMessage(); },
            5773: () => { return new ExchangePlayerRequestMessage(); },
            5511: () => { return new ExchangeReadyMessage(); },
            6001: () => { return new ExchangeReplayStopMessage(); },
            5787: () => { return new ExchangeReplyTaxVendorMessage(); },
            5505: () => { return new ExchangeRequestMessage(); },
            5986: () => { return new ExchangeRequestOnMountStockMessage(); },
            5753: () => { return new ExchangeRequestOnShopStockMessage(); },
            5779: () => { return new ExchangeRequestOnTaxCollectorMessage(); },
            5522: () => { return new ExchangeRequestedMessage(); },
            5523: () => { return new ExchangeRequestedTradeMessage(); },
            5778: () => { return new ExchangeSellMessage(); },
            5792: () => { return new ExchangeSellOkMessage(); },
            6389: () => { return new ExchangeSetCraftRecipeMessage(); },
            5907: () => { return new ExchangeShopStockMovementRemovedMessage(); },
            5909: () => { return new ExchangeShopStockMovementUpdatedMessage(); },
            6037: () => { return new ExchangeShopStockMultiMovementRemovedMessage(); },
            6038: () => { return new ExchangeShopStockMultiMovementUpdatedMessage(); },
            5910: () => { return new ExchangeShopStockStartedMessage(); },
            5783: () => { return new ExchangeShowVendorTaxMessage(); },
            5775: () => { return new ExchangeStartAsVendorMessage(); },
            5813: () => { return new ExchangeStartOkCraftMessage(); },
            5941: () => { return new ExchangeStartOkCraftWithInformationMessage(); },
            5767: () => { return new ExchangeStartOkHumanVendorMessage(); },
            5819: () => { return new ExchangeStartOkJobIndexMessage(); },
            5979: () => { return new ExchangeStartOkMountMessage(); },
            5991: () => { return new ExchangeStartOkMountWithOutPaddockMessage(); },
            5818: () => { return new ExchangeStartOkMulticraftCrafterMessage(); },
            5817: () => { return new ExchangeStartOkMulticraftCustomerMessage(); },
            5761: () => { return new ExchangeStartOkNpcShopMessage(); },
            5785: () => { return new ExchangeStartOkNpcTradeMessage(); },
            6600: () => { return new ExchangeStartOkRecycleTradeMessage(); },
            6567: () => { return new ExchangeStartOkRunesTradeMessage(); },
            5904: () => { return new ExchangeStartedBidBuyerMessage(); },
            5905: () => { return new ExchangeStartedBidSellerMessage(); },
            5512: () => { return new ExchangeStartedMessage(); },
            5984: () => { return new ExchangeStartedMountStockMessage(); },
            6129: () => { return new ExchangeStartedWithPodsMessage(); },
            6236: () => { return new ExchangeStartedWithStorageMessage(); },
            6589: () => { return new ExchangeStoppedMessage(); },
            5765: () => { return new ExchangeTypesExchangerDescriptionForUserMessage(); },
            5752: () => { return new ExchangeTypesItemsExchangerDescriptionForUserMessage(); },
            5786: () => { return new ExchangeWaitingResultMessage(); },
            5793: () => { return new ExchangeWeightMessage(); },
            5769: () => { return new ItemNoMoreAvailableMessage(); },
            6592: () => { return new JobBookSubscribeRequestMessage(); },
            6601: () => { return new RecycleResultMessage(); },
            6179: () => { return new UpdateMountBoostMessage(); },
            5521: () => { return new ExchangeKamaModifiedMessage(); },
            6020: () => { return new ExchangeMultiCraftCrafterCanUseHisRessourcesMessage(); },
            6021: () => { return new ExchangeMultiCraftSetCrafterCanUseHisRessourcesMessage(); },
            6008: () => { return new ExchangeObjectModifiedInBagMessage(); },
            5519: () => { return new ExchangeObjectModifiedMessage(); },
            6009: () => { return new ExchangeObjectPutInBagMessage(); },
            6010: () => { return new ExchangeObjectRemovedFromBagMessage(); },
            5517: () => { return new ExchangeObjectRemovedMessage(); },
            6533: () => { return new ExchangeObjectsModifiedMessage(); },
            6532: () => { return new ExchangeObjectsRemovedMessage(); },
            6030: () => { return new GoldAddedMessage(); },
            6162: () => { return new InventoryContentAndPresetMessage(); },
            3016: () => { return new InventoryContentMessage(); },
            3009: () => { return new InventoryWeightMessage(); },
            5725: () => { return new LivingObjectChangeSkinRequestMessage(); },
            5723: () => { return new LivingObjectDissociateMessage(); },
            6065: () => { return new LivingObjectMessageMessage(); },
            6066: () => { return new LivingObjectMessageRequestMessage(); },
            6462: () => { return new MimicryObjectAssociatedMessage(); },
            6457: () => { return new MimicryObjectEraseRequestMessage(); },
            6461: () => { return new MimicryObjectErrorMessage(); },
            6460: () => { return new MimicryObjectFeedAndAssociateRequestMessage(); },
            6458: () => { return new MimicryObjectPreviewMessage(); },
            3025: () => { return new ObjectAddedMessage(); },
            3022: () => { return new ObjectDeleteMessage(); },
            3024: () => { return new ObjectDeletedMessage(); },
            3005: () => { return new ObjectDropMessage(); },
            3004: () => { return new ObjectErrorMessage(); },
            6290: () => { return new ObjectFeedMessage(); },
            6017: () => { return new ObjectFoundWhileRecoltingMessage(); },
            6014: () => { return new ObjectJobAddedMessage(); },
            3029: () => { return new ObjectModifiedMessage(); },
            3010: () => { return new ObjectMovementMessage(); },
            3023: () => { return new ObjectQuantityMessage(); },
            3021: () => { return new ObjectSetPositionMessage(); },
            3019: () => { return new ObjectUseMessage(); },
            6234: () => { return new ObjectUseMultipleMessage(); },
            3013: () => { return new ObjectUseOnCellMessage(); },
            3003: () => { return new ObjectUseOnCharacterMessage(); },
            6033: () => { return new ObjectsAddedMessage(); },
            6034: () => { return new ObjectsDeletedMessage(); },
            6206: () => { return new ObjectsQuantityMessage(); },
            6519: () => { return new ObtainedItemMessage(); },
            6520: () => { return new ObtainedItemWithBonusMessage(); },
            5503: () => { return new SetUpdateMessage(); },
            6522: () => { return new SymbioticObjectAssociateRequestMessage(); },
            6527: () => { return new SymbioticObjectAssociatedMessage(); },
            6526: () => { return new SymbioticObjectErrorMessage(); },
            6523: () => { return new WrapperObjectAssociatedMessage(); },
            6524: () => { return new WrapperObjectDissociateRequestMessage(); },
            6529: () => { return new WrapperObjectErrorMessage(); },
            6602: () => { return new IdolsPresetDeleteMessage(); },
            6605: () => { return new IdolsPresetDeleteResultMessage(); },
            6603: () => { return new IdolsPresetSaveMessage(); },
            6604: () => { return new IdolsPresetSaveResultMessage(); },
            6606: () => { return new IdolsPresetUpdateMessage(); },
            6169: () => { return new InventoryPresetDeleteMessage(); },
            6173: () => { return new InventoryPresetDeleteResultMessage(); },
            6211: () => { return new InventoryPresetItemUpdateErrorMessage(); },
            6168: () => { return new InventoryPresetItemUpdateMessage(); },
            6210: () => { return new InventoryPresetItemUpdateRequestMessage(); },
            6329: () => { return new InventoryPresetSaveCustomMessage(); },
            6165: () => { return new InventoryPresetSaveMessage(); },
            6170: () => { return new InventoryPresetSaveResultMessage(); },
            6171: () => { return new InventoryPresetUpdateMessage(); },
            6167: () => { return new InventoryPresetUseMessage(); },
            6163: () => { return new InventoryPresetUseResultMessage(); },
            1200: () => { return new SpellListMessage(); },
            5646: () => { return new StorageInventoryContentMessage(); },
            5645: () => { return new StorageKamasUpdateMessage(); },
            5648: () => { return new StorageObjectRemoveMessage(); },
            5647: () => { return new StorageObjectUpdateMessage(); },
            6035: () => { return new StorageObjectsRemoveMessage(); },
            6036: () => { return new StorageObjectsUpdateMessage(); },
            6521: () => { return new AccessoryPreviewErrorMessage(); },
            6517: () => { return new AccessoryPreviewMessage(); },
            6518: () => { return new AccessoryPreviewRequestMessage(); },
            6134: () => { return new PopupWarningMessage(); },
            6493: () => { return new AreaFightModificatorUpdateMessage(); },
            6042: () => { return new PrismAttackRequestMessage(); },
            6452: () => { return new PrismFightAddedMessage(); },
            5893: () => { return new PrismFightAttackerAddMessage(); },
            5897: () => { return new PrismFightAttackerRemoveMessage(); },
            5895: () => { return new PrismFightDefenderAddMessage(); },
            5892: () => { return new PrismFightDefenderLeaveMessage(); },
            5843: () => { return new PrismFightJoinLeaveRequestMessage(); },
            6453: () => { return new PrismFightRemovedMessage(); },
            6040: () => { return new PrismFightStateUpdateMessage(); },
            5901: () => { return new PrismFightSwapRequestMessage(); },
            5853: () => { return new PrismInfoCloseMessage(); },
            5859: () => { return new PrismInfoInValidMessage(); },
            5844: () => { return new PrismInfoJoinLeaveRequestMessage(); },
            6531: () => { return new PrismModuleExchangeRequestMessage(); },
            6466: () => { return new PrismSetSabotagedRefusedMessage(); },
            6468: () => { return new PrismSetSabotagedRequestMessage(); },
            6442: () => { return new PrismSettingsErrorMessage(); },
            6437: () => { return new PrismSettingsRequestMessage(); },
            6041: () => { return new PrismUseRequestMessage(); },
            6451: () => { return new PrismsInfoValidMessage(); },
            6440: () => { return new PrismsListMessage(); },
            6441: () => { return new PrismsListRegisterMessage(); },
            6438: () => { return new PrismsListUpdateMessage(); },
            6058: () => { return new AlignmentRankUpdateMessage(); },
            6443: () => { return new SetEnableAVARequestMessage(); },
            1810: () => { return new SetEnablePVPRequestMessage(); },
            6454: () => { return new UpdateMapPlayersAgressableStatusMessage(); },
            6456: () => { return new UpdateSelfAgressableStatusMessage(); },
            6079: () => { return new CharacterReportMessage(); },
            6053: () => { return new CinematicMessage(); },
            6266: () => { return new URLOpenMessage(); },
            6227: () => { return new ShortcutBarAddErrorMessage(); },
            6225: () => { return new ShortcutBarAddRequestMessage(); },
            6231: () => { return new ShortcutBarContentMessage(); },
            6229: () => { return new ShortcutBarRefreshMessage(); },
            6222: () => { return new ShortcutBarRemoveErrorMessage(); },
            6228: () => { return new ShortcutBarRemoveRequestMessage(); },
            6224: () => { return new ShortcutBarRemovedMessage(); },
            6226: () => { return new ShortcutBarSwapErrorMessage(); },
            6230: () => { return new ShortcutBarSwapRequestMessage(); },
            6045: () => { return new ContactLookErrorMessage(); },
            5934: () => { return new ContactLookMessage(); },
            5935: () => { return new ContactLookRequestByIdMessage(); },
            5932: () => { return new ContactLookRequestMessage(); },
            6538: () => { return new StartupActionAddMessage(); },
            1304: () => { return new StartupActionFinishedMessage(); },
            6537: () => { return new StartupActionsAllAttributionMessage(); },
            1302: () => { return new StartupActionsExecuteMessage(); },
            1301: () => { return new StartupActionsListMessage(); },
            1303: () => { return new StartupActionsObjetAttributionMessage(); },
            5542: () => { return new SubscriptionLimitationMessage(); },
            5573: () => { return new SubscriptionZoneMessage(); },
            6368: () => { return new OrnamentGainedMessage(); },
            6370: () => { return new OrnamentSelectErrorMessage(); },
            6374: () => { return new OrnamentSelectRequestMessage(); },
            6369: () => { return new OrnamentSelectedMessage(); },
            6364: () => { return new TitleGainedMessage(); },
            6371: () => { return new TitleLostMessage(); },
            6373: () => { return new TitleSelectErrorMessage(); },
            6365: () => { return new TitleSelectRequestMessage(); },
            6366: () => { return new TitleSelectedMessage(); },
            6367: () => { return new TitlesAndOrnamentsListMessage(); },
            6363: () => { return new TitlesAndOrnamentsListRequestMessage(); },
            6463: () => { return new ClientUIOpenedByObjectMessage(); },
            6459: () => { return new ClientUIOpenedMessage(); },
            1: () => { return new ProtocolRequired(); },
            10: () => { return new LoginQueueStatusMessage(); },
            6100: () => { return new QueueStatusMessage(); },
            6267: () => { return new TrustStatusMessage(); },
            6156: () => { return new CheckFileMessage(); },
            6154: () => { return new CheckFileRequestMessage(); },
            6372: () => { return new CheckIntegrityMessage(); },
            5607: () => { return new ClientKeyMessage(); },
            6253: () => { return new RawDataMessage(); },
            189: () => { return new SystemMessageDisplayMessage(); },
            1511: () => { return new DownloadCurrentSpeedMessage(); },
            1513: () => { return new DownloadErrorMessage(); },
            1510: () => { return new DownloadGetCurrentSpeedRequestMessage(); },
            1503: () => { return new DownloadPartMessage(); },
            1512: () => { return new DownloadSetSpeedRequestMessage(); },
            1506: () => { return new GetPartInfoMessage(); },
            1501: () => { return new GetPartsListMessage(); },
            1508: () => { return new PartInfoMessage(); },
            1502: () => { return new PartsListMessage(); },
            6275: () => { return new MailStatusMessage(); },
            6292: () => { return new NewMailMessage(); },
            6345: () => { return new KrosmasterAuthTokenErrorMessage(); },
            6351: () => { return new KrosmasterAuthTokenMessage(); },
            6346: () => { return new KrosmasterAuthTokenRequestMessage(); },
            6343: () => { return new KrosmasterInventoryErrorMessage(); },
            6350: () => { return new KrosmasterInventoryMessage(); },
            6344: () => { return new KrosmasterInventoryRequestMessage(); },
            6347: () => { return new KrosmasterPlayingStatusMessage(); },
            6348: () => { return new KrosmasterTransferMessage(); },
            6349: () => { return new KrosmasterTransferRequestMessage(); },
            6594: () => { return new ClientYouAreDrunkMessage(); }
        };

        public static parse(param1: ICustomDataInput, param2: number, param3: number): INetworkMessage {
            let _loc4_ = MessageReceiver._list[param2];
            if (!_loc4_) {
                console.log('Unknown packet received (ID ' + param2 + ', length ' + param3 + ')');
                return null;
            }
            var _loc5_: INetworkMessage = _loc4_();
            _loc5_.unpack(param1, param3);
            return _loc5_;
        }
    }


    export class Metadata {
        static PROTOCOL_BUILD = 1666;
        static PROTOCOL_REQUIRED_BUILD = 1666;
        static PROTOCOL_DATE = 'Mon, 17 Aug 2015 15:51:44 +0200';
        static PROTOCOL_VISIBILITY = 'local';
    }
    export enum ProtocolConstantsEnum {
        MAP_CELL_COUNT = 560,
        MAX_LEVEL = 200,
        MAX_GUILD_LEVEL = 200,
        MAX_MOUNT_LEVEL = 100,
        MAX_CHAT_LEN = 512,
        USER_MAX_CHAT_LEN = 256,
        MAX_STAT_LEN = 512,
        MAX_STAT_BY_MSG = 20,
        MIN_LOGIN_LEN = 3,
        MAX_LOGIN_LEN = 50,
        MIN_PLAYER_NAME_LEN = 2,
        MAX_PLAYER_NAME_LEN = 20,
        MIN_NICK_LEN = 2,
        MAX_NICK_LEN = 30,
        MIN_GUILDNAME_LEN = 3,
        MAX_GUILDNAME_LEN = 30,
        MIN_ALLIANCENAME_LEN = 3,
        MAX_ALLIANCENAME_LEN = 30,
        MIN_ALLIANCETAG_LEN = 3,
        MAX_ALLIANCETAG_LEN = 5,
        MIN_PARTY_NAME_LEN = 0,
        MAX_PARTY_NAME_LEN = 25,
        MAX_PLAYER_COLOR = 5,
        MAX_ENTITY_COLOR = 10,
        MAX_PLAYERS_PER_TEAM = 8,
        MAX_MEMBERS_PER_PARTY = 8,
        MAX_GUESTS_PER_PARTY = 7,
        MAX_MEMBERS_PER_ARENA_PARTY = 5,
        MAX_MONSTERS_IN_GROUP_ON_MAP = 16,
        MAX_CHAT_OBJECT_REF = 16,
        NOT_EQUIPED = 63,
        MAX_EQUIPED = 255,
        SLOTS_EQUIPABLE_BY_USER = 16,
        MAX_CRAFT_SLOT = 9,
        MAX_JOB_LEVEL = 200,
        MAX_HONOR = 20000,
        MAX_SHORTCUT = 99,
        MAX_ARENA_RANK = 2300,
        CHAR_MIN_LEVEL_ARENA = 50,
        CHAR_MIN_LEVEL_RIDE = 60,
        MAX_DUNGEON_REGISTER = 10,
        MIN_RIDE_NAME_LEN = 0,
        MAX_RIDE_NAME_LEN = 16,
        MAX_EFFECTS_COUNT = 100,
        MAX_LOCKABLE_CODE_LEN = 8,
        MAX_PRESET_ITEM_COUNT = 24,
        MIN_OBJ_COUNT_BY_XFERT = 1,
        MAX_OBJ_COUNT_BY_XFERT = 800,
        MAX_OBJ_COUNT_BY_DECRAFT = 50,
        MAX_WAVE = 100,
        MAX_OBJECT_EFFECT_STRING_LEN = 30,
        MAX_PLAYER_OR_ACCOUNT_NAME_LEN = 31,
        MAX_MEMBERS_PER_GUILD = 240,
        MAX_ADDITIONNAL_PER_CARAC = 100,
        MAX_RECONNECTION_ATTEMPTS = 5
    }

    export enum AccessoryPreviewErrorEnum {
        PREVIEW_ERROR = 0,
        PREVIEW_COOLDOWN = 1,
        PREVIEW_BAD_ITEM = 2
    }
    export enum AggressableStatusEnum {
        NON_AGGRESSABLE = 0,
        PvP_ENABLED_AGGRESSABLE = 10,
        PvP_ENABLED_NON_AGGRESSABLE = 11,
        AvA_ENABLED_AGGRESSABLE = 20,
        AvA_ENABLED_NON_AGGRESSABLE = 21,
        AvA_DISQUALIFIED = 22,
        AvA_PREQUALIFIED_AGGRESSABLE = 23
    }
    export enum AlignmentSideEnum {
        ALIGNMENT_UNKNOWN = -2,
        ALIGNMENT_WITHOUT = -1,
        ALIGNMENT_NEUTRAL = 0,
        ALIGNMENT_ANGEL = 1,
        ALIGNMENT_EVIL = 2,
        ALIGNMENT_MERCENARY = 3
    }
    export enum AllianceRightsBitEnum {
        ALLIANCE_RIGHT_NONE = 0,
        ALLIANCE_RIGHT_BOSS = 1,
        ALLIANCE_RIGHT_MANAGE_PRISMS = 2,
        ALLIANCE_RIGHT_TALK_IN_CHAN = 4,
        ALLIANCE_RIGHT_RECRUIT_GUILDS = 8,
        ALLIANCE_RIGHT_KICK_GUILDS = 16,
        ALLIANCE_RIGHT_MANAGE_RIGHTS = 32
    }
    export enum BreedEnum {
        UNDEFINED = 0,
        Feca = 1,
        Osamodas = 2,
        Enutrof = 3,
        Sram = 4,
        Xelor = 5,
        Ecaflip = 6,
        Eniripsa = 7,
        Iop = 8,
        Cra = 9,
        Sadida = 10,
        Sacrieur = 11,
        Pandawa = 12,
        Roublard = 13,
        Zobal = 14,
        Steamer = 15,
        Eliotrope = 16,
        SUMMONED = -1,
        MONSTER = -2,
        MONSTER_GROUP = -3,
        NPC = -4,
        HUMAN_VENDOR = -5,
        TAX_COLLECTOR = -6,
        MUTANT = -7,
        MUTANT_IN_DUNGEON = -8,
        MOUNT_OUTSIDE = -9,
        PRISM = -10,
        INCARNATION = -11
    }
    export enum BuildTypeEnum {
        RELEASE = 0,
        BETA = 1,
        ALPHA = 2,
        TESTING = 3,
        INTERNAL = 4,
        DEBUG = 5,
        EXPERIMENTAL = 6
    }
    export enum CharacterCreationResultEnum {
        OK = 0,
        ERR_NO_REASON = 1,
        ERR_INVALID_NAME = 2,
        ERR_NAME_ALREADY_EXISTS = 3,
        ERR_TOO_MANY_CHARACTERS = 4,
        ERR_NOT_ALLOWED = 5,
        ERR_NEW_PLAYER_NOT_ALLOWED = 6,
        ERR_RESTRICED_ZONE = 7
    }
    export enum CharacterDeletionErrorEnum {
        DEL_ERR_NO_REASON = 1,
        DEL_ERR_TOO_MANY_CHAR_DELETION = 2,
        DEL_ERR_BAD_SECRET_ANSWER = 3,
        DEL_ERR_RESTRICED_ZONE = 4
    }
    export enum CharacterInventoryPositionEnum {
        ACCESSORY_POSITION_HAT = 6,
        ACCESSORY_POSITION_CAPE = 7,
        ACCESSORY_POSITION_BELT = 3,
        ACCESSORY_POSITION_BOOTS = 5,
        ACCESSORY_POSITION_AMULET = 0,
        ACCESSORY_POSITION_SHIELD = 15,
        ACCESSORY_POSITION_WEAPON = 1,
        ACCESSORY_POSITION_PETS = 8,
        INVENTORY_POSITION_RING_LEFT = 2,
        INVENTORY_POSITION_RING_RIGHT = 4,
        INVENTORY_POSITION_DOFUS_1 = 9,
        INVENTORY_POSITION_DOFUS_2 = 10,
        INVENTORY_POSITION_DOFUS_3 = 11,
        INVENTORY_POSITION_DOFUS_4 = 12,
        INVENTORY_POSITION_DOFUS_5 = 13,
        INVENTORY_POSITION_DOFUS_6 = 14,
        INVENTORY_POSITION_MOUNT = 16,
        INVENTORY_POSITION_MUTATION = 20,
        INVENTORY_POSITION_BOOST_FOOD = 21,
        INVENTORY_POSITION_FIRST_BONUS = 22,
        INVENTORY_POSITION_SECOND_BONUS = 23,
        INVENTORY_POSITION_FIRST_MALUS = 24,
        INVENTORY_POSITION_SECOND_MALUS = 25,
        INVENTORY_POSITION_ROLEPLAY_BUFFER = 26,
        INVENTORY_POSITION_FOLLOWER = 27,
        INVENTORY_POSITION_COMPANION = 28,
        INVENTORY_POSITION_NOT_EQUIPED = 63
    }
    export enum CharacterRemodelingEnum {
        CHARACTER_REMODELING_NOT_APPLICABLE = 0,
        CHARACTER_REMODELING_NAME = 1,
        CHARACTER_REMODELING_COLORS = 2,
        CHARACTER_REMODELING_COSMETIC = 4,
        CHARACTER_REMODELING_BREED = 8,
        CHARACTER_REMODELING_GENDER = 16
    }
    export enum CharacterSpellModificationTypeEnum {
        INVALID_MODIFICATION = 0,
        RANGEABLE = 1,
        DAMAGE = 2,
        BASE_DAMAGE = 3,
        HEAL_BONUS = 4,
        AP_COST = 5,
        CAST_INTERVAL = 6,
        CAST_INTERVAL_SET = 7,
        CRITICAL_HIT_BONUS = 8,
        CAST_LINE = 9,
        LOS = 10,
        MAX_CAST_PER_TURN = 11,
        MAX_CAST_PER_TARGET = 12,
        RANGE = 13
    }
    export enum ChatActivableChannelsEnum {
        CHANNEL_GLOBAL = 0,
        CHANNEL_TEAM = 1,
        CHANNEL_GUILD = 2,
        CHANNEL_ALLIANCE = 3,
        CHANNEL_PARTY = 4,
        CHANNEL_SALES = 5,
        CHANNEL_SEEK = 6,
        CHANNEL_NOOB = 7,
        CHANNEL_ADMIN = 8,
        CHANNEL_ADS = 12,
        CHANNEL_ARENA = 13,
        PSEUDO_CHANNEL_PRIVATE = 9,
        PSEUDO_CHANNEL_INFO = 10,
        PSEUDO_CHANNEL_FIGHT_LOG = 11
    }
    export enum ChatChannelsMultiEnum {
        CHANNEL_GLOBAL = 0,
        CHANNEL_TEAM = 1,
        CHANNEL_GUILD = 2,
        CHANNEL_ALLIANCE = 3,
        CHANNEL_PARTY = 4,
        CHANNEL_SALES = 5,
        CHANNEL_SEEK = 6,
        CHANNEL_NOOB = 7,
        CHANNEL_ADMIN = 8,
        CHANNEL_ADS = 12,
        CHANNEL_ARENA = 13
    }
    export enum ChatErrorEnum {
        CHAT_ERROR_UNKNOWN = 0,
        CHAT_ERROR_RECEIVER_NOT_FOUND = 1,
        CHAT_ERROR_INTERIOR_MONOLOGUE = 2,
        CHAT_ERROR_NO_GUILD = 3,
        CHAT_ERROR_NO_PARTY = 4,
        CHAT_ERROR_ALLIANCE = 5,
        CHAT_ERROR_INVALID_MAP = 6,
        CHAT_ERROR_NO_PARTY_ARENA = 7,
        CHAT_ERROR_NO_TEAM = 8
    }
    export enum ClientInstallTypeEnum {
        CLIENT_INSTALL_UNKNOWN = 0,
        CLIENT_BUNDLE = 1,
        CLIENT_STREAMING = 2
    }
    export enum ClientTechnologyEnum {
        CLIENT_TECHNOLOGY_UNKNOWN = 0,
        CLIENT_AIR = 1,
        CLIENT_FLASH = 2
    }
    export enum CompassTypeEnum {
        COMPASS_TYPE_SIMPLE = 0,
        COMPASS_TYPE_SPOUSE = 1,
        COMPASS_TYPE_PARTY = 2,
        COMPASS_TYPE_PVP_SEEK = 3,
        COMPASS_TYPE_QUEST = 4
    }
    export enum ConsoleMessageTypeEnum {
        CONSOLE_TEXT_MESSAGE = 0,
        CONSOLE_INFO_MESSAGE = 1,
        CONSOLE_ERR_MESSAGE = 2
    }
    export enum CraftResultEnum {
        CRAFT_IMPOSSIBLE = 0,
        CRAFT_FAILED = 1,
        CRAFT_SUCCESS = 2,
        CRAFT_NEUTRAL = 3
    }
    export enum DebugLevelEnum {
        LEVEL_TRACE = 0,
        LEVEL_DEBUG = 1,
        LEVEL_INFO = 2,
        LEVEL_WARN = 3,
        LEVEL_ERROR = 4,
        LEVEL_FATAL = 5
    }
    export enum DelayedActionTypeEnum {
        DELAYED_ACTION_DISCONNECT = 0,
        DELAYED_ACTION_OBJECT_USE = 1,
        DELAYED_ACTION_JOIN_CHARACTER = 2,
        DELAYED_ACTION_AGGRESSION_IMMUNE = 3
    }
    export enum DialogTypeEnum {
        DIALOG_BOOK = 0,
        DIALOG_DIALOG = 1,
        DIALOG_LOCKABLE = 2,
        DIALOG_PURCHASABLE = 3,
        DIALOG_GUILD_INVITATION = 4,
        DIALOG_GUILD_CREATE = 5,
        DIALOG_GUILD_RENAME = 6,
        DIALOG_MARRIAGE = 7,
        DIALOG_DUNGEON_MEETING = 8,
        DIALOG_SPELL_FORGET = 9,
        DIALOG_TELEPORTER = 10,
        DIALOG_EXCHANGE = 11,
        DIALOG_ALLIANCE_INVITATION = 12,
        DIALOG_ALLIANCE_CREATE = 13,
        DIALOG_ALLIANCE_RENAME = 14
    }
    export enum DirectionsEnum {
        DIRECTION_EAST = 0,
        DIRECTION_SOUTH_EAST = 1,
        DIRECTION_SOUTH = 2,
        DIRECTION_SOUTH_WEST = 3,
        DIRECTION_WEST = 4,
        DIRECTION_NORTH_WEST = 5,
        DIRECTION_NORTH = 6,
        DIRECTION_NORTH_EAST = 7
    }
    export enum ExchangeErrorEnum {
        REQUEST_IMPOSSIBLE = 1,
        REQUEST_CHARACTER_OCCUPIED = 2,
        REQUEST_CHARACTER_JOB_NOT_EQUIPED = 3,
        REQUEST_CHARACTER_TOOL_TOO_FAR = 4,
        REQUEST_CHARACTER_OVERLOADED = 5,
        REQUEST_CHARACTER_NOT_SUSCRIBER = 6,
        REQUEST_CHARACTER_RESTRICTED = 7,
        REQUEST_CHARACTER_GUEST = 8,
        SELL_ERROR = 63,
        BUY_ERROR = 64,
        MOUNT_PADDOCK_ERROR = 10,
        BID_SEARCH_ERROR = 11
    }
    export enum ExchangeReplayStopReasonEnum {
        STOPPED_REASON_OK = 1,
        STOPPED_REASON_USER = 2,
        STOPPED_REASON_MISSING_RESSOURCE = 3,
        STOPPED_REASON_IMPOSSIBLE_MODIFICATION = 4
    }
    export enum ExchangeTypeEnum {
        NPC_SHOP = 0,
        PLAYER_TRADE = 1,
        NPC_TRADE = 2,
        CRAFT = 3,
        DISCONNECTED_VENDOR = 4,
        STORAGE = 5,
        SHOP_STOCK = 6,
        TAXCOLLECTOR = 8,
        NPC_MODIFY_TRADE = 9,
        BIDHOUSE_SELL = 10,
        BIDHOUSE_BUY = 11,
        MULTICRAFT_CRAFTER = 12,
        MULTICRAFT_CUSTOMER = 13,
        JOB_INDEX = 14,
        MOUNT = 15,
        MOUNT_STABLE = 16,
        NPC_RESURECT_PET = 17,
        NPC_TRADE_MOUNT = 18,
        REALESTATE_HOUSE = 19,
        REALESTATE_FARM = 20,
        RUNES_TRADE = 21,
        RECYCLE_TRADE = 22
    }
    export enum FightDispellableEnum {
        DISPELLABLE = 1,
        DISPELLABLE_BY_DEATH = 2,
        DISPELLABLE_BY_STRONG_DISPEL = 3,
        REALLY_NOT_DISPELLABLE = 4
    }
    export enum FightOptionsEnum {
        FIGHT_OPTION_SET_SECRET = 0,
        FIGHT_OPTION_SET_TO_PARTY_ONLY = 1,
        FIGHT_OPTION_SET_CLOSED = 2,
        FIGHT_OPTION_ASK_FOR_HELP = 3
    }
    export enum FightOutcomeEnum {
        RESULT_LOST = 0,
        RESULT_DRAW = 1,
        RESULT_VICTORY = 2,
        RESULT_TAX = 5,
        RESULT_DEFENDER_GROUP = 6
    }
    export enum FightSpellCastCriticalEnum {
        NORMAL = 1,
        CRITICAL_HIT = 2,
        CRITICAL_FAIL = 3
    }
    export enum FightTypeEnum {
        FIGHT_TYPE_CHALLENGE = 0,
        FIGHT_TYPE_AGRESSION = 1,
        FIGHT_TYPE_PvMA = 2,
        FIGHT_TYPE_MXvM = 3,
        FIGHT_TYPE_PvM = 4,
        FIGHT_TYPE_PvT = 5,
        FIGHT_TYPE_PvMU = 6,
        FIGHT_TYPE_PVP_ARENA = 7,
        FIGHT_TYPE_Koh = 8,
        FIGHT_TYPE_PvPr = 9
    }
    export enum FighterRefusedReasonEnum {
        FIGHTER_REFUSED = -1,
        FIGHTER_ACCEPTED = 0,
        CHALLENGE_FULL = 1,
        TEAM_FULL = 2,
        WRONG_ALIGNMENT = 3,
        WRONG_GUILD = 4,
        TOO_LATE = 5,
        MUTANT_REFUSED = 6,
        WRONG_MAP = 7,
        JUST_RESPAWNED = 8,
        IM_OCCUPIED = 9,
        OPPONENT_OCCUPIED = 10,
        FIGHT_MYSELF = 11,
        INSUFFICIENT_RIGHTS = 12,
        MEMBER_ACCOUNT_NEEDED = 13,
        OPPONENT_NOT_MEMBER = 14,
        TEAM_LIMITED_BY_MAINCHARACTER = 15,
        MULTIACCOUNT_NOT_ALLOWED = 16,
        GHOST_REFUSED = 17,
        RESTRICTED_ACCOUNT = 19,
        WRONG_ALLIANCE = 20,
        AVA_ZONE = 21,
        COMPANION_REFUSED = 22,
        NOT_ENOUGH_ROOM = 23,
        GUEST_ACCOUNT = 24
    }
    export enum GameActionFightInvisibilityStateEnum {
        INVISIBLE = 1,
        DETECTED = 2,
        VISIBLE = 3
    }
    export enum GameActionMarkCellsTypeEnum {
        CELLS_CIRCLE = 0,
        CELLS_CROSS = 1,
        CELLS_SQUARE = 2
    }
    export enum GameActionMarkTypeEnum {
        GLYPH = 1,
        TRAP = 2,
        WALL = 3,
        PORTAL = 4
    }
    export enum GameContextEnum {
        ROLE_PLAY = 1,
        FIGHT = 2
    }
    export enum GameHierarchyEnum {
        UNAVAILABLE = -1,
        PLAYER = 0,
        MODERATOR = 10,
        GAMEMASTER_PADAWAN = 20,
        GAMEMASTER = 30,
        ADMIN = 40
    }
    export enum GuestLimitationEnum {
        LIMITED_TO_REGISTERED = 0,
        GUEST_LIMIT_ON_JOB_XP = 1,
        GUEST_LIMIT_ON_JOB_USE = 2,
        GUEST_LIMIT_ON_MAP = 3,
        GUEST_LIMIT_ON_ITEM = 4,
        GUEST_LIMIT_ON_VENDOR = 5,
        GUEST_LIMIT_ON_CHAT = 6,
        GUEST_LIMIT_ON_GUILD = 7
    }
    export enum GuildInformationsTypeEnum {
        INFO_GENERAL = 1,
        INFO_MEMBERS = 2,
        INFO_BOOSTS = 3,
        INFO_PADDOCKS = 4,
        INFO_HOUSES = 5,
        INFO_TAX_COLLECTOR_GUILD_ONLY = 6,
        INFO_TAX_COLLECTOR_ALLIANCE = 7,
        INFO_TAX_COLLECTOR_LEAVE = 8
    }
    export enum GuildRightsBitEnum {
        GUILD_RIGHT_NONE = 0,
        GUILD_RIGHT_BOSS = 1,
        GUILD_RIGHT_MANAGE_GUILD_BOOSTS = 2,
        GUILD_RIGHT_MANAGE_RIGHTS = 4,
        GUILD_RIGHT_INVITE_NEW_MEMBERS = 8,
        GUILD_RIGHT_BAN_MEMBERS = 16,
        GUILD_RIGHT_MANAGE_XP_CONTRIBUTION = 32,
        GUILD_RIGHT_MANAGE_RANKS = 64,
        GUILD_RIGHT_HIRE_TAX_COLLECTOR = 128,
        GUILD_RIGHT_MANAGE_MY_XP_CONTRIBUTION = 256,
        GUILD_RIGHT_COLLECT = 512,
        GUILD_RIGHT_USE_PADDOCKS = 4096,
        GUILD_RIGHT_ORGANIZE_PADDOCKS = 8192,
        GUILD_RIGHT_TAKE_OTHERS_MOUNTS_IN_PADDOCKS = 16384,
        GUILD_RIGHT_DEFENSE_PRIORITY = 32768,
        GUILD_RIGHT_COLLECT_MY_TAX_COLLECTOR = 65536,
        GUILD_RIGHT_SET_ALLIANCE_PRISM = 131072,
        GUILD_RIGHT_TALK_IN_ALLIANCE_CHAN = 262144
    }
    export enum HardcoreOrEpicDeathStateEnum {
        DEATH_STATE_ALIVE = 0,
        DEATH_STATE_DEAD = 1,
        DEATH_STATE_WAITING_CONFIRMATION = 2
    }
    export enum IdentificationFailureReasonEnum {
        BAD_VERSION = 1,
        WRONG_CREDENTIALS = 2,
        BANNED = 3,
        KICKED = 4,
        IN_MAINTENANCE = 5,
        TOO_MANY_ON_IP = 6,
        TIME_OUT = 7,
        BAD_IPRANGE = 8,
        CREDENTIALS_RESET = 9,
        EMAIL_UNVALIDATED = 10,
        OTP_TIMEOUT = 11,
        SERVICE_UNAVAILABLE = 53,
        EXTERNAL_ACCOUNT_LINK_REFUSED = 61,
        EXTERNAL_ACCOUNT_ALREADY_LINKED = 62,
        UNKNOWN_AUTH_ERROR = 99,
        SPARE = 100
    }
    export enum ListAddFailureEnum {
        LIST_ADD_FAILURE_UNKNOWN = 0,
        LIST_ADD_FAILURE_OVER_QUOTA = 1,
        LIST_ADD_FAILURE_NOT_FOUND = 2,
        LIST_ADD_FAILURE_EGOCENTRIC = 3,
        LIST_ADD_FAILURE_IS_DOUBLE = 4
    }
    export enum MapObstacleStateEnum {
        OBSTACLE_OPENED = 1,
        OBSTACLE_CLOSED = 2
    }
    export enum MountEquipedErrorEnum {
        UNSET = 0,
        SET = 1,
        RIDING = 2
    }
    export enum NicknameErrorEnum {
        ALREADY_USED = 1,
        SAME_AS_LOGIN = 2,
        TOO_SIMILAR_TO_LOGIN = 3,
        INVALID_NICK = 4,
        UNKNOWN_NICK_ERROR = 99
    }
    export enum NicknameGeneratingFailureEnum {
        NICKNAME_GENERATOR_RETRY_TOO_SHORT = 1,
        NICKNAME_GENERATOR_UNAVAILABLE = 2
    }
    export enum ObjectErrorEnum {
        INVENTORY_FULL = 1,
        CANNOT_EQUIP_TWICE = 2,
        NOT_TRADABLE = 3,
        CANNOT_DROP = 4,
        CANNOT_DROP_NO_PLACE = 5,
        CANNOT_DESTROY = 6,
        LEVEL_TOO_LOW = 7,
        LIVING_OBJECT_REFUSED_FOOD = 8,
        CANNOT_UNEQUIP = 9,
        CANNOT_EQUIP_HERE = 10,
        CRITERIONS = 11,
        SYMBIOTIC_OBJECT_ERROR = 12
    }
    export enum PartStateEnum {
        PART_NOT_INSTALLED = 0,
        PART_BEING_UPDATER = 1,
        PART_UP_TO_DATE = 2
    }
    export enum PartyJoinErrorEnum {
        PARTY_JOIN_ERROR_UNKNOWN = 0,
        PARTY_JOIN_ERROR_PLAYER_NOT_FOUND = 1,
        PARTY_JOIN_ERROR_PARTY_NOT_FOUND = 2,
        PARTY_JOIN_ERROR_PARTY_FULL = 3,
        PARTY_JOIN_ERROR_PLAYER_BUSY = 4,
        PARTY_JOIN_ERROR_PLAYER_ALREADY_INVITED = 6,
        PARTY_JOIN_ERROR_PLAYER_TOO_SOLLICITED = 7,
        PARTY_JOIN_ERROR_PLAYER_LOYAL = 8,
        PARTY_JOIN_ERROR_UNMODIFIABLE = 9,
        PARTY_JOIN_ERROR_UNMET_CRITERION = 10,
        PARTY_JOIN_ERROR_NOT_ENOUGH_ROOM = 11,
        PARTY_JOIN_ERROR_COMPOSITION_CHANGED = 12,
        PARTY_JOIN_ERROR_PLAYER_IN_TUTORIAL = 13
    }
    export enum PartyNameErrorEnum {
        PARTY_NAME_UNDEFINED_ERROR = 0,
        PARTY_NAME_INVALID = 1,
        PARTY_NAME_ALREADY_USED = 2,
        PARTY_NAME_UNALLOWED_RIGHTS = 3,
        PARTY_NAME_UNALLOWED_NOW = 4
    }
    export enum PartyTypeEnum {
        PARTY_TYPE_UNDEFINED = 0,
        PARTY_TYPE_CLASSICAL = 1,
        PARTY_TYPE_DUNGEON = 2,
        PARTY_TYPE_ARENA = 3
    }
    export enum PlayableBreedEnum {
        UNDEFINED = 0,
        Feca = 1,
        Osamodas = 2,
        Enutrof = 3,
        Sram = 4,
        Xelor = 5,
        Ecaflip = 6,
        Eniripsa = 7,
        Iop = 8,
        Cra = 9,
        Sadida = 10,
        Sacrieur = 11,
        Pandawa = 12,
        Roublard = 13,
        Zobal = 14,
        Steamer = 15,
        Eliotrope = 16
    }
    export enum PlayerLifeStatusEnum {
        STATUS_ALIVE_AND_KICKING = 0,
        STATUS_TOMBSTONE = 1,
        STATUS_PHANTOM = 2
    }
    export enum PlayerStateEnum {
        NOT_CONNECTED = 0,
        GAME_TYPE_ROLEPLAY = 1,
        GAME_TYPE_FIGHT = 2,
        UNKNOWN_STATE = 99
    }
    export enum PlayerStatusEnum {
        PLAYER_STATUS_OFFLINE = 0,
        PLAYER_STATUS_UNKNOWN = 1,
        PLAYER_STATUS_AVAILABLE = 10,
        PLAYER_STATUS_IDLE = 20,
        PLAYER_STATUS_AFK = 21,
        PLAYER_STATUS_PRIVATE = 30,
        PLAYER_STATUS_SOLO = 40
    }
    export enum PresetDeleteResultEnum {
        PRESET_DEL_OK = 1,
        PRESET_DEL_ERR_UNKNOWN = 2,
        PRESET_DEL_ERR_BAD_PRESET_ID = 3
    }
    export enum PresetSaveResultEnum {
        PRESET_SAVE_OK = 1,
        PRESET_SAVE_ERR_UNKNOWN = 2,
        PRESET_SAVE_ERR_TOO_MANY = 3
    }
    export enum PresetSaveUpdateErrorEnum {
        PRESET_UPDATE_ERR_UNKNOWN = 1,
        PRESET_UPDATE_ERR_BAD_PRESET_ID = 2,
        PRESET_UPDATE_ERR_BAD_POSITION = 3,
        PRESET_UPDATE_ERR_BAD_OBJECT_ID = 4
    }
    export enum PresetUseResultEnum {
        PRESET_USE_OK = 1,
        PRESET_USE_OK_PARTIAL = 2,
        PRESET_USE_ERR_UNKNOWN = 3,
        PRESET_USE_ERR_CRITERION = 4,
        PRESET_USE_ERR_BAD_PRESET_ID = 5,
        PRESET_USE_ERR_COOLDOWN = 6
    }
    export enum PrismListenEnum {
        PRISM_LISTEN_NONE = 0,
        PRISM_LISTEN_MINE = 1,
        PRISM_LISTEN_ALL = 2
    }
    export enum PrismSetSabotagedRefusedReasonEnum {
        SABOTAGE_REFUSED = -1,
        SABOTAGE_INSUFFICIENT_RIGHTS = 0,
        SABOTAGE_MEMBER_ACCOUNT_NEEDED = 1,
        SABOTAGE_RESTRICTED_ACCOUNT = 2,
        SABOTAGE_WRONG_ALLIANCE = 3,
        SABOTAGE_NO_PRISM = 4,
        SABOTAGE_WRONG_STATE = 5
    }
    export enum PrismStateEnum {
        PRISM_STATE_INVULNERABLE = 0,
        PRISM_STATE_NORMAL = 1,
        PRISM_STATE_ATTACKED = 2,
        PRISM_STATE_FIGHTING = 3,
        PRISM_STATE_WEAKENED = 4,
        PRISM_STATE_VULNERABLE = 5,
        PRISM_STATE_DEFEATED = 6,
        PRISM_STATE_SABOTAGED = 7
    }
    export enum PvpArenaStepEnum {
        ARENA_STEP_REGISTRED = 0,
        ARENA_STEP_WAITING_FIGHT = 1,
        ARENA_STEP_STARTING_FIGHT = 2,
        ARENA_STEP_UNREGISTER = 3
    }
    export enum PvpArenaTypeEnum {
        ARENA_TYPE_3VS3 = 3,
        ARENA_TYPE_5VS5 = 5
    }
    export enum SequenceTypeEnum {
        SEQUENCE_SPELL = 1,
        SEQUENCE_WEAPON = 2,
        SEQUENCE_GLYPH_TRAP = 3,
        SEQUENCE_TRIGGERED = 4,
        SEQUENCE_MOVE = 5,
        SEQUENCE_CHARACTER_DEATH = 6,
        SEQUENCE_TURN_START = 7,
        SEQUENCE_TURN_END = 8,
        SEQUENCE_FIGHT_START = 9
    }
    export enum ServerConnectionErrorEnum {
        SERVER_CONNECTION_ERROR_DUE_TO_STATUS = 0,
        SERVER_CONNECTION_ERROR_NO_REASON = 1,
        SERVER_CONNECTION_ERROR_ACCOUNT_RESTRICTED = 2,
        SERVER_CONNECTION_ERROR_COMMUNITY_RESTRICTED = 3,
        SERVER_CONNECTION_ERROR_LOCATION_RESTRICTED = 4,
        SERVER_CONNECTION_ERROR_SUBSCRIBERS_ONLY = 5,
        SERVER_CONNECTION_ERROR_REGULAR_PLAYERS_ONLY = 6
    }
    export enum ServerStatusEnum {
        STATUS_UNKNOWN = 0,
        OFFLINE = 1,
        STARTING = 2,
        ONLINE = 3,
        NOJOIN = 4,
        SAVING = 5,
        STOPING = 6,
        FULL = 7
    }
    export enum ShortcutBarEnum {
        GENERAL_SHORTCUT_BAR = 0,
        SPELL_SHORTCUT_BAR = 1
    }
    export enum SocialContactCategoryEnum {
        SOCIAL_CONTACT_FRIEND = 0,
        SOCIAL_CONTACT_SPOUSE = 1,
        SOCIAL_CONTACT_PARTY = 2,
        SOCIAL_CONTACT_GUILD = 3,
        SOCIAL_CONTACT_ALLIANCE = 4,
        SOCIAL_CONTACT_CRAFTER = 5,
        SOCIAL_CONTACT_INTERLOCUTOR = 6,
        SOCIAL_CONTACT_FIGHT = 7
    }
    export enum SocialGroupCreationResultEnum {
        SOCIAL_GROUP_CREATE_OK = 1,
        SOCIAL_GROUP_CREATE_ERROR_NAME_INVALID = 2,
        SOCIAL_GROUP_CREATE_ERROR_ALREADY_IN_GROUP = 3,
        SOCIAL_GROUP_CREATE_ERROR_NAME_ALREADY_EXISTS = 4,
        SOCIAL_GROUP_CREATE_ERROR_EMBLEM_ALREADY_EXISTS = 5,
        SOCIAL_GROUP_CREATE_ERROR_LEAVE = 6,
        SOCIAL_GROUP_CREATE_ERROR_CANCEL = 7,
        SOCIAL_GROUP_CREATE_ERROR_REQUIREMENT_UNMET = 8,
        SOCIAL_GROUP_CREATE_ERROR_EMBLEM_INVALID = 9,
        SOCIAL_GROUP_CREATE_ERROR_TAG_INVALID = 10,
        SOCIAL_GROUP_CREATE_ERROR_TAG_ALREADY_EXISTS = 11,
        SOCIAL_GROUP_CREATE_ERROR_NEEDS_SUBGROUP = 12,
        SOCIAL_GROUP_CREATE_ERROR_UNKNOWN = 99
    }
    export enum SocialGroupInvitationStateEnum {
        SOCIAL_GROUP_INVITATION_FAILED = 0,
        SOCIAL_GROUP_INVITATION_SENT = 1,
        SOCIAL_GROUP_INVITATION_CANCELED = 2,
        SOCIAL_GROUP_INVITATION_OK = 3
    }
    export enum StatisticTypeEnum {
        STEP0000_CHOSE_NICKNAME = 78,
        STEP0100_CHOSE_SERVER = 79,
        STEP0200_CREATE_FIRST_CHARACTER = 80,
        STEP0300_LOADING_SCREEN = 81,
        STEP0400_DOFUS_TRAILER = 82,
        STEP0500_ARRIVES_ON_TUTORIAL = 83,
        STEP0550_QUITS_TUTORIAL = 84,
        STEP0600_TUTO1_MOVE_MAP = 85,
        STEP0700_TUTO2_TALK_TO_YAKASI = 86,
        STEP0800_TUTO3_EQUIP_RING = 87,
        STEP0820_CLIC_BAG = 88,
        STEP0840_CLIC_RING = 89,
        STEP0860_EQUIP_RING = 90,
        STEP0860_EXIT_BAG = 91,
        STEP0900_TUTO4_CHANGE_MAP = 92,
        STEP1000_TUTO5_START_FIRST_FIGHT = 93,
        STEP1100_TUTO6_CHOSE_START_POSITION = 94,
        STEP1130_CHOSE_POSITION = 95,
        STEP1160_CLIC_READY = 96,
        STEP1200_TUTO7_MOVE_IN_FIGHT = 97,
        STEP1900_TUTO8_USE_SPELL = 98,
        STEP1930_CHOSE_SPELL = 99,
        STEP1960_USE_SPELL = 100,
        STEP2000_TUTO9_END_TURN = 101,
        STEP2100_TUTO10_WIN_FIGHT = 102,
        STEP2050_TUTO10_LOSE_FIGHT = 103,
        STEP2200_TUTO11_START_FIRST_QUEST = 104,
        STEP2220_CLIC_YAKASI = 105,
        STEP2240_TALK_YAKASI = 106,
        STEP2260_ACCEPT_MISSION = 107,
        STEP2300_TUTO12_EQUIP_SET = 108,
        STEP2350_EXIT_BAG = 109,
        STEP2400_TUTO13_LETS_KILL_MONSTER = 110,
        STEP2430_GO_TO_NEXT_MAP = 111,
        STEP2460_CLIC_MONSTER = 112,
        STEP2500_TUTO14_END_SECOND_FIGHT = 113,
        STEP2600_TUTO15_END_TUTO = 114,
        STEP2620_CLIC_YAKASI = 115,
        STEP2640_END_DIALOG = 116,
        CLICK_ON_BUTTON = 151,
        DISPLAY_MENU = 152
    }
    export enum StatsUpgradeResultEnum {
        NONE = -1,
        SUCCESS = 0,
        RESTRICTED = 1,
        GUEST = 2,
        IN_FIGHT = 3,
        NOT_ENOUGH_POINT = 4
    }
    export enum SubEntityBindingPointCategoryEnum {
        HOOK_POINT_CATEGORY_UNUSED = 0,
        HOOK_POINT_CATEGORY_PET = 1,
        HOOK_POINT_CATEGORY_MOUNT_DRIVER = 2,
        HOOK_POINT_CATEGORY_LIFTED_ENTITY = 3,
        HOOK_POINT_CATEGORY_BASE_BACKGROUND = 4,
        HOOK_POINT_CATEGORY_MERCHANT_BAG = 5,
        HOOK_POINT_CATEGORY_BASE_FOREGROUND = 6,
        HOOK_POINT_CATEGORY_PET_FOLLOWER = 7
    }
    export enum SubscriptionRequiredEnum {
        LIMITED_TO_SUBSCRIBER = 0,
        LIMIT_ON_JOB_XP = 1,
        LIMIT_ON_JOB_USE = 2,
        LIMIT_ON_MAP = 3,
        LIMIT_ON_ITEM = 4,
        LIMIT_ON_VENDOR = 5
    }
    export enum TaxCollectorErrorReasonEnum {
        TAX_COLLECTOR_ERROR_UNKNOWN = 0,
        TAX_COLLECTOR_NOT_FOUND = 1,
        TAX_COLLECTOR_NOT_OWNED = 2,
        TAX_COLLECTOR_NO_RIGHTS = 3,
        TAX_COLLECTOR_MAX_REACHED = 4,
        TAX_COLLECTOR_ALREADY_ONE = 5,
        TAX_COLLECTOR_CANT_HIRE_YET = 6,
        TAX_COLLECTOR_CANT_HIRE_HERE = 7,
        TAX_COLLECTOR_NOT_ENOUGH_KAMAS = 8
    }
    export enum TaxCollectorStateEnum {
        STATE_COLLECTING = 0,
        STATE_WAITING_FOR_HELP = 1,
        STATE_FIGHTING = 2
    }
    export enum TeamEnum {
        TEAM_CHALLENGER = 0,
        TEAM_DEFENDER = 1,
        TEAM_SPECTATOR = 2
    }
    export enum TeamTypeEnum {
        TEAM_TYPE_PLAYER = 0,
        TEAM_TYPE_MONSTER = 1,
        TEAM_TYPE_MUTANT = 2,
        TEAM_TYPE_TAXCOLLECTOR = 3,
        TEAM_TYPE_BAD_PLAYER = 4,
        TEAM_TYPE_PRISM = 5
    }
    export enum TeleporterTypeEnum {
        TELEPORTER_ZAAP = 0,
        TELEPORTER_SUBWAY = 1,
        TELEPORTER_PRISM = 2
    }
    export enum TextInformationTypeEnum {
        TEXT_INFORMATION_MESSAGE = 0,
        TEXT_INFORMATION_ERROR = 1,
        TEXT_INFORMATION_PVP = 2,
        TEXT_INFORMATION_FIGHT_LOG = 3,
        TEXT_INFORMATION_POPUP = 4,
        TEXT_LIVING_OBJECT = 5,
        TEXT_ENTITY_TALK = 6,
        TEXT_INFORMATION_FIGHT = 7
    }
    export enum TreasureHuntDigRequestEnum {
        TREASURE_HUNT_DIG_ERROR_UNDEFINED = 0,
        TREASURE_HUNT_DIG_NEW_HINT = 1,
        TREASURE_HUNT_DIG_FINISHED = 2,
        TREASURE_HUNT_DIG_WRONG = 3,
        TREASURE_HUNT_DIG_LOST = 4,
        TREASURE_HUNT_DIG_ERROR_IMPOSSIBLE = 5,
        TREASURE_HUNT_DIG_WRONG_AND_YOU_KNOW_IT = 6
    }
    export enum TreasureHuntFlagRequestEnum {
        TREASURE_HUNT_FLAG_ERROR_UNDEFINED = 0,
        TREASURE_HUNT_FLAG_OK = 1,
        TREASURE_HUNT_FLAG_WRONG = 2,
        TREASURE_HUNT_FLAG_TOO_MANY = 3,
        TREASURE_HUNT_FLAG_ERROR_IMPOSSIBLE = 4,
        TREASURE_HUNT_FLAG_WRONG_INDEX = 5,
        TREASURE_HUNT_FLAG_SAME_MAP = 6
    }
    export enum TreasureHuntFlagStateEnum {
        TREASURE_HUNT_FLAG_STATE_UNKNOWN = 0,
        TREASURE_HUNT_FLAG_STATE_OK = 1,
        TREASURE_HUNT_FLAG_STATE_WRONG = 2
    }
    export enum TreasureHuntRequestEnum {
        TREASURE_HUNT_ERROR_UNDEFINED = 0,
        TREASURE_HUNT_ERROR_NO_QUEST_FOUND = 2,
        TREASURE_HUNT_ERROR_ALREADY_HAVE_QUEST = 3,
        TREASURE_HUNT_ERROR_NOT_AVAILABLE = 4,
        TREASURE_HUNT_OK = 1
    }
    export enum TreasureHuntTypeEnum {
        TREASURE_HUNT_CLASSIC = 0,
        TREASURE_HUNT_PORTAL = 1,
        TREASURE_HUNT_LEGENDARY = 2
    }
    export enum UpdatableMountBoostEnum {
        STAMINA = 3,
        MATURITY = 5,
        ENERGY = 1,
        SERENITY = 2,
        LOVE = 4,
        TIREDNESS = 6,
        RIDEABLE = 7
    }
    export class AdminCommandMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 76;

        content: string;

        constructor() {
            this.content = '';
            super();
        }

        public getMessageId(): number {
            return AdminCommandMessage.ID;
        }

        public reset(): void {
            this.content = '';
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_AdminCommandMessage(param1);
        }

        public serializeAs_AdminCommandMessage(param1: ICustomDataOutput): void {
            param1.writeUTF(this.content);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_AdminCommandMessage(param1);
        }

        public deserializeAs_AdminCommandMessage(param1: ICustomDataInput): void {
            this.content = param1.readUTF();

        }
    }
    export class AdminQuietCommandMessage extends AdminCommandMessage {
        public static ID: number = 5662;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return AdminQuietCommandMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_AdminQuietCommandMessage(param1);
        }

        public serializeAs_AdminQuietCommandMessage(param1: ICustomDataOutput): void {
            super.serializeAs_AdminCommandMessage(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_AdminQuietCommandMessage(param1);
        }

        public deserializeAs_AdminQuietCommandMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);

        }
    }
    export class ConsoleCommandsListMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6127;

        aliases: string[];
        args: string[];
        descriptions: string[];

        constructor() {
            this.aliases = [];
            this.args = [];
            this.descriptions = [];
            super();
        }

        public getMessageId(): number {
            return ConsoleCommandsListMessage.ID;
        }

        public reset(): void {
            this.aliases = [];
            this.args = [];
            this.descriptions = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ConsoleCommandsListMessage(param1);
        }

        public serializeAs_ConsoleCommandsListMessage(param1: ICustomDataOutput): void {
            param1.writeShort(this.aliases.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.aliases.length) {
                param1.writeUTF(this.aliases[_loc2_]);
                _loc2_++;
            }
            param1.writeShort(this.args.length);
            var _loc3_: number = 0;
            while (_loc3_ < this.args.length) {
                param1.writeUTF(this.args[_loc3_]);
                _loc3_++;
            }
            param1.writeShort(this.descriptions.length);
            var _loc4_: number = 0;
            while (_loc4_ < this.descriptions.length) {
                param1.writeUTF(this.descriptions[_loc4_]);
                _loc4_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ConsoleCommandsListMessage(param1);
        }

        public deserializeAs_ConsoleCommandsListMessage(param1: ICustomDataInput): void {
            var _loc8_: string = null;
            var _loc9_: string = null;
            var _loc10_: string = null;
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc8_ = param1.readUTF();
                this.aliases.push(_loc8_);
                _loc3_++;
            }
            var _loc4_: number = param1.readUnsignedShort();
            var _loc5_: number = 0;
            while (_loc5_ < _loc4_) {
            _loc9_ = param1.readUTF();
                this.args.push(_loc9_);
                _loc5_++;
            }
            var _loc6_: number = param1.readUnsignedShort();
            var _loc7_: number = 0;
            while (_loc7_ < _loc6_) {
            _loc10_ = param1.readUTF();
                this.descriptions.push(_loc10_);
                _loc7_++;
            }

        }
    }
    export class ConsoleMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 75;

        type: number;
        content: string;

        constructor() {
            this.type = 0;
            this.content = '';
            super();
        }

        public getMessageId(): number {
            return ConsoleMessage.ID;
        }

        public reset(): void {
            this.type = 0;
            this.content = '';
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ConsoleMessage(param1);
        }

        public serializeAs_ConsoleMessage(param1: ICustomDataOutput): void {
            param1.writeByte(this.type);
            param1.writeUTF(this.content);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ConsoleMessage(param1);
        }

        public deserializeAs_ConsoleMessage(param1: ICustomDataInput): void {
            this.type = param1.readByte();
            if (this.type < 0) {
                throw new Error('Forbidden value (' + this.type + ') on element of ConsoleMessage.type.');
            }
            this.content = param1.readUTF();

        }
    }
    export class NetworkDataContainerMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 2;

        content: ByteArray;

        constructor() {
            this.content = new ByteArray();
            super();
        }

        public getMessageId(): number {
            return NetworkDataContainerMessage.ID;
        }

        public reset(): void {
            this.content = new ByteArray();
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_NetworkDataContainerMessage(param1);
        }

        public serializeAs_NetworkDataContainerMessage(param1: ICustomDataOutput): void {
            param1.writeBytes(this.content);
            throw new Error('Not implemented');

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_NetworkDataContainerMessage(param1);
        }

        public deserializeAs_NetworkDataContainerMessage(param1: ICustomDataInput): void {
            var _loc2_: number = param1.readVarInt();
            var _loc3_: ByteArray = new ByteArray();
            param1.readBytes(_loc3_, 0, _loc2_);
            _loc3_.uncompress();
            this.content = _loc3_;

        }
    }
    export class BasicPingMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 182;

        quiet: boolean;

        constructor() {
            this.quiet = false;
            super();
        }

        public getMessageId(): number {
            return BasicPingMessage.ID;
        }

        public reset(): void {
            this.quiet = false;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_BasicPingMessage(param1);
        }

        public serializeAs_BasicPingMessage(param1: ICustomDataOutput): void {
            param1.writeBoolean(this.quiet);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_BasicPingMessage(param1);
        }

        public deserializeAs_BasicPingMessage(param1: ICustomDataInput): void {
            this.quiet = param1.readBoolean();

        }
    }
    export class BasicPongMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 183;

        quiet: boolean;

        constructor() {
            this.quiet = false;
            super();
        }

        public getMessageId(): number {
            return BasicPongMessage.ID;
        }

        public reset(): void {
            this.quiet = false;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_BasicPongMessage(param1);
        }

        public serializeAs_BasicPongMessage(param1: ICustomDataOutput): void {
            param1.writeBoolean(this.quiet);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_BasicPongMessage(param1);
        }

        public deserializeAs_BasicPongMessage(param1: ICustomDataInput): void {
            this.quiet = param1.readBoolean();

        }
    }
    export class BasicStatMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6530;

        statId: number;

        constructor() {
            this.statId = 0;
            super();
        }

        public getMessageId(): number {
            return BasicStatMessage.ID;
        }

        public reset(): void {
            this.statId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_BasicStatMessage(param1);
        }

        public serializeAs_BasicStatMessage(param1: ICustomDataOutput): void {
            param1.writeVarShort(this.statId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_BasicStatMessage(param1);
        }

        public deserializeAs_BasicStatMessage(param1: ICustomDataInput): void {
            this.statId = param1.readVarUhShort();
            if (this.statId < 0) {
                throw new Error('Forbidden value (' + this.statId + ') on element of BasicStatMessage.statId.');
            }

        }
    }
    export class CredentialsAcknowledgementMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6314;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return CredentialsAcknowledgementMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_CredentialsAcknowledgementMessage(param1);
        }

        public serializeAs_CredentialsAcknowledgementMessage(param1: ICustomDataOutput): void {

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_CredentialsAcknowledgementMessage(param1);
        }

        public deserializeAs_CredentialsAcknowledgementMessage(param1: ICustomDataInput): void {

        }
    }
    export class HelloConnectMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 3;

        salt: string;
        key: number[];

        constructor() {
            this.salt = '';
            this.key = [];
            super();
        }

        public getMessageId(): number {
            return HelloConnectMessage.ID;
        }

        public reset(): void {
            this.salt = '';
            this.key = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_HelloConnectMessage(param1);
        }

        public serializeAs_HelloConnectMessage(param1: ICustomDataOutput): void {
            param1.writeUTF(this.salt);
            param1.writeVarInt(this.key.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.key.length) {
                param1.writeByte(this.key[_loc2_]);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_HelloConnectMessage(param1);
        }

        public deserializeAs_HelloConnectMessage(param1: ICustomDataInput): void {
            var _loc4_: any = 0;
            this.salt = param1.readUTF();
            var _loc2_: number = param1.readVarInt();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = param1.readByte();
                this.key.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class IdentificationMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 4;

        version: VersionExtended;
        lang: string;
        credentials: number[];
        serverId: number;
        autoconnect: boolean;
        useCertificate: boolean;
        useLoginToken: boolean;
        sessionOptionalSalt: number;
        failedAttempts: number[];

        constructor() {
            this.version = new VersionExtended();
            this.lang = '';
            this.credentials = [];
            this.serverId = 0;
            this.autoconnect = false;
            this.useCertificate = false;
            this.useLoginToken = false;
            this.sessionOptionalSalt = 0;
            this.failedAttempts = [];
            super();
        }

        public getMessageId(): number {
            return IdentificationMessage.ID;
        }

        public reset(): void {
            this.version = new VersionExtended();
            this.lang = '';
            this.credentials = [];
            this.serverId = 0;
            this.autoconnect = false;
            this.useCertificate = false;
            this.useLoginToken = false;
            this.sessionOptionalSalt = 0;
            this.failedAttempts = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_IdentificationMessage(param1);
        }

        public serializeAs_IdentificationMessage(param1: ICustomDataOutput): void {
            var _loc2_: number = 0;
            _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 0, this.autoconnect);
            _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 1, this.useCertificate);
            _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 2, this.useLoginToken);
            param1.writeByte(_loc2_);
            this.version.serializeAs_VersionExtended(param1);
            param1.writeUTF(this.lang);
            param1.writeVarInt(this.credentials.length);
            var _loc3_: number = 0;
            while (_loc3_ < this.credentials.length) {
                param1.writeByte(this.credentials[_loc3_]);
                _loc3_++;
            }
            param1.writeShort(this.serverId);
            if (this.sessionOptionalSalt < -9.007199254740992E15 || this.sessionOptionalSalt > 9.007199254740992E15) {
                throw new Error('Forbidden value (' + this.sessionOptionalSalt + ') on element sessionOptionalSalt.');
            }
            param1.writeVarLong(this.sessionOptionalSalt);
            param1.writeShort(this.failedAttempts.length);
            var _loc4_: number = 0;
            while (_loc4_ < this.failedAttempts.length) {
                if (this.failedAttempts[_loc4_] < 0) {
                    throw new Error('Forbidden value (' + this.failedAttempts[_loc4_] + ') on element 9 (starting at 1) of failedAttempts.');
                }
                param1.writeVarShort(this.failedAttempts[_loc4_]);
                _loc4_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_IdentificationMessage(param1);
        }

        public deserializeAs_IdentificationMessage(param1: ICustomDataInput): void {
            var _loc7_: any = 0;
            var _loc8_: number = 0;
            var _loc2_: number = param1.readByte();
            this.autoconnect = BooleanByteWrapper.getFlag(_loc2_, 0);
            this.useCertificate = BooleanByteWrapper.getFlag(_loc2_, 1);
            this.useLoginToken = BooleanByteWrapper.getFlag(_loc2_, 2);
            this.version = new VersionExtended();
            this.version.deserialize(param1);
            this.lang = param1.readUTF();
            var _loc3_: number = param1.readVarInt();
            var _loc4_: number = 0;
            while (_loc4_ < _loc3_) {
            _loc7_ = param1.readByte();
                this.credentials.push(_loc7_);
                _loc4_++;
            }
            this.serverId = param1.readShort();
            this.sessionOptionalSalt = param1.readVarLong();
            if (this.sessionOptionalSalt < -9.007199254740992E15 || this.sessionOptionalSalt > 9.007199254740992E15) {
                throw new Error('Forbidden value (' + this.sessionOptionalSalt + ') on element of IdentificationMessage.sessionOptionalSalt.');
            }
            var _loc5_: number = param1.readUnsignedShort();
            var _loc6_: number = 0;
            while (_loc6_ < _loc5_) {
            _loc8_ = param1.readVarUhShort();
                if (_loc8_ < 0) {
                    throw new Error('Forbidden value (' + _loc8_ + ') on elements of failedAttempts.');
                }
                this.failedAttempts.push(_loc8_);
                _loc6_++;
            }

        }
    }
    export class IdentificationAccountForceMessage extends IdentificationMessage {
        public static ID: number = 6119;

        forcedAccountLogin: string;

        constructor() {
            this.forcedAccountLogin = '';
            super();
        }

        public getMessageId(): number {
            return IdentificationAccountForceMessage.ID;
        }

        public reset(): void {
            this.forcedAccountLogin = '';
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_IdentificationAccountForceMessage(param1);
        }

        public serializeAs_IdentificationAccountForceMessage(param1: ICustomDataOutput): void {
            super.serializeAs_IdentificationMessage(param1);
            param1.writeUTF(this.forcedAccountLogin);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_IdentificationAccountForceMessage(param1);
        }

        public deserializeAs_IdentificationAccountForceMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.forcedAccountLogin = param1.readUTF();

        }
    }
    export class IdentificationFailedMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 20;

        reason: number;

        constructor() {
            this.reason = 99;
            super();
        }

        public getMessageId(): number {
            return IdentificationFailedMessage.ID;
        }

        public reset(): void {
            this.reason = 99;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_IdentificationFailedMessage(param1);
        }

        public serializeAs_IdentificationFailedMessage(param1: ICustomDataOutput): void {
            param1.writeByte(this.reason);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_IdentificationFailedMessage(param1);
        }

        public deserializeAs_IdentificationFailedMessage(param1: ICustomDataInput): void {
            this.reason = param1.readByte();
            if (this.reason < 0) {
                throw new Error('Forbidden value (' + this.reason + ') on element of IdentificationFailedMessage.reason.');
            }

        }
    }
    export class IdentificationFailedBannedMessage extends IdentificationFailedMessage {
        public static ID: number = 6174;

        banEndDate: number;

        constructor() {
            this.banEndDate = 0;
            super();
        }

        public getMessageId(): number {
            return IdentificationFailedBannedMessage.ID;
        }

        public reset(): void {
            this.banEndDate = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_IdentificationFailedBannedMessage(param1);
        }

        public serializeAs_IdentificationFailedBannedMessage(param1: ICustomDataOutput): void {
            super.serializeAs_IdentificationFailedMessage(param1);
            if (this.banEndDate < 0 || this.banEndDate > 9.007199254740992E15) {
                throw new Error('Forbidden value (' + this.banEndDate + ') on element banEndDate.');
            }
            param1.writeDouble(this.banEndDate);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_IdentificationFailedBannedMessage(param1);
        }

        public deserializeAs_IdentificationFailedBannedMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.banEndDate = param1.readDouble();
            if (this.banEndDate < 0 || this.banEndDate > 9.007199254740992E15) {
                throw new Error('Forbidden value (' + this.banEndDate + ') on element of IdentificationFailedBannedMessage.banEndDate.');
            }

        }
    }
    export class IdentificationFailedForBadVersionMessage extends IdentificationFailedMessage {
        public static ID: number = 21;

        requiredVersion: Version;

        constructor() {
            this.requiredVersion = new Version();
            super();
        }

        public getMessageId(): number {
            return IdentificationFailedForBadVersionMessage.ID;
        }

        public reset(): void {
            this.requiredVersion = new Version();
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_IdentificationFailedForBadVersionMessage(param1);
        }

        public serializeAs_IdentificationFailedForBadVersionMessage(param1: ICustomDataOutput): void {
            super.serializeAs_IdentificationFailedMessage(param1);
            this.requiredVersion.serializeAs_Version(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_IdentificationFailedForBadVersionMessage(param1);
        }

        public deserializeAs_IdentificationFailedForBadVersionMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.requiredVersion = new Version();
            this.requiredVersion.deserialize(param1);

        }
    }
    export class IdentificationSuccessMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 22;

        login: string;
        nickname: string;
        accountId: number;
        communityId: number;
        hasRights: boolean;
        secretQuestion: string;
        accountCreation: number;
        subscriptionElapsedDuration: number;
        subscriptionEndDate: number;
        wasAlreadyConnected: boolean;

        constructor() {
            this.login = '';
            this.nickname = '';
            this.accountId = 0;
            this.communityId = 0;
            this.hasRights = false;
            this.secretQuestion = '';
            this.accountCreation = 0;
            this.subscriptionElapsedDuration = 0;
            this.subscriptionEndDate = 0;
            this.wasAlreadyConnected = false;
            super();
        }

        public getMessageId(): number {
            return IdentificationSuccessMessage.ID;
        }

        public reset(): void {
            this.login = '';
            this.nickname = '';
            this.accountId = 0;
            this.communityId = 0;
            this.hasRights = false;
            this.secretQuestion = '';
            this.accountCreation = 0;
            this.subscriptionElapsedDuration = 0;
            this.subscriptionEndDate = 0;
            this.wasAlreadyConnected = false;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_IdentificationSuccessMessage(param1);
        }

        public serializeAs_IdentificationSuccessMessage(param1: ICustomDataOutput): void {
            var _loc2_: number = 0;
            _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 0, this.hasRights);
            _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 1, this.wasAlreadyConnected);
            param1.writeByte(_loc2_);
            param1.writeUTF(this.login);
            param1.writeUTF(this.nickname);
            if (this.accountId < 0) {
                throw new Error('Forbidden value (' + this.accountId + ') on element accountId.');
            }
            param1.writeInt(this.accountId);
            if (this.communityId < 0) {
                throw new Error('Forbidden value (' + this.communityId + ') on element communityId.');
            }
            param1.writeByte(this.communityId);
            param1.writeUTF(this.secretQuestion);
            if (this.accountCreation < 0 || this.accountCreation > 9.007199254740992E15) {
                throw new Error('Forbidden value (' + this.accountCreation + ') on element accountCreation.');
            }
            param1.writeDouble(this.accountCreation);
            if (this.subscriptionElapsedDuration < 0 || this.subscriptionElapsedDuration > 9.007199254740992E15) {
                throw new Error('Forbidden value (' + this.subscriptionElapsedDuration + ') on element subscriptionElapsedDuration.');
            }
            param1.writeDouble(this.subscriptionElapsedDuration);
            if (this.subscriptionEndDate < 0 || this.subscriptionEndDate > 9.007199254740992E15) {
                throw new Error('Forbidden value (' + this.subscriptionEndDate + ') on element subscriptionEndDate.');
            }
            param1.writeDouble(this.subscriptionEndDate);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_IdentificationSuccessMessage(param1);
        }

        public deserializeAs_IdentificationSuccessMessage(param1: ICustomDataInput): void {
            var _loc2_: number = param1.readByte();
            this.hasRights = BooleanByteWrapper.getFlag(_loc2_, 0);
            this.wasAlreadyConnected = BooleanByteWrapper.getFlag(_loc2_, 1);
            this.login = param1.readUTF();
            this.nickname = param1.readUTF();
            this.accountId = param1.readInt();
            if (this.accountId < 0) {
                throw new Error('Forbidden value (' + this.accountId + ') on element of IdentificationSuccessMessage.accountId.');
            }
            this.communityId = param1.readByte();
            if (this.communityId < 0) {
                throw new Error('Forbidden value (' + this.communityId + ') on element of IdentificationSuccessMessage.communityId.');
            }
            this.secretQuestion = param1.readUTF();
            this.accountCreation = param1.readDouble();
            if (this.accountCreation < 0 || this.accountCreation > 9.007199254740992E15) {
                throw new Error('Forbidden value (' + this.accountCreation + ') on element of IdentificationSuccessMessage.accountCreation.');
            }
            this.subscriptionElapsedDuration = param1.readDouble();
            if (this.subscriptionElapsedDuration < 0 || this.subscriptionElapsedDuration > 9.007199254740992E15) {
                throw new Error('Forbidden value (' + this.subscriptionElapsedDuration + ') on element of IdentificationSuccessMessage.subscriptionElapsedDuration.');
            }
            this.subscriptionEndDate = param1.readDouble();
            if (this.subscriptionEndDate < 0 || this.subscriptionEndDate > 9.007199254740992E15) {
                throw new Error('Forbidden value (' + this.subscriptionEndDate + ') on element of IdentificationSuccessMessage.subscriptionEndDate.');
            }

        }
    }
    export class IdentificationSuccessWithLoginTokenMessage extends IdentificationSuccessMessage {
        public static ID: number = 6209;

        loginToken: string;

        constructor() {
            this.loginToken = '';
            super();
        }

        public getMessageId(): number {
            return IdentificationSuccessWithLoginTokenMessage.ID;
        }

        public reset(): void {
            this.loginToken = '';
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_IdentificationSuccessWithLoginTokenMessage(param1);
        }

        public serializeAs_IdentificationSuccessWithLoginTokenMessage(param1: ICustomDataOutput): void {
            super.serializeAs_IdentificationSuccessMessage(param1);
            param1.writeUTF(this.loginToken);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_IdentificationSuccessWithLoginTokenMessage(param1);
        }

        public deserializeAs_IdentificationSuccessWithLoginTokenMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.loginToken = param1.readUTF();

        }
    }
    export class SelectedServerDataMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 42;

        serverId: number;
        address: string;
        port: number;
        canCreateNewCharacter: boolean;
        ticket: number[];

        constructor() {
            this.serverId = 0;
            this.address = '';
            this.port = 0;
            this.canCreateNewCharacter = false;
            this.ticket = [];
            super();
        }

        public getMessageId(): number {
            return SelectedServerDataMessage.ID;
        }

        public reset(): void {
            this.serverId = 0;
            this.address = '';
            this.port = 0;
            this.canCreateNewCharacter = false;
            this.ticket = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_SelectedServerDataMessage(param1);
        }

        public serializeAs_SelectedServerDataMessage(param1: ICustomDataOutput): void {
            if (this.serverId < 0) {
                throw new Error('Forbidden value (' + this.serverId + ') on element serverId.');
            }
            param1.writeVarShort(this.serverId);
            param1.writeUTF(this.address);
            if (this.port < 0 || this.port > 65535) {
                throw new Error('Forbidden value (' + this.port + ') on element port.');
            }
            param1.writeShort(this.port);
            param1.writeBoolean(this.canCreateNewCharacter);
            param1.writeVarInt(this.ticket.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.ticket.length) {
                param1.writeByte(this.ticket[_loc2_]);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_SelectedServerDataMessage(param1);
        }

        public deserializeAs_SelectedServerDataMessage(param1: ICustomDataInput): void {
            var _loc4_: any = 0;
            this.serverId = param1.readVarUhShort();
            if (this.serverId < 0) {
                throw new Error('Forbidden value (' + this.serverId + ') on element of SelectedServerDataMessage.serverId.');
            }
            this.address = param1.readUTF();
            this.port = param1.readUnsignedShort();
            if (this.port < 0 || this.port > 65535) {
                throw new Error('Forbidden value (' + this.port + ') on element of SelectedServerDataMessage.port.');
            }
            this.canCreateNewCharacter = param1.readBoolean();
            var _loc2_: number = param1.readVarInt();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = param1.readByte();
                this.ticket.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class SelectedServerDataExtendedMessage extends SelectedServerDataMessage {
        public static ID: number = 6469;

        serverIds: number[];

        constructor() {
            this.serverIds = [];
            super();
        }

        public getMessageId(): number {
            return SelectedServerDataExtendedMessage.ID;
        }

        public reset(): void {
            this.serverIds = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_SelectedServerDataExtendedMessage(param1);
        }

        public serializeAs_SelectedServerDataExtendedMessage(param1: ICustomDataOutput): void {
            super.serializeAs_SelectedServerDataMessage(param1);
            param1.writeShort(this.serverIds.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.serverIds.length) {
                if (this.serverIds[_loc2_] < 0) {
                    throw new Error('Forbidden value (' + this.serverIds[_loc2_] + ') on element 1 (starting at 1) of serverIds.');
                }
                param1.writeVarShort(this.serverIds[_loc2_]);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_SelectedServerDataExtendedMessage(param1);
        }

        public deserializeAs_SelectedServerDataExtendedMessage(param1: ICustomDataInput): void {
            var _loc4_: number = 0;
            super.deserialize(param1);
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = param1.readVarUhShort();
                if (_loc4_ < 0) {
                    throw new Error('Forbidden value (' + _loc4_ + ') on elements of serverIds.');
                }
                this.serverIds.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class SelectedServerRefusedMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 41;

        serverId: number;
        error: number;
        serverStatus: number;

        constructor() {
            this.serverId = 0;
            this.error = 1;
            this.serverStatus = 1;
            super();
        }

        public getMessageId(): number {
            return SelectedServerRefusedMessage.ID;
        }

        public reset(): void {
            this.serverId = 0;
            this.error = 1;
            this.serverStatus = 1;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_SelectedServerRefusedMessage(param1);
        }

        public serializeAs_SelectedServerRefusedMessage(param1: ICustomDataOutput): void {
            if (this.serverId < 0) {
                throw new Error('Forbidden value (' + this.serverId + ') on element serverId.');
            }
            param1.writeVarShort(this.serverId);
            param1.writeByte(this.error);
            param1.writeByte(this.serverStatus);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_SelectedServerRefusedMessage(param1);
        }

        public deserializeAs_SelectedServerRefusedMessage(param1: ICustomDataInput): void {
            this.serverId = param1.readVarUhShort();
            if (this.serverId < 0) {
                throw new Error('Forbidden value (' + this.serverId + ') on element of SelectedServerRefusedMessage.serverId.');
            }
            this.error = param1.readByte();
            if (this.error < 0) {
                throw new Error('Forbidden value (' + this.error + ') on element of SelectedServerRefusedMessage.error.');
            }
            this.serverStatus = param1.readByte();
            if (this.serverStatus < 0) {
                throw new Error('Forbidden value (' + this.serverStatus + ') on element of SelectedServerRefusedMessage.serverStatus.');
            }

        }
    }
    export class ServerSelectionMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 40;

        serverId: number;

        constructor() {
            this.serverId = 0;
            super();
        }

        public getMessageId(): number {
            return ServerSelectionMessage.ID;
        }

        public reset(): void {
            this.serverId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ServerSelectionMessage(param1);
        }

        public serializeAs_ServerSelectionMessage(param1: ICustomDataOutput): void {
            if (this.serverId < 0) {
                throw new Error('Forbidden value (' + this.serverId + ') on element serverId.');
            }
            param1.writeVarShort(this.serverId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ServerSelectionMessage(param1);
        }

        public deserializeAs_ServerSelectionMessage(param1: ICustomDataInput): void {
            this.serverId = param1.readVarUhShort();
            if (this.serverId < 0) {
                throw new Error('Forbidden value (' + this.serverId + ') on element of ServerSelectionMessage.serverId.');
            }

        }
    }
    export class ServerStatusUpdateMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 50;

        server: GameServerInformations;

        constructor() {
            this.server = new GameServerInformations();
            super();
        }

        public getMessageId(): number {
            return ServerStatusUpdateMessage.ID;
        }

        public reset(): void {
            this.server = new GameServerInformations();
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ServerStatusUpdateMessage(param1);
        }

        public serializeAs_ServerStatusUpdateMessage(param1: ICustomDataOutput): void {
            this.server.serializeAs_GameServerInformations(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ServerStatusUpdateMessage(param1);
        }

        public deserializeAs_ServerStatusUpdateMessage(param1: ICustomDataInput): void {
            this.server = new GameServerInformations();
            this.server.deserialize(param1);

        }
    }
    export class ServersListMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 30;

        servers: GameServerInformations[];
        alreadyConnectedToServerId: number;
        canCreateNewCharacter: boolean;

        constructor() {
            this.servers = [];
            this.alreadyConnectedToServerId = 0;
            this.canCreateNewCharacter = false;
            super();
        }

        public getMessageId(): number {
            return ServersListMessage.ID;
        }

        public reset(): void {
            this.servers = [];
            this.alreadyConnectedToServerId = 0;
            this.canCreateNewCharacter = false;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ServersListMessage(param1);
        }

        public serializeAs_ServersListMessage(param1: ICustomDataOutput): void {
            param1.writeShort(this.servers.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.servers.length) {
                (this.servers[_loc2_]).serializeAs_GameServerInformations(param1);
                _loc2_++;
            }
            if (this.alreadyConnectedToServerId < 0) {
                throw new Error('Forbidden value (' + this.alreadyConnectedToServerId + ') on element alreadyConnectedToServerId.');
            }
            param1.writeVarShort(this.alreadyConnectedToServerId);
            param1.writeBoolean(this.canCreateNewCharacter);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ServersListMessage(param1);
        }

        public deserializeAs_ServersListMessage(param1: ICustomDataInput): void {
            var _loc4_: GameServerInformations = null;
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = new GameServerInformations();
                _loc4_.deserialize(param1);
                this.servers.push(_loc4_);
                _loc3_++;
            }
            this.alreadyConnectedToServerId = param1.readVarUhShort();
            if (this.alreadyConnectedToServerId < 0) {
                throw new Error('Forbidden value (' + this.alreadyConnectedToServerId + ') on element of ServersListMessage.alreadyConnectedToServerId.');
            }
            this.canCreateNewCharacter = param1.readBoolean();

        }
    }
    export class AccountLinkRequiredMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6607;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return AccountLinkRequiredMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_AccountLinkRequiredMessage(param1);
        }

        public serializeAs_AccountLinkRequiredMessage(param1: ICustomDataOutput): void {

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_AccountLinkRequiredMessage(param1);
        }

        public deserializeAs_AccountLinkRequiredMessage(param1: ICustomDataInput): void {

        }
    }
    export class NicknameAcceptedMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5641;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return NicknameAcceptedMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_NicknameAcceptedMessage(param1);
        }

        public serializeAs_NicknameAcceptedMessage(param1: ICustomDataOutput): void {

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_NicknameAcceptedMessage(param1);
        }

        public deserializeAs_NicknameAcceptedMessage(param1: ICustomDataInput): void {

        }
    }
    export class NicknameChoiceRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5639;

        nickname: string;

        constructor() {
            this.nickname = '';
            super();
        }

        public getMessageId(): number {
            return NicknameChoiceRequestMessage.ID;
        }

        public reset(): void {
            this.nickname = '';
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_NicknameChoiceRequestMessage(param1);
        }

        public serializeAs_NicknameChoiceRequestMessage(param1: ICustomDataOutput): void {
            param1.writeUTF(this.nickname);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_NicknameChoiceRequestMessage(param1);
        }

        public deserializeAs_NicknameChoiceRequestMessage(param1: ICustomDataInput): void {
            this.nickname = param1.readUTF();

        }
    }
    export class NicknameRefusedMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5638;

        reason: number;

        constructor() {
            this.reason = 99;
            super();
        }

        public getMessageId(): number {
            return NicknameRefusedMessage.ID;
        }

        public reset(): void {
            this.reason = 99;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_NicknameRefusedMessage(param1);
        }

        public serializeAs_NicknameRefusedMessage(param1: ICustomDataOutput): void {
            param1.writeByte(this.reason);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_NicknameRefusedMessage(param1);
        }

        public deserializeAs_NicknameRefusedMessage(param1: ICustomDataInput): void {
            this.reason = param1.readByte();
            if (this.reason < 0) {
                throw new Error('Forbidden value (' + this.reason + ') on element of NicknameRefusedMessage.reason.');
            }

        }
    }
    export class NicknameRegistrationMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5640;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return NicknameRegistrationMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_NicknameRegistrationMessage(param1);
        }

        public serializeAs_NicknameRegistrationMessage(param1: ICustomDataOutput): void {

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_NicknameRegistrationMessage(param1);
        }

        public deserializeAs_NicknameRegistrationMessage(param1: ICustomDataInput): void {

        }
    }
    export class AcquaintanceSearchErrorMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6143;

        reason: number;

        constructor() {
            this.reason = 0;
            super();
        }

        public getMessageId(): number {
            return AcquaintanceSearchErrorMessage.ID;
        }

        public reset(): void {
            this.reason = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_AcquaintanceSearchErrorMessage(param1);
        }

        public serializeAs_AcquaintanceSearchErrorMessage(param1: ICustomDataOutput): void {
            param1.writeByte(this.reason);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_AcquaintanceSearchErrorMessage(param1);
        }

        public deserializeAs_AcquaintanceSearchErrorMessage(param1: ICustomDataInput): void {
            this.reason = param1.readByte();
            if (this.reason < 0) {
                throw new Error('Forbidden value (' + this.reason + ') on element of AcquaintanceSearchErrorMessage.reason.');
            }

        }
    }
    export class AcquaintanceSearchMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6144;

        nickname: string;

        constructor() {
            this.nickname = '';
            super();
        }

        public getMessageId(): number {
            return AcquaintanceSearchMessage.ID;
        }

        public reset(): void {
            this.nickname = '';
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_AcquaintanceSearchMessage(param1);
        }

        public serializeAs_AcquaintanceSearchMessage(param1: ICustomDataOutput): void {
            param1.writeUTF(this.nickname);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_AcquaintanceSearchMessage(param1);
        }

        public deserializeAs_AcquaintanceSearchMessage(param1: ICustomDataInput): void {
            this.nickname = param1.readUTF();

        }
    }
    export class AcquaintanceServerListMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6142;

        servers: number[];

        constructor() {
            this.servers = [];
            super();
        }

        public getMessageId(): number {
            return AcquaintanceServerListMessage.ID;
        }

        public reset(): void {
            this.servers = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_AcquaintanceServerListMessage(param1);
        }

        public serializeAs_AcquaintanceServerListMessage(param1: ICustomDataOutput): void {
            param1.writeShort(this.servers.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.servers.length) {
                if (this.servers[_loc2_] < 0) {
                    throw new Error('Forbidden value (' + this.servers[_loc2_] + ') on element 1 (starting at 1) of servers.');
                }
                param1.writeVarShort(this.servers[_loc2_]);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_AcquaintanceServerListMessage(param1);
        }

        public deserializeAs_AcquaintanceServerListMessage(param1: ICustomDataInput): void {
            var _loc4_: number = 0;
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = param1.readVarUhShort();
                if (_loc4_ < 0) {
                    throw new Error('Forbidden value (' + _loc4_ + ') on elements of servers.');
                }
                this.servers.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class DebugClearHighlightCellsMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 2002;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return DebugClearHighlightCellsMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_DebugClearHighlightCellsMessage(param1);
        }

        public serializeAs_DebugClearHighlightCellsMessage(param1: ICustomDataOutput): void {

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_DebugClearHighlightCellsMessage(param1);
        }

        public deserializeAs_DebugClearHighlightCellsMessage(param1: ICustomDataInput): void {

        }
    }
    export class DebugHighlightCellsMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 2001;

        color: number;
        cells: number[];

        constructor() {
            this.color = 0;
            this.cells = [];
            super();
        }

        public getMessageId(): number {
            return DebugHighlightCellsMessage.ID;
        }

        public reset(): void {
            this.color = 0;
            this.cells = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_DebugHighlightCellsMessage(param1);
        }

        public serializeAs_DebugHighlightCellsMessage(param1: ICustomDataOutput): void {
            param1.writeInt(this.color);
            param1.writeShort(this.cells.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.cells.length) {
                if (this.cells[_loc2_] < 0 || this.cells[_loc2_] > 559) {
                    throw new Error('Forbidden value (' + this.cells[_loc2_] + ') on element 2 (starting at 1) of cells.');
                }
                param1.writeVarShort(this.cells[_loc2_]);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_DebugHighlightCellsMessage(param1);
        }

        public deserializeAs_DebugHighlightCellsMessage(param1: ICustomDataInput): void {
            var _loc4_: number = 0;
            this.color = param1.readInt();
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = param1.readVarUhShort();
                if (_loc4_ < 0 || _loc4_ > 559) {
                    throw new Error('Forbidden value (' + _loc4_ + ') on elements of cells.');
                }
                this.cells.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class DebugInClientMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6028;

        level: number;
        message: string;

        constructor() {
            this.level = 0;
            this.message = '';
            super();
        }

        public getMessageId(): number {
            return DebugInClientMessage.ID;
        }

        public reset(): void {
            this.level = 0;
            this.message = '';
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_DebugInClientMessage(param1);
        }

        public serializeAs_DebugInClientMessage(param1: ICustomDataOutput): void {
            param1.writeByte(this.level);
            param1.writeUTF(this.message);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_DebugInClientMessage(param1);
        }

        public deserializeAs_DebugInClientMessage(param1: ICustomDataInput): void {
            this.level = param1.readByte();
            if (this.level < 0) {
                throw new Error('Forbidden value (' + this.level + ') on element of DebugInClientMessage.level.');
            }
            this.message = param1.readUTF();

        }
    }
    export class AchievementDetailedListMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6358;

        startedAchievements: Achievement[];
        finishedAchievements: Achievement[];

        constructor() {
            this.startedAchievements = [];
            this.finishedAchievements = [];
            super();
        }

        public getMessageId(): number {
            return AchievementDetailedListMessage.ID;
        }

        public reset(): void {
            this.startedAchievements = [];
            this.finishedAchievements = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_AchievementDetailedListMessage(param1);
        }

        public serializeAs_AchievementDetailedListMessage(param1: ICustomDataOutput): void {
            param1.writeShort(this.startedAchievements.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.startedAchievements.length) {
                (this.startedAchievements[_loc2_]).serializeAs_Achievement(param1);
                _loc2_++;
            }
            param1.writeShort(this.finishedAchievements.length);
            var _loc3_: number = 0;
            while (_loc3_ < this.finishedAchievements.length) {
                (this.finishedAchievements[_loc3_]).serializeAs_Achievement(param1);
                _loc3_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_AchievementDetailedListMessage(param1);
        }

        public deserializeAs_AchievementDetailedListMessage(param1: ICustomDataInput): void {
            var _loc6_: Achievement = null;
            var _loc7_: Achievement = null;
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc6_ = new Achievement();
                _loc6_.deserialize(param1);
                this.startedAchievements.push(_loc6_);
                _loc3_++;
            }
            var _loc4_: number = param1.readUnsignedShort();
            var _loc5_: number = 0;
            while (_loc5_ < _loc4_) {
            _loc7_ = new Achievement();
                _loc7_.deserialize(param1);
                this.finishedAchievements.push(_loc7_);
                _loc5_++;
            }

        }
    }
    export class AchievementDetailedListRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6357;

        categoryId: number;

        constructor() {
            this.categoryId = 0;
            super();
        }

        public getMessageId(): number {
            return AchievementDetailedListRequestMessage.ID;
        }

        public reset(): void {
            this.categoryId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_AchievementDetailedListRequestMessage(param1);
        }

        public serializeAs_AchievementDetailedListRequestMessage(param1: ICustomDataOutput): void {
            if (this.categoryId < 0) {
                throw new Error('Forbidden value (' + this.categoryId + ') on element categoryId.');
            }
            param1.writeVarShort(this.categoryId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_AchievementDetailedListRequestMessage(param1);
        }

        public deserializeAs_AchievementDetailedListRequestMessage(param1: ICustomDataInput): void {
            this.categoryId = param1.readVarUhShort();
            if (this.categoryId < 0) {
                throw new Error('Forbidden value (' + this.categoryId + ') on element of AchievementDetailedListRequestMessage.categoryId.');
            }

        }
    }
    export class AchievementDetailsMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6378;

        achievement: Achievement;

        constructor() {
            this.achievement = new Achievement();
            super();
        }

        public getMessageId(): number {
            return AchievementDetailsMessage.ID;
        }

        public reset(): void {
            this.achievement = new Achievement();
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_AchievementDetailsMessage(param1);
        }

        public serializeAs_AchievementDetailsMessage(param1: ICustomDataOutput): void {
            this.achievement.serializeAs_Achievement(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_AchievementDetailsMessage(param1);
        }

        public deserializeAs_AchievementDetailsMessage(param1: ICustomDataInput): void {
            this.achievement = new Achievement();
            this.achievement.deserialize(param1);

        }
    }
    export class AchievementDetailsRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6380;

        achievementId: number;

        constructor() {
            this.achievementId = 0;
            super();
        }

        public getMessageId(): number {
            return AchievementDetailsRequestMessage.ID;
        }

        public reset(): void {
            this.achievementId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_AchievementDetailsRequestMessage(param1);
        }

        public serializeAs_AchievementDetailsRequestMessage(param1: ICustomDataOutput): void {
            if (this.achievementId < 0) {
                throw new Error('Forbidden value (' + this.achievementId + ') on element achievementId.');
            }
            param1.writeVarShort(this.achievementId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_AchievementDetailsRequestMessage(param1);
        }

        public deserializeAs_AchievementDetailsRequestMessage(param1: ICustomDataInput): void {
            this.achievementId = param1.readVarUhShort();
            if (this.achievementId < 0) {
                throw new Error('Forbidden value (' + this.achievementId + ') on element of AchievementDetailsRequestMessage.achievementId.');
            }

        }
    }
    export class AchievementFinishedMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6208;

        id: number;
        finishedlevel: number;

        constructor() {
            this.id = 0;
            this.finishedlevel = 0;
            super();
        }

        public getMessageId(): number {
            return AchievementFinishedMessage.ID;
        }

        public reset(): void {
            this.id = 0;
            this.finishedlevel = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_AchievementFinishedMessage(param1);
        }

        public serializeAs_AchievementFinishedMessage(param1: ICustomDataOutput): void {
            if (this.id < 0) {
                throw new Error('Forbidden value (' + this.id + ') on element id.');
            }
            param1.writeVarShort(this.id);
            if (this.finishedlevel < 0 || this.finishedlevel > 200) {
                throw new Error('Forbidden value (' + this.finishedlevel + ') on element finishedlevel.');
            }
            param1.writeByte(this.finishedlevel);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_AchievementFinishedMessage(param1);
        }

        public deserializeAs_AchievementFinishedMessage(param1: ICustomDataInput): void {
            this.id = param1.readVarUhShort();
            if (this.id < 0) {
                throw new Error('Forbidden value (' + this.id + ') on element of AchievementFinishedMessage.id.');
            }
            this.finishedlevel = param1.readUnsignedByte();
            if (this.finishedlevel < 0 || this.finishedlevel > 200) {
                throw new Error('Forbidden value (' + this.finishedlevel + ') on element of AchievementFinishedMessage.finishedlevel.');
            }

        }
    }
    export class AchievementFinishedInformationMessage extends AchievementFinishedMessage {
        public static ID: number = 6381;

        name: string;
        playerId: number;

        constructor() {
            this.name = '';
            this.playerId = 0;
            super();
        }

        public getMessageId(): number {
            return AchievementFinishedInformationMessage.ID;
        }

        public reset(): void {
            this.name = '';
            this.playerId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_AchievementFinishedInformationMessage(param1);
        }

        public serializeAs_AchievementFinishedInformationMessage(param1: ICustomDataOutput): void {
            super.serializeAs_AchievementFinishedMessage(param1);
            param1.writeUTF(this.name);
            if (this.playerId < 0) {
                throw new Error('Forbidden value (' + this.playerId + ') on element playerId.');
            }
            param1.writeVarInt(this.playerId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_AchievementFinishedInformationMessage(param1);
        }

        public deserializeAs_AchievementFinishedInformationMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.name = param1.readUTF();
            this.playerId = param1.readVarUhInt();
            if (this.playerId < 0) {
                throw new Error('Forbidden value (' + this.playerId + ') on element of AchievementFinishedInformationMessage.playerId.');
            }

        }
    }
    export class AchievementListMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6205;

        finishedAchievementsIds: number[];
        rewardableAchievements: AchievementRewardable[];

        constructor() {
            this.finishedAchievementsIds = [];
            this.rewardableAchievements = [];
            super();
        }

        public getMessageId(): number {
            return AchievementListMessage.ID;
        }

        public reset(): void {
            this.finishedAchievementsIds = [];
            this.rewardableAchievements = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_AchievementListMessage(param1);
        }

        public serializeAs_AchievementListMessage(param1: ICustomDataOutput): void {
            param1.writeShort(this.finishedAchievementsIds.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.finishedAchievementsIds.length) {
                if (this.finishedAchievementsIds[_loc2_] < 0) {
                    throw new Error('Forbidden value (' + this.finishedAchievementsIds[_loc2_] + ') on element 1 (starting at 1) of finishedAchievementsIds.');
                }
                param1.writeVarShort(this.finishedAchievementsIds[_loc2_]);
                _loc2_++;
            }
            param1.writeShort(this.rewardableAchievements.length);
            var _loc3_: number = 0;
            while (_loc3_ < this.rewardableAchievements.length) {
                (this.rewardableAchievements[_loc3_]).serializeAs_AchievementRewardable(param1);
                _loc3_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_AchievementListMessage(param1);
        }

        public deserializeAs_AchievementListMessage(param1: ICustomDataInput): void {
            var _loc6_: number = 0;
            var _loc7_: AchievementRewardable = null;
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc6_ = param1.readVarUhShort();
                if (_loc6_ < 0) {
                    throw new Error('Forbidden value (' + _loc6_ + ') on elements of finishedAchievementsIds.');
                }
                this.finishedAchievementsIds.push(_loc6_);
                _loc3_++;
            }
            var _loc4_: number = param1.readUnsignedShort();
            var _loc5_: number = 0;
            while (_loc5_ < _loc4_) {
            _loc7_ = new AchievementRewardable();
                _loc7_.deserialize(param1);
                this.rewardableAchievements.push(_loc7_);
                _loc5_++;
            }

        }
    }
    export class AchievementRewardErrorMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6375;

        achievementId: number;

        constructor() {
            this.achievementId = 0;
            super();
        }

        public getMessageId(): number {
            return AchievementRewardErrorMessage.ID;
        }

        public reset(): void {
            this.achievementId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_AchievementRewardErrorMessage(param1);
        }

        public serializeAs_AchievementRewardErrorMessage(param1: ICustomDataOutput): void {
            param1.writeShort(this.achievementId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_AchievementRewardErrorMessage(param1);
        }

        public deserializeAs_AchievementRewardErrorMessage(param1: ICustomDataInput): void {
            this.achievementId = param1.readShort();

        }
    }
    export class AchievementRewardRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6377;

        achievementId: number;

        constructor() {
            this.achievementId = 0;
            super();
        }

        public getMessageId(): number {
            return AchievementRewardRequestMessage.ID;
        }

        public reset(): void {
            this.achievementId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_AchievementRewardRequestMessage(param1);
        }

        public serializeAs_AchievementRewardRequestMessage(param1: ICustomDataOutput): void {
            param1.writeShort(this.achievementId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_AchievementRewardRequestMessage(param1);
        }

        public deserializeAs_AchievementRewardRequestMessage(param1: ICustomDataInput): void {
            this.achievementId = param1.readShort();

        }
    }
    export class AchievementRewardSuccessMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6376;

        achievementId: number;

        constructor() {
            this.achievementId = 0;
            super();
        }

        public getMessageId(): number {
            return AchievementRewardSuccessMessage.ID;
        }

        public reset(): void {
            this.achievementId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_AchievementRewardSuccessMessage(param1);
        }

        public serializeAs_AchievementRewardSuccessMessage(param1: ICustomDataOutput): void {
            param1.writeShort(this.achievementId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_AchievementRewardSuccessMessage(param1);
        }

        public deserializeAs_AchievementRewardSuccessMessage(param1: ICustomDataInput): void {
            this.achievementId = param1.readShort();

        }
    }
    export class FriendGuildSetWarnOnAchievementCompleteMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6382;

        enable: boolean;

        constructor() {
            this.enable = false;
            super();
        }

        public getMessageId(): number {
            return FriendGuildSetWarnOnAchievementCompleteMessage.ID;
        }

        public reset(): void {
            this.enable = false;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_FriendGuildSetWarnOnAchievementCompleteMessage(param1);
        }

        public serializeAs_FriendGuildSetWarnOnAchievementCompleteMessage(param1: ICustomDataOutput): void {
            param1.writeBoolean(this.enable);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_FriendGuildSetWarnOnAchievementCompleteMessage(param1);
        }

        public deserializeAs_FriendGuildSetWarnOnAchievementCompleteMessage(param1: ICustomDataInput): void {
            this.enable = param1.readBoolean();

        }
    }
    export class FriendGuildWarnOnAchievementCompleteStateMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6383;

        enable: boolean;

        constructor() {
            this.enable = false;
            super();
        }

        public getMessageId(): number {
            return FriendGuildWarnOnAchievementCompleteStateMessage.ID;
        }

        public reset(): void {
            this.enable = false;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_FriendGuildWarnOnAchievementCompleteStateMessage(param1);
        }

        public serializeAs_FriendGuildWarnOnAchievementCompleteStateMessage(param1: ICustomDataOutput): void {
            param1.writeBoolean(this.enable);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_FriendGuildWarnOnAchievementCompleteStateMessage(param1);
        }

        public deserializeAs_FriendGuildWarnOnAchievementCompleteStateMessage(param1: ICustomDataInput): void {
            this.enable = param1.readBoolean();

        }
    }
    export class AbstractGameActionMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 1000;

        actionId: number;
        sourceId: number;

        constructor() {
            this.actionId = 0;
            this.sourceId = 0;
            super();
        }

        public getMessageId(): number {
            return AbstractGameActionMessage.ID;
        }

        public reset(): void {
            this.actionId = 0;
            this.sourceId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_AbstractGameActionMessage(param1);
        }

        public serializeAs_AbstractGameActionMessage(param1: ICustomDataOutput): void {
            if (this.actionId < 0) {
                throw new Error('Forbidden value (' + this.actionId + ') on element actionId.');
            }
            param1.writeVarShort(this.actionId);
            param1.writeInt(this.sourceId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_AbstractGameActionMessage(param1);
        }

        public deserializeAs_AbstractGameActionMessage(param1: ICustomDataInput): void {
            this.actionId = param1.readVarUhShort();
            if (this.actionId < 0) {
                throw new Error('Forbidden value (' + this.actionId + ') on element of AbstractGameActionMessage.actionId.');
            }
            this.sourceId = param1.readInt();

        }
    }
    export class AbstractGameActionWithAckMessage extends AbstractGameActionMessage {
        public static ID: number = 1001;

        waitAckId: number;

        constructor() {
            this.waitAckId = 0;
            super();
        }

        public getMessageId(): number {
            return AbstractGameActionWithAckMessage.ID;
        }

        public reset(): void {
            this.waitAckId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_AbstractGameActionWithAckMessage(param1);
        }

        public serializeAs_AbstractGameActionWithAckMessage(param1: ICustomDataOutput): void {
            super.serializeAs_AbstractGameActionMessage(param1);
            param1.writeShort(this.waitAckId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_AbstractGameActionWithAckMessage(param1);
        }

        public deserializeAs_AbstractGameActionWithAckMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.waitAckId = param1.readShort();

        }
    }
    export class GameActionAcknowledgementMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 957;

        valid: boolean;
        actionId: number;

        constructor() {
            this.valid = false;
            this.actionId = 0;
            super();
        }

        public getMessageId(): number {
            return GameActionAcknowledgementMessage.ID;
        }

        public reset(): void {
            this.valid = false;
            this.actionId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameActionAcknowledgementMessage(param1);
        }

        public serializeAs_GameActionAcknowledgementMessage(param1: ICustomDataOutput): void {
            param1.writeBoolean(this.valid);
            param1.writeByte(this.actionId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameActionAcknowledgementMessage(param1);
        }

        public deserializeAs_GameActionAcknowledgementMessage(param1: ICustomDataInput): void {
            this.valid = param1.readBoolean();
            this.actionId = param1.readByte();

        }
    }
    export class GameActionNoopMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 1002;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return GameActionNoopMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameActionNoopMessage(param1);
        }

        public serializeAs_GameActionNoopMessage(param1: ICustomDataOutput): void {

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameActionNoopMessage(param1);
        }

        public deserializeAs_GameActionNoopMessage(param1: ICustomDataInput): void {

        }
    }
    export class AbstractGameActionFightTargetedAbilityMessage extends AbstractGameActionMessage {
        public static ID: number = 6118;

        targetId: number;
        destinationCellId: number;
        critical: number;
        silentCast: boolean;

        constructor() {
            this.targetId = 0;
            this.destinationCellId = 0;
            this.critical = 1;
            this.silentCast = false;
            super();
        }

        public getMessageId(): number {
            return AbstractGameActionFightTargetedAbilityMessage.ID;
        }

        public reset(): void {
            this.targetId = 0;
            this.destinationCellId = 0;
            this.critical = 1;
            this.silentCast = false;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_AbstractGameActionFightTargetedAbilityMessage(param1);
        }

        public serializeAs_AbstractGameActionFightTargetedAbilityMessage(param1: ICustomDataOutput): void {
            super.serializeAs_AbstractGameActionMessage(param1);
            param1.writeInt(this.targetId);
            if (this.destinationCellId < -1 || this.destinationCellId > 559) {
                throw new Error('Forbidden value (' + this.destinationCellId + ') on element destinationCellId.');
            }
            param1.writeShort(this.destinationCellId);
            param1.writeByte(this.critical);
            param1.writeBoolean(this.silentCast);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_AbstractGameActionFightTargetedAbilityMessage(param1);
        }

        public deserializeAs_AbstractGameActionFightTargetedAbilityMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.targetId = param1.readInt();
            this.destinationCellId = param1.readShort();
            if (this.destinationCellId < -1 || this.destinationCellId > 559) {
                throw new Error('Forbidden value (' + this.destinationCellId + ') on element of AbstractGameActionFightTargetedAbilityMessage.destinationCellId.');
            }
            this.critical = param1.readByte();
            if (this.critical < 0) {
                throw new Error('Forbidden value (' + this.critical + ') on element of AbstractGameActionFightTargetedAbilityMessage.critical.');
            }
            this.silentCast = param1.readBoolean();

        }
    }
    export class GameActionFightActivateGlyphTrapMessage extends AbstractGameActionMessage {
        public static ID: number = 6545;

        markId: number;
        active: boolean;

        constructor() {
            this.markId = 0;
            this.active = false;
            super();
        }

        public getMessageId(): number {
            return GameActionFightActivateGlyphTrapMessage.ID;
        }

        public reset(): void {
            this.markId = 0;
            this.active = false;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameActionFightActivateGlyphTrapMessage(param1);
        }

        public serializeAs_GameActionFightActivateGlyphTrapMessage(param1: ICustomDataOutput): void {
            super.serializeAs_AbstractGameActionMessage(param1);
            param1.writeShort(this.markId);
            param1.writeBoolean(this.active);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameActionFightActivateGlyphTrapMessage(param1);
        }

        public deserializeAs_GameActionFightActivateGlyphTrapMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.markId = param1.readShort();
            this.active = param1.readBoolean();

        }
    }
    export class GameActionFightCarryCharacterMessage extends AbstractGameActionMessage {
        public static ID: number = 5830;

        targetId: number;
        cellId: number;

        constructor() {
            this.targetId = 0;
            this.cellId = 0;
            super();
        }

        public getMessageId(): number {
            return GameActionFightCarryCharacterMessage.ID;
        }

        public reset(): void {
            this.targetId = 0;
            this.cellId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameActionFightCarryCharacterMessage(param1);
        }

        public serializeAs_GameActionFightCarryCharacterMessage(param1: ICustomDataOutput): void {
            super.serializeAs_AbstractGameActionMessage(param1);
            param1.writeInt(this.targetId);
            if (this.cellId < -1 || this.cellId > 559) {
                throw new Error('Forbidden value (' + this.cellId + ') on element cellId.');
            }
            param1.writeShort(this.cellId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameActionFightCarryCharacterMessage(param1);
        }

        public deserializeAs_GameActionFightCarryCharacterMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.targetId = param1.readInt();
            this.cellId = param1.readShort();
            if (this.cellId < -1 || this.cellId > 559) {
                throw new Error('Forbidden value (' + this.cellId + ') on element of GameActionFightCarryCharacterMessage.cellId.');
            }

        }
    }
    export class GameActionFightCastOnTargetRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6330;

        spellId: number;
        targetId: number;

        constructor() {
            this.spellId = 0;
            this.targetId = 0;
            super();
        }

        public getMessageId(): number {
            return GameActionFightCastOnTargetRequestMessage.ID;
        }

        public reset(): void {
            this.spellId = 0;
            this.targetId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameActionFightCastOnTargetRequestMessage(param1);
        }

        public serializeAs_GameActionFightCastOnTargetRequestMessage(param1: ICustomDataOutput): void {
            if (this.spellId < 0) {
                throw new Error('Forbidden value (' + this.spellId + ') on element spellId.');
            }
            param1.writeVarShort(this.spellId);
            param1.writeInt(this.targetId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameActionFightCastOnTargetRequestMessage(param1);
        }

        public deserializeAs_GameActionFightCastOnTargetRequestMessage(param1: ICustomDataInput): void {
            this.spellId = param1.readVarUhShort();
            if (this.spellId < 0) {
                throw new Error('Forbidden value (' + this.spellId + ') on element of GameActionFightCastOnTargetRequestMessage.spellId.');
            }
            this.targetId = param1.readInt();

        }
    }
    export class GameActionFightCastRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 1005;

        spellId: number;
        cellId: number;

        constructor() {
            this.spellId = 0;
            this.cellId = 0;
            super();
        }

        public getMessageId(): number {
            return GameActionFightCastRequestMessage.ID;
        }

        public reset(): void {
            this.spellId = 0;
            this.cellId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameActionFightCastRequestMessage(param1);
        }

        public serializeAs_GameActionFightCastRequestMessage(param1: ICustomDataOutput): void {
            if (this.spellId < 0) {
                throw new Error('Forbidden value (' + this.spellId + ') on element spellId.');
            }
            param1.writeVarShort(this.spellId);
            if (this.cellId < -1 || this.cellId > 559) {
                throw new Error('Forbidden value (' + this.cellId + ') on element cellId.');
            }
            param1.writeShort(this.cellId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameActionFightCastRequestMessage(param1);
        }

        public deserializeAs_GameActionFightCastRequestMessage(param1: ICustomDataInput): void {
            this.spellId = param1.readVarUhShort();
            if (this.spellId < 0) {
                throw new Error('Forbidden value (' + this.spellId + ') on element of GameActionFightCastRequestMessage.spellId.');
            }
            this.cellId = param1.readShort();
            if (this.cellId < -1 || this.cellId > 559) {
                throw new Error('Forbidden value (' + this.cellId + ') on element of GameActionFightCastRequestMessage.cellId.');
            }

        }
    }
    export class GameActionFightChangeLookMessage extends AbstractGameActionMessage {
        public static ID: number = 5532;

        targetId: number;
        entityLook: EntityLook;

        constructor() {
            this.targetId = 0;
            this.entityLook = new EntityLook();
            super();
        }

        public getMessageId(): number {
            return GameActionFightChangeLookMessage.ID;
        }

        public reset(): void {
            this.targetId = 0;
            this.entityLook = new EntityLook();
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameActionFightChangeLookMessage(param1);
        }

        public serializeAs_GameActionFightChangeLookMessage(param1: ICustomDataOutput): void {
            super.serializeAs_AbstractGameActionMessage(param1);
            param1.writeInt(this.targetId);
            this.entityLook.serializeAs_EntityLook(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameActionFightChangeLookMessage(param1);
        }

        public deserializeAs_GameActionFightChangeLookMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.targetId = param1.readInt();
            this.entityLook = new EntityLook();
            this.entityLook.deserialize(param1);

        }
    }
    export class GameActionFightCloseCombatMessage extends AbstractGameActionFightTargetedAbilityMessage {
        public static ID: number = 6116;

        weaponGenericId: number;

        constructor() {
            this.weaponGenericId = 0;
            super();
        }

        public getMessageId(): number {
            return GameActionFightCloseCombatMessage.ID;
        }

        public reset(): void {
            this.weaponGenericId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameActionFightCloseCombatMessage(param1);
        }

        public serializeAs_GameActionFightCloseCombatMessage(param1: ICustomDataOutput): void {
            super.serializeAs_AbstractGameActionFightTargetedAbilityMessage(param1);
            if (this.weaponGenericId < 0) {
                throw new Error('Forbidden value (' + this.weaponGenericId + ') on element weaponGenericId.');
            }
            param1.writeVarShort(this.weaponGenericId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameActionFightCloseCombatMessage(param1);
        }

        public deserializeAs_GameActionFightCloseCombatMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.weaponGenericId = param1.readVarUhShort();
            if (this.weaponGenericId < 0) {
                throw new Error('Forbidden value (' + this.weaponGenericId + ') on element of GameActionFightCloseCombatMessage.weaponGenericId.');
            }

        }
    }
    export class GameActionFightDeathMessage extends AbstractGameActionMessage {
        public static ID: number = 1099;

        targetId: number;

        constructor() {
            this.targetId = 0;
            super();
        }

        public getMessageId(): number {
            return GameActionFightDeathMessage.ID;
        }

        public reset(): void {
            this.targetId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameActionFightDeathMessage(param1);
        }

        public serializeAs_GameActionFightDeathMessage(param1: ICustomDataOutput): void {
            super.serializeAs_AbstractGameActionMessage(param1);
            param1.writeInt(this.targetId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameActionFightDeathMessage(param1);
        }

        public deserializeAs_GameActionFightDeathMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.targetId = param1.readInt();

        }
    }
    export class GameActionFightDispellMessage extends AbstractGameActionMessage {
        public static ID: number = 5533;

        targetId: number;

        constructor() {
            this.targetId = 0;
            super();
        }

        public getMessageId(): number {
            return GameActionFightDispellMessage.ID;
        }

        public reset(): void {
            this.targetId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameActionFightDispellMessage(param1);
        }

        public serializeAs_GameActionFightDispellMessage(param1: ICustomDataOutput): void {
            super.serializeAs_AbstractGameActionMessage(param1);
            param1.writeInt(this.targetId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameActionFightDispellMessage(param1);
        }

        public deserializeAs_GameActionFightDispellMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.targetId = param1.readInt();

        }
    }
    export class GameActionFightDispellEffectMessage extends GameActionFightDispellMessage {
        public static ID: number = 6113;

        boostUID: number;

        constructor() {
            this.boostUID = 0;
            super();
        }

        public getMessageId(): number {
            return GameActionFightDispellEffectMessage.ID;
        }

        public reset(): void {
            this.boostUID = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameActionFightDispellEffectMessage(param1);
        }

        public serializeAs_GameActionFightDispellEffectMessage(param1: ICustomDataOutput): void {
            super.serializeAs_GameActionFightDispellMessage(param1);
            if (this.boostUID < 0) {
                throw new Error('Forbidden value (' + this.boostUID + ') on element boostUID.');
            }
            param1.writeInt(this.boostUID);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameActionFightDispellEffectMessage(param1);
        }

        public deserializeAs_GameActionFightDispellEffectMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.boostUID = param1.readInt();
            if (this.boostUID < 0) {
                throw new Error('Forbidden value (' + this.boostUID + ') on element of GameActionFightDispellEffectMessage.boostUID.');
            }

        }
    }
    export class GameActionFightDispellSpellMessage extends GameActionFightDispellMessage {
        public static ID: number = 6176;

        spellId: number;

        constructor() {
            this.spellId = 0;
            super();
        }

        public getMessageId(): number {
            return GameActionFightDispellSpellMessage.ID;
        }

        public reset(): void {
            this.spellId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameActionFightDispellSpellMessage(param1);
        }

        public serializeAs_GameActionFightDispellSpellMessage(param1: ICustomDataOutput): void {
            super.serializeAs_GameActionFightDispellMessage(param1);
            if (this.spellId < 0) {
                throw new Error('Forbidden value (' + this.spellId + ') on element spellId.');
            }
            param1.writeVarShort(this.spellId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameActionFightDispellSpellMessage(param1);
        }

        public deserializeAs_GameActionFightDispellSpellMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.spellId = param1.readVarUhShort();
            if (this.spellId < 0) {
                throw new Error('Forbidden value (' + this.spellId + ') on element of GameActionFightDispellSpellMessage.spellId.');
            }

        }
    }
    export class GameActionFightDispellableEffectMessage extends AbstractGameActionMessage {
        public static ID: number = 6070;

        effect: AbstractFightDispellableEffect;

        constructor() {
            this.effect = new AbstractFightDispellableEffect();
            super();
        }

        public getMessageId(): number {
            return GameActionFightDispellableEffectMessage.ID;
        }

        public reset(): void {
            this.effect = new AbstractFightDispellableEffect();
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameActionFightDispellableEffectMessage(param1);
        }

        public serializeAs_GameActionFightDispellableEffectMessage(param1: ICustomDataOutput): void {
            super.serializeAs_AbstractGameActionMessage(param1);
            param1.writeShort(this.effect.getTypeId());
            this.effect.serialize(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameActionFightDispellableEffectMessage(param1);
        }

        public deserializeAs_GameActionFightDispellableEffectMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            var _loc2_: number = param1.readUnsignedShort();
            this.effect = <AbstractFightDispellableEffect>ProtocolTypeManager.getInstance(AbstractFightDispellableEffect, _loc2_);
            this.effect.deserialize(param1);

        }
    }
    export class GameActionFightDodgePointLossMessage extends AbstractGameActionMessage {
        public static ID: number = 5828;

        targetId: number;
        amount: number;

        constructor() {
            this.targetId = 0;
            this.amount = 0;
            super();
        }

        public getMessageId(): number {
            return GameActionFightDodgePointLossMessage.ID;
        }

        public reset(): void {
            this.targetId = 0;
            this.amount = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameActionFightDodgePointLossMessage(param1);
        }

        public serializeAs_GameActionFightDodgePointLossMessage(param1: ICustomDataOutput): void {
            super.serializeAs_AbstractGameActionMessage(param1);
            param1.writeInt(this.targetId);
            if (this.amount < 0) {
                throw new Error('Forbidden value (' + this.amount + ') on element amount.');
            }
            param1.writeVarShort(this.amount);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameActionFightDodgePointLossMessage(param1);
        }

        public deserializeAs_GameActionFightDodgePointLossMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.targetId = param1.readInt();
            this.amount = param1.readVarUhShort();
            if (this.amount < 0) {
                throw new Error('Forbidden value (' + this.amount + ') on element of GameActionFightDodgePointLossMessage.amount.');
            }

        }
    }
    export class GameActionFightDropCharacterMessage extends AbstractGameActionMessage {
        public static ID: number = 5826;

        targetId: number;
        cellId: number;

        constructor() {
            this.targetId = 0;
            this.cellId = 0;
            super();
        }

        public getMessageId(): number {
            return GameActionFightDropCharacterMessage.ID;
        }

        public reset(): void {
            this.targetId = 0;
            this.cellId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameActionFightDropCharacterMessage(param1);
        }

        public serializeAs_GameActionFightDropCharacterMessage(param1: ICustomDataOutput): void {
            super.serializeAs_AbstractGameActionMessage(param1);
            param1.writeInt(this.targetId);
            if (this.cellId < -1 || this.cellId > 559) {
                throw new Error('Forbidden value (' + this.cellId + ') on element cellId.');
            }
            param1.writeShort(this.cellId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameActionFightDropCharacterMessage(param1);
        }

        public deserializeAs_GameActionFightDropCharacterMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.targetId = param1.readInt();
            this.cellId = param1.readShort();
            if (this.cellId < -1 || this.cellId > 559) {
                throw new Error('Forbidden value (' + this.cellId + ') on element of GameActionFightDropCharacterMessage.cellId.');
            }

        }
    }
    export class GameActionFightExchangePositionsMessage extends AbstractGameActionMessage {
        public static ID: number = 5527;

        targetId: number;
        casterCellId: number;
        targetCellId: number;

        constructor() {
            this.targetId = 0;
            this.casterCellId = 0;
            this.targetCellId = 0;
            super();
        }

        public getMessageId(): number {
            return GameActionFightExchangePositionsMessage.ID;
        }

        public reset(): void {
            this.targetId = 0;
            this.casterCellId = 0;
            this.targetCellId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameActionFightExchangePositionsMessage(param1);
        }

        public serializeAs_GameActionFightExchangePositionsMessage(param1: ICustomDataOutput): void {
            super.serializeAs_AbstractGameActionMessage(param1);
            param1.writeInt(this.targetId);
            if (this.casterCellId < -1 || this.casterCellId > 559) {
                throw new Error('Forbidden value (' + this.casterCellId + ') on element casterCellId.');
            }
            param1.writeShort(this.casterCellId);
            if (this.targetCellId < -1 || this.targetCellId > 559) {
                throw new Error('Forbidden value (' + this.targetCellId + ') on element targetCellId.');
            }
            param1.writeShort(this.targetCellId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameActionFightExchangePositionsMessage(param1);
        }

        public deserializeAs_GameActionFightExchangePositionsMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.targetId = param1.readInt();
            this.casterCellId = param1.readShort();
            if (this.casterCellId < -1 || this.casterCellId > 559) {
                throw new Error('Forbidden value (' + this.casterCellId + ') on element of GameActionFightExchangePositionsMessage.casterCellId.');
            }
            this.targetCellId = param1.readShort();
            if (this.targetCellId < -1 || this.targetCellId > 559) {
                throw new Error('Forbidden value (' + this.targetCellId + ') on element of GameActionFightExchangePositionsMessage.targetCellId.');
            }

        }
    }
    export class GameActionFightInvisibilityMessage extends AbstractGameActionMessage {
        public static ID: number = 5821;

        targetId: number;
        state: number;

        constructor() {
            this.targetId = 0;
            this.state = 0;
            super();
        }

        public getMessageId(): number {
            return GameActionFightInvisibilityMessage.ID;
        }

        public reset(): void {
            this.targetId = 0;
            this.state = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameActionFightInvisibilityMessage(param1);
        }

        public serializeAs_GameActionFightInvisibilityMessage(param1: ICustomDataOutput): void {
            super.serializeAs_AbstractGameActionMessage(param1);
            param1.writeInt(this.targetId);
            param1.writeByte(this.state);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameActionFightInvisibilityMessage(param1);
        }

        public deserializeAs_GameActionFightInvisibilityMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.targetId = param1.readInt();
            this.state = param1.readByte();
            if (this.state < 0) {
                throw new Error('Forbidden value (' + this.state + ') on element of GameActionFightInvisibilityMessage.state.');
            }

        }
    }
    export class GameActionFightInvisibleDetectedMessage extends AbstractGameActionMessage {
        public static ID: number = 6320;

        targetId: number;
        cellId: number;

        constructor() {
            this.targetId = 0;
            this.cellId = 0;
            super();
        }

        public getMessageId(): number {
            return GameActionFightInvisibleDetectedMessage.ID;
        }

        public reset(): void {
            this.targetId = 0;
            this.cellId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameActionFightInvisibleDetectedMessage(param1);
        }

        public serializeAs_GameActionFightInvisibleDetectedMessage(param1: ICustomDataOutput): void {
            super.serializeAs_AbstractGameActionMessage(param1);
            param1.writeInt(this.targetId);
            if (this.cellId < -1 || this.cellId > 559) {
                throw new Error('Forbidden value (' + this.cellId + ') on element cellId.');
            }
            param1.writeShort(this.cellId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameActionFightInvisibleDetectedMessage(param1);
        }

        public deserializeAs_GameActionFightInvisibleDetectedMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.targetId = param1.readInt();
            this.cellId = param1.readShort();
            if (this.cellId < -1 || this.cellId > 559) {
                throw new Error('Forbidden value (' + this.cellId + ') on element of GameActionFightInvisibleDetectedMessage.cellId.');
            }

        }
    }
    export class GameActionFightKillMessage extends AbstractGameActionMessage {
        public static ID: number = 5571;

        targetId: number;

        constructor() {
            this.targetId = 0;
            super();
        }

        public getMessageId(): number {
            return GameActionFightKillMessage.ID;
        }

        public reset(): void {
            this.targetId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameActionFightKillMessage(param1);
        }

        public serializeAs_GameActionFightKillMessage(param1: ICustomDataOutput): void {
            super.serializeAs_AbstractGameActionMessage(param1);
            param1.writeInt(this.targetId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameActionFightKillMessage(param1);
        }

        public deserializeAs_GameActionFightKillMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.targetId = param1.readInt();

        }
    }
    export class GameActionFightLifePointsLostMessage extends AbstractGameActionMessage {
        public static ID: number = 6312;

        targetId: number;
        loss: number;
        permanentDamages: number;

        constructor() {
            this.targetId = 0;
            this.loss = 0;
            this.permanentDamages = 0;
            super();
        }

        public getMessageId(): number {
            return GameActionFightLifePointsLostMessage.ID;
        }

        public reset(): void {
            this.targetId = 0;
            this.loss = 0;
            this.permanentDamages = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameActionFightLifePointsLostMessage(param1);
        }

        public serializeAs_GameActionFightLifePointsLostMessage(param1: ICustomDataOutput): void {
            super.serializeAs_AbstractGameActionMessage(param1);
            param1.writeInt(this.targetId);
            if (this.loss < 0) {
                throw new Error('Forbidden value (' + this.loss + ') on element loss.');
            }
            param1.writeVarShort(this.loss);
            if (this.permanentDamages < 0) {
                throw new Error('Forbidden value (' + this.permanentDamages + ') on element permanentDamages.');
            }
            param1.writeVarShort(this.permanentDamages);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameActionFightLifePointsLostMessage(param1);
        }

        public deserializeAs_GameActionFightLifePointsLostMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.targetId = param1.readInt();
            this.loss = param1.readVarUhShort();
            if (this.loss < 0) {
                throw new Error('Forbidden value (' + this.loss + ') on element of GameActionFightLifePointsLostMessage.loss.');
            }
            this.permanentDamages = param1.readVarUhShort();
            if (this.permanentDamages < 0) {
                throw new Error('Forbidden value (' + this.permanentDamages + ') on element of GameActionFightLifePointsLostMessage.permanentDamages.');
            }

        }
    }
    export class GameActionFightLifeAndShieldPointsLostMessage extends GameActionFightLifePointsLostMessage {
        public static ID: number = 6310;

        shieldLoss: number;

        constructor() {
            this.shieldLoss = 0;
            super();
        }

        public getMessageId(): number {
            return GameActionFightLifeAndShieldPointsLostMessage.ID;
        }

        public reset(): void {
            this.shieldLoss = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameActionFightLifeAndShieldPointsLostMessage(param1);
        }

        public serializeAs_GameActionFightLifeAndShieldPointsLostMessage(param1: ICustomDataOutput): void {
            super.serializeAs_GameActionFightLifePointsLostMessage(param1);
            if (this.shieldLoss < 0) {
                throw new Error('Forbidden value (' + this.shieldLoss + ') on element shieldLoss.');
            }
            param1.writeVarShort(this.shieldLoss);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameActionFightLifeAndShieldPointsLostMessage(param1);
        }

        public deserializeAs_GameActionFightLifeAndShieldPointsLostMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.shieldLoss = param1.readVarUhShort();
            if (this.shieldLoss < 0) {
                throw new Error('Forbidden value (' + this.shieldLoss + ') on element of GameActionFightLifeAndShieldPointsLostMessage.shieldLoss.');
            }

        }
    }
    export class GameActionFightLifePointsGainMessage extends AbstractGameActionMessage {
        public static ID: number = 6311;

        targetId: number;
        delta: number;

        constructor() {
            this.targetId = 0;
            this.delta = 0;
            super();
        }

        public getMessageId(): number {
            return GameActionFightLifePointsGainMessage.ID;
        }

        public reset(): void {
            this.targetId = 0;
            this.delta = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameActionFightLifePointsGainMessage(param1);
        }

        public serializeAs_GameActionFightLifePointsGainMessage(param1: ICustomDataOutput): void {
            super.serializeAs_AbstractGameActionMessage(param1);
            param1.writeInt(this.targetId);
            if (this.delta < 0) {
                throw new Error('Forbidden value (' + this.delta + ') on element delta.');
            }
            param1.writeVarInt(this.delta);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameActionFightLifePointsGainMessage(param1);
        }

        public deserializeAs_GameActionFightLifePointsGainMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.targetId = param1.readInt();
            this.delta = param1.readVarUhInt();
            if (this.delta < 0) {
                throw new Error('Forbidden value (' + this.delta + ') on element of GameActionFightLifePointsGainMessage.delta.');
            }

        }
    }
    export class GameActionFightMarkCellsMessage extends AbstractGameActionMessage {
        public static ID: number = 5540;

        mark: GameActionMark;

        constructor() {
            this.mark = new GameActionMark();
            super();
        }

        public getMessageId(): number {
            return GameActionFightMarkCellsMessage.ID;
        }

        public reset(): void {
            this.mark = new GameActionMark();
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameActionFightMarkCellsMessage(param1);
        }

        public serializeAs_GameActionFightMarkCellsMessage(param1: ICustomDataOutput): void {
            super.serializeAs_AbstractGameActionMessage(param1);
            this.mark.serializeAs_GameActionMark(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameActionFightMarkCellsMessage(param1);
        }

        public deserializeAs_GameActionFightMarkCellsMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.mark = new GameActionMark();
            this.mark.deserialize(param1);

        }
    }
    export class GameActionFightModifyEffectsDurationMessage extends AbstractGameActionMessage {
        public static ID: number = 6304;

        targetId: number;
        delta: number;

        constructor() {
            this.targetId = 0;
            this.delta = 0;
            super();
        }

        public getMessageId(): number {
            return GameActionFightModifyEffectsDurationMessage.ID;
        }

        public reset(): void {
            this.targetId = 0;
            this.delta = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameActionFightModifyEffectsDurationMessage(param1);
        }

        public serializeAs_GameActionFightModifyEffectsDurationMessage(param1: ICustomDataOutput): void {
            super.serializeAs_AbstractGameActionMessage(param1);
            param1.writeInt(this.targetId);
            param1.writeShort(this.delta);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameActionFightModifyEffectsDurationMessage(param1);
        }

        public deserializeAs_GameActionFightModifyEffectsDurationMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.targetId = param1.readInt();
            this.delta = param1.readShort();

        }
    }
    export class GameActionFightNoSpellCastMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6132;

        spellLevelId: number;

        constructor() {
            this.spellLevelId = 0;
            super();
        }

        public getMessageId(): number {
            return GameActionFightNoSpellCastMessage.ID;
        }

        public reset(): void {
            this.spellLevelId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameActionFightNoSpellCastMessage(param1);
        }

        public serializeAs_GameActionFightNoSpellCastMessage(param1: ICustomDataOutput): void {
            if (this.spellLevelId < 0) {
                throw new Error('Forbidden value (' + this.spellLevelId + ') on element spellLevelId.');
            }
            param1.writeVarInt(this.spellLevelId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameActionFightNoSpellCastMessage(param1);
        }

        public deserializeAs_GameActionFightNoSpellCastMessage(param1: ICustomDataInput): void {
            this.spellLevelId = param1.readVarUhInt();
            if (this.spellLevelId < 0) {
                throw new Error('Forbidden value (' + this.spellLevelId + ') on element of GameActionFightNoSpellCastMessage.spellLevelId.');
            }

        }
    }
    export class GameActionFightPointsVariationMessage extends AbstractGameActionMessage {
        public static ID: number = 1030;

        targetId: number;
        delta: number;

        constructor() {
            this.targetId = 0;
            this.delta = 0;
            super();
        }

        public getMessageId(): number {
            return GameActionFightPointsVariationMessage.ID;
        }

        public reset(): void {
            this.targetId = 0;
            this.delta = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameActionFightPointsVariationMessage(param1);
        }

        public serializeAs_GameActionFightPointsVariationMessage(param1: ICustomDataOutput): void {
            super.serializeAs_AbstractGameActionMessage(param1);
            param1.writeInt(this.targetId);
            param1.writeShort(this.delta);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameActionFightPointsVariationMessage(param1);
        }

        public deserializeAs_GameActionFightPointsVariationMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.targetId = param1.readInt();
            this.delta = param1.readShort();

        }
    }
    export class GameActionFightReduceDamagesMessage extends AbstractGameActionMessage {
        public static ID: number = 5526;

        targetId: number;
        amount: number;

        constructor() {
            this.targetId = 0;
            this.amount = 0;
            super();
        }

        public getMessageId(): number {
            return GameActionFightReduceDamagesMessage.ID;
        }

        public reset(): void {
            this.targetId = 0;
            this.amount = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameActionFightReduceDamagesMessage(param1);
        }

        public serializeAs_GameActionFightReduceDamagesMessage(param1: ICustomDataOutput): void {
            super.serializeAs_AbstractGameActionMessage(param1);
            param1.writeInt(this.targetId);
            if (this.amount < 0) {
                throw new Error('Forbidden value (' + this.amount + ') on element amount.');
            }
            param1.writeVarInt(this.amount);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameActionFightReduceDamagesMessage(param1);
        }

        public deserializeAs_GameActionFightReduceDamagesMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.targetId = param1.readInt();
            this.amount = param1.readVarUhInt();
            if (this.amount < 0) {
                throw new Error('Forbidden value (' + this.amount + ') on element of GameActionFightReduceDamagesMessage.amount.');
            }

        }
    }
    export class GameActionFightReflectDamagesMessage extends AbstractGameActionMessage {
        public static ID: number = 5530;

        targetId: number;

        constructor() {
            this.targetId = 0;
            super();
        }

        public getMessageId(): number {
            return GameActionFightReflectDamagesMessage.ID;
        }

        public reset(): void {
            this.targetId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameActionFightReflectDamagesMessage(param1);
        }

        public serializeAs_GameActionFightReflectDamagesMessage(param1: ICustomDataOutput): void {
            super.serializeAs_AbstractGameActionMessage(param1);
            param1.writeInt(this.targetId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameActionFightReflectDamagesMessage(param1);
        }

        public deserializeAs_GameActionFightReflectDamagesMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.targetId = param1.readInt();

        }
    }
    export class GameActionFightReflectSpellMessage extends AbstractGameActionMessage {
        public static ID: number = 5531;

        targetId: number;

        constructor() {
            this.targetId = 0;
            super();
        }

        public getMessageId(): number {
            return GameActionFightReflectSpellMessage.ID;
        }

        public reset(): void {
            this.targetId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameActionFightReflectSpellMessage(param1);
        }

        public serializeAs_GameActionFightReflectSpellMessage(param1: ICustomDataOutput): void {
            super.serializeAs_AbstractGameActionMessage(param1);
            param1.writeInt(this.targetId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameActionFightReflectSpellMessage(param1);
        }

        public deserializeAs_GameActionFightReflectSpellMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.targetId = param1.readInt();

        }
    }
    export class GameActionFightSlideMessage extends AbstractGameActionMessage {
        public static ID: number = 5525;

        targetId: number;
        startCellId: number;
        endCellId: number;

        constructor() {
            this.targetId = 0;
            this.startCellId = 0;
            this.endCellId = 0;
            super();
        }

        public getMessageId(): number {
            return GameActionFightSlideMessage.ID;
        }

        public reset(): void {
            this.targetId = 0;
            this.startCellId = 0;
            this.endCellId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameActionFightSlideMessage(param1);
        }

        public serializeAs_GameActionFightSlideMessage(param1: ICustomDataOutput): void {
            super.serializeAs_AbstractGameActionMessage(param1);
            param1.writeInt(this.targetId);
            if (this.startCellId < -1 || this.startCellId > 559) {
                throw new Error('Forbidden value (' + this.startCellId + ') on element startCellId.');
            }
            param1.writeShort(this.startCellId);
            if (this.endCellId < -1 || this.endCellId > 559) {
                throw new Error('Forbidden value (' + this.endCellId + ') on element endCellId.');
            }
            param1.writeShort(this.endCellId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameActionFightSlideMessage(param1);
        }

        public deserializeAs_GameActionFightSlideMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.targetId = param1.readInt();
            this.startCellId = param1.readShort();
            if (this.startCellId < -1 || this.startCellId > 559) {
                throw new Error('Forbidden value (' + this.startCellId + ') on element of GameActionFightSlideMessage.startCellId.');
            }
            this.endCellId = param1.readShort();
            if (this.endCellId < -1 || this.endCellId > 559) {
                throw new Error('Forbidden value (' + this.endCellId + ') on element of GameActionFightSlideMessage.endCellId.');
            }

        }
    }
    export class GameActionFightSpellCastMessage extends AbstractGameActionFightTargetedAbilityMessage {
        public static ID: number = 1010;

        spellId: number;
        spellLevel: number;
        portalsIds: number[];

        constructor() {
            this.spellId = 0;
            this.spellLevel = 0;
            this.portalsIds = [];
            super();
        }

        public getMessageId(): number {
            return GameActionFightSpellCastMessage.ID;
        }

        public reset(): void {
            this.spellId = 0;
            this.spellLevel = 0;
            this.portalsIds = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameActionFightSpellCastMessage(param1);
        }

        public serializeAs_GameActionFightSpellCastMessage(param1: ICustomDataOutput): void {
            super.serializeAs_AbstractGameActionFightTargetedAbilityMessage(param1);
            if (this.spellId < 0) {
                throw new Error('Forbidden value (' + this.spellId + ') on element spellId.');
            }
            param1.writeVarShort(this.spellId);
            if (this.spellLevel < 1 || this.spellLevel > 6) {
                throw new Error('Forbidden value (' + this.spellLevel + ') on element spellLevel.');
            }
            param1.writeByte(this.spellLevel);
            param1.writeShort(this.portalsIds.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.portalsIds.length) {
                param1.writeShort(this.portalsIds[_loc2_]);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameActionFightSpellCastMessage(param1);
        }

        public deserializeAs_GameActionFightSpellCastMessage(param1: ICustomDataInput): void {
            var _loc4_: any = 0;
            super.deserialize(param1);
            this.spellId = param1.readVarUhShort();
            if (this.spellId < 0) {
                throw new Error('Forbidden value (' + this.spellId + ') on element of GameActionFightSpellCastMessage.spellId.');
            }
            this.spellLevel = param1.readByte();
            if (this.spellLevel < 1 || this.spellLevel > 6) {
                throw new Error('Forbidden value (' + this.spellLevel + ') on element of GameActionFightSpellCastMessage.spellLevel.');
            }
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = param1.readShort();
                this.portalsIds.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class GameActionFightSpellCooldownVariationMessage extends AbstractGameActionMessage {
        public static ID: number = 6219;

        targetId: number;
        spellId: number;
        value: number;

        constructor() {
            this.targetId = 0;
            this.spellId = 0;
            this.value = 0;
            super();
        }

        public getMessageId(): number {
            return GameActionFightSpellCooldownVariationMessage.ID;
        }

        public reset(): void {
            this.targetId = 0;
            this.spellId = 0;
            this.value = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameActionFightSpellCooldownVariationMessage(param1);
        }

        public serializeAs_GameActionFightSpellCooldownVariationMessage(param1: ICustomDataOutput): void {
            super.serializeAs_AbstractGameActionMessage(param1);
            param1.writeInt(this.targetId);
            if (this.spellId < 0) {
                throw new Error('Forbidden value (' + this.spellId + ') on element spellId.');
            }
            param1.writeVarShort(this.spellId);
            param1.writeVarShort(this.value);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameActionFightSpellCooldownVariationMessage(param1);
        }

        public deserializeAs_GameActionFightSpellCooldownVariationMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.targetId = param1.readInt();
            this.spellId = param1.readVarUhShort();
            if (this.spellId < 0) {
                throw new Error('Forbidden value (' + this.spellId + ') on element of GameActionFightSpellCooldownVariationMessage.spellId.');
            }
            this.value = param1.readVarShort();

        }
    }
    export class GameActionFightSpellImmunityMessage extends AbstractGameActionMessage {
        public static ID: number = 6221;

        targetId: number;
        spellId: number;

        constructor() {
            this.targetId = 0;
            this.spellId = 0;
            super();
        }

        public getMessageId(): number {
            return GameActionFightSpellImmunityMessage.ID;
        }

        public reset(): void {
            this.targetId = 0;
            this.spellId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameActionFightSpellImmunityMessage(param1);
        }

        public serializeAs_GameActionFightSpellImmunityMessage(param1: ICustomDataOutput): void {
            super.serializeAs_AbstractGameActionMessage(param1);
            param1.writeInt(this.targetId);
            if (this.spellId < 0) {
                throw new Error('Forbidden value (' + this.spellId + ') on element spellId.');
            }
            param1.writeVarShort(this.spellId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameActionFightSpellImmunityMessage(param1);
        }

        public deserializeAs_GameActionFightSpellImmunityMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.targetId = param1.readInt();
            this.spellId = param1.readVarUhShort();
            if (this.spellId < 0) {
                throw new Error('Forbidden value (' + this.spellId + ') on element of GameActionFightSpellImmunityMessage.spellId.');
            }

        }
    }
    export class GameActionFightStealKamaMessage extends AbstractGameActionMessage {
        public static ID: number = 5535;

        targetId: number;
        amount: number;

        constructor() {
            this.targetId = 0;
            this.amount = 0;
            super();
        }

        public getMessageId(): number {
            return GameActionFightStealKamaMessage.ID;
        }

        public reset(): void {
            this.targetId = 0;
            this.amount = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameActionFightStealKamaMessage(param1);
        }

        public serializeAs_GameActionFightStealKamaMessage(param1: ICustomDataOutput): void {
            super.serializeAs_AbstractGameActionMessage(param1);
            param1.writeInt(this.targetId);
            if (this.amount < 0) {
                throw new Error('Forbidden value (' + this.amount + ') on element amount.');
            }
            param1.writeVarInt(this.amount);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameActionFightStealKamaMessage(param1);
        }

        public deserializeAs_GameActionFightStealKamaMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.targetId = param1.readInt();
            this.amount = param1.readVarUhInt();
            if (this.amount < 0) {
                throw new Error('Forbidden value (' + this.amount + ') on element of GameActionFightStealKamaMessage.amount.');
            }

        }
    }
    export class GameActionFightSummonMessage extends AbstractGameActionMessage {
        public static ID: number = 5825;

        summon: GameFightFighterInformations;

        constructor() {
            this.summon = new GameFightFighterInformations();
            super();
        }

        public getMessageId(): number {
            return GameActionFightSummonMessage.ID;
        }

        public reset(): void {
            this.summon = new GameFightFighterInformations();
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameActionFightSummonMessage(param1);
        }

        public serializeAs_GameActionFightSummonMessage(param1: ICustomDataOutput): void {
            super.serializeAs_AbstractGameActionMessage(param1);
            param1.writeShort(this.summon.getTypeId());
            this.summon.serialize(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameActionFightSummonMessage(param1);
        }

        public deserializeAs_GameActionFightSummonMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            var _loc2_: number = param1.readUnsignedShort();
            this.summon = <GameFightFighterInformations>ProtocolTypeManager.getInstance(GameFightFighterInformations, _loc2_);
            this.summon.deserialize(param1);

        }
    }
    export class GameActionFightTackledMessage extends AbstractGameActionMessage {
        public static ID: number = 1004;

        tacklersIds: number[];

        constructor() {
            this.tacklersIds = [];
            super();
        }

        public getMessageId(): number {
            return GameActionFightTackledMessage.ID;
        }

        public reset(): void {
            this.tacklersIds = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameActionFightTackledMessage(param1);
        }

        public serializeAs_GameActionFightTackledMessage(param1: ICustomDataOutput): void {
            super.serializeAs_AbstractGameActionMessage(param1);
            param1.writeShort(this.tacklersIds.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.tacklersIds.length) {
                param1.writeInt(this.tacklersIds[_loc2_]);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameActionFightTackledMessage(param1);
        }

        public deserializeAs_GameActionFightTackledMessage(param1: ICustomDataInput): void {
            var _loc4_: any = 0;
            super.deserialize(param1);
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = param1.readInt();
                this.tacklersIds.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class GameActionFightTeleportOnSameMapMessage extends AbstractGameActionMessage {
        public static ID: number = 5528;

        targetId: number;
        cellId: number;

        constructor() {
            this.targetId = 0;
            this.cellId = 0;
            super();
        }

        public getMessageId(): number {
            return GameActionFightTeleportOnSameMapMessage.ID;
        }

        public reset(): void {
            this.targetId = 0;
            this.cellId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameActionFightTeleportOnSameMapMessage(param1);
        }

        public serializeAs_GameActionFightTeleportOnSameMapMessage(param1: ICustomDataOutput): void {
            super.serializeAs_AbstractGameActionMessage(param1);
            param1.writeInt(this.targetId);
            if (this.cellId < -1 || this.cellId > 559) {
                throw new Error('Forbidden value (' + this.cellId + ') on element cellId.');
            }
            param1.writeShort(this.cellId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameActionFightTeleportOnSameMapMessage(param1);
        }

        public deserializeAs_GameActionFightTeleportOnSameMapMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.targetId = param1.readInt();
            this.cellId = param1.readShort();
            if (this.cellId < -1 || this.cellId > 559) {
                throw new Error('Forbidden value (' + this.cellId + ') on element of GameActionFightTeleportOnSameMapMessage.cellId.');
            }

        }
    }
    export class GameActionFightThrowCharacterMessage extends AbstractGameActionMessage {
        public static ID: number = 5829;

        targetId: number;
        cellId: number;

        constructor() {
            this.targetId = 0;
            this.cellId = 0;
            super();
        }

        public getMessageId(): number {
            return GameActionFightThrowCharacterMessage.ID;
        }

        public reset(): void {
            this.targetId = 0;
            this.cellId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameActionFightThrowCharacterMessage(param1);
        }

        public serializeAs_GameActionFightThrowCharacterMessage(param1: ICustomDataOutput): void {
            super.serializeAs_AbstractGameActionMessage(param1);
            param1.writeInt(this.targetId);
            if (this.cellId < -1 || this.cellId > 559) {
                throw new Error('Forbidden value (' + this.cellId + ') on element cellId.');
            }
            param1.writeShort(this.cellId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameActionFightThrowCharacterMessage(param1);
        }

        public deserializeAs_GameActionFightThrowCharacterMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.targetId = param1.readInt();
            this.cellId = param1.readShort();
            if (this.cellId < -1 || this.cellId > 559) {
                throw new Error('Forbidden value (' + this.cellId + ') on element of GameActionFightThrowCharacterMessage.cellId.');
            }

        }
    }
    export class GameActionFightTriggerEffectMessage extends GameActionFightDispellEffectMessage {
        public static ID: number = 6147;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return GameActionFightTriggerEffectMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameActionFightTriggerEffectMessage(param1);
        }

        public serializeAs_GameActionFightTriggerEffectMessage(param1: ICustomDataOutput): void {
            super.serializeAs_GameActionFightDispellEffectMessage(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameActionFightTriggerEffectMessage(param1);
        }

        public deserializeAs_GameActionFightTriggerEffectMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);

        }
    }
    export class GameActionFightTriggerGlyphTrapMessage extends AbstractGameActionMessage {
        public static ID: number = 5741;

        markId: number;
        triggeringCharacterId: number;
        triggeredSpellId: number;

        constructor() {
            this.markId = 0;
            this.triggeringCharacterId = 0;
            this.triggeredSpellId = 0;
            super();
        }

        public getMessageId(): number {
            return GameActionFightTriggerGlyphTrapMessage.ID;
        }

        public reset(): void {
            this.markId = 0;
            this.triggeringCharacterId = 0;
            this.triggeredSpellId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameActionFightTriggerGlyphTrapMessage(param1);
        }

        public serializeAs_GameActionFightTriggerGlyphTrapMessage(param1: ICustomDataOutput): void {
            super.serializeAs_AbstractGameActionMessage(param1);
            param1.writeShort(this.markId);
            param1.writeInt(this.triggeringCharacterId);
            if (this.triggeredSpellId < 0) {
                throw new Error('Forbidden value (' + this.triggeredSpellId + ') on element triggeredSpellId.');
            }
            param1.writeVarShort(this.triggeredSpellId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameActionFightTriggerGlyphTrapMessage(param1);
        }

        public deserializeAs_GameActionFightTriggerGlyphTrapMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.markId = param1.readShort();
            this.triggeringCharacterId = param1.readInt();
            this.triggeredSpellId = param1.readVarUhShort();
            if (this.triggeredSpellId < 0) {
                throw new Error('Forbidden value (' + this.triggeredSpellId + ') on element of GameActionFightTriggerGlyphTrapMessage.triggeredSpellId.');
            }

        }
    }
    export class GameActionFightUnmarkCellsMessage extends AbstractGameActionMessage {
        public static ID: number = 5570;

        markId: number;

        constructor() {
            this.markId = 0;
            super();
        }

        public getMessageId(): number {
            return GameActionFightUnmarkCellsMessage.ID;
        }

        public reset(): void {
            this.markId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameActionFightUnmarkCellsMessage(param1);
        }

        public serializeAs_GameActionFightUnmarkCellsMessage(param1: ICustomDataOutput): void {
            super.serializeAs_AbstractGameActionMessage(param1);
            param1.writeShort(this.markId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameActionFightUnmarkCellsMessage(param1);
        }

        public deserializeAs_GameActionFightUnmarkCellsMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.markId = param1.readShort();

        }
    }
    export class GameActionFightVanishMessage extends AbstractGameActionMessage {
        public static ID: number = 6217;

        targetId: number;

        constructor() {
            this.targetId = 0;
            super();
        }

        public getMessageId(): number {
            return GameActionFightVanishMessage.ID;
        }

        public reset(): void {
            this.targetId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameActionFightVanishMessage(param1);
        }

        public serializeAs_GameActionFightVanishMessage(param1: ICustomDataOutput): void {
            super.serializeAs_AbstractGameActionMessage(param1);
            param1.writeInt(this.targetId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameActionFightVanishMessage(param1);
        }

        public deserializeAs_GameActionFightVanishMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.targetId = param1.readInt();

        }
    }
    export class SequenceEndMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 956;

        actionId: number;
        authorId: number;
        sequenceType: number;

        constructor() {
            this.actionId = 0;
            this.authorId = 0;
            this.sequenceType = 0;
            super();
        }

        public getMessageId(): number {
            return SequenceEndMessage.ID;
        }

        public reset(): void {
            this.actionId = 0;
            this.authorId = 0;
            this.sequenceType = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_SequenceEndMessage(param1);
        }

        public serializeAs_SequenceEndMessage(param1: ICustomDataOutput): void {
            if (this.actionId < 0) {
                throw new Error('Forbidden value (' + this.actionId + ') on element actionId.');
            }
            param1.writeVarShort(this.actionId);
            param1.writeInt(this.authorId);
            param1.writeByte(this.sequenceType);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_SequenceEndMessage(param1);
        }

        public deserializeAs_SequenceEndMessage(param1: ICustomDataInput): void {
            this.actionId = param1.readVarUhShort();
            if (this.actionId < 0) {
                throw new Error('Forbidden value (' + this.actionId + ') on element of SequenceEndMessage.actionId.');
            }
            this.authorId = param1.readInt();
            this.sequenceType = param1.readByte();

        }
    }
    export class SequenceStartMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 955;

        sequenceType: number;
        authorId: number;

        constructor() {
            this.sequenceType = 0;
            this.authorId = 0;
            super();
        }

        public getMessageId(): number {
            return SequenceStartMessage.ID;
        }

        public reset(): void {
            this.sequenceType = 0;
            this.authorId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_SequenceStartMessage(param1);
        }

        public serializeAs_SequenceStartMessage(param1: ICustomDataOutput): void {
            param1.writeByte(this.sequenceType);
            param1.writeInt(this.authorId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_SequenceStartMessage(param1);
        }

        public deserializeAs_SequenceStartMessage(param1: ICustomDataInput): void {
            this.sequenceType = param1.readByte();
            this.authorId = param1.readInt();

        }
    }
    export class AllianceChangeGuildRightsMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6426;

        guildId: number;
        rights: number;

        constructor() {
            this.guildId = 0;
            this.rights = 0;
            super();
        }

        public getMessageId(): number {
            return AllianceChangeGuildRightsMessage.ID;
        }

        public reset(): void {
            this.guildId = 0;
            this.rights = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_AllianceChangeGuildRightsMessage(param1);
        }

        public serializeAs_AllianceChangeGuildRightsMessage(param1: ICustomDataOutput): void {
            if (this.guildId < 0) {
                throw new Error('Forbidden value (' + this.guildId + ') on element guildId.');
            }
            param1.writeVarInt(this.guildId);
            if (this.rights < 0) {
                throw new Error('Forbidden value (' + this.rights + ') on element rights.');
            }
            param1.writeByte(this.rights);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_AllianceChangeGuildRightsMessage(param1);
        }

        public deserializeAs_AllianceChangeGuildRightsMessage(param1: ICustomDataInput): void {
            this.guildId = param1.readVarUhInt();
            if (this.guildId < 0) {
                throw new Error('Forbidden value (' + this.guildId + ') on element of AllianceChangeGuildRightsMessage.guildId.');
            }
            this.rights = param1.readByte();
            if (this.rights < 0) {
                throw new Error('Forbidden value (' + this.rights + ') on element of AllianceChangeGuildRightsMessage.rights.');
            }

        }
    }
    export class AllianceCreationResultMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6391;

        result: number;

        constructor() {
            this.result = 0;
            super();
        }

        public getMessageId(): number {
            return AllianceCreationResultMessage.ID;
        }

        public reset(): void {
            this.result = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_AllianceCreationResultMessage(param1);
        }

        public serializeAs_AllianceCreationResultMessage(param1: ICustomDataOutput): void {
            param1.writeByte(this.result);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_AllianceCreationResultMessage(param1);
        }

        public deserializeAs_AllianceCreationResultMessage(param1: ICustomDataInput): void {
            this.result = param1.readByte();
            if (this.result < 0) {
                throw new Error('Forbidden value (' + this.result + ') on element of AllianceCreationResultMessage.result.');
            }

        }
    }
    export class AllianceCreationStartedMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6394;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return AllianceCreationStartedMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_AllianceCreationStartedMessage(param1);
        }

        public serializeAs_AllianceCreationStartedMessage(param1: ICustomDataOutput): void {

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_AllianceCreationStartedMessage(param1);
        }

        public deserializeAs_AllianceCreationStartedMessage(param1: ICustomDataInput): void {

        }
    }
    export class AllianceCreationValidMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6393;

        allianceName: string;
        allianceTag: string;
        allianceEmblem: GuildEmblem;

        constructor() {
            this.allianceName = '';
            this.allianceTag = '';
            this.allianceEmblem = new GuildEmblem();
            super();
        }

        public getMessageId(): number {
            return AllianceCreationValidMessage.ID;
        }

        public reset(): void {
            this.allianceName = '';
            this.allianceTag = '';
            this.allianceEmblem = new GuildEmblem();
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_AllianceCreationValidMessage(param1);
        }

        public serializeAs_AllianceCreationValidMessage(param1: ICustomDataOutput): void {
            param1.writeUTF(this.allianceName);
            param1.writeUTF(this.allianceTag);
            this.allianceEmblem.serializeAs_GuildEmblem(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_AllianceCreationValidMessage(param1);
        }

        public deserializeAs_AllianceCreationValidMessage(param1: ICustomDataInput): void {
            this.allianceName = param1.readUTF();
            this.allianceTag = param1.readUTF();
            this.allianceEmblem = new GuildEmblem();
            this.allianceEmblem.deserialize(param1);

        }
    }
    export class AllianceFactsErrorMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6423;

        allianceId: number;

        constructor() {
            this.allianceId = 0;
            super();
        }

        public getMessageId(): number {
            return AllianceFactsErrorMessage.ID;
        }

        public reset(): void {
            this.allianceId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_AllianceFactsErrorMessage(param1);
        }

        public serializeAs_AllianceFactsErrorMessage(param1: ICustomDataOutput): void {
            if (this.allianceId < 0) {
                throw new Error('Forbidden value (' + this.allianceId + ') on element allianceId.');
            }
            param1.writeVarInt(this.allianceId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_AllianceFactsErrorMessage(param1);
        }

        public deserializeAs_AllianceFactsErrorMessage(param1: ICustomDataInput): void {
            this.allianceId = param1.readVarUhInt();
            if (this.allianceId < 0) {
                throw new Error('Forbidden value (' + this.allianceId + ') on element of AllianceFactsErrorMessage.allianceId.');
            }

        }
    }
    export class AllianceFactsMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6414;

        infos: AllianceFactSheetInformations;
        guilds: GuildInAllianceInformations[];
        controlledSubareaIds: number[];
        leaderCharacterId: number;
        leaderCharacterName: string;

        constructor() {
            this.infos = new AllianceFactSheetInformations();
            this.guilds = [];
            this.controlledSubareaIds = [];
            this.leaderCharacterId = 0;
            this.leaderCharacterName = '';
            super();
        }

        public getMessageId(): number {
            return AllianceFactsMessage.ID;
        }

        public reset(): void {
            this.infos = new AllianceFactSheetInformations();
            this.guilds = [];
            this.controlledSubareaIds = [];
            this.leaderCharacterId = 0;
            this.leaderCharacterName = '';
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_AllianceFactsMessage(param1);
        }

        public serializeAs_AllianceFactsMessage(param1: ICustomDataOutput): void {
            param1.writeShort(this.infos.getTypeId());
            this.infos.serialize(param1);
            param1.writeShort(this.guilds.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.guilds.length) {
                (this.guilds[_loc2_]).serializeAs_GuildInAllianceInformations(param1);
                _loc2_++;
            }
            param1.writeShort(this.controlledSubareaIds.length);
            var _loc3_: number = 0;
            while (_loc3_ < this.controlledSubareaIds.length) {
                if (this.controlledSubareaIds[_loc3_] < 0) {
                    throw new Error('Forbidden value (' + this.controlledSubareaIds[_loc3_] + ') on element 3 (starting at 1) of controlledSubareaIds.');
                }
                param1.writeVarShort(this.controlledSubareaIds[_loc3_]);
                _loc3_++;
            }
            if (this.leaderCharacterId < 0) {
                throw new Error('Forbidden value (' + this.leaderCharacterId + ') on element leaderCharacterId.');
            }
            param1.writeVarInt(this.leaderCharacterId);
            param1.writeUTF(this.leaderCharacterName);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_AllianceFactsMessage(param1);
        }

        public deserializeAs_AllianceFactsMessage(param1: ICustomDataInput): void {
            var _loc7_: GuildInAllianceInformations = null;
            var _loc8_: number = 0;
            var _loc2_: number = param1.readUnsignedShort();
            this.infos = <AllianceFactSheetInformations>ProtocolTypeManager.getInstance(AllianceFactSheetInformations, _loc2_);
            this.infos.deserialize(param1);
            var _loc3_: number = param1.readUnsignedShort();
            var _loc4_: number = 0;
            while (_loc4_ < _loc3_) {
            _loc7_ = new GuildInAllianceInformations();
                _loc7_.deserialize(param1);
                this.guilds.push(_loc7_);
                _loc4_++;
            }
            var _loc5_: number = param1.readUnsignedShort();
            var _loc6_: number = 0;
            while (_loc6_ < _loc5_) {
            _loc8_ = param1.readVarUhShort();
                if (_loc8_ < 0) {
                    throw new Error('Forbidden value (' + _loc8_ + ') on elements of controlledSubareaIds.');
                }
                this.controlledSubareaIds.push(_loc8_);
                _loc6_++;
            }
            this.leaderCharacterId = param1.readVarUhInt();
            if (this.leaderCharacterId < 0) {
                throw new Error('Forbidden value (' + this.leaderCharacterId + ') on element of AllianceFactsMessage.leaderCharacterId.');
            }
            this.leaderCharacterName = param1.readUTF();

        }
    }
    export class AllianceFactsRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6409;

        allianceId: number;

        constructor() {
            this.allianceId = 0;
            super();
        }

        public getMessageId(): number {
            return AllianceFactsRequestMessage.ID;
        }

        public reset(): void {
            this.allianceId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_AllianceFactsRequestMessage(param1);
        }

        public serializeAs_AllianceFactsRequestMessage(param1: ICustomDataOutput): void {
            if (this.allianceId < 0) {
                throw new Error('Forbidden value (' + this.allianceId + ') on element allianceId.');
            }
            param1.writeVarInt(this.allianceId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_AllianceFactsRequestMessage(param1);
        }

        public deserializeAs_AllianceFactsRequestMessage(param1: ICustomDataInput): void {
            this.allianceId = param1.readVarUhInt();
            if (this.allianceId < 0) {
                throw new Error('Forbidden value (' + this.allianceId + ') on element of AllianceFactsRequestMessage.allianceId.');
            }

        }
    }
    export class AllianceGuildLeavingMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6399;

        kicked: boolean;
        guildId: number;

        constructor() {
            this.kicked = false;
            this.guildId = 0;
            super();
        }

        public getMessageId(): number {
            return AllianceGuildLeavingMessage.ID;
        }

        public reset(): void {
            this.kicked = false;
            this.guildId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_AllianceGuildLeavingMessage(param1);
        }

        public serializeAs_AllianceGuildLeavingMessage(param1: ICustomDataOutput): void {
            param1.writeBoolean(this.kicked);
            if (this.guildId < 0) {
                throw new Error('Forbidden value (' + this.guildId + ') on element guildId.');
            }
            param1.writeVarInt(this.guildId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_AllianceGuildLeavingMessage(param1);
        }

        public deserializeAs_AllianceGuildLeavingMessage(param1: ICustomDataInput): void {
            this.kicked = param1.readBoolean();
            this.guildId = param1.readVarUhInt();
            if (this.guildId < 0) {
                throw new Error('Forbidden value (' + this.guildId + ') on element of AllianceGuildLeavingMessage.guildId.');
            }

        }
    }
    export class AllianceInsiderInfoMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6403;

        allianceInfos: AllianceFactSheetInformations;
        guilds: GuildInsiderFactSheetInformations[];
        prisms: PrismSubareaEmptyInfo[];

        constructor() {
            this.allianceInfos = new AllianceFactSheetInformations();
            this.guilds = [];
            this.prisms = [];
            super();
        }

        public getMessageId(): number {
            return AllianceInsiderInfoMessage.ID;
        }

        public reset(): void {
            this.allianceInfos = new AllianceFactSheetInformations();
            this.guilds = [];
            this.prisms = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_AllianceInsiderInfoMessage(param1);
        }

        public serializeAs_AllianceInsiderInfoMessage(param1: ICustomDataOutput): void {
            this.allianceInfos.serializeAs_AllianceFactSheetInformations(param1);
            param1.writeShort(this.guilds.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.guilds.length) {
                (this.guilds[_loc2_]).serializeAs_GuildInsiderFactSheetInformations(param1);
                _loc2_++;
            }
            param1.writeShort(this.prisms.length);
            var _loc3_: number = 0;
            while (_loc3_ < this.prisms.length) {
                param1.writeShort((this.prisms[_loc3_]).getTypeId());
                (this.prisms[_loc3_]).serialize(param1);
                _loc3_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_AllianceInsiderInfoMessage(param1);
        }

        public deserializeAs_AllianceInsiderInfoMessage(param1: ICustomDataInput): void {
            var _loc6_: GuildInsiderFactSheetInformations = null;
            var _loc7_: number = 0;
            var _loc8_: PrismSubareaEmptyInfo = null;
            this.allianceInfos = new AllianceFactSheetInformations();
            this.allianceInfos.deserialize(param1);
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc6_ = new GuildInsiderFactSheetInformations();
                _loc6_.deserialize(param1);
                this.guilds.push(_loc6_);
                _loc3_++;
            }
            var _loc4_: number = param1.readUnsignedShort();
            var _loc5_: number = 0;
            while (_loc5_ < _loc4_) {
            _loc7_ = param1.readUnsignedShort();
                _loc8_ = <PrismSubareaEmptyInfo>ProtocolTypeManager.getInstance(PrismSubareaEmptyInfo, _loc7_);
                _loc8_.deserialize(param1);
                this.prisms.push(_loc8_);
                _loc5_++;
            }

        }
    }
    export class AllianceInsiderInfoRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6417;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return AllianceInsiderInfoRequestMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_AllianceInsiderInfoRequestMessage(param1);
        }

        public serializeAs_AllianceInsiderInfoRequestMessage(param1: ICustomDataOutput): void {

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_AllianceInsiderInfoRequestMessage(param1);
        }

        public deserializeAs_AllianceInsiderInfoRequestMessage(param1: ICustomDataInput): void {

        }
    }
    export class AllianceInvitationAnswerMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6401;

        accept: boolean;

        constructor() {
            this.accept = false;
            super();
        }

        public getMessageId(): number {
            return AllianceInvitationAnswerMessage.ID;
        }

        public reset(): void {
            this.accept = false;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_AllianceInvitationAnswerMessage(param1);
        }

        public serializeAs_AllianceInvitationAnswerMessage(param1: ICustomDataOutput): void {
            param1.writeBoolean(this.accept);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_AllianceInvitationAnswerMessage(param1);
        }

        public deserializeAs_AllianceInvitationAnswerMessage(param1: ICustomDataInput): void {
            this.accept = param1.readBoolean();

        }
    }
    export class AllianceInvitationMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6395;

        targetId: number;

        constructor() {
            this.targetId = 0;
            super();
        }

        public getMessageId(): number {
            return AllianceInvitationMessage.ID;
        }

        public reset(): void {
            this.targetId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_AllianceInvitationMessage(param1);
        }

        public serializeAs_AllianceInvitationMessage(param1: ICustomDataOutput): void {
            if (this.targetId < 0) {
                throw new Error('Forbidden value (' + this.targetId + ') on element targetId.');
            }
            param1.writeVarInt(this.targetId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_AllianceInvitationMessage(param1);
        }

        public deserializeAs_AllianceInvitationMessage(param1: ICustomDataInput): void {
            this.targetId = param1.readVarUhInt();
            if (this.targetId < 0) {
                throw new Error('Forbidden value (' + this.targetId + ') on element of AllianceInvitationMessage.targetId.');
            }

        }
    }
    export class AllianceInvitationStateRecrutedMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6392;

        invitationState: number;

        constructor() {
            this.invitationState = 0;
            super();
        }

        public getMessageId(): number {
            return AllianceInvitationStateRecrutedMessage.ID;
        }

        public reset(): void {
            this.invitationState = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_AllianceInvitationStateRecrutedMessage(param1);
        }

        public serializeAs_AllianceInvitationStateRecrutedMessage(param1: ICustomDataOutput): void {
            param1.writeByte(this.invitationState);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_AllianceInvitationStateRecrutedMessage(param1);
        }

        public deserializeAs_AllianceInvitationStateRecrutedMessage(param1: ICustomDataInput): void {
            this.invitationState = param1.readByte();
            if (this.invitationState < 0) {
                throw new Error('Forbidden value (' + this.invitationState + ') on element of AllianceInvitationStateRecrutedMessage.invitationState.');
            }

        }
    }
    export class AllianceInvitationStateRecruterMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6396;

        recrutedName: string;
        invitationState: number;

        constructor() {
            this.recrutedName = '';
            this.invitationState = 0;
            super();
        }

        public getMessageId(): number {
            return AllianceInvitationStateRecruterMessage.ID;
        }

        public reset(): void {
            this.recrutedName = '';
            this.invitationState = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_AllianceInvitationStateRecruterMessage(param1);
        }

        public serializeAs_AllianceInvitationStateRecruterMessage(param1: ICustomDataOutput): void {
            param1.writeUTF(this.recrutedName);
            param1.writeByte(this.invitationState);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_AllianceInvitationStateRecruterMessage(param1);
        }

        public deserializeAs_AllianceInvitationStateRecruterMessage(param1: ICustomDataInput): void {
            this.recrutedName = param1.readUTF();
            this.invitationState = param1.readByte();
            if (this.invitationState < 0) {
                throw new Error('Forbidden value (' + this.invitationState + ') on element of AllianceInvitationStateRecruterMessage.invitationState.');
            }

        }
    }
    export class AllianceInvitedMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6397;

        recruterId: number;
        recruterName: string;
        allianceInfo: BasicNamedAllianceInformations;

        constructor() {
            this.recruterId = 0;
            this.recruterName = '';
            this.allianceInfo = new BasicNamedAllianceInformations();
            super();
        }

        public getMessageId(): number {
            return AllianceInvitedMessage.ID;
        }

        public reset(): void {
            this.recruterId = 0;
            this.recruterName = '';
            this.allianceInfo = new BasicNamedAllianceInformations();
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_AllianceInvitedMessage(param1);
        }

        public serializeAs_AllianceInvitedMessage(param1: ICustomDataOutput): void {
            if (this.recruterId < 0) {
                throw new Error('Forbidden value (' + this.recruterId + ') on element recruterId.');
            }
            param1.writeVarInt(this.recruterId);
            param1.writeUTF(this.recruterName);
            this.allianceInfo.serializeAs_BasicNamedAllianceInformations(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_AllianceInvitedMessage(param1);
        }

        public deserializeAs_AllianceInvitedMessage(param1: ICustomDataInput): void {
            this.recruterId = param1.readVarUhInt();
            if (this.recruterId < 0) {
                throw new Error('Forbidden value (' + this.recruterId + ') on element of AllianceInvitedMessage.recruterId.');
            }
            this.recruterName = param1.readUTF();
            this.allianceInfo = new BasicNamedAllianceInformations();
            this.allianceInfo.deserialize(param1);

        }
    }
    export class AllianceJoinedMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6402;

        allianceInfo: AllianceInformations;
        enabled: boolean;

        constructor() {
            this.allianceInfo = new AllianceInformations();
            this.enabled = false;
            super();
        }

        public getMessageId(): number {
            return AllianceJoinedMessage.ID;
        }

        public reset(): void {
            this.allianceInfo = new AllianceInformations();
            this.enabled = false;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_AllianceJoinedMessage(param1);
        }

        public serializeAs_AllianceJoinedMessage(param1: ICustomDataOutput): void {
            this.allianceInfo.serializeAs_AllianceInformations(param1);
            param1.writeBoolean(this.enabled);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_AllianceJoinedMessage(param1);
        }

        public deserializeAs_AllianceJoinedMessage(param1: ICustomDataInput): void {
            this.allianceInfo = new AllianceInformations();
            this.allianceInfo.deserialize(param1);
            this.enabled = param1.readBoolean();

        }
    }
    export class AllianceKickRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6400;

        kickedId: number;

        constructor() {
            this.kickedId = 0;
            super();
        }

        public getMessageId(): number {
            return AllianceKickRequestMessage.ID;
        }

        public reset(): void {
            this.kickedId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_AllianceKickRequestMessage(param1);
        }

        public serializeAs_AllianceKickRequestMessage(param1: ICustomDataOutput): void {
            if (this.kickedId < 0) {
                throw new Error('Forbidden value (' + this.kickedId + ') on element kickedId.');
            }
            param1.writeVarInt(this.kickedId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_AllianceKickRequestMessage(param1);
        }

        public deserializeAs_AllianceKickRequestMessage(param1: ICustomDataInput): void {
            this.kickedId = param1.readVarUhInt();
            if (this.kickedId < 0) {
                throw new Error('Forbidden value (' + this.kickedId + ') on element of AllianceKickRequestMessage.kickedId.');
            }

        }
    }
    export class AllianceLeftMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6398;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return AllianceLeftMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_AllianceLeftMessage(param1);
        }

        public serializeAs_AllianceLeftMessage(param1: ICustomDataOutput): void {

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_AllianceLeftMessage(param1);
        }

        public deserializeAs_AllianceLeftMessage(param1: ICustomDataInput): void {

        }
    }
    export class AllianceListMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6408;

        alliances: AllianceFactSheetInformations[];

        constructor() {
            this.alliances = [];
            super();
        }

        public getMessageId(): number {
            return AllianceListMessage.ID;
        }

        public reset(): void {
            this.alliances = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_AllianceListMessage(param1);
        }

        public serializeAs_AllianceListMessage(param1: ICustomDataOutput): void {
            param1.writeShort(this.alliances.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.alliances.length) {
                (this.alliances[_loc2_]).serializeAs_AllianceFactSheetInformations(param1);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_AllianceListMessage(param1);
        }

        public deserializeAs_AllianceListMessage(param1: ICustomDataInput): void {
            var _loc4_: AllianceFactSheetInformations = null;
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = new AllianceFactSheetInformations();
                _loc4_.deserialize(param1);
                this.alliances.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class AllianceMembershipMessage extends AllianceJoinedMessage {
        public static ID: number = 6390;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return AllianceMembershipMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_AllianceMembershipMessage(param1);
        }

        public serializeAs_AllianceMembershipMessage(param1: ICustomDataOutput): void {
            super.serializeAs_AllianceJoinedMessage(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_AllianceMembershipMessage(param1);
        }

        public deserializeAs_AllianceMembershipMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);

        }
    }
    export class AllianceModificationEmblemValidMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6447;

        Alliancemblem: GuildEmblem;

        constructor() {
            this.Alliancemblem = new GuildEmblem();
            super();
        }

        public getMessageId(): number {
            return AllianceModificationEmblemValidMessage.ID;
        }

        public reset(): void {
            this.Alliancemblem = new GuildEmblem();
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_AllianceModificationEmblemValidMessage(param1);
        }

        public serializeAs_AllianceModificationEmblemValidMessage(param1: ICustomDataOutput): void {
            this.Alliancemblem.serializeAs_GuildEmblem(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_AllianceModificationEmblemValidMessage(param1);
        }

        public deserializeAs_AllianceModificationEmblemValidMessage(param1: ICustomDataInput): void {
            this.Alliancemblem = new GuildEmblem();
            this.Alliancemblem.deserialize(param1);

        }
    }
    export class AllianceModificationNameAndTagValidMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6449;

        allianceName: string;
        allianceTag: string;

        constructor() {
            this.allianceName = '';
            this.allianceTag = '';
            super();
        }

        public getMessageId(): number {
            return AllianceModificationNameAndTagValidMessage.ID;
        }

        public reset(): void {
            this.allianceName = '';
            this.allianceTag = '';
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_AllianceModificationNameAndTagValidMessage(param1);
        }

        public serializeAs_AllianceModificationNameAndTagValidMessage(param1: ICustomDataOutput): void {
            param1.writeUTF(this.allianceName);
            param1.writeUTF(this.allianceTag);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_AllianceModificationNameAndTagValidMessage(param1);
        }

        public deserializeAs_AllianceModificationNameAndTagValidMessage(param1: ICustomDataInput): void {
            this.allianceName = param1.readUTF();
            this.allianceTag = param1.readUTF();

        }
    }
    export class AllianceModificationStartedMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6444;

        canChangeName: boolean;
        canChangeTag: boolean;
        canChangeEmblem: boolean;

        constructor() {
            this.canChangeName = false;
            this.canChangeTag = false;
            this.canChangeEmblem = false;
            super();
        }

        public getMessageId(): number {
            return AllianceModificationStartedMessage.ID;
        }

        public reset(): void {
            this.canChangeName = false;
            this.canChangeTag = false;
            this.canChangeEmblem = false;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_AllianceModificationStartedMessage(param1);
        }

        public serializeAs_AllianceModificationStartedMessage(param1: ICustomDataOutput): void {
            var _loc2_: number = 0;
            _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 0, this.canChangeName);
            _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 1, this.canChangeTag);
            _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 2, this.canChangeEmblem);
            param1.writeByte(_loc2_);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_AllianceModificationStartedMessage(param1);
        }

        public deserializeAs_AllianceModificationStartedMessage(param1: ICustomDataInput): void {
            var _loc2_: number = param1.readByte();
            this.canChangeName = BooleanByteWrapper.getFlag(_loc2_, 0);
            this.canChangeTag = BooleanByteWrapper.getFlag(_loc2_, 1);
            this.canChangeEmblem = BooleanByteWrapper.getFlag(_loc2_, 2);

        }
    }
    export class AllianceModificationValidMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6450;

        allianceName: string;
        allianceTag: string;
        Alliancemblem: GuildEmblem;

        constructor() {
            this.allianceName = '';
            this.allianceTag = '';
            this.Alliancemblem = new GuildEmblem();
            super();
        }

        public getMessageId(): number {
            return AllianceModificationValidMessage.ID;
        }

        public reset(): void {
            this.allianceName = '';
            this.allianceTag = '';
            this.Alliancemblem = new GuildEmblem();
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_AllianceModificationValidMessage(param1);
        }

        public serializeAs_AllianceModificationValidMessage(param1: ICustomDataOutput): void {
            param1.writeUTF(this.allianceName);
            param1.writeUTF(this.allianceTag);
            this.Alliancemblem.serializeAs_GuildEmblem(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_AllianceModificationValidMessage(param1);
        }

        public deserializeAs_AllianceModificationValidMessage(param1: ICustomDataInput): void {
            this.allianceName = param1.readUTF();
            this.allianceTag = param1.readUTF();
            this.Alliancemblem = new GuildEmblem();
            this.Alliancemblem.deserialize(param1);

        }
    }
    export class AlliancePartialListMessage extends AllianceListMessage {
        public static ID: number = 6427;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return AlliancePartialListMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_AlliancePartialListMessage(param1);
        }

        public serializeAs_AlliancePartialListMessage(param1: ICustomDataOutput): void {
            super.serializeAs_AllianceListMessage(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_AlliancePartialListMessage(param1);
        }

        public deserializeAs_AlliancePartialListMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);

        }
    }
    export class AllianceVersatileInfoListMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6436;

        alliances: AllianceVersatileInformations[];

        constructor() {
            this.alliances = [];
            super();
        }

        public getMessageId(): number {
            return AllianceVersatileInfoListMessage.ID;
        }

        public reset(): void {
            this.alliances = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_AllianceVersatileInfoListMessage(param1);
        }

        public serializeAs_AllianceVersatileInfoListMessage(param1: ICustomDataOutput): void {
            param1.writeShort(this.alliances.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.alliances.length) {
                (this.alliances[_loc2_]).serializeAs_AllianceVersatileInformations(param1);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_AllianceVersatileInfoListMessage(param1);
        }

        public deserializeAs_AllianceVersatileInfoListMessage(param1: ICustomDataInput): void {
            var _loc4_: AllianceVersatileInformations = null;
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = new AllianceVersatileInformations();
                _loc4_.deserialize(param1);
                this.alliances.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class KohUpdateMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6439;

        alliances: AllianceInformations[];
        allianceNbMembers: number[];
        allianceRoundWeigth: number[];
        allianceMatchScore: number[];
        allianceMapWinner: BasicAllianceInformations;
        allianceMapWinnerScore: number;
        allianceMapMyAllianceScore: number;
        nextTickTime: number;

        constructor() {
            this.alliances = [];
            this.allianceNbMembers = [];
            this.allianceRoundWeigth = [];
            this.allianceMatchScore = [];
            this.allianceMapWinner = new BasicAllianceInformations();
            this.allianceMapWinnerScore = 0;
            this.allianceMapMyAllianceScore = 0;
            this.nextTickTime = 0;
            super();
        }

        public getMessageId(): number {
            return KohUpdateMessage.ID;
        }

        public reset(): void {
            this.alliances = [];
            this.allianceNbMembers = [];
            this.allianceRoundWeigth = [];
            this.allianceMatchScore = [];
            this.allianceMapWinner = new BasicAllianceInformations();
            this.allianceMapWinnerScore = 0;
            this.allianceMapMyAllianceScore = 0;
            this.nextTickTime = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_KohUpdateMessage(param1);
        }

        public serializeAs_KohUpdateMessage(param1: ICustomDataOutput): void {
            param1.writeShort(this.alliances.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.alliances.length) {
                (this.alliances[_loc2_]).serializeAs_AllianceInformations(param1);
                _loc2_++;
            }
            param1.writeShort(this.allianceNbMembers.length);
            var _loc3_: number = 0;
            while (_loc3_ < this.allianceNbMembers.length) {
                if (this.allianceNbMembers[_loc3_] < 0) {
                    throw new Error('Forbidden value (' + this.allianceNbMembers[_loc3_] + ') on element 2 (starting at 1) of allianceNbMembers.');
                }
                param1.writeVarShort(this.allianceNbMembers[_loc3_]);
                _loc3_++;
            }
            param1.writeShort(this.allianceRoundWeigth.length);
            var _loc4_: number = 0;
            while (_loc4_ < this.allianceRoundWeigth.length) {
                if (this.allianceRoundWeigth[_loc4_] < 0) {
                    throw new Error('Forbidden value (' + this.allianceRoundWeigth[_loc4_] + ') on element 3 (starting at 1) of allianceRoundWeigth.');
                }
                param1.writeVarInt(this.allianceRoundWeigth[_loc4_]);
                _loc4_++;
            }
            param1.writeShort(this.allianceMatchScore.length);
            var _loc5_: number = 0;
            while (_loc5_ < this.allianceMatchScore.length) {
                if (this.allianceMatchScore[_loc5_] < 0) {
                    throw new Error('Forbidden value (' + this.allianceMatchScore[_loc5_] + ') on element 4 (starting at 1) of allianceMatchScore.');
                }
                param1.writeByte(this.allianceMatchScore[_loc5_]);
                _loc5_++;
            }
            this.allianceMapWinner.serializeAs_BasicAllianceInformations(param1);
            if (this.allianceMapWinnerScore < 0) {
                throw new Error('Forbidden value (' + this.allianceMapWinnerScore + ') on element allianceMapWinnerScore.');
            }
            param1.writeVarInt(this.allianceMapWinnerScore);
            if (this.allianceMapMyAllianceScore < 0) {
                throw new Error('Forbidden value (' + this.allianceMapMyAllianceScore + ') on element allianceMapMyAllianceScore.');
            }
            param1.writeVarInt(this.allianceMapMyAllianceScore);
            if (this.nextTickTime < 0 || this.nextTickTime > 9.007199254740992E15) {
                throw new Error('Forbidden value (' + this.nextTickTime + ') on element nextTickTime.');
            }
            param1.writeDouble(this.nextTickTime);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_KohUpdateMessage(param1);
        }

        public deserializeAs_KohUpdateMessage(param1: ICustomDataInput): void {
            var _loc10_: AllianceInformations = null;
            var _loc11_: number = 0;
            var _loc12_: number = 0;
            var _loc13_: number = 0;
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc10_ = new AllianceInformations();
                _loc10_.deserialize(param1);
                this.alliances.push(_loc10_);
                _loc3_++;
            }
            var _loc4_: number = param1.readUnsignedShort();
            var _loc5_: number = 0;
            while (_loc5_ < _loc4_) {
            _loc11_ = param1.readVarUhShort();
                if (_loc11_ < 0) {
                    throw new Error('Forbidden value (' + _loc11_ + ') on elements of allianceNbMembers.');
                }
                this.allianceNbMembers.push(_loc11_);
                _loc5_++;
            }
            var _loc6_: number = param1.readUnsignedShort();
            var _loc7_: number = 0;
            while (_loc7_ < _loc6_) {
            _loc12_ = param1.readVarUhInt();
                if (_loc12_ < 0) {
                    throw new Error('Forbidden value (' + _loc12_ + ') on elements of allianceRoundWeigth.');
                }
                this.allianceRoundWeigth.push(_loc12_);
                _loc7_++;
            }
            var _loc8_: number = param1.readUnsignedShort();
            var _loc9_: number = 0;
            while (_loc9_ < _loc8_) {
            _loc13_ = param1.readByte();
                if (_loc13_ < 0) {
                    throw new Error('Forbidden value (' + _loc13_ + ') on elements of allianceMatchScore.');
                }
                this.allianceMatchScore.push(_loc13_);
                _loc9_++;
            }
            this.allianceMapWinner = new BasicAllianceInformations();
            this.allianceMapWinner.deserialize(param1);
            this.allianceMapWinnerScore = param1.readVarUhInt();
            if (this.allianceMapWinnerScore < 0) {
                throw new Error('Forbidden value (' + this.allianceMapWinnerScore + ') on element of KohUpdateMessage.allianceMapWinnerScore.');
            }
            this.allianceMapMyAllianceScore = param1.readVarUhInt();
            if (this.allianceMapMyAllianceScore < 0) {
                throw new Error('Forbidden value (' + this.allianceMapMyAllianceScore + ') on element of KohUpdateMessage.allianceMapMyAllianceScore.');
            }
            this.nextTickTime = param1.readDouble();
            if (this.nextTickTime < 0 || this.nextTickTime > 9.007199254740992E15) {
                throw new Error('Forbidden value (' + this.nextTickTime + ') on element of KohUpdateMessage.nextTickTime.');
            }

        }
    }
    export class AlmanachCalendarDateMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6341;

        date: number;

        constructor() {
            this.date = 0;
            super();
        }

        public getMessageId(): number {
            return AlmanachCalendarDateMessage.ID;
        }

        public reset(): void {
            this.date = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_AlmanachCalendarDateMessage(param1);
        }

        public serializeAs_AlmanachCalendarDateMessage(param1: ICustomDataOutput): void {
            param1.writeInt(this.date);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_AlmanachCalendarDateMessage(param1);
        }

        public deserializeAs_AlmanachCalendarDateMessage(param1: ICustomDataInput): void {
            this.date = param1.readInt();

        }
    }
    export class AccountCapabilitiesMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6216;

        accountId: number;
        tutorialAvailable: boolean;
        breedsVisible: number;
        breedsAvailable: number;
        status: number;
        canCreateNewCharacter: boolean;

        constructor() {
            this.accountId = 0;
            this.tutorialAvailable = false;
            this.breedsVisible = 0;
            this.breedsAvailable = 0;
            this.status = -1;
            this.canCreateNewCharacter = false;
            super();
        }

        public getMessageId(): number {
            return AccountCapabilitiesMessage.ID;
        }

        public reset(): void {
            this.accountId = 0;
            this.tutorialAvailable = false;
            this.breedsVisible = 0;
            this.breedsAvailable = 0;
            this.status = -1;
            this.canCreateNewCharacter = false;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_AccountCapabilitiesMessage(param1);
        }

        public serializeAs_AccountCapabilitiesMessage(param1: ICustomDataOutput): void {
            var _loc2_: number = 0;
            _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 0, this.tutorialAvailable);
            _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 1, this.canCreateNewCharacter);
            param1.writeByte(_loc2_);
            if (this.accountId < 0) {
                throw new Error('Forbidden value (' + this.accountId + ') on element accountId.');
            }
            param1.writeInt(this.accountId);
            if (this.breedsVisible < 0 || this.breedsVisible > 65535) {
                throw new Error('Forbidden value (' + this.breedsVisible + ') on element breedsVisible.');
            }
            param1.writeShort(this.breedsVisible);
            if (this.breedsAvailable < 0 || this.breedsAvailable > 65535) {
                throw new Error('Forbidden value (' + this.breedsAvailable + ') on element breedsAvailable.');
            }
            param1.writeShort(this.breedsAvailable);
            param1.writeByte(this.status);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_AccountCapabilitiesMessage(param1);
        }

        public deserializeAs_AccountCapabilitiesMessage(param1: ICustomDataInput): void {
            var _loc2_: number = param1.readByte();
            this.tutorialAvailable = BooleanByteWrapper.getFlag(_loc2_, 0);
            this.canCreateNewCharacter = BooleanByteWrapper.getFlag(_loc2_, 1);
            this.accountId = param1.readInt();
            if (this.accountId < 0) {
                throw new Error('Forbidden value (' + this.accountId + ') on element of AccountCapabilitiesMessage.accountId.');
            }
            this.breedsVisible = param1.readUnsignedShort();
            if (this.breedsVisible < 0 || this.breedsVisible > 65535) {
                throw new Error('Forbidden value (' + this.breedsVisible + ') on element of AccountCapabilitiesMessage.breedsVisible.');
            }
            this.breedsAvailable = param1.readUnsignedShort();
            if (this.breedsAvailable < 0 || this.breedsAvailable > 65535) {
                throw new Error('Forbidden value (' + this.breedsAvailable + ') on element of AccountCapabilitiesMessage.breedsAvailable.');
            }
            this.status = param1.readByte();

        }
    }
    export class AccountLoggingKickedMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6029;

        days: number;
        hours: number;
        minutes: number;

        constructor() {
            this.days = 0;
            this.hours = 0;
            this.minutes = 0;
            super();
        }

        public getMessageId(): number {
            return AccountLoggingKickedMessage.ID;
        }

        public reset(): void {
            this.days = 0;
            this.hours = 0;
            this.minutes = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_AccountLoggingKickedMessage(param1);
        }

        public serializeAs_AccountLoggingKickedMessage(param1: ICustomDataOutput): void {
            if (this.days < 0) {
                throw new Error('Forbidden value (' + this.days + ') on element days.');
            }
            param1.writeVarShort(this.days);
            if (this.hours < 0) {
                throw new Error('Forbidden value (' + this.hours + ') on element hours.');
            }
            param1.writeByte(this.hours);
            if (this.minutes < 0) {
                throw new Error('Forbidden value (' + this.minutes + ') on element minutes.');
            }
            param1.writeByte(this.minutes);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_AccountLoggingKickedMessage(param1);
        }

        public deserializeAs_AccountLoggingKickedMessage(param1: ICustomDataInput): void {
            this.days = param1.readVarUhShort();
            if (this.days < 0) {
                throw new Error('Forbidden value (' + this.days + ') on element of AccountLoggingKickedMessage.days.');
            }
            this.hours = param1.readByte();
            if (this.hours < 0) {
                throw new Error('Forbidden value (' + this.hours + ') on element of AccountLoggingKickedMessage.hours.');
            }
            this.minutes = param1.readByte();
            if (this.minutes < 0) {
                throw new Error('Forbidden value (' + this.minutes + ') on element of AccountLoggingKickedMessage.minutes.');
            }

        }
    }
    export class AlreadyConnectedMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 109;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return AlreadyConnectedMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_AlreadyConnectedMessage(param1);
        }

        public serializeAs_AlreadyConnectedMessage(param1: ICustomDataOutput): void {

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_AlreadyConnectedMessage(param1);
        }

        public deserializeAs_AlreadyConnectedMessage(param1: ICustomDataInput): void {

        }
    }
    export class AuthenticationTicketAcceptedMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 111;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return AuthenticationTicketAcceptedMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_AuthenticationTicketAcceptedMessage(param1);
        }

        public serializeAs_AuthenticationTicketAcceptedMessage(param1: ICustomDataOutput): void {

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_AuthenticationTicketAcceptedMessage(param1);
        }

        public deserializeAs_AuthenticationTicketAcceptedMessage(param1: ICustomDataInput): void {

        }
    }
    export class AuthenticationTicketMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 110;

        lang: string;
        ticket: string;

        constructor() {
            this.lang = '';
            this.ticket = '';
            super();
        }

        public getMessageId(): number {
            return AuthenticationTicketMessage.ID;
        }

        public reset(): void {
            this.lang = '';
            this.ticket = '';
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_AuthenticationTicketMessage(param1);
        }

        public serializeAs_AuthenticationTicketMessage(param1: ICustomDataOutput): void {
            param1.writeUTF(this.lang);
            param1.writeUTF(this.ticket);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_AuthenticationTicketMessage(param1);
        }

        public deserializeAs_AuthenticationTicketMessage(param1: ICustomDataInput): void {
            this.lang = param1.readUTF();
            this.ticket = param1.readUTF();

        }
    }
    export class AuthenticationTicketRefusedMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 112;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return AuthenticationTicketRefusedMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_AuthenticationTicketRefusedMessage(param1);
        }

        public serializeAs_AuthenticationTicketRefusedMessage(param1: ICustomDataOutput): void {

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_AuthenticationTicketRefusedMessage(param1);
        }

        public deserializeAs_AuthenticationTicketRefusedMessage(param1: ICustomDataInput): void {

        }
    }
    export class HelloGameMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 101;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return HelloGameMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_HelloGameMessage(param1);
        }

        public serializeAs_HelloGameMessage(param1: ICustomDataOutput): void {

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_HelloGameMessage(param1);
        }

        public deserializeAs_HelloGameMessage(param1: ICustomDataInput): void {

        }
    }
    export class ReloginTokenRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6540;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return ReloginTokenRequestMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ReloginTokenRequestMessage(param1);
        }

        public serializeAs_ReloginTokenRequestMessage(param1: ICustomDataOutput): void {

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ReloginTokenRequestMessage(param1);
        }

        public deserializeAs_ReloginTokenRequestMessage(param1: ICustomDataInput): void {

        }
    }
    export class ReloginTokenStatusMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6539;

        validToken: boolean;
        ticket: number[];

        constructor() {
            this.validToken = false;
            this.ticket = [];
            super();
        }

        public getMessageId(): number {
            return ReloginTokenStatusMessage.ID;
        }

        public reset(): void {
            this.validToken = false;
            this.ticket = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ReloginTokenStatusMessage(param1);
        }

        public serializeAs_ReloginTokenStatusMessage(param1: ICustomDataOutput): void {
            param1.writeBoolean(this.validToken);
            param1.writeVarInt(this.ticket.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.ticket.length) {
                param1.writeByte(this.ticket[_loc2_]);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ReloginTokenStatusMessage(param1);
        }

        public deserializeAs_ReloginTokenStatusMessage(param1: ICustomDataInput): void {
            var _loc4_: any = 0;
            this.validToken = param1.readBoolean();
            var _loc2_: number = param1.readVarInt();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = param1.readByte();
                this.ticket.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class ServerOptionalFeaturesMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6305;

        features: number[];

        constructor() {
            this.features = [];
            super();
        }

        public getMessageId(): number {
            return ServerOptionalFeaturesMessage.ID;
        }

        public reset(): void {
            this.features = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ServerOptionalFeaturesMessage(param1);
        }

        public serializeAs_ServerOptionalFeaturesMessage(param1: ICustomDataOutput): void {
            param1.writeShort(this.features.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.features.length) {
                if (this.features[_loc2_] < 0) {
                    throw new Error('Forbidden value (' + this.features[_loc2_] + ') on element 1 (starting at 1) of features.');
                }
                param1.writeByte(this.features[_loc2_]);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ServerOptionalFeaturesMessage(param1);
        }

        public deserializeAs_ServerOptionalFeaturesMessage(param1: ICustomDataInput): void {
            var _loc4_: number = 0;
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = param1.readByte();
                if (_loc4_ < 0) {
                    throw new Error('Forbidden value (' + _loc4_ + ') on elements of features.');
                }
                this.features.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class ServerSessionConstantsMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6434;

        variables: ServerSessionConstant[];

        constructor() {
            this.variables = [];
            super();
        }

        public getMessageId(): number {
            return ServerSessionConstantsMessage.ID;
        }

        public reset(): void {
            this.variables = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ServerSessionConstantsMessage(param1);
        }

        public serializeAs_ServerSessionConstantsMessage(param1: ICustomDataOutput): void {
            param1.writeShort(this.variables.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.variables.length) {
                param1.writeShort((this.variables[_loc2_]).getTypeId());
                (this.variables[_loc2_]).serialize(param1);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ServerSessionConstantsMessage(param1);
        }

        public deserializeAs_ServerSessionConstantsMessage(param1: ICustomDataInput): void {
            var _loc4_: number = 0;
            var _loc5_: ServerSessionConstant = null;
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = param1.readUnsignedShort();
                _loc5_ = <ServerSessionConstant>ProtocolTypeManager.getInstance(ServerSessionConstant, _loc4_);
                _loc5_.deserialize(param1);
                this.variables.push(_loc5_);
                _loc3_++;
            }

        }
    }
    export class ServerSettingsMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6340;

        lang: string;
        community: number;
        gameType: number;

        constructor() {
            this.lang = '';
            this.community = 0;
            this.gameType = -1;
            super();
        }

        public getMessageId(): number {
            return ServerSettingsMessage.ID;
        }

        public reset(): void {
            this.lang = '';
            this.community = 0;
            this.gameType = -1;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ServerSettingsMessage(param1);
        }

        public serializeAs_ServerSettingsMessage(param1: ICustomDataOutput): void {
            param1.writeUTF(this.lang);
            if (this.community < 0) {
                throw new Error('Forbidden value (' + this.community + ') on element community.');
            }
            param1.writeByte(this.community);
            param1.writeByte(this.gameType);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ServerSettingsMessage(param1);
        }

        public deserializeAs_ServerSettingsMessage(param1: ICustomDataInput): void {
            this.lang = param1.readUTF();
            this.community = param1.readByte();
            if (this.community < 0) {
                throw new Error('Forbidden value (' + this.community + ') on element of ServerSettingsMessage.community.');
            }
            this.gameType = param1.readByte();

        }
    }
    export class AtlasPointInformationsMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5956;

        type: AtlasPointsInformations;

        constructor() {
            this.type = new AtlasPointsInformations();
            super();
        }

        public getMessageId(): number {
            return AtlasPointInformationsMessage.ID;
        }

        public reset(): void {
            this.type = new AtlasPointsInformations();
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_AtlasPointInformationsMessage(param1);
        }

        public serializeAs_AtlasPointInformationsMessage(param1: ICustomDataOutput): void {
            this.type.serializeAs_AtlasPointsInformations(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_AtlasPointInformationsMessage(param1);
        }

        public deserializeAs_AtlasPointInformationsMessage(param1: ICustomDataInput): void {
            this.type = new AtlasPointsInformations();
            this.type.deserialize(param1);

        }
    }
    export class CompassResetMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5584;

        type: number;

        constructor() {
            this.type = 0;
            super();
        }

        public getMessageId(): number {
            return CompassResetMessage.ID;
        }

        public reset(): void {
            this.type = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_CompassResetMessage(param1);
        }

        public serializeAs_CompassResetMessage(param1: ICustomDataOutput): void {
            param1.writeByte(this.type);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_CompassResetMessage(param1);
        }

        public deserializeAs_CompassResetMessage(param1: ICustomDataInput): void {
            this.type = param1.readByte();
            if (this.type < 0) {
                throw new Error('Forbidden value (' + this.type + ') on element of CompassResetMessage.type.');
            }

        }
    }
    export class CompassUpdateMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5591;

        type: number;
        coords: MapCoordinates;

        constructor() {
            this.type = 0;
            this.coords = new MapCoordinates();
            super();
        }

        public getMessageId(): number {
            return CompassUpdateMessage.ID;
        }

        public reset(): void {
            this.type = 0;
            this.coords = new MapCoordinates();
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_CompassUpdateMessage(param1);
        }

        public serializeAs_CompassUpdateMessage(param1: ICustomDataOutput): void {
            param1.writeByte(this.type);
            param1.writeShort(this.coords.getTypeId());
            this.coords.serialize(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_CompassUpdateMessage(param1);
        }

        public deserializeAs_CompassUpdateMessage(param1: ICustomDataInput): void {
            this.type = param1.readByte();
            if (this.type < 0) {
                throw new Error('Forbidden value (' + this.type + ') on element of CompassUpdateMessage.type.');
            }
            var _loc2_: number = param1.readUnsignedShort();
            this.coords = <MapCoordinates>ProtocolTypeManager.getInstance(MapCoordinates, _loc2_);
            this.coords.deserialize(param1);

        }
    }
    export class CompassUpdatePartyMemberMessage extends CompassUpdateMessage {
        public static ID: number = 5589;

        memberId: number;

        constructor() {
            this.memberId = 0;
            super();
        }

        public getMessageId(): number {
            return CompassUpdatePartyMemberMessage.ID;
        }

        public reset(): void {
            this.memberId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_CompassUpdatePartyMemberMessage(param1);
        }

        public serializeAs_CompassUpdatePartyMemberMessage(param1: ICustomDataOutput): void {
            super.serializeAs_CompassUpdateMessage(param1);
            if (this.memberId < 0) {
                throw new Error('Forbidden value (' + this.memberId + ') on element memberId.');
            }
            param1.writeVarInt(this.memberId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_CompassUpdatePartyMemberMessage(param1);
        }

        public deserializeAs_CompassUpdatePartyMemberMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.memberId = param1.readVarUhInt();
            if (this.memberId < 0) {
                throw new Error('Forbidden value (' + this.memberId + ') on element of CompassUpdatePartyMemberMessage.memberId.');
            }

        }
    }
    export class CompassUpdatePvpSeekMessage extends CompassUpdateMessage {
        public static ID: number = 6013;

        memberId: number;
        memberName: string;

        constructor() {
            this.memberId = 0;
            this.memberName = '';
            super();
        }

        public getMessageId(): number {
            return CompassUpdatePvpSeekMessage.ID;
        }

        public reset(): void {
            this.memberId = 0;
            this.memberName = '';
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_CompassUpdatePvpSeekMessage(param1);
        }

        public serializeAs_CompassUpdatePvpSeekMessage(param1: ICustomDataOutput): void {
            super.serializeAs_CompassUpdateMessage(param1);
            if (this.memberId < 0) {
                throw new Error('Forbidden value (' + this.memberId + ') on element memberId.');
            }
            param1.writeVarInt(this.memberId);
            param1.writeUTF(this.memberName);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_CompassUpdatePvpSeekMessage(param1);
        }

        public deserializeAs_CompassUpdatePvpSeekMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.memberId = param1.readVarUhInt();
            if (this.memberId < 0) {
                throw new Error('Forbidden value (' + this.memberId + ') on element of CompassUpdatePvpSeekMessage.memberId.');
            }
            this.memberName = param1.readUTF();

        }
    }
    export class BasicAckMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6362;

        seq: number;
        lastPacketId: number;

        constructor() {
            this.seq = 0;
            this.lastPacketId = 0;
            super();
        }

        public getMessageId(): number {
            return BasicAckMessage.ID;
        }

        public reset(): void {
            this.seq = 0;
            this.lastPacketId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_BasicAckMessage(param1);
        }

        public serializeAs_BasicAckMessage(param1: ICustomDataOutput): void {
            if (this.seq < 0) {
                throw new Error('Forbidden value (' + this.seq + ') on element seq.');
            }
            param1.writeVarInt(this.seq);
            if (this.lastPacketId < 0) {
                throw new Error('Forbidden value (' + this.lastPacketId + ') on element lastPacketId.');
            }
            param1.writeVarShort(this.lastPacketId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_BasicAckMessage(param1);
        }

        public deserializeAs_BasicAckMessage(param1: ICustomDataInput): void {
            this.seq = param1.readVarUhInt();
            if (this.seq < 0) {
                throw new Error('Forbidden value (' + this.seq + ') on element of BasicAckMessage.seq.');
            }
            this.lastPacketId = param1.readVarUhShort();
            if (this.lastPacketId < 0) {
                throw new Error('Forbidden value (' + this.lastPacketId + ') on element of BasicAckMessage.lastPacketId.');
            }

        }
    }
    export class BasicDateMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 177;

        day: number;
        month: number;
        year: number;

        constructor() {
            this.day = 0;
            this.month = 0;
            this.year = 0;
            super();
        }

        public getMessageId(): number {
            return BasicDateMessage.ID;
        }

        public reset(): void {
            this.day = 0;
            this.month = 0;
            this.year = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_BasicDateMessage(param1);
        }

        public serializeAs_BasicDateMessage(param1: ICustomDataOutput): void {
            if (this.day < 0) {
                throw new Error('Forbidden value (' + this.day + ') on element day.');
            }
            param1.writeByte(this.day);
            if (this.month < 0) {
                throw new Error('Forbidden value (' + this.month + ') on element month.');
            }
            param1.writeByte(this.month);
            if (this.year < 0) {
                throw new Error('Forbidden value (' + this.year + ') on element year.');
            }
            param1.writeShort(this.year);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_BasicDateMessage(param1);
        }

        public deserializeAs_BasicDateMessage(param1: ICustomDataInput): void {
            this.day = param1.readByte();
            if (this.day < 0) {
                throw new Error('Forbidden value (' + this.day + ') on element of BasicDateMessage.day.');
            }
            this.month = param1.readByte();
            if (this.month < 0) {
                throw new Error('Forbidden value (' + this.month + ') on element of BasicDateMessage.month.');
            }
            this.year = param1.readShort();
            if (this.year < 0) {
                throw new Error('Forbidden value (' + this.year + ') on element of BasicDateMessage.year.');
            }

        }
    }
    export class BasicLatencyStatsMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5663;

        latency: number;
        sampleCount: number;
        max: number;

        constructor() {
            this.latency = 0;
            this.sampleCount = 0;
            this.max = 0;
            super();
        }

        public getMessageId(): number {
            return BasicLatencyStatsMessage.ID;
        }

        public reset(): void {
            this.latency = 0;
            this.sampleCount = 0;
            this.max = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_BasicLatencyStatsMessage(param1);
        }

        public serializeAs_BasicLatencyStatsMessage(param1: ICustomDataOutput): void {
            if (this.latency < 0 || this.latency > 65535) {
                throw new Error('Forbidden value (' + this.latency + ') on element latency.');
            }
            param1.writeShort(this.latency);
            if (this.sampleCount < 0) {
                throw new Error('Forbidden value (' + this.sampleCount + ') on element sampleCount.');
            }
            param1.writeVarShort(this.sampleCount);
            if (this.max < 0) {
                throw new Error('Forbidden value (' + this.max + ') on element max.');
            }
            param1.writeVarShort(this.max);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_BasicLatencyStatsMessage(param1);
        }

        public deserializeAs_BasicLatencyStatsMessage(param1: ICustomDataInput): void {
            this.latency = param1.readUnsignedShort();
            if (this.latency < 0 || this.latency > 65535) {
                throw new Error('Forbidden value (' + this.latency + ') on element of BasicLatencyStatsMessage.latency.');
            }
            this.sampleCount = param1.readVarUhShort();
            if (this.sampleCount < 0) {
                throw new Error('Forbidden value (' + this.sampleCount + ') on element of BasicLatencyStatsMessage.sampleCount.');
            }
            this.max = param1.readVarUhShort();
            if (this.max < 0) {
                throw new Error('Forbidden value (' + this.max + ') on element of BasicLatencyStatsMessage.max.');
            }

        }
    }
    export class BasicLatencyStatsRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5816;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return BasicLatencyStatsRequestMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_BasicLatencyStatsRequestMessage(param1);
        }

        public serializeAs_BasicLatencyStatsRequestMessage(param1: ICustomDataOutput): void {

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_BasicLatencyStatsRequestMessage(param1);
        }

        public deserializeAs_BasicLatencyStatsRequestMessage(param1: ICustomDataInput): void {

        }
    }
    export class BasicNoOperationMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 176;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return BasicNoOperationMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_BasicNoOperationMessage(param1);
        }

        public serializeAs_BasicNoOperationMessage(param1: ICustomDataOutput): void {

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_BasicNoOperationMessage(param1);
        }

        public deserializeAs_BasicNoOperationMessage(param1: ICustomDataInput): void {

        }
    }
    export class BasicTimeMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 175;

        timestamp: number;
        timezoneOffset: number;

        constructor() {
            this.timestamp = 0;
            this.timezoneOffset = 0;
            super();
        }

        public getMessageId(): number {
            return BasicTimeMessage.ID;
        }

        public reset(): void {
            this.timestamp = 0;
            this.timezoneOffset = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_BasicTimeMessage(param1);
        }

        public serializeAs_BasicTimeMessage(param1: ICustomDataOutput): void {
            if (this.timestamp < 0 || this.timestamp > 9.007199254740992E15) {
                throw new Error('Forbidden value (' + this.timestamp + ') on element timestamp.');
            }
            param1.writeDouble(this.timestamp);
            param1.writeShort(this.timezoneOffset);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_BasicTimeMessage(param1);
        }

        public deserializeAs_BasicTimeMessage(param1: ICustomDataInput): void {
            this.timestamp = param1.readDouble();
            if (this.timestamp < 0 || this.timestamp > 9.007199254740992E15) {
                throw new Error('Forbidden value (' + this.timestamp + ') on element of BasicTimeMessage.timestamp.');
            }
            this.timezoneOffset = param1.readShort();

        }
    }
    export class BasicWhoAmIRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5664;

        verbose: boolean;

        constructor() {
            this.verbose = false;
            super();
        }

        public getMessageId(): number {
            return BasicWhoAmIRequestMessage.ID;
        }

        public reset(): void {
            this.verbose = false;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_BasicWhoAmIRequestMessage(param1);
        }

        public serializeAs_BasicWhoAmIRequestMessage(param1: ICustomDataOutput): void {
            param1.writeBoolean(this.verbose);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_BasicWhoAmIRequestMessage(param1);
        }

        public deserializeAs_BasicWhoAmIRequestMessage(param1: ICustomDataInput): void {
            this.verbose = param1.readBoolean();

        }
    }
    export class BasicWhoIsMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 180;

        self: boolean;
        position: number;
        accountNickname: string;
        accountId: number;
        playerName: string;
        playerId: number;
        areaId: number;
        socialGroups: AbstractSocialGroupInfos[];
        verbose: boolean;
        playerState: number;

        constructor() {
            this.self = false;
            this.position = -1;
            this.accountNickname = '';
            this.accountId = 0;
            this.playerName = '';
            this.playerId = 0;
            this.areaId = 0;
            this.socialGroups = [];
            this.verbose = false;
            this.playerState = 99;
            super();
        }

        public getMessageId(): number {
            return BasicWhoIsMessage.ID;
        }

        public reset(): void {
            this.self = false;
            this.position = -1;
            this.accountNickname = '';
            this.accountId = 0;
            this.playerName = '';
            this.playerId = 0;
            this.areaId = 0;
            this.socialGroups = [];
            this.verbose = false;
            this.playerState = 99;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_BasicWhoIsMessage(param1);
        }

        public serializeAs_BasicWhoIsMessage(param1: ICustomDataOutput): void {
            var _loc2_: number = 0;
            _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 0, this.self);
            _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 1, this.verbose);
            param1.writeByte(_loc2_);
            param1.writeByte(this.position);
            param1.writeUTF(this.accountNickname);
            if (this.accountId < 0) {
                throw new Error('Forbidden value (' + this.accountId + ') on element accountId.');
            }
            param1.writeInt(this.accountId);
            param1.writeUTF(this.playerName);
            if (this.playerId < 0) {
                throw new Error('Forbidden value (' + this.playerId + ') on element playerId.');
            }
            param1.writeVarInt(this.playerId);
            param1.writeShort(this.areaId);
            param1.writeShort(this.socialGroups.length);
            var _loc3_: number = 0;
            while (_loc3_ < this.socialGroups.length) {
                param1.writeShort((this.socialGroups[_loc3_]).getTypeId());
                (this.socialGroups[_loc3_]).serialize(param1);
                _loc3_++;
            }
            param1.writeByte(this.playerState);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_BasicWhoIsMessage(param1);
        }

        public deserializeAs_BasicWhoIsMessage(param1: ICustomDataInput): void {
            var _loc5_: number = 0;
            var _loc6_: AbstractSocialGroupInfos = null;
            var _loc2_: number = param1.readByte();
            this.self = BooleanByteWrapper.getFlag(_loc2_, 0);
            this.verbose = BooleanByteWrapper.getFlag(_loc2_, 1);
            this.position = param1.readByte();
            this.accountNickname = param1.readUTF();
            this.accountId = param1.readInt();
            if (this.accountId < 0) {
                throw new Error('Forbidden value (' + this.accountId + ') on element of BasicWhoIsMessage.accountId.');
            }
            this.playerName = param1.readUTF();
            this.playerId = param1.readVarUhInt();
            if (this.playerId < 0) {
                throw new Error('Forbidden value (' + this.playerId + ') on element of BasicWhoIsMessage.playerId.');
            }
            this.areaId = param1.readShort();
            var _loc3_: number = param1.readUnsignedShort();
            var _loc4_: number = 0;
            while (_loc4_ < _loc3_) {
            _loc5_ = param1.readUnsignedShort();
                _loc6_ = <AbstractSocialGroupInfos>ProtocolTypeManager.getInstance(AbstractSocialGroupInfos, _loc5_);
                _loc6_.deserialize(param1);
                this.socialGroups.push(_loc6_);
                _loc4_++;
            }
            this.playerState = param1.readByte();
            if (this.playerState < 0) {
                throw new Error('Forbidden value (' + this.playerState + ') on element of BasicWhoIsMessage.playerState.');
            }

        }
    }
    export class BasicWhoIsNoMatchMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 179;

        search: string;

        constructor() {
            this.search = '';
            super();
        }

        public getMessageId(): number {
            return BasicWhoIsNoMatchMessage.ID;
        }

        public reset(): void {
            this.search = '';
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_BasicWhoIsNoMatchMessage(param1);
        }

        public serializeAs_BasicWhoIsNoMatchMessage(param1: ICustomDataOutput): void {
            param1.writeUTF(this.search);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_BasicWhoIsNoMatchMessage(param1);
        }

        public deserializeAs_BasicWhoIsNoMatchMessage(param1: ICustomDataInput): void {
            this.search = param1.readUTF();

        }
    }
    export class BasicWhoIsRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 181;

        verbose: boolean;
        search: string;

        constructor() {
            this.verbose = false;
            this.search = '';
            super();
        }

        public getMessageId(): number {
            return BasicWhoIsRequestMessage.ID;
        }

        public reset(): void {
            this.verbose = false;
            this.search = '';
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_BasicWhoIsRequestMessage(param1);
        }

        public serializeAs_BasicWhoIsRequestMessage(param1: ICustomDataOutput): void {
            param1.writeBoolean(this.verbose);
            param1.writeUTF(this.search);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_BasicWhoIsRequestMessage(param1);
        }

        public deserializeAs_BasicWhoIsRequestMessage(param1: ICustomDataInput): void {
            this.verbose = param1.readBoolean();
            this.search = param1.readUTF();

        }
    }
    export class CurrentServerStatusUpdateMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6525;

        status: number;

        constructor() {
            this.status = 1;
            super();
        }

        public getMessageId(): number {
            return CurrentServerStatusUpdateMessage.ID;
        }

        public reset(): void {
            this.status = 1;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_CurrentServerStatusUpdateMessage(param1);
        }

        public serializeAs_CurrentServerStatusUpdateMessage(param1: ICustomDataOutput): void {
            param1.writeByte(this.status);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_CurrentServerStatusUpdateMessage(param1);
        }

        public deserializeAs_CurrentServerStatusUpdateMessage(param1: ICustomDataInput): void {
            this.status = param1.readByte();
            if (this.status < 0) {
                throw new Error('Forbidden value (' + this.status + ') on element of CurrentServerStatusUpdateMessage.status.');
            }

        }
    }
    export class NumericWhoIsMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6297;

        playerId: number;
        accountId: number;

        constructor() {
            this.playerId = 0;
            this.accountId = 0;
            super();
        }

        public getMessageId(): number {
            return NumericWhoIsMessage.ID;
        }

        public reset(): void {
            this.playerId = 0;
            this.accountId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_NumericWhoIsMessage(param1);
        }

        public serializeAs_NumericWhoIsMessage(param1: ICustomDataOutput): void {
            if (this.playerId < 0) {
                throw new Error('Forbidden value (' + this.playerId + ') on element playerId.');
            }
            param1.writeVarInt(this.playerId);
            if (this.accountId < 0) {
                throw new Error('Forbidden value (' + this.accountId + ') on element accountId.');
            }
            param1.writeInt(this.accountId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_NumericWhoIsMessage(param1);
        }

        public deserializeAs_NumericWhoIsMessage(param1: ICustomDataInput): void {
            this.playerId = param1.readVarUhInt();
            if (this.playerId < 0) {
                throw new Error('Forbidden value (' + this.playerId + ') on element of NumericWhoIsMessage.playerId.');
            }
            this.accountId = param1.readInt();
            if (this.accountId < 0) {
                throw new Error('Forbidden value (' + this.accountId + ') on element of NumericWhoIsMessage.accountId.');
            }

        }
    }
    export class NumericWhoIsRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6298;

        playerId: number;

        constructor() {
            this.playerId = 0;
            super();
        }

        public getMessageId(): number {
            return NumericWhoIsRequestMessage.ID;
        }

        public reset(): void {
            this.playerId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_NumericWhoIsRequestMessage(param1);
        }

        public serializeAs_NumericWhoIsRequestMessage(param1: ICustomDataOutput): void {
            if (this.playerId < 0) {
                throw new Error('Forbidden value (' + this.playerId + ') on element playerId.');
            }
            param1.writeVarInt(this.playerId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_NumericWhoIsRequestMessage(param1);
        }

        public deserializeAs_NumericWhoIsRequestMessage(param1: ICustomDataInput): void {
            this.playerId = param1.readVarUhInt();
            if (this.playerId < 0) {
                throw new Error('Forbidden value (' + this.playerId + ') on element of NumericWhoIsRequestMessage.playerId.');
            }

        }
    }
    export class SequenceNumberMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6317;

        number: number;

        constructor() {
            this.number = 0;
            super();
        }

        public getMessageId(): number {
            return SequenceNumberMessage.ID;
        }

        public reset(): void {
            this.number = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_SequenceNumberMessage(param1);
        }

        public serializeAs_SequenceNumberMessage(param1: ICustomDataOutput): void {
            if (this.number < 0 || this.number > 65535) {
                throw new Error('Forbidden value (' + this.number + ') on element number.');
            }
            param1.writeShort(this.number);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_SequenceNumberMessage(param1);
        }

        public deserializeAs_SequenceNumberMessage(param1: ICustomDataInput): void {
            this.number = param1.readUnsignedShort();
            if (this.number < 0 || this.number > 65535) {
                throw new Error('Forbidden value (' + this.number + ') on element of SequenceNumberMessage.number.');
            }

        }
    }
    export class SequenceNumberRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6316;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return SequenceNumberRequestMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_SequenceNumberRequestMessage(param1);
        }

        public serializeAs_SequenceNumberRequestMessage(param1: ICustomDataOutput): void {

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_SequenceNumberRequestMessage(param1);
        }

        public deserializeAs_SequenceNumberRequestMessage(param1: ICustomDataInput): void {

        }
    }
    export class TextInformationMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 780;

        msgType: number;
        msgId: number;
        parameters: string[];

        constructor() {
            this.msgType = 0;
            this.msgId = 0;
            this.parameters = [];
            super();
        }

        public getMessageId(): number {
            return TextInformationMessage.ID;
        }

        public reset(): void {
            this.msgType = 0;
            this.msgId = 0;
            this.parameters = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_TextInformationMessage(param1);
        }

        public serializeAs_TextInformationMessage(param1: ICustomDataOutput): void {
            param1.writeByte(this.msgType);
            if (this.msgId < 0) {
                throw new Error('Forbidden value (' + this.msgId + ') on element msgId.');
            }
            param1.writeVarShort(this.msgId);
            param1.writeShort(this.parameters.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.parameters.length) {
                param1.writeUTF(this.parameters[_loc2_]);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_TextInformationMessage(param1);
        }

        public deserializeAs_TextInformationMessage(param1: ICustomDataInput): void {
            var _loc4_: string = null;
            this.msgType = param1.readByte();
            if (this.msgType < 0) {
                throw new Error('Forbidden value (' + this.msgType + ') on element of TextInformationMessage.msgType.');
            }
            this.msgId = param1.readVarUhShort();
            if (this.msgId < 0) {
                throw new Error('Forbidden value (' + this.msgId + ') on element of TextInformationMessage.msgId.');
            }
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = param1.readUTF();
                this.parameters.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class BasicCharactersListMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6475;

        characters: CharacterBaseInformations[];

        constructor() {
            this.characters = [];
            super();
        }

        public getMessageId(): number {
            return BasicCharactersListMessage.ID;
        }

        public reset(): void {
            this.characters = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_BasicCharactersListMessage(param1);
        }

        public serializeAs_BasicCharactersListMessage(param1: ICustomDataOutput): void {
            param1.writeShort(this.characters.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.characters.length) {
                param1.writeShort((this.characters[_loc2_]).getTypeId());
                (this.characters[_loc2_]).serialize(param1);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_BasicCharactersListMessage(param1);
        }

        public deserializeAs_BasicCharactersListMessage(param1: ICustomDataInput): void {
            var _loc4_: number = 0;
            var _loc5_: CharacterBaseInformations = null;
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = param1.readUnsignedShort();
                _loc5_ = <CharacterBaseInformations>ProtocolTypeManager.getInstance(CharacterBaseInformations, _loc4_);
                _loc5_.deserialize(param1);
                this.characters.push(_loc5_);
                _loc3_++;
            }

        }
    }
    export class CharacterSelectionMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 152;

        id: number;

        constructor() {
            this.id = 0;
            super();
        }

        public getMessageId(): number {
            return CharacterSelectionMessage.ID;
        }

        public reset(): void {
            this.id = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_CharacterSelectionMessage(param1);
        }

        public serializeAs_CharacterSelectionMessage(param1: ICustomDataOutput): void {
            if (this.id < 1 || this.id > 2147483647) {
                throw new Error('Forbidden value (' + this.id + ') on element id.');
            }
            param1.writeInt(this.id);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_CharacterSelectionMessage(param1);
        }

        public deserializeAs_CharacterSelectionMessage(param1: ICustomDataInput): void {
            this.id = param1.readInt();
            if (this.id < 1 || this.id > 2147483647) {
                throw new Error('Forbidden value (' + this.id + ') on element of CharacterSelectionMessage.id.');
            }

        }
    }
    export class CharacterFirstSelectionMessage extends CharacterSelectionMessage {
        public static ID: number = 6084;

        doTutorial: boolean;

        constructor() {
            this.doTutorial = false;
            super();
        }

        public getMessageId(): number {
            return CharacterFirstSelectionMessage.ID;
        }

        public reset(): void {
            this.doTutorial = false;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_CharacterFirstSelectionMessage(param1);
        }

        public serializeAs_CharacterFirstSelectionMessage(param1: ICustomDataOutput): void {
            super.serializeAs_CharacterSelectionMessage(param1);
            param1.writeBoolean(this.doTutorial);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_CharacterFirstSelectionMessage(param1);
        }

        public deserializeAs_CharacterFirstSelectionMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.doTutorial = param1.readBoolean();

        }
    }
    export class CharacterReplayRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 167;

        characterId: number;

        constructor() {
            this.characterId = 0;
            super();
        }

        public getMessageId(): number {
            return CharacterReplayRequestMessage.ID;
        }

        public reset(): void {
            this.characterId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_CharacterReplayRequestMessage(param1);
        }

        public serializeAs_CharacterReplayRequestMessage(param1: ICustomDataOutput): void {
            if (this.characterId < 0) {
                throw new Error('Forbidden value (' + this.characterId + ') on element characterId.');
            }
            param1.writeInt(this.characterId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_CharacterReplayRequestMessage(param1);
        }

        public deserializeAs_CharacterReplayRequestMessage(param1: ICustomDataInput): void {
            this.characterId = param1.readInt();
            if (this.characterId < 0) {
                throw new Error('Forbidden value (' + this.characterId + ') on element of CharacterReplayRequestMessage.characterId.');
            }

        }
    }
    export class CharacterReplayWithRemodelRequestMessage extends CharacterReplayRequestMessage {
        public static ID: number = 6551;

        remodel: RemodelingInformation;

        constructor() {
            this.remodel = new RemodelingInformation();
            super();
        }

        public getMessageId(): number {
            return CharacterReplayWithRemodelRequestMessage.ID;
        }

        public reset(): void {
            this.remodel = new RemodelingInformation();
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_CharacterReplayWithRemodelRequestMessage(param1);
        }

        public serializeAs_CharacterReplayWithRemodelRequestMessage(param1: ICustomDataOutput): void {
            super.serializeAs_CharacterReplayRequestMessage(param1);
            this.remodel.serializeAs_RemodelingInformation(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_CharacterReplayWithRemodelRequestMessage(param1);
        }

        public deserializeAs_CharacterReplayWithRemodelRequestMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.remodel = new RemodelingInformation();
            this.remodel.deserialize(param1);

        }
    }
    export class CharacterSelectedErrorMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5836;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return CharacterSelectedErrorMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_CharacterSelectedErrorMessage(param1);
        }

        public serializeAs_CharacterSelectedErrorMessage(param1: ICustomDataOutput): void {

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_CharacterSelectedErrorMessage(param1);
        }

        public deserializeAs_CharacterSelectedErrorMessage(param1: ICustomDataInput): void {

        }
    }
    export class CharacterSelectedForceMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6068;

        id: number;

        constructor() {
            this.id = 0;
            super();
        }

        public getMessageId(): number {
            return CharacterSelectedForceMessage.ID;
        }

        public reset(): void {
            this.id = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_CharacterSelectedForceMessage(param1);
        }

        public serializeAs_CharacterSelectedForceMessage(param1: ICustomDataOutput): void {
            if (this.id < 1 || this.id > 2147483647) {
                throw new Error('Forbidden value (' + this.id + ') on element id.');
            }
            param1.writeInt(this.id);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_CharacterSelectedForceMessage(param1);
        }

        public deserializeAs_CharacterSelectedForceMessage(param1: ICustomDataInput): void {
            this.id = param1.readInt();
            if (this.id < 1 || this.id > 2147483647) {
                throw new Error('Forbidden value (' + this.id + ') on element of CharacterSelectedForceMessage.id.');
            }

        }
    }
    export class CharacterSelectedForceReadyMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6072;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return CharacterSelectedForceReadyMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_CharacterSelectedForceReadyMessage(param1);
        }

        public serializeAs_CharacterSelectedForceReadyMessage(param1: ICustomDataOutput): void {

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_CharacterSelectedForceReadyMessage(param1);
        }

        public deserializeAs_CharacterSelectedForceReadyMessage(param1: ICustomDataInput): void {

        }
    }
    export class CharacterSelectedSuccessMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 153;

        infos: CharacterBaseInformations;
        isCollectingStats: boolean;

        constructor() {
            this.infos = new CharacterBaseInformations();
            this.isCollectingStats = false;
            super();
        }

        public getMessageId(): number {
            return CharacterSelectedSuccessMessage.ID;
        }

        public reset(): void {
            this.infos = new CharacterBaseInformations();
            this.isCollectingStats = false;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_CharacterSelectedSuccessMessage(param1);
        }

        public serializeAs_CharacterSelectedSuccessMessage(param1: ICustomDataOutput): void {
            this.infos.serializeAs_CharacterBaseInformations(param1);
            param1.writeBoolean(this.isCollectingStats);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_CharacterSelectedSuccessMessage(param1);
        }

        public deserializeAs_CharacterSelectedSuccessMessage(param1: ICustomDataInput): void {
            this.infos = new CharacterBaseInformations();
            this.infos.deserialize(param1);
            this.isCollectingStats = param1.readBoolean();

        }
    }
    export class CharacterSelectionWithRemodelMessage extends CharacterSelectionMessage {
        public static ID: number = 6549;

        remodel: RemodelingInformation;

        constructor() {
            this.remodel = new RemodelingInformation();
            super();
        }

        public getMessageId(): number {
            return CharacterSelectionWithRemodelMessage.ID;
        }

        public reset(): void {
            this.remodel = new RemodelingInformation();
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_CharacterSelectionWithRemodelMessage(param1);
        }

        public serializeAs_CharacterSelectionWithRemodelMessage(param1: ICustomDataOutput): void {
            super.serializeAs_CharacterSelectionMessage(param1);
            this.remodel.serializeAs_RemodelingInformation(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_CharacterSelectionWithRemodelMessage(param1);
        }

        public deserializeAs_CharacterSelectionWithRemodelMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.remodel = new RemodelingInformation();
            this.remodel.deserialize(param1);

        }
    }
    export class CharactersListErrorMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5545;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return CharactersListErrorMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_CharactersListErrorMessage(param1);
        }

        public serializeAs_CharactersListErrorMessage(param1: ICustomDataOutput): void {

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_CharactersListErrorMessage(param1);
        }

        public deserializeAs_CharactersListErrorMessage(param1: ICustomDataInput): void {

        }
    }
    export class CharactersListMessage extends BasicCharactersListMessage {
        public static ID: number = 151;

        hasStartupActions: boolean;

        constructor() {
            this.hasStartupActions = false;
            super();
        }

        public getMessageId(): number {
            return CharactersListMessage.ID;
        }

        public reset(): void {
            this.hasStartupActions = false;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_CharactersListMessage(param1);
        }

        public serializeAs_CharactersListMessage(param1: ICustomDataOutput): void {
            super.serializeAs_BasicCharactersListMessage(param1);
            param1.writeBoolean(this.hasStartupActions);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_CharactersListMessage(param1);
        }

        public deserializeAs_CharactersListMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.hasStartupActions = param1.readBoolean();

        }
    }
    export class CharactersListRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 150;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return CharactersListRequestMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_CharactersListRequestMessage(param1);
        }

        public serializeAs_CharactersListRequestMessage(param1: ICustomDataOutput): void {

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_CharactersListRequestMessage(param1);
        }

        public deserializeAs_CharactersListRequestMessage(param1: ICustomDataInput): void {

        }
    }
    export class CharactersListWithModificationsMessage extends CharactersListMessage {
        public static ID: number = 6120;

        charactersToRecolor: CharacterToRecolorInformation[];
        charactersToRename: number[];
        unusableCharacters: number[];
        charactersToRelook: CharacterToRelookInformation[];

        constructor() {
            this.charactersToRecolor = [];
            this.charactersToRename = [];
            this.unusableCharacters = [];
            this.charactersToRelook = [];
            super();
        }

        public getMessageId(): number {
            return CharactersListWithModificationsMessage.ID;
        }

        public reset(): void {
            this.charactersToRecolor = [];
            this.charactersToRename = [];
            this.unusableCharacters = [];
            this.charactersToRelook = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_CharactersListWithModificationsMessage(param1);
        }

        public serializeAs_CharactersListWithModificationsMessage(param1: ICustomDataOutput): void {
            super.serializeAs_CharactersListMessage(param1);
            param1.writeShort(this.charactersToRecolor.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.charactersToRecolor.length) {
                (this.charactersToRecolor[_loc2_]).serializeAs_CharacterToRecolorInformation(param1);
                _loc2_++;
            }
            param1.writeShort(this.charactersToRename.length);
            var _loc3_: number = 0;
            while (_loc3_ < this.charactersToRename.length) {
                param1.writeInt(this.charactersToRename[_loc3_]);
                _loc3_++;
            }
            param1.writeShort(this.unusableCharacters.length);
            var _loc4_: number = 0;
            while (_loc4_ < this.unusableCharacters.length) {
                param1.writeInt(this.unusableCharacters[_loc4_]);
                _loc4_++;
            }
            param1.writeShort(this.charactersToRelook.length);
            var _loc5_: number = 0;
            while (_loc5_ < this.charactersToRelook.length) {
                (this.charactersToRelook[_loc5_]).serializeAs_CharacterToRelookInformation(param1);
                _loc5_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_CharactersListWithModificationsMessage(param1);
        }

        public deserializeAs_CharactersListWithModificationsMessage(param1: ICustomDataInput): void {
            var _loc10_: CharacterToRecolorInformation = null;
            var _loc11_: any = 0;
            var _loc12_: any = 0;
            var _loc13_: CharacterToRelookInformation = null;
            super.deserialize(param1);
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc10_ = new CharacterToRecolorInformation();
                _loc10_.deserialize(param1);
                this.charactersToRecolor.push(_loc10_);
                _loc3_++;
            }
            var _loc4_: number = param1.readUnsignedShort();
            var _loc5_: number = 0;
            while (_loc5_ < _loc4_) {
            _loc11_ = param1.readInt();
                this.charactersToRename.push(_loc11_);
                _loc5_++;
            }
            var _loc6_: number = param1.readUnsignedShort();
            var _loc7_: number = 0;
            while (_loc7_ < _loc6_) {
            _loc12_ = param1.readInt();
                this.unusableCharacters.push(_loc12_);
                _loc7_++;
            }
            var _loc8_: number = param1.readUnsignedShort();
            var _loc9_: number = 0;
            while (_loc9_ < _loc8_) {
            _loc13_ = new CharacterToRelookInformation();
                _loc13_.deserialize(param1);
                this.charactersToRelook.push(_loc13_);
                _loc9_++;
            }

        }
    }
    export class CharactersListWithRemodelingMessage extends CharactersListMessage {
        public static ID: number = 6550;

        charactersToRemodel: CharacterToRemodelInformations[];

        constructor() {
            this.charactersToRemodel = [];
            super();
        }

        public getMessageId(): number {
            return CharactersListWithRemodelingMessage.ID;
        }

        public reset(): void {
            this.charactersToRemodel = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_CharactersListWithRemodelingMessage(param1);
        }

        public serializeAs_CharactersListWithRemodelingMessage(param1: ICustomDataOutput): void {
            super.serializeAs_CharactersListMessage(param1);
            param1.writeShort(this.charactersToRemodel.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.charactersToRemodel.length) {
                (this.charactersToRemodel[_loc2_]).serializeAs_CharacterToRemodelInformations(param1);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_CharactersListWithRemodelingMessage(param1);
        }

        public deserializeAs_CharactersListWithRemodelingMessage(param1: ICustomDataInput): void {
            var _loc4_: CharacterToRemodelInformations = null;
            super.deserialize(param1);
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = new CharacterToRemodelInformations();
                _loc4_.deserialize(param1);
                this.charactersToRemodel.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class CharacterCreationRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 160;

        name: string;
        breed: number;
        sex: boolean;
        colors: number[];
        cosmeticId: number;

        constructor() {
            this.name = '';
            this.breed = 0;
            this.sex = false;
            this.colors = [];
            this.cosmeticId = 0;
            super();
        }

        public getMessageId(): number {
            return CharacterCreationRequestMessage.ID;
        }

        public reset(): void {
            this.name = '';
            this.breed = 0;
            this.sex = false;
            this.colors = [];
            this.cosmeticId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_CharacterCreationRequestMessage(param1);
        }

        public serializeAs_CharacterCreationRequestMessage(param1: ICustomDataOutput): void {
            param1.writeUTF(this.name);
            param1.writeByte(this.breed);
            param1.writeBoolean(this.sex);
            var _loc2_: number = 0;
            while (_loc2_ < 5) {
                param1.writeInt(this.colors[_loc2_]);
                _loc2_++;
            }
            if (this.cosmeticId < 0) {
                throw new Error('Forbidden value (' + this.cosmeticId + ') on element cosmeticId.');
            }
            param1.writeVarShort(this.cosmeticId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_CharacterCreationRequestMessage(param1);
        }

        public deserializeAs_CharacterCreationRequestMessage(param1: ICustomDataInput): void {
            this.name = param1.readUTF();
            this.breed = param1.readByte();
            if (this.breed < PlayableBreedEnum.Feca || this.breed > PlayableBreedEnum.Eliotrope) {
                throw new Error('Forbidden value (' + this.breed + ') on element of CharacterCreationRequestMessage.breed.');
            }
            this.sex = param1.readBoolean();
            var _loc2_: number = 0;
            while (_loc2_ < 5) {
            this.colors[_loc2_] = param1.readInt();
                _loc2_++;
            }
            this.cosmeticId = param1.readVarUhShort();
            if (this.cosmeticId < 0) {
                throw new Error('Forbidden value (' + this.cosmeticId + ') on element of CharacterCreationRequestMessage.cosmeticId.');
            }

        }
    }
    export class CharacterCreationResultMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 161;

        result: number;

        constructor() {
            this.result = 1;
            super();
        }

        public getMessageId(): number {
            return CharacterCreationResultMessage.ID;
        }

        public reset(): void {
            this.result = 1;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_CharacterCreationResultMessage(param1);
        }

        public serializeAs_CharacterCreationResultMessage(param1: ICustomDataOutput): void {
            param1.writeByte(this.result);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_CharacterCreationResultMessage(param1);
        }

        public deserializeAs_CharacterCreationResultMessage(param1: ICustomDataInput): void {
            this.result = param1.readByte();
            if (this.result < 0) {
                throw new Error('Forbidden value (' + this.result + ') on element of CharacterCreationResultMessage.result.');
            }

        }
    }
    export class CharacterNameSuggestionFailureMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 164;

        reason: number;

        constructor() {
            this.reason = 1;
            super();
        }

        public getMessageId(): number {
            return CharacterNameSuggestionFailureMessage.ID;
        }

        public reset(): void {
            this.reason = 1;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_CharacterNameSuggestionFailureMessage(param1);
        }

        public serializeAs_CharacterNameSuggestionFailureMessage(param1: ICustomDataOutput): void {
            param1.writeByte(this.reason);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_CharacterNameSuggestionFailureMessage(param1);
        }

        public deserializeAs_CharacterNameSuggestionFailureMessage(param1: ICustomDataInput): void {
            this.reason = param1.readByte();
            if (this.reason < 0) {
                throw new Error('Forbidden value (' + this.reason + ') on element of CharacterNameSuggestionFailureMessage.reason.');
            }

        }
    }
    export class CharacterNameSuggestionRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 162;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return CharacterNameSuggestionRequestMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_CharacterNameSuggestionRequestMessage(param1);
        }

        public serializeAs_CharacterNameSuggestionRequestMessage(param1: ICustomDataOutput): void {

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_CharacterNameSuggestionRequestMessage(param1);
        }

        public deserializeAs_CharacterNameSuggestionRequestMessage(param1: ICustomDataInput): void {

        }
    }
    export class CharacterNameSuggestionSuccessMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5544;

        suggestion: string;

        constructor() {
            this.suggestion = '';
            super();
        }

        public getMessageId(): number {
            return CharacterNameSuggestionSuccessMessage.ID;
        }

        public reset(): void {
            this.suggestion = '';
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_CharacterNameSuggestionSuccessMessage(param1);
        }

        public serializeAs_CharacterNameSuggestionSuccessMessage(param1: ICustomDataOutput): void {
            param1.writeUTF(this.suggestion);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_CharacterNameSuggestionSuccessMessage(param1);
        }

        public deserializeAs_CharacterNameSuggestionSuccessMessage(param1: ICustomDataInput): void {
            this.suggestion = param1.readUTF();

        }
    }
    export class CharacterDeletionErrorMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 166;

        reason: number;

        constructor() {
            this.reason = 1;
            super();
        }

        public getMessageId(): number {
            return CharacterDeletionErrorMessage.ID;
        }

        public reset(): void {
            this.reason = 1;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_CharacterDeletionErrorMessage(param1);
        }

        public serializeAs_CharacterDeletionErrorMessage(param1: ICustomDataOutput): void {
            param1.writeByte(this.reason);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_CharacterDeletionErrorMessage(param1);
        }

        public deserializeAs_CharacterDeletionErrorMessage(param1: ICustomDataInput): void {
            this.reason = param1.readByte();
            if (this.reason < 0) {
                throw new Error('Forbidden value (' + this.reason + ') on element of CharacterDeletionErrorMessage.reason.');
            }

        }
    }
    export class CharacterDeletionRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 165;

        characterId: number;
        secretAnswerHash: string;

        constructor() {
            this.characterId = 0;
            this.secretAnswerHash = '';
            super();
        }

        public getMessageId(): number {
            return CharacterDeletionRequestMessage.ID;
        }

        public reset(): void {
            this.characterId = 0;
            this.secretAnswerHash = '';
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_CharacterDeletionRequestMessage(param1);
        }

        public serializeAs_CharacterDeletionRequestMessage(param1: ICustomDataOutput): void {
            if (this.characterId < 0) {
                throw new Error('Forbidden value (' + this.characterId + ') on element characterId.');
            }
            param1.writeInt(this.characterId);
            param1.writeUTF(this.secretAnswerHash);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_CharacterDeletionRequestMessage(param1);
        }

        public deserializeAs_CharacterDeletionRequestMessage(param1: ICustomDataInput): void {
            this.characterId = param1.readInt();
            if (this.characterId < 0) {
                throw new Error('Forbidden value (' + this.characterId + ') on element of CharacterDeletionRequestMessage.characterId.');
            }
            this.secretAnswerHash = param1.readUTF();

        }
    }
    export class CharacterExperienceGainMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6321;

        experienceCharacter: number;
        experienceMount: number;
        experienceGuild: number;
        experienceIncarnation: number;

        constructor() {
            this.experienceCharacter = 0;
            this.experienceMount = 0;
            this.experienceGuild = 0;
            this.experienceIncarnation = 0;
            super();
        }

        public getMessageId(): number {
            return CharacterExperienceGainMessage.ID;
        }

        public reset(): void {
            this.experienceCharacter = 0;
            this.experienceMount = 0;
            this.experienceGuild = 0;
            this.experienceIncarnation = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_CharacterExperienceGainMessage(param1);
        }

        public serializeAs_CharacterExperienceGainMessage(param1: ICustomDataOutput): void {
            if (this.experienceCharacter < 0 || this.experienceCharacter > 9.007199254740992E15) {
                throw new Error('Forbidden value (' + this.experienceCharacter + ') on element experienceCharacter.');
            }
            param1.writeVarLong(this.experienceCharacter);
            if (this.experienceMount < 0 || this.experienceMount > 9.007199254740992E15) {
                throw new Error('Forbidden value (' + this.experienceMount + ') on element experienceMount.');
            }
            param1.writeVarLong(this.experienceMount);
            if (this.experienceGuild < 0 || this.experienceGuild > 9.007199254740992E15) {
                throw new Error('Forbidden value (' + this.experienceGuild + ') on element experienceGuild.');
            }
            param1.writeVarLong(this.experienceGuild);
            if (this.experienceIncarnation < 0 || this.experienceIncarnation > 9.007199254740992E15) {
                throw new Error('Forbidden value (' + this.experienceIncarnation + ') on element experienceIncarnation.');
            }
            param1.writeVarLong(this.experienceIncarnation);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_CharacterExperienceGainMessage(param1);
        }

        public deserializeAs_CharacterExperienceGainMessage(param1: ICustomDataInput): void {
            this.experienceCharacter = param1.readVarUhLong();
            if (this.experienceCharacter < 0 || this.experienceCharacter > 9.007199254740992E15) {
                throw new Error('Forbidden value (' + this.experienceCharacter + ') on element of CharacterExperienceGainMessage.experienceCharacter.');
            }
            this.experienceMount = param1.readVarUhLong();
            if (this.experienceMount < 0 || this.experienceMount > 9.007199254740992E15) {
                throw new Error('Forbidden value (' + this.experienceMount + ') on element of CharacterExperienceGainMessage.experienceMount.');
            }
            this.experienceGuild = param1.readVarUhLong();
            if (this.experienceGuild < 0 || this.experienceGuild > 9.007199254740992E15) {
                throw new Error('Forbidden value (' + this.experienceGuild + ') on element of CharacterExperienceGainMessage.experienceGuild.');
            }
            this.experienceIncarnation = param1.readVarUhLong();
            if (this.experienceIncarnation < 0 || this.experienceIncarnation > 9.007199254740992E15) {
                throw new Error('Forbidden value (' + this.experienceIncarnation + ') on element of CharacterExperienceGainMessage.experienceIncarnation.');
            }

        }
    }
    export class CharacterLevelUpMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5670;

        newLevel: number;

        constructor() {
            this.newLevel = 0;
            super();
        }

        public getMessageId(): number {
            return CharacterLevelUpMessage.ID;
        }

        public reset(): void {
            this.newLevel = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_CharacterLevelUpMessage(param1);
        }

        public serializeAs_CharacterLevelUpMessage(param1: ICustomDataOutput): void {
            if (this.newLevel < 2 || this.newLevel > 200) {
                throw new Error('Forbidden value (' + this.newLevel + ') on element newLevel.');
            }
            param1.writeByte(this.newLevel);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_CharacterLevelUpMessage(param1);
        }

        public deserializeAs_CharacterLevelUpMessage(param1: ICustomDataInput): void {
            this.newLevel = param1.readUnsignedByte();
            if (this.newLevel < 2 || this.newLevel > 200) {
                throw new Error('Forbidden value (' + this.newLevel + ') on element of CharacterLevelUpMessage.newLevel.');
            }

        }
    }
    export class CharacterLevelUpInformationMessage extends CharacterLevelUpMessage {
        public static ID: number = 6076;

        name: string;
        id: number;

        constructor() {
            this.name = '';
            this.id = 0;
            super();
        }

        public getMessageId(): number {
            return CharacterLevelUpInformationMessage.ID;
        }

        public reset(): void {
            this.name = '';
            this.id = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_CharacterLevelUpInformationMessage(param1);
        }

        public serializeAs_CharacterLevelUpInformationMessage(param1: ICustomDataOutput): void {
            super.serializeAs_CharacterLevelUpMessage(param1);
            param1.writeUTF(this.name);
            if (this.id < 0) {
                throw new Error('Forbidden value (' + this.id + ') on element id.');
            }
            param1.writeVarInt(this.id);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_CharacterLevelUpInformationMessage(param1);
        }

        public deserializeAs_CharacterLevelUpInformationMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.name = param1.readUTF();
            this.id = param1.readVarUhInt();
            if (this.id < 0) {
                throw new Error('Forbidden value (' + this.id + ') on element of CharacterLevelUpInformationMessage.id.');
            }

        }
    }
    export class CharacterStatsListMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 500;

        stats: CharacterCharacteristicsInformations;

        constructor() {
            this.stats = new CharacterCharacteristicsInformations();
            super();
        }

        public getMessageId(): number {
            return CharacterStatsListMessage.ID;
        }

        public reset(): void {
            this.stats = new CharacterCharacteristicsInformations();
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_CharacterStatsListMessage(param1);
        }

        public serializeAs_CharacterStatsListMessage(param1: ICustomDataOutput): void {
            this.stats.serializeAs_CharacterCharacteristicsInformations(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_CharacterStatsListMessage(param1);
        }

        public deserializeAs_CharacterStatsListMessage(param1: ICustomDataInput): void {
            this.stats = new CharacterCharacteristicsInformations();
            this.stats.deserialize(param1);

        }
    }
    export class FighterStatsListMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6322;

        stats: CharacterCharacteristicsInformations;

        constructor() {
            this.stats = new CharacterCharacteristicsInformations();
            super();
        }

        public getMessageId(): number {
            return FighterStatsListMessage.ID;
        }

        public reset(): void {
            this.stats = new CharacterCharacteristicsInformations();
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_FighterStatsListMessage(param1);
        }

        public serializeAs_FighterStatsListMessage(param1: ICustomDataOutput): void {
            this.stats.serializeAs_CharacterCharacteristicsInformations(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_FighterStatsListMessage(param1);
        }

        public deserializeAs_FighterStatsListMessage(param1: ICustomDataInput): void {
            this.stats = new CharacterCharacteristicsInformations();
            this.stats.deserialize(param1);

        }
    }
    export class LifePointsRegenBeginMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5684;

        regenRate: number;

        constructor() {
            this.regenRate = 0;
            super();
        }

        public getMessageId(): number {
            return LifePointsRegenBeginMessage.ID;
        }

        public reset(): void {
            this.regenRate = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_LifePointsRegenBeginMessage(param1);
        }

        public serializeAs_LifePointsRegenBeginMessage(param1: ICustomDataOutput): void {
            if (this.regenRate < 0 || this.regenRate > 255) {
                throw new Error('Forbidden value (' + this.regenRate + ') on element regenRate.');
            }
            param1.writeByte(this.regenRate);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_LifePointsRegenBeginMessage(param1);
        }

        public deserializeAs_LifePointsRegenBeginMessage(param1: ICustomDataInput): void {
            this.regenRate = param1.readUnsignedByte();
            if (this.regenRate < 0 || this.regenRate > 255) {
                throw new Error('Forbidden value (' + this.regenRate + ') on element of LifePointsRegenBeginMessage.regenRate.');
            }

        }
    }
    export class UpdateLifePointsMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5658;

        lifePoints: number;
        maxLifePoints: number;

        constructor() {
            this.lifePoints = 0;
            this.maxLifePoints = 0;
            super();
        }

        public getMessageId(): number {
            return UpdateLifePointsMessage.ID;
        }

        public reset(): void {
            this.lifePoints = 0;
            this.maxLifePoints = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_UpdateLifePointsMessage(param1);
        }

        public serializeAs_UpdateLifePointsMessage(param1: ICustomDataOutput): void {
            if (this.lifePoints < 0) {
                throw new Error('Forbidden value (' + this.lifePoints + ') on element lifePoints.');
            }
            param1.writeVarInt(this.lifePoints);
            if (this.maxLifePoints < 0) {
                throw new Error('Forbidden value (' + this.maxLifePoints + ') on element maxLifePoints.');
            }
            param1.writeVarInt(this.maxLifePoints);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_UpdateLifePointsMessage(param1);
        }

        public deserializeAs_UpdateLifePointsMessage(param1: ICustomDataInput): void {
            this.lifePoints = param1.readVarUhInt();
            if (this.lifePoints < 0) {
                throw new Error('Forbidden value (' + this.lifePoints + ') on element of UpdateLifePointsMessage.lifePoints.');
            }
            this.maxLifePoints = param1.readVarUhInt();
            if (this.maxLifePoints < 0) {
                throw new Error('Forbidden value (' + this.maxLifePoints + ') on element of UpdateLifePointsMessage.maxLifePoints.');
            }

        }
    }
    export class LifePointsRegenEndMessage extends UpdateLifePointsMessage {
        public static ID: number = 5686;

        lifePointsGained: number;

        constructor() {
            this.lifePointsGained = 0;
            super();
        }

        public getMessageId(): number {
            return LifePointsRegenEndMessage.ID;
        }

        public reset(): void {
            this.lifePointsGained = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_LifePointsRegenEndMessage(param1);
        }

        public serializeAs_LifePointsRegenEndMessage(param1: ICustomDataOutput): void {
            super.serializeAs_UpdateLifePointsMessage(param1);
            if (this.lifePointsGained < 0) {
                throw new Error('Forbidden value (' + this.lifePointsGained + ') on element lifePointsGained.');
            }
            param1.writeVarInt(this.lifePointsGained);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_LifePointsRegenEndMessage(param1);
        }

        public deserializeAs_LifePointsRegenEndMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.lifePointsGained = param1.readVarUhInt();
            if (this.lifePointsGained < 0) {
                throw new Error('Forbidden value (' + this.lifePointsGained + ') on element of LifePointsRegenEndMessage.lifePointsGained.');
            }

        }
    }
    export class PlayerStatusUpdateErrorMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6385;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return PlayerStatusUpdateErrorMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_PlayerStatusUpdateErrorMessage(param1);
        }

        public serializeAs_PlayerStatusUpdateErrorMessage(param1: ICustomDataOutput): void {

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_PlayerStatusUpdateErrorMessage(param1);
        }

        public deserializeAs_PlayerStatusUpdateErrorMessage(param1: ICustomDataInput): void {

        }
    }
    export class PlayerStatusUpdateMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6386;

        accountId: number;
        playerId: number;
        status: PlayerStatus;

        constructor() {
            this.accountId = 0;
            this.playerId = 0;
            this.status = new PlayerStatus();
            super();
        }

        public getMessageId(): number {
            return PlayerStatusUpdateMessage.ID;
        }

        public reset(): void {
            this.accountId = 0;
            this.playerId = 0;
            this.status = new PlayerStatus();
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_PlayerStatusUpdateMessage(param1);
        }

        public serializeAs_PlayerStatusUpdateMessage(param1: ICustomDataOutput): void {
            if (this.accountId < 0) {
                throw new Error('Forbidden value (' + this.accountId + ') on element accountId.');
            }
            param1.writeInt(this.accountId);
            if (this.playerId < 0) {
                throw new Error('Forbidden value (' + this.playerId + ') on element playerId.');
            }
            param1.writeVarInt(this.playerId);
            param1.writeShort(this.status.getTypeId());
            this.status.serialize(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_PlayerStatusUpdateMessage(param1);
        }

        public deserializeAs_PlayerStatusUpdateMessage(param1: ICustomDataInput): void {
            this.accountId = param1.readInt();
            if (this.accountId < 0) {
                throw new Error('Forbidden value (' + this.accountId + ') on element of PlayerStatusUpdateMessage.accountId.');
            }
            this.playerId = param1.readVarUhInt();
            if (this.playerId < 0) {
                throw new Error('Forbidden value (' + this.playerId + ') on element of PlayerStatusUpdateMessage.playerId.');
            }
            var _loc2_: number = param1.readUnsignedShort();
            this.status = <PlayerStatus>ProtocolTypeManager.getInstance(PlayerStatus, _loc2_);
            this.status.deserialize(param1);

        }
    }
    export class PlayerStatusUpdateRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6387;

        status: PlayerStatus;

        constructor() {
            this.status = new PlayerStatus();
            super();
        }

        public getMessageId(): number {
            return PlayerStatusUpdateRequestMessage.ID;
        }

        public reset(): void {
            this.status = new PlayerStatus();
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_PlayerStatusUpdateRequestMessage(param1);
        }

        public serializeAs_PlayerStatusUpdateRequestMessage(param1: ICustomDataOutput): void {
            param1.writeShort(this.status.getTypeId());
            this.status.serialize(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_PlayerStatusUpdateRequestMessage(param1);
        }

        public deserializeAs_PlayerStatusUpdateRequestMessage(param1: ICustomDataInput): void {
            var _loc2_: number = param1.readUnsignedShort();
            this.status = <PlayerStatus>ProtocolTypeManager.getInstance(PlayerStatus, _loc2_);
            this.status.deserialize(param1);

        }
    }
    export class ChatAbstractClientMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 850;

        content: string;

        constructor() {
            this.content = '';
            super();
        }

        public getMessageId(): number {
            return ChatAbstractClientMessage.ID;
        }

        public reset(): void {
            this.content = '';
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ChatAbstractClientMessage(param1);
        }

        public serializeAs_ChatAbstractClientMessage(param1: ICustomDataOutput): void {
            param1.writeUTF(this.content);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ChatAbstractClientMessage(param1);
        }

        public deserializeAs_ChatAbstractClientMessage(param1: ICustomDataInput): void {
            this.content = param1.readUTF();

        }
    }
    export class ChatAbstractServerMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 880;

        channel: number;
        content: string;
        timestamp: number;
        fingerprint: string;

        constructor() {
            this.channel = 0;
            this.content = '';
            this.timestamp = 0;
            this.fingerprint = '';
            super();
        }

        public getMessageId(): number {
            return ChatAbstractServerMessage.ID;
        }

        public reset(): void {
            this.channel = 0;
            this.content = '';
            this.timestamp = 0;
            this.fingerprint = '';
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ChatAbstractServerMessage(param1);
        }

        public serializeAs_ChatAbstractServerMessage(param1: ICustomDataOutput): void {
            param1.writeByte(this.channel);
            param1.writeUTF(this.content);
            if (this.timestamp < 0) {
                throw new Error('Forbidden value (' + this.timestamp + ') on element timestamp.');
            }
            param1.writeInt(this.timestamp);
            param1.writeUTF(this.fingerprint);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ChatAbstractServerMessage(param1);
        }

        public deserializeAs_ChatAbstractServerMessage(param1: ICustomDataInput): void {
            this.channel = param1.readByte();
            if (this.channel < 0) {
                throw new Error('Forbidden value (' + this.channel + ') on element of ChatAbstractServerMessage.channel.');
            }
            this.content = param1.readUTF();
            this.timestamp = param1.readInt();
            if (this.timestamp < 0) {
                throw new Error('Forbidden value (' + this.timestamp + ') on element of ChatAbstractServerMessage.timestamp.');
            }
            this.fingerprint = param1.readUTF();

        }
    }
    export class ChatServerMessage extends ChatAbstractServerMessage {
        public static ID: number = 881;

        senderId: number;
        senderName: string;
        senderAccountId: number;

        constructor() {
            this.senderId = 0;
            this.senderName = '';
            this.senderAccountId = 0;
            super();
        }

        public getMessageId(): number {
            return ChatServerMessage.ID;
        }

        public reset(): void {
            this.senderId = 0;
            this.senderName = '';
            this.senderAccountId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ChatServerMessage(param1);
        }

        public serializeAs_ChatServerMessage(param1: ICustomDataOutput): void {
            super.serializeAs_ChatAbstractServerMessage(param1);
            param1.writeInt(this.senderId);
            param1.writeUTF(this.senderName);
            if (this.senderAccountId < 0) {
                throw new Error('Forbidden value (' + this.senderAccountId + ') on element senderAccountId.');
            }
            param1.writeInt(this.senderAccountId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ChatServerMessage(param1);
        }

        public deserializeAs_ChatServerMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.senderId = param1.readInt();
            this.senderName = param1.readUTF();
            this.senderAccountId = param1.readInt();
            if (this.senderAccountId < 0) {
                throw new Error('Forbidden value (' + this.senderAccountId + ') on element of ChatServerMessage.senderAccountId.');
            }

        }
    }
    export class ChatAdminServerMessage extends ChatServerMessage {
        public static ID: number = 6135;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return ChatAdminServerMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ChatAdminServerMessage(param1);
        }

        public serializeAs_ChatAdminServerMessage(param1: ICustomDataOutput): void {
            super.serializeAs_ChatServerMessage(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ChatAdminServerMessage(param1);
        }

        public deserializeAs_ChatAdminServerMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);

        }
    }
    export class ChatClientMultiMessage extends ChatAbstractClientMessage {
        public static ID: number = 861;

        channel: number;

        constructor() {
            this.channel = 0;
            super();
        }

        public getMessageId(): number {
            return ChatClientMultiMessage.ID;
        }

        public reset(): void {
            this.channel = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ChatClientMultiMessage(param1);
        }

        public serializeAs_ChatClientMultiMessage(param1: ICustomDataOutput): void {
            super.serializeAs_ChatAbstractClientMessage(param1);
            param1.writeByte(this.channel);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ChatClientMultiMessage(param1);
        }

        public deserializeAs_ChatClientMultiMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.channel = param1.readByte();
            if (this.channel < 0) {
                throw new Error('Forbidden value (' + this.channel + ') on element of ChatClientMultiMessage.channel.');
            }

        }
    }
    export class ChatClientMultiWithObjectMessage extends ChatClientMultiMessage {
        public static ID: number = 862;

        objects: ObjectItem[];

        constructor() {
            this.objects = [];
            super();
        }

        public getMessageId(): number {
            return ChatClientMultiWithObjectMessage.ID;
        }

        public reset(): void {
            this.objects = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ChatClientMultiWithObjectMessage(param1);
        }

        public serializeAs_ChatClientMultiWithObjectMessage(param1: ICustomDataOutput): void {
            super.serializeAs_ChatClientMultiMessage(param1);
            param1.writeShort(this.objects.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.objects.length) {
                (this.objects[_loc2_]).serializeAs_ObjectItem(param1);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ChatClientMultiWithObjectMessage(param1);
        }

        public deserializeAs_ChatClientMultiWithObjectMessage(param1: ICustomDataInput): void {
            var _loc4_: ObjectItem = null;
            super.deserialize(param1);
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = new ObjectItem();
                _loc4_.deserialize(param1);
                this.objects.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class ChatClientPrivateMessage extends ChatAbstractClientMessage {
        public static ID: number = 851;

        receiver: string;

        constructor() {
            this.receiver = '';
            super();
        }

        public getMessageId(): number {
            return ChatClientPrivateMessage.ID;
        }

        public reset(): void {
            this.receiver = '';
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ChatClientPrivateMessage(param1);
        }

        public serializeAs_ChatClientPrivateMessage(param1: ICustomDataOutput): void {
            super.serializeAs_ChatAbstractClientMessage(param1);
            param1.writeUTF(this.receiver);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ChatClientPrivateMessage(param1);
        }

        public deserializeAs_ChatClientPrivateMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.receiver = param1.readUTF();

        }
    }
    export class ChatClientPrivateWithObjectMessage extends ChatClientPrivateMessage {
        public static ID: number = 852;

        objects: ObjectItem[];

        constructor() {
            this.objects = [];
            super();
        }

        public getMessageId(): number {
            return ChatClientPrivateWithObjectMessage.ID;
        }

        public reset(): void {
            this.objects = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ChatClientPrivateWithObjectMessage(param1);
        }

        public serializeAs_ChatClientPrivateWithObjectMessage(param1: ICustomDataOutput): void {
            super.serializeAs_ChatClientPrivateMessage(param1);
            param1.writeShort(this.objects.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.objects.length) {
                (this.objects[_loc2_]).serializeAs_ObjectItem(param1);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ChatClientPrivateWithObjectMessage(param1);
        }

        public deserializeAs_ChatClientPrivateWithObjectMessage(param1: ICustomDataInput): void {
            var _loc4_: ObjectItem = null;
            super.deserialize(param1);
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = new ObjectItem();
                _loc4_.deserialize(param1);
                this.objects.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class ChatErrorMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 870;

        reason: number;

        constructor() {
            this.reason = 0;
            super();
        }

        public getMessageId(): number {
            return ChatErrorMessage.ID;
        }

        public reset(): void {
            this.reason = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ChatErrorMessage(param1);
        }

        public serializeAs_ChatErrorMessage(param1: ICustomDataOutput): void {
            param1.writeByte(this.reason);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ChatErrorMessage(param1);
        }

        public deserializeAs_ChatErrorMessage(param1: ICustomDataInput): void {
            this.reason = param1.readByte();
            if (this.reason < 0) {
                throw new Error('Forbidden value (' + this.reason + ') on element of ChatErrorMessage.reason.');
            }

        }
    }
    export class ChatServerCopyMessage extends ChatAbstractServerMessage {
        public static ID: number = 882;

        receiverId: number;
        receiverName: string;

        constructor() {
            this.receiverId = 0;
            this.receiverName = '';
            super();
        }

        public getMessageId(): number {
            return ChatServerCopyMessage.ID;
        }

        public reset(): void {
            this.receiverId = 0;
            this.receiverName = '';
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ChatServerCopyMessage(param1);
        }

        public serializeAs_ChatServerCopyMessage(param1: ICustomDataOutput): void {
            super.serializeAs_ChatAbstractServerMessage(param1);
            if (this.receiverId < 0) {
                throw new Error('Forbidden value (' + this.receiverId + ') on element receiverId.');
            }
            param1.writeVarInt(this.receiverId);
            param1.writeUTF(this.receiverName);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ChatServerCopyMessage(param1);
        }

        public deserializeAs_ChatServerCopyMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.receiverId = param1.readVarUhInt();
            if (this.receiverId < 0) {
                throw new Error('Forbidden value (' + this.receiverId + ') on element of ChatServerCopyMessage.receiverId.');
            }
            this.receiverName = param1.readUTF();

        }
    }
    export class ChatServerCopyWithObjectMessage extends ChatServerCopyMessage {
        public static ID: number = 884;

        objects: ObjectItem[];

        constructor() {
            this.objects = [];
            super();
        }

        public getMessageId(): number {
            return ChatServerCopyWithObjectMessage.ID;
        }

        public reset(): void {
            this.objects = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ChatServerCopyWithObjectMessage(param1);
        }

        public serializeAs_ChatServerCopyWithObjectMessage(param1: ICustomDataOutput): void {
            super.serializeAs_ChatServerCopyMessage(param1);
            param1.writeShort(this.objects.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.objects.length) {
                (this.objects[_loc2_]).serializeAs_ObjectItem(param1);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ChatServerCopyWithObjectMessage(param1);
        }

        public deserializeAs_ChatServerCopyWithObjectMessage(param1: ICustomDataInput): void {
            var _loc4_: ObjectItem = null;
            super.deserialize(param1);
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = new ObjectItem();
                _loc4_.deserialize(param1);
                this.objects.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class ChatServerWithObjectMessage extends ChatServerMessage {
        public static ID: number = 883;

        objects: ObjectItem[];

        constructor() {
            this.objects = [];
            super();
        }

        public getMessageId(): number {
            return ChatServerWithObjectMessage.ID;
        }

        public reset(): void {
            this.objects = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ChatServerWithObjectMessage(param1);
        }

        public serializeAs_ChatServerWithObjectMessage(param1: ICustomDataOutput): void {
            super.serializeAs_ChatServerMessage(param1);
            param1.writeShort(this.objects.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.objects.length) {
                (this.objects[_loc2_]).serializeAs_ObjectItem(param1);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ChatServerWithObjectMessage(param1);
        }

        public deserializeAs_ChatServerWithObjectMessage(param1: ICustomDataInput): void {
            var _loc4_: ObjectItem = null;
            super.deserialize(param1);
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = new ObjectItem();
                _loc4_.deserialize(param1);
                this.objects.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class ChannelEnablingChangeMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 891;

        channel: number;
        enable: boolean;

        constructor() {
            this.channel = 0;
            this.enable = false;
            super();
        }

        public getMessageId(): number {
            return ChannelEnablingChangeMessage.ID;
        }

        public reset(): void {
            this.channel = 0;
            this.enable = false;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ChannelEnablingChangeMessage(param1);
        }

        public serializeAs_ChannelEnablingChangeMessage(param1: ICustomDataOutput): void {
            param1.writeByte(this.channel);
            param1.writeBoolean(this.enable);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ChannelEnablingChangeMessage(param1);
        }

        public deserializeAs_ChannelEnablingChangeMessage(param1: ICustomDataInput): void {
            this.channel = param1.readByte();
            if (this.channel < 0) {
                throw new Error('Forbidden value (' + this.channel + ') on element of ChannelEnablingChangeMessage.channel.');
            }
            this.enable = param1.readBoolean();

        }
    }
    export class ChannelEnablingMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 890;

        channel: number;
        enable: boolean;

        constructor() {
            this.channel = 0;
            this.enable = false;
            super();
        }

        public getMessageId(): number {
            return ChannelEnablingMessage.ID;
        }

        public reset(): void {
            this.channel = 0;
            this.enable = false;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ChannelEnablingMessage(param1);
        }

        public serializeAs_ChannelEnablingMessage(param1: ICustomDataOutput): void {
            param1.writeByte(this.channel);
            param1.writeBoolean(this.enable);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ChannelEnablingMessage(param1);
        }

        public deserializeAs_ChannelEnablingMessage(param1: ICustomDataInput): void {
            this.channel = param1.readByte();
            if (this.channel < 0) {
                throw new Error('Forbidden value (' + this.channel + ') on element of ChannelEnablingMessage.channel.');
            }
            this.enable = param1.readBoolean();

        }
    }
    export class EnabledChannelsMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 892;

        channels: number[];
        disallowed: number[];

        constructor() {
            this.channels = [];
            this.disallowed = [];
            super();
        }

        public getMessageId(): number {
            return EnabledChannelsMessage.ID;
        }

        public reset(): void {
            this.channels = [];
            this.disallowed = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_EnabledChannelsMessage(param1);
        }

        public serializeAs_EnabledChannelsMessage(param1: ICustomDataOutput): void {
            param1.writeShort(this.channels.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.channels.length) {
                param1.writeByte(this.channels[_loc2_]);
                _loc2_++;
            }
            param1.writeShort(this.disallowed.length);
            var _loc3_: number = 0;
            while (_loc3_ < this.disallowed.length) {
                param1.writeByte(this.disallowed[_loc3_]);
                _loc3_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_EnabledChannelsMessage(param1);
        }

        public deserializeAs_EnabledChannelsMessage(param1: ICustomDataInput): void {
            var _loc6_: number = 0;
            var _loc7_: number = 0;
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc6_ = param1.readByte();
                if (_loc6_ < 0) {
                    throw new Error('Forbidden value (' + _loc6_ + ') on elements of channels.');
                }
                this.channels.push(_loc6_);
                _loc3_++;
            }
            var _loc4_: number = param1.readUnsignedShort();
            var _loc5_: number = 0;
            while (_loc5_ < _loc4_) {
            _loc7_ = param1.readByte();
                if (_loc7_ < 0) {
                    throw new Error('Forbidden value (' + _loc7_ + ') on elements of disallowed.');
                }
                this.disallowed.push(_loc7_);
                _loc5_++;
            }

        }
    }
    export class ChatMessageReportMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 821;

        senderName: string;
        content: string;
        timestamp: number;
        channel: number;
        fingerprint: string;
        reason: number;

        constructor() {
            this.senderName = '';
            this.content = '';
            this.timestamp = 0;
            this.channel = 0;
            this.fingerprint = '';
            this.reason = 0;
            super();
        }

        public getMessageId(): number {
            return ChatMessageReportMessage.ID;
        }

        public reset(): void {
            this.senderName = '';
            this.content = '';
            this.timestamp = 0;
            this.channel = 0;
            this.fingerprint = '';
            this.reason = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ChatMessageReportMessage(param1);
        }

        public serializeAs_ChatMessageReportMessage(param1: ICustomDataOutput): void {
            param1.writeUTF(this.senderName);
            param1.writeUTF(this.content);
            if (this.timestamp < 0) {
                throw new Error('Forbidden value (' + this.timestamp + ') on element timestamp.');
            }
            param1.writeInt(this.timestamp);
            param1.writeByte(this.channel);
            param1.writeUTF(this.fingerprint);
            if (this.reason < 0) {
                throw new Error('Forbidden value (' + this.reason + ') on element reason.');
            }
            param1.writeByte(this.reason);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ChatMessageReportMessage(param1);
        }

        public deserializeAs_ChatMessageReportMessage(param1: ICustomDataInput): void {
            this.senderName = param1.readUTF();
            this.content = param1.readUTF();
            this.timestamp = param1.readInt();
            if (this.timestamp < 0) {
                throw new Error('Forbidden value (' + this.timestamp + ') on element of ChatMessageReportMessage.timestamp.');
            }
            this.channel = param1.readByte();
            if (this.channel < 0) {
                throw new Error('Forbidden value (' + this.channel + ') on element of ChatMessageReportMessage.channel.');
            }
            this.fingerprint = param1.readUTF();
            this.reason = param1.readByte();
            if (this.reason < 0) {
                throw new Error('Forbidden value (' + this.reason + ') on element of ChatMessageReportMessage.reason.');
            }

        }
    }
    export class ChatSmileyExtraPackListMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6596;

        packIds: number[];

        constructor() {
            this.packIds = [];
            super();
        }

        public getMessageId(): number {
            return ChatSmileyExtraPackListMessage.ID;
        }

        public reset(): void {
            this.packIds = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ChatSmileyExtraPackListMessage(param1);
        }

        public serializeAs_ChatSmileyExtraPackListMessage(param1: ICustomDataOutput): void {
            param1.writeShort(this.packIds.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.packIds.length) {
                if (this.packIds[_loc2_] < 0) {
                    throw new Error('Forbidden value (' + this.packIds[_loc2_] + ') on element 1 (starting at 1) of packIds.');
                }
                param1.writeByte(this.packIds[_loc2_]);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ChatSmileyExtraPackListMessage(param1);
        }

        public deserializeAs_ChatSmileyExtraPackListMessage(param1: ICustomDataInput): void {
            var _loc4_: number = 0;
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = param1.readByte();
                if (_loc4_ < 0) {
                    throw new Error('Forbidden value (' + _loc4_ + ') on elements of packIds.');
                }
                this.packIds.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class ChatSmileyMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 801;

        entityId: number;
        smileyId: number;
        accountId: number;

        constructor() {
            this.entityId = 0;
            this.smileyId = 0;
            this.accountId = 0;
            super();
        }

        public getMessageId(): number {
            return ChatSmileyMessage.ID;
        }

        public reset(): void {
            this.entityId = 0;
            this.smileyId = 0;
            this.accountId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ChatSmileyMessage(param1);
        }

        public serializeAs_ChatSmileyMessage(param1: ICustomDataOutput): void {
            param1.writeInt(this.entityId);
            if (this.smileyId < 0) {
                throw new Error('Forbidden value (' + this.smileyId + ') on element smileyId.');
            }
            param1.writeVarShort(this.smileyId);
            if (this.accountId < 0) {
                throw new Error('Forbidden value (' + this.accountId + ') on element accountId.');
            }
            param1.writeInt(this.accountId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ChatSmileyMessage(param1);
        }

        public deserializeAs_ChatSmileyMessage(param1: ICustomDataInput): void {
            this.entityId = param1.readInt();
            this.smileyId = param1.readVarUhShort();
            if (this.smileyId < 0) {
                throw new Error('Forbidden value (' + this.smileyId + ') on element of ChatSmileyMessage.smileyId.');
            }
            this.accountId = param1.readInt();
            if (this.accountId < 0) {
                throw new Error('Forbidden value (' + this.accountId + ') on element of ChatSmileyMessage.accountId.');
            }

        }
    }
    export class ChatSmileyRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 800;

        smileyId: number;

        constructor() {
            this.smileyId = 0;
            super();
        }

        public getMessageId(): number {
            return ChatSmileyRequestMessage.ID;
        }

        public reset(): void {
            this.smileyId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ChatSmileyRequestMessage(param1);
        }

        public serializeAs_ChatSmileyRequestMessage(param1: ICustomDataOutput): void {
            if (this.smileyId < 0) {
                throw new Error('Forbidden value (' + this.smileyId + ') on element smileyId.');
            }
            param1.writeVarShort(this.smileyId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ChatSmileyRequestMessage(param1);
        }

        public deserializeAs_ChatSmileyRequestMessage(param1: ICustomDataInput): void {
            this.smileyId = param1.readVarUhShort();
            if (this.smileyId < 0) {
                throw new Error('Forbidden value (' + this.smileyId + ') on element of ChatSmileyRequestMessage.smileyId.');
            }

        }
    }
    export class LocalizedChatSmileyMessage extends ChatSmileyMessage {
        public static ID: number = 6185;

        cellId: number;

        constructor() {
            this.cellId = 0;
            super();
        }

        public getMessageId(): number {
            return LocalizedChatSmileyMessage.ID;
        }

        public reset(): void {
            this.cellId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_LocalizedChatSmileyMessage(param1);
        }

        public serializeAs_LocalizedChatSmileyMessage(param1: ICustomDataOutput): void {
            super.serializeAs_ChatSmileyMessage(param1);
            if (this.cellId < 0 || this.cellId > 559) {
                throw new Error('Forbidden value (' + this.cellId + ') on element cellId.');
            }
            param1.writeVarShort(this.cellId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_LocalizedChatSmileyMessage(param1);
        }

        public deserializeAs_LocalizedChatSmileyMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.cellId = param1.readVarUhShort();
            if (this.cellId < 0 || this.cellId > 559) {
                throw new Error('Forbidden value (' + this.cellId + ') on element of LocalizedChatSmileyMessage.cellId.');
            }

        }
    }
    export class MoodSmileyRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6192;

        smileyId: number;

        constructor() {
            this.smileyId = 0;
            super();
        }

        public getMessageId(): number {
            return MoodSmileyRequestMessage.ID;
        }

        public reset(): void {
            this.smileyId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_MoodSmileyRequestMessage(param1);
        }

        public serializeAs_MoodSmileyRequestMessage(param1: ICustomDataOutput): void {
            if (this.smileyId < 0) {
                throw new Error('Forbidden value (' + this.smileyId + ') on element smileyId.');
            }
            param1.writeVarShort(this.smileyId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_MoodSmileyRequestMessage(param1);
        }

        public deserializeAs_MoodSmileyRequestMessage(param1: ICustomDataInput): void {
            this.smileyId = param1.readVarUhShort();
            if (this.smileyId < 0) {
                throw new Error('Forbidden value (' + this.smileyId + ') on element of MoodSmileyRequestMessage.smileyId.');
            }

        }
    }
    export class MoodSmileyResultMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6196;

        resultCode: number;
        smileyId: number;

        constructor() {
            this.resultCode = 1;
            this.smileyId = 0;
            super();
        }

        public getMessageId(): number {
            return MoodSmileyResultMessage.ID;
        }

        public reset(): void {
            this.resultCode = 1;
            this.smileyId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_MoodSmileyResultMessage(param1);
        }

        public serializeAs_MoodSmileyResultMessage(param1: ICustomDataOutput): void {
            param1.writeByte(this.resultCode);
            if (this.smileyId < 0) {
                throw new Error('Forbidden value (' + this.smileyId + ') on element smileyId.');
            }
            param1.writeVarShort(this.smileyId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_MoodSmileyResultMessage(param1);
        }

        public deserializeAs_MoodSmileyResultMessage(param1: ICustomDataInput): void {
            this.resultCode = param1.readByte();
            if (this.resultCode < 0) {
                throw new Error('Forbidden value (' + this.resultCode + ') on element of MoodSmileyResultMessage.resultCode.');
            }
            this.smileyId = param1.readVarUhShort();
            if (this.smileyId < 0) {
                throw new Error('Forbidden value (' + this.smileyId + ') on element of MoodSmileyResultMessage.smileyId.');
            }

        }
    }
    export class MoodSmileyUpdateMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6388;

        accountId: number;
        playerId: number;
        smileyId: number;

        constructor() {
            this.accountId = 0;
            this.playerId = 0;
            this.smileyId = 0;
            super();
        }

        public getMessageId(): number {
            return MoodSmileyUpdateMessage.ID;
        }

        public reset(): void {
            this.accountId = 0;
            this.playerId = 0;
            this.smileyId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_MoodSmileyUpdateMessage(param1);
        }

        public serializeAs_MoodSmileyUpdateMessage(param1: ICustomDataOutput): void {
            if (this.accountId < 0) {
                throw new Error('Forbidden value (' + this.accountId + ') on element accountId.');
            }
            param1.writeInt(this.accountId);
            if (this.playerId < 0) {
                throw new Error('Forbidden value (' + this.playerId + ') on element playerId.');
            }
            param1.writeVarInt(this.playerId);
            if (this.smileyId < 0) {
                throw new Error('Forbidden value (' + this.smileyId + ') on element smileyId.');
            }
            param1.writeVarShort(this.smileyId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_MoodSmileyUpdateMessage(param1);
        }

        public deserializeAs_MoodSmileyUpdateMessage(param1: ICustomDataInput): void {
            this.accountId = param1.readInt();
            if (this.accountId < 0) {
                throw new Error('Forbidden value (' + this.accountId + ') on element of MoodSmileyUpdateMessage.accountId.');
            }
            this.playerId = param1.readVarUhInt();
            if (this.playerId < 0) {
                throw new Error('Forbidden value (' + this.playerId + ') on element of MoodSmileyUpdateMessage.playerId.');
            }
            this.smileyId = param1.readVarUhShort();
            if (this.smileyId < 0) {
                throw new Error('Forbidden value (' + this.smileyId + ') on element of MoodSmileyUpdateMessage.smileyId.');
            }

        }
    }
    export class GameMapMovementMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 951;

        keyMovements: number[];
        actorId: number;

        constructor() {
            this.keyMovements = [];
            this.actorId = 0;
            super();
        }

        public getMessageId(): number {
            return GameMapMovementMessage.ID;
        }

        public reset(): void {
            this.keyMovements = [];
            this.actorId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameMapMovementMessage(param1);
        }

        public serializeAs_GameMapMovementMessage(param1: ICustomDataOutput): void {
            param1.writeShort(this.keyMovements.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.keyMovements.length) {
                if (this.keyMovements[_loc2_] < 0) {
                    throw new Error('Forbidden value (' + this.keyMovements[_loc2_] + ') on element 1 (starting at 1) of keyMovements.');
                }
                param1.writeShort(this.keyMovements[_loc2_]);
                _loc2_++;
            }
            param1.writeInt(this.actorId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameMapMovementMessage(param1);
        }

        public deserializeAs_GameMapMovementMessage(param1: ICustomDataInput): void {
            var _loc4_: number = 0;
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = param1.readShort();
                if (_loc4_ < 0) {
                    throw new Error('Forbidden value (' + _loc4_ + ') on elements of keyMovements.');
                }
                this.keyMovements.push(_loc4_);
                _loc3_++;
            }
            this.actorId = param1.readInt();

        }
    }
    export class GameCautiousMapMovementMessage extends GameMapMovementMessage {
        public static ID: number = 6497;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return GameCautiousMapMovementMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameCautiousMapMovementMessage(param1);
        }

        public serializeAs_GameCautiousMapMovementMessage(param1: ICustomDataOutput): void {
            super.serializeAs_GameMapMovementMessage(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameCautiousMapMovementMessage(param1);
        }

        public deserializeAs_GameCautiousMapMovementMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);

        }
    }
    export class GameMapMovementRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 950;

        keyMovements: number[];
        mapId: number;

        constructor() {
            this.keyMovements = [];
            this.mapId = 0;
            super();
        }

        public getMessageId(): number {
            return GameMapMovementRequestMessage.ID;
        }

        public reset(): void {
            this.keyMovements = [];
            this.mapId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameMapMovementRequestMessage(param1);
        }

        public serializeAs_GameMapMovementRequestMessage(param1: ICustomDataOutput): void {
            param1.writeShort(this.keyMovements.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.keyMovements.length) {
                if (this.keyMovements[_loc2_] < 0) {
                    throw new Error('Forbidden value (' + this.keyMovements[_loc2_] + ') on element 1 (starting at 1) of keyMovements.');
                }
                param1.writeShort(this.keyMovements[_loc2_]);
                _loc2_++;
            }
            if (this.mapId < 0) {
                throw new Error('Forbidden value (' + this.mapId + ') on element mapId.');
            }
            param1.writeInt(this.mapId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameMapMovementRequestMessage(param1);
        }

        public deserializeAs_GameMapMovementRequestMessage(param1: ICustomDataInput): void {
            var _loc4_: number = 0;
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = param1.readShort();
                if (_loc4_ < 0) {
                    throw new Error('Forbidden value (' + _loc4_ + ') on elements of keyMovements.');
                }
                this.keyMovements.push(_loc4_);
                _loc3_++;
            }
            this.mapId = param1.readInt();
            if (this.mapId < 0) {
                throw new Error('Forbidden value (' + this.mapId + ') on element of GameMapMovementRequestMessage.mapId.');
            }

        }
    }
    export class GameCautiousMapMovementRequestMessage extends GameMapMovementRequestMessage {
        public static ID: number = 6496;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return GameCautiousMapMovementRequestMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameCautiousMapMovementRequestMessage(param1);
        }

        public serializeAs_GameCautiousMapMovementRequestMessage(param1: ICustomDataOutput): void {
            super.serializeAs_GameMapMovementRequestMessage(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameCautiousMapMovementRequestMessage(param1);
        }

        public deserializeAs_GameCautiousMapMovementRequestMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);

        }
    }
    export class GameContextCreateErrorMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6024;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return GameContextCreateErrorMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameContextCreateErrorMessage(param1);
        }

        public serializeAs_GameContextCreateErrorMessage(param1: ICustomDataOutput): void {

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameContextCreateErrorMessage(param1);
        }

        public deserializeAs_GameContextCreateErrorMessage(param1: ICustomDataInput): void {

        }
    }
    export class GameContextCreateMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 200;

        context: number;

        constructor() {
            this.context = 1;
            super();
        }

        public getMessageId(): number {
            return GameContextCreateMessage.ID;
        }

        public reset(): void {
            this.context = 1;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameContextCreateMessage(param1);
        }

        public serializeAs_GameContextCreateMessage(param1: ICustomDataOutput): void {
            param1.writeByte(this.context);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameContextCreateMessage(param1);
        }

        public deserializeAs_GameContextCreateMessage(param1: ICustomDataInput): void {
            this.context = param1.readByte();
            if (this.context < 0) {
                throw new Error('Forbidden value (' + this.context + ') on element of GameContextCreateMessage.context.');
            }

        }
    }
    export class GameContextCreateRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 250;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return GameContextCreateRequestMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameContextCreateRequestMessage(param1);
        }

        public serializeAs_GameContextCreateRequestMessage(param1: ICustomDataOutput): void {

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameContextCreateRequestMessage(param1);
        }

        public deserializeAs_GameContextCreateRequestMessage(param1: ICustomDataInput): void {

        }
    }
    export class GameContextDestroyMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 201;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return GameContextDestroyMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameContextDestroyMessage(param1);
        }

        public serializeAs_GameContextDestroyMessage(param1: ICustomDataOutput): void {

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameContextDestroyMessage(param1);
        }

        public deserializeAs_GameContextDestroyMessage(param1: ICustomDataInput): void {

        }
    }
    export class GameContextKickMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6081;

        targetId: number;

        constructor() {
            this.targetId = 0;
            super();
        }

        public getMessageId(): number {
            return GameContextKickMessage.ID;
        }

        public reset(): void {
            this.targetId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameContextKickMessage(param1);
        }

        public serializeAs_GameContextKickMessage(param1: ICustomDataOutput): void {
            param1.writeInt(this.targetId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameContextKickMessage(param1);
        }

        public deserializeAs_GameContextKickMessage(param1: ICustomDataInput): void {
            this.targetId = param1.readInt();

        }
    }
    export class GameContextMoveElementMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 253;

        movement: EntityMovementInformations;

        constructor() {
            this.movement = new EntityMovementInformations();
            super();
        }

        public getMessageId(): number {
            return GameContextMoveElementMessage.ID;
        }

        public reset(): void {
            this.movement = new EntityMovementInformations();
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameContextMoveElementMessage(param1);
        }

        public serializeAs_GameContextMoveElementMessage(param1: ICustomDataOutput): void {
            this.movement.serializeAs_EntityMovementInformations(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameContextMoveElementMessage(param1);
        }

        public deserializeAs_GameContextMoveElementMessage(param1: ICustomDataInput): void {
            this.movement = new EntityMovementInformations();
            this.movement.deserialize(param1);

        }
    }
    export class GameContextMoveMultipleElementsMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 254;

        movements: EntityMovementInformations[];

        constructor() {
            this.movements = [];
            super();
        }

        public getMessageId(): number {
            return GameContextMoveMultipleElementsMessage.ID;
        }

        public reset(): void {
            this.movements = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameContextMoveMultipleElementsMessage(param1);
        }

        public serializeAs_GameContextMoveMultipleElementsMessage(param1: ICustomDataOutput): void {
            param1.writeShort(this.movements.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.movements.length) {
                (this.movements[_loc2_]).serializeAs_EntityMovementInformations(param1);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameContextMoveMultipleElementsMessage(param1);
        }

        public deserializeAs_GameContextMoveMultipleElementsMessage(param1: ICustomDataInput): void {
            var _loc4_: EntityMovementInformations = null;
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = new EntityMovementInformations();
                _loc4_.deserialize(param1);
                this.movements.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class GameContextQuitMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 255;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return GameContextQuitMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameContextQuitMessage(param1);
        }

        public serializeAs_GameContextQuitMessage(param1: ICustomDataOutput): void {

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameContextQuitMessage(param1);
        }

        public deserializeAs_GameContextQuitMessage(param1: ICustomDataInput): void {

        }
    }
    export class GameContextReadyMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6071;

        mapId: number;

        constructor() {
            this.mapId = 0;
            super();
        }

        public getMessageId(): number {
            return GameContextReadyMessage.ID;
        }

        public reset(): void {
            this.mapId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameContextReadyMessage(param1);
        }

        public serializeAs_GameContextReadyMessage(param1: ICustomDataOutput): void {
            if (this.mapId < 0) {
                throw new Error('Forbidden value (' + this.mapId + ') on element mapId.');
            }
            param1.writeInt(this.mapId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameContextReadyMessage(param1);
        }

        public deserializeAs_GameContextReadyMessage(param1: ICustomDataInput): void {
            this.mapId = param1.readInt();
            if (this.mapId < 0) {
                throw new Error('Forbidden value (' + this.mapId + ') on element of GameContextReadyMessage.mapId.');
            }

        }
    }
    export class GameContextRefreshEntityLookMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5637;

        id: number;
        look: EntityLook;

        constructor() {
            this.id = 0;
            this.look = new EntityLook();
            super();
        }

        public getMessageId(): number {
            return GameContextRefreshEntityLookMessage.ID;
        }

        public reset(): void {
            this.id = 0;
            this.look = new EntityLook();
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameContextRefreshEntityLookMessage(param1);
        }

        public serializeAs_GameContextRefreshEntityLookMessage(param1: ICustomDataOutput): void {
            param1.writeInt(this.id);
            this.look.serializeAs_EntityLook(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameContextRefreshEntityLookMessage(param1);
        }

        public deserializeAs_GameContextRefreshEntityLookMessage(param1: ICustomDataInput): void {
            this.id = param1.readInt();
            this.look = new EntityLook();
            this.look.deserialize(param1);

        }
    }
    export class GameContextRemoveElementMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 251;

        id: number;

        constructor() {
            this.id = 0;
            super();
        }

        public getMessageId(): number {
            return GameContextRemoveElementMessage.ID;
        }

        public reset(): void {
            this.id = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameContextRemoveElementMessage(param1);
        }

        public serializeAs_GameContextRemoveElementMessage(param1: ICustomDataOutput): void {
            param1.writeInt(this.id);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameContextRemoveElementMessage(param1);
        }

        public deserializeAs_GameContextRemoveElementMessage(param1: ICustomDataInput): void {
            this.id = param1.readInt();

        }
    }
    export class GameContextRemoveElementWithEventMessage extends GameContextRemoveElementMessage {
        public static ID: number = 6412;

        elementEventId: number;

        constructor() {
            this.elementEventId = 0;
            super();
        }

        public getMessageId(): number {
            return GameContextRemoveElementWithEventMessage.ID;
        }

        public reset(): void {
            this.elementEventId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameContextRemoveElementWithEventMessage(param1);
        }

        public serializeAs_GameContextRemoveElementWithEventMessage(param1: ICustomDataOutput): void {
            super.serializeAs_GameContextRemoveElementMessage(param1);
            if (this.elementEventId < 0) {
                throw new Error('Forbidden value (' + this.elementEventId + ') on element elementEventId.');
            }
            param1.writeByte(this.elementEventId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameContextRemoveElementWithEventMessage(param1);
        }

        public deserializeAs_GameContextRemoveElementWithEventMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.elementEventId = param1.readByte();
            if (this.elementEventId < 0) {
                throw new Error('Forbidden value (' + this.elementEventId + ') on element of GameContextRemoveElementWithEventMessage.elementEventId.');
            }

        }
    }
    export class GameContextRemoveMultipleElementsMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 252;

        id: number[];

        constructor() {
            this.id = [];
            super();
        }

        public getMessageId(): number {
            return GameContextRemoveMultipleElementsMessage.ID;
        }

        public reset(): void {
            this.id = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameContextRemoveMultipleElementsMessage(param1);
        }

        public serializeAs_GameContextRemoveMultipleElementsMessage(param1: ICustomDataOutput): void {
            param1.writeShort(this.id.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.id.length) {
                param1.writeInt(this.id[_loc2_]);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameContextRemoveMultipleElementsMessage(param1);
        }

        public deserializeAs_GameContextRemoveMultipleElementsMessage(param1: ICustomDataInput): void {
            var _loc4_: any = 0;
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = param1.readInt();
                this.id.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class GameContextRemoveMultipleElementsWithEventsMessage extends GameContextRemoveMultipleElementsMessage {
        public static ID: number = 6416;

        elementEventIds: number[];

        constructor() {
            this.elementEventIds = [];
            super();
        }

        public getMessageId(): number {
            return GameContextRemoveMultipleElementsWithEventsMessage.ID;
        }

        public reset(): void {
            this.elementEventIds = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameContextRemoveMultipleElementsWithEventsMessage(param1);
        }

        public serializeAs_GameContextRemoveMultipleElementsWithEventsMessage(param1: ICustomDataOutput): void {
            super.serializeAs_GameContextRemoveMultipleElementsMessage(param1);
            param1.writeShort(this.elementEventIds.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.elementEventIds.length) {
                if (this.elementEventIds[_loc2_] < 0) {
                    throw new Error('Forbidden value (' + this.elementEventIds[_loc2_] + ') on element 1 (starting at 1) of elementEventIds.');
                }
                param1.writeByte(this.elementEventIds[_loc2_]);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameContextRemoveMultipleElementsWithEventsMessage(param1);
        }

        public deserializeAs_GameContextRemoveMultipleElementsWithEventsMessage(param1: ICustomDataInput): void {
            var _loc4_: number = 0;
            super.deserialize(param1);
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = param1.readByte();
                if (_loc4_ < 0) {
                    throw new Error('Forbidden value (' + _loc4_ + ') on elements of elementEventIds.');
                }
                this.elementEventIds.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class GameEntitiesDispositionMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5696;

        dispositions: IdentifiedEntityDispositionInformations[];

        constructor() {
            this.dispositions = [];
            super();
        }

        public getMessageId(): number {
            return GameEntitiesDispositionMessage.ID;
        }

        public reset(): void {
            this.dispositions = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameEntitiesDispositionMessage(param1);
        }

        public serializeAs_GameEntitiesDispositionMessage(param1: ICustomDataOutput): void {
            param1.writeShort(this.dispositions.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.dispositions.length) {
                (this.dispositions[_loc2_]).serializeAs_IdentifiedEntityDispositionInformations(param1);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameEntitiesDispositionMessage(param1);
        }

        public deserializeAs_GameEntitiesDispositionMessage(param1: ICustomDataInput): void {
            var _loc4_: IdentifiedEntityDispositionInformations = null;
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = new IdentifiedEntityDispositionInformations();
                _loc4_.deserialize(param1);
                this.dispositions.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class GameEntityDispositionErrorMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5695;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return GameEntityDispositionErrorMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameEntityDispositionErrorMessage(param1);
        }

        public serializeAs_GameEntityDispositionErrorMessage(param1: ICustomDataOutput): void {

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameEntityDispositionErrorMessage(param1);
        }

        public deserializeAs_GameEntityDispositionErrorMessage(param1: ICustomDataInput): void {

        }
    }
    export class GameEntityDispositionMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5693;

        disposition: IdentifiedEntityDispositionInformations;

        constructor() {
            this.disposition = new IdentifiedEntityDispositionInformations();
            super();
        }

        public getMessageId(): number {
            return GameEntityDispositionMessage.ID;
        }

        public reset(): void {
            this.disposition = new IdentifiedEntityDispositionInformations();
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameEntityDispositionMessage(param1);
        }

        public serializeAs_GameEntityDispositionMessage(param1: ICustomDataOutput): void {
            this.disposition.serializeAs_IdentifiedEntityDispositionInformations(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameEntityDispositionMessage(param1);
        }

        public deserializeAs_GameEntityDispositionMessage(param1: ICustomDataInput): void {
            this.disposition = new IdentifiedEntityDispositionInformations();
            this.disposition.deserialize(param1);

        }
    }
    export class GameMapChangeOrientationMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 946;

        orientation: ActorOrientation;

        constructor() {
            this.orientation = new ActorOrientation();
            super();
        }

        public getMessageId(): number {
            return GameMapChangeOrientationMessage.ID;
        }

        public reset(): void {
            this.orientation = new ActorOrientation();
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameMapChangeOrientationMessage(param1);
        }

        public serializeAs_GameMapChangeOrientationMessage(param1: ICustomDataOutput): void {
            this.orientation.serializeAs_ActorOrientation(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameMapChangeOrientationMessage(param1);
        }

        public deserializeAs_GameMapChangeOrientationMessage(param1: ICustomDataInput): void {
            this.orientation = new ActorOrientation();
            this.orientation.deserialize(param1);

        }
    }
    export class GameMapChangeOrientationRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 945;

        direction: number;

        constructor() {
            this.direction = 1;
            super();
        }

        public getMessageId(): number {
            return GameMapChangeOrientationRequestMessage.ID;
        }

        public reset(): void {
            this.direction = 1;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameMapChangeOrientationRequestMessage(param1);
        }

        public serializeAs_GameMapChangeOrientationRequestMessage(param1: ICustomDataOutput): void {
            param1.writeByte(this.direction);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameMapChangeOrientationRequestMessage(param1);
        }

        public deserializeAs_GameMapChangeOrientationRequestMessage(param1: ICustomDataInput): void {
            this.direction = param1.readByte();
            if (this.direction < 0) {
                throw new Error('Forbidden value (' + this.direction + ') on element of GameMapChangeOrientationRequestMessage.direction.');
            }

        }
    }
    export class GameMapChangeOrientationsMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6155;

        orientations: ActorOrientation[];

        constructor() {
            this.orientations = [];
            super();
        }

        public getMessageId(): number {
            return GameMapChangeOrientationsMessage.ID;
        }

        public reset(): void {
            this.orientations = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameMapChangeOrientationsMessage(param1);
        }

        public serializeAs_GameMapChangeOrientationsMessage(param1: ICustomDataOutput): void {
            param1.writeShort(this.orientations.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.orientations.length) {
                (this.orientations[_loc2_]).serializeAs_ActorOrientation(param1);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameMapChangeOrientationsMessage(param1);
        }

        public deserializeAs_GameMapChangeOrientationsMessage(param1: ICustomDataInput): void {
            var _loc4_: ActorOrientation = null;
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = new ActorOrientation();
                _loc4_.deserialize(param1);
                this.orientations.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class GameMapMovementCancelMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 953;

        cellId: number;

        constructor() {
            this.cellId = 0;
            super();
        }

        public getMessageId(): number {
            return GameMapMovementCancelMessage.ID;
        }

        public reset(): void {
            this.cellId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameMapMovementCancelMessage(param1);
        }

        public serializeAs_GameMapMovementCancelMessage(param1: ICustomDataOutput): void {
            if (this.cellId < 0 || this.cellId > 559) {
                throw new Error('Forbidden value (' + this.cellId + ') on element cellId.');
            }
            param1.writeVarShort(this.cellId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameMapMovementCancelMessage(param1);
        }

        public deserializeAs_GameMapMovementCancelMessage(param1: ICustomDataInput): void {
            this.cellId = param1.readVarUhShort();
            if (this.cellId < 0 || this.cellId > 559) {
                throw new Error('Forbidden value (' + this.cellId + ') on element of GameMapMovementCancelMessage.cellId.');
            }

        }
    }
    export class GameMapMovementConfirmMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 952;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return GameMapMovementConfirmMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameMapMovementConfirmMessage(param1);
        }

        public serializeAs_GameMapMovementConfirmMessage(param1: ICustomDataOutput): void {

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameMapMovementConfirmMessage(param1);
        }

        public deserializeAs_GameMapMovementConfirmMessage(param1: ICustomDataInput): void {

        }
    }
    export class GameMapNoMovementMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 954;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return GameMapNoMovementMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameMapNoMovementMessage(param1);
        }

        public serializeAs_GameMapNoMovementMessage(param1: ICustomDataOutput): void {

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameMapNoMovementMessage(param1);
        }

        public deserializeAs_GameMapNoMovementMessage(param1: ICustomDataInput): void {

        }
    }
    export class ShowCellMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5612;

        sourceId: number;
        cellId: number;

        constructor() {
            this.sourceId = 0;
            this.cellId = 0;
            super();
        }

        public getMessageId(): number {
            return ShowCellMessage.ID;
        }

        public reset(): void {
            this.sourceId = 0;
            this.cellId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ShowCellMessage(param1);
        }

        public serializeAs_ShowCellMessage(param1: ICustomDataOutput): void {
            param1.writeInt(this.sourceId);
            if (this.cellId < 0 || this.cellId > 559) {
                throw new Error('Forbidden value (' + this.cellId + ') on element cellId.');
            }
            param1.writeVarShort(this.cellId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ShowCellMessage(param1);
        }

        public deserializeAs_ShowCellMessage(param1: ICustomDataInput): void {
            this.sourceId = param1.readInt();
            this.cellId = param1.readVarUhShort();
            if (this.cellId < 0 || this.cellId > 559) {
                throw new Error('Forbidden value (' + this.cellId + ') on element of ShowCellMessage.cellId.');
            }

        }
    }
    export class ShowCellRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5611;

        cellId: number;

        constructor() {
            this.cellId = 0;
            super();
        }

        public getMessageId(): number {
            return ShowCellRequestMessage.ID;
        }

        public reset(): void {
            this.cellId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ShowCellRequestMessage(param1);
        }

        public serializeAs_ShowCellRequestMessage(param1: ICustomDataOutput): void {
            if (this.cellId < 0 || this.cellId > 559) {
                throw new Error('Forbidden value (' + this.cellId + ') on element cellId.');
            }
            param1.writeVarShort(this.cellId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ShowCellRequestMessage(param1);
        }

        public deserializeAs_ShowCellRequestMessage(param1: ICustomDataInput): void {
            this.cellId = param1.readVarUhShort();
            if (this.cellId < 0 || this.cellId > 559) {
                throw new Error('Forbidden value (' + this.cellId + ') on element of ShowCellRequestMessage.cellId.');
            }

        }
    }
    export class ShowCellSpectatorMessage extends ShowCellMessage {
        public static ID: number = 6158;

        playerName: string;

        constructor() {
            this.playerName = '';
            super();
        }

        public getMessageId(): number {
            return ShowCellSpectatorMessage.ID;
        }

        public reset(): void {
            this.playerName = '';
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ShowCellSpectatorMessage(param1);
        }

        public serializeAs_ShowCellSpectatorMessage(param1: ICustomDataOutput): void {
            super.serializeAs_ShowCellMessage(param1);
            param1.writeUTF(this.playerName);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ShowCellSpectatorMessage(param1);
        }

        public deserializeAs_ShowCellSpectatorMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.playerName = param1.readUTF();

        }
    }
    export class DisplayNumericalValuePaddockMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6563;

        rideId: number;
        value: number;
        type: number;

        constructor() {
            this.rideId = 0;
            this.value = 0;
            this.type = 0;
            super();
        }

        public getMessageId(): number {
            return DisplayNumericalValuePaddockMessage.ID;
        }

        public reset(): void {
            this.rideId = 0;
            this.value = 0;
            this.type = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_DisplayNumericalValuePaddockMessage(param1);
        }

        public serializeAs_DisplayNumericalValuePaddockMessage(param1: ICustomDataOutput): void {
            param1.writeInt(this.rideId);
            param1.writeInt(this.value);
            param1.writeByte(this.type);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_DisplayNumericalValuePaddockMessage(param1);
        }

        public deserializeAs_DisplayNumericalValuePaddockMessage(param1: ICustomDataInput): void {
            this.rideId = param1.readInt();
            this.value = param1.readInt();
            this.type = param1.readByte();
            if (this.type < 0) {
                throw new Error('Forbidden value (' + this.type + ') on element of DisplayNumericalValuePaddockMessage.type.');
            }

        }
    }
    export class DungeonKeyRingMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6299;

        availables: number[];
        unavailables: number[];

        constructor() {
            this.availables = [];
            this.unavailables = [];
            super();
        }

        public getMessageId(): number {
            return DungeonKeyRingMessage.ID;
        }

        public reset(): void {
            this.availables = [];
            this.unavailables = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_DungeonKeyRingMessage(param1);
        }

        public serializeAs_DungeonKeyRingMessage(param1: ICustomDataOutput): void {
            param1.writeShort(this.availables.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.availables.length) {
                if (this.availables[_loc2_] < 0) {
                    throw new Error('Forbidden value (' + this.availables[_loc2_] + ') on element 1 (starting at 1) of availables.');
                }
                param1.writeVarShort(this.availables[_loc2_]);
                _loc2_++;
            }
            param1.writeShort(this.unavailables.length);
            var _loc3_: number = 0;
            while (_loc3_ < this.unavailables.length) {
                if (this.unavailables[_loc3_] < 0) {
                    throw new Error('Forbidden value (' + this.unavailables[_loc3_] + ') on element 2 (starting at 1) of unavailables.');
                }
                param1.writeVarShort(this.unavailables[_loc3_]);
                _loc3_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_DungeonKeyRingMessage(param1);
        }

        public deserializeAs_DungeonKeyRingMessage(param1: ICustomDataInput): void {
            var _loc6_: number = 0;
            var _loc7_: number = 0;
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc6_ = param1.readVarUhShort();
                if (_loc6_ < 0) {
                    throw new Error('Forbidden value (' + _loc6_ + ') on elements of availables.');
                }
                this.availables.push(_loc6_);
                _loc3_++;
            }
            var _loc4_: number = param1.readUnsignedShort();
            var _loc5_: number = 0;
            while (_loc5_ < _loc4_) {
            _loc7_ = param1.readVarUhShort();
                if (_loc7_ < 0) {
                    throw new Error('Forbidden value (' + _loc7_ + ') on elements of unavailables.');
                }
                this.unavailables.push(_loc7_);
                _loc5_++;
            }

        }
    }
    export class DungeonKeyRingUpdateMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6296;

        dungeonId: number;
        available: boolean;

        constructor() {
            this.dungeonId = 0;
            this.available = false;
            super();
        }

        public getMessageId(): number {
            return DungeonKeyRingUpdateMessage.ID;
        }

        public reset(): void {
            this.dungeonId = 0;
            this.available = false;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_DungeonKeyRingUpdateMessage(param1);
        }

        public serializeAs_DungeonKeyRingUpdateMessage(param1: ICustomDataOutput): void {
            if (this.dungeonId < 0) {
                throw new Error('Forbidden value (' + this.dungeonId + ') on element dungeonId.');
            }
            param1.writeVarShort(this.dungeonId);
            param1.writeBoolean(this.available);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_DungeonKeyRingUpdateMessage(param1);
        }

        public deserializeAs_DungeonKeyRingUpdateMessage(param1: ICustomDataInput): void {
            this.dungeonId = param1.readVarUhShort();
            if (this.dungeonId < 0) {
                throw new Error('Forbidden value (' + this.dungeonId + ') on element of DungeonKeyRingUpdateMessage.dungeonId.');
            }
            this.available = param1.readBoolean();

        }
    }
    export class GameFightEndMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 720;

        duration: number;
        ageBonus: number;
        lootShareLimitMalus: number;
        results: FightResultListEntry[];
        namedPartyTeamsOutcomes: NamedPartyTeamWithOutcome[];

        constructor() {
            this.duration = 0;
            this.ageBonus = 0;
            this.lootShareLimitMalus = 0;
            this.results = [];
            this.namedPartyTeamsOutcomes = [];
            super();
        }

        public getMessageId(): number {
            return GameFightEndMessage.ID;
        }

        public reset(): void {
            this.duration = 0;
            this.ageBonus = 0;
            this.lootShareLimitMalus = 0;
            this.results = [];
            this.namedPartyTeamsOutcomes = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameFightEndMessage(param1);
        }

        public serializeAs_GameFightEndMessage(param1: ICustomDataOutput): void {
            if (this.duration < 0) {
                throw new Error('Forbidden value (' + this.duration + ') on element duration.');
            }
            param1.writeInt(this.duration);
            param1.writeShort(this.ageBonus);
            param1.writeShort(this.lootShareLimitMalus);
            param1.writeShort(this.results.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.results.length) {
                param1.writeShort((this.results[_loc2_]).getTypeId());
                (this.results[_loc2_]).serialize(param1);
                _loc2_++;
            }
            param1.writeShort(this.namedPartyTeamsOutcomes.length);
            var _loc3_: number = 0;
            while (_loc3_ < this.namedPartyTeamsOutcomes.length) {
                (this.namedPartyTeamsOutcomes[_loc3_]).serializeAs_NamedPartyTeamWithOutcome(param1);
                _loc3_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameFightEndMessage(param1);
        }

        public deserializeAs_GameFightEndMessage(param1: ICustomDataInput): void {
            var _loc6_: number = 0;
            var _loc7_: FightResultListEntry = null;
            var _loc8_: NamedPartyTeamWithOutcome = null;
            this.duration = param1.readInt();
            if (this.duration < 0) {
                throw new Error('Forbidden value (' + this.duration + ') on element of GameFightEndMessage.duration.');
            }
            this.ageBonus = param1.readShort();
            this.lootShareLimitMalus = param1.readShort();
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc6_ = param1.readUnsignedShort();
                _loc7_ = <FightResultListEntry>ProtocolTypeManager.getInstance(FightResultListEntry, _loc6_);
                _loc7_.deserialize(param1);
                this.results.push(_loc7_);
                _loc3_++;
            }
            var _loc4_: number = param1.readUnsignedShort();
            var _loc5_: number = 0;
            while (_loc5_ < _loc4_) {
            _loc8_ = new NamedPartyTeamWithOutcome();
                _loc8_.deserialize(param1);
                this.namedPartyTeamsOutcomes.push(_loc8_);
                _loc5_++;
            }

        }
    }
    export class GameFightHumanReadyStateMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 740;

        characterId: number;
        isReady: boolean;

        constructor() {
            this.characterId = 0;
            this.isReady = false;
            super();
        }

        public getMessageId(): number {
            return GameFightHumanReadyStateMessage.ID;
        }

        public reset(): void {
            this.characterId = 0;
            this.isReady = false;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameFightHumanReadyStateMessage(param1);
        }

        public serializeAs_GameFightHumanReadyStateMessage(param1: ICustomDataOutput): void {
            if (this.characterId < 0) {
                throw new Error('Forbidden value (' + this.characterId + ') on element characterId.');
            }
            param1.writeVarInt(this.characterId);
            param1.writeBoolean(this.isReady);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameFightHumanReadyStateMessage(param1);
        }

        public deserializeAs_GameFightHumanReadyStateMessage(param1: ICustomDataInput): void {
            this.characterId = param1.readVarUhInt();
            if (this.characterId < 0) {
                throw new Error('Forbidden value (' + this.characterId + ') on element of GameFightHumanReadyStateMessage.characterId.');
            }
            this.isReady = param1.readBoolean();

        }
    }
    export class GameFightJoinMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 702;

        canBeCancelled: boolean;
        canSayReady: boolean;
        isFightStarted: boolean;
        timeMaxBeforeFightStart: number;
        fightType: number;

        constructor() {
            this.canBeCancelled = false;
            this.canSayReady = false;
            this.isFightStarted = false;
            this.timeMaxBeforeFightStart = 0;
            this.fightType = 0;
            super();
        }

        public getMessageId(): number {
            return GameFightJoinMessage.ID;
        }

        public reset(): void {
            this.canBeCancelled = false;
            this.canSayReady = false;
            this.isFightStarted = false;
            this.timeMaxBeforeFightStart = 0;
            this.fightType = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameFightJoinMessage(param1);
        }

        public serializeAs_GameFightJoinMessage(param1: ICustomDataOutput): void {
            var _loc2_: number = 0;
            _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 0, this.canBeCancelled);
            _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 1, this.canSayReady);
            _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 2, this.isFightStarted);
            param1.writeByte(_loc2_);
            if (this.timeMaxBeforeFightStart < 0) {
                throw new Error('Forbidden value (' + this.timeMaxBeforeFightStart + ') on element timeMaxBeforeFightStart.');
            }
            param1.writeShort(this.timeMaxBeforeFightStart);
            param1.writeByte(this.fightType);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameFightJoinMessage(param1);
        }

        public deserializeAs_GameFightJoinMessage(param1: ICustomDataInput): void {
            var _loc2_: number = param1.readByte();
            this.canBeCancelled = BooleanByteWrapper.getFlag(_loc2_, 0);
            this.canSayReady = BooleanByteWrapper.getFlag(_loc2_, 1);
            this.isFightStarted = BooleanByteWrapper.getFlag(_loc2_, 2);
            this.timeMaxBeforeFightStart = param1.readShort();
            if (this.timeMaxBeforeFightStart < 0) {
                throw new Error('Forbidden value (' + this.timeMaxBeforeFightStart + ') on element of GameFightJoinMessage.timeMaxBeforeFightStart.');
            }
            this.fightType = param1.readByte();
            if (this.fightType < 0) {
                throw new Error('Forbidden value (' + this.fightType + ') on element of GameFightJoinMessage.fightType.');
            }

        }
    }
    export class GameFightJoinRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 701;

        fighterId: number;
        fightId: number;

        constructor() {
            this.fighterId = 0;
            this.fightId = 0;
            super();
        }

        public getMessageId(): number {
            return GameFightJoinRequestMessage.ID;
        }

        public reset(): void {
            this.fighterId = 0;
            this.fightId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameFightJoinRequestMessage(param1);
        }

        public serializeAs_GameFightJoinRequestMessage(param1: ICustomDataOutput): void {
            param1.writeInt(this.fighterId);
            param1.writeInt(this.fightId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameFightJoinRequestMessage(param1);
        }

        public deserializeAs_GameFightJoinRequestMessage(param1: ICustomDataInput): void {
            this.fighterId = param1.readInt();
            this.fightId = param1.readInt();

        }
    }
    export class GameFightLeaveMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 721;

        charId: number;

        constructor() {
            this.charId = 0;
            super();
        }

        public getMessageId(): number {
            return GameFightLeaveMessage.ID;
        }

        public reset(): void {
            this.charId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameFightLeaveMessage(param1);
        }

        public serializeAs_GameFightLeaveMessage(param1: ICustomDataOutput): void {
            param1.writeInt(this.charId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameFightLeaveMessage(param1);
        }

        public deserializeAs_GameFightLeaveMessage(param1: ICustomDataInput): void {
            this.charId = param1.readInt();

        }
    }
    export class GameFightNewRoundMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6239;

        roundNumber: number;

        constructor() {
            this.roundNumber = 0;
            super();
        }

        public getMessageId(): number {
            return GameFightNewRoundMessage.ID;
        }

        public reset(): void {
            this.roundNumber = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameFightNewRoundMessage(param1);
        }

        public serializeAs_GameFightNewRoundMessage(param1: ICustomDataOutput): void {
            if (this.roundNumber < 0) {
                throw new Error('Forbidden value (' + this.roundNumber + ') on element roundNumber.');
            }
            param1.writeVarInt(this.roundNumber);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameFightNewRoundMessage(param1);
        }

        public deserializeAs_GameFightNewRoundMessage(param1: ICustomDataInput): void {
            this.roundNumber = param1.readVarUhInt();
            if (this.roundNumber < 0) {
                throw new Error('Forbidden value (' + this.roundNumber + ') on element of GameFightNewRoundMessage.roundNumber.');
            }

        }
    }
    export class GameFightNewWaveMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6490;

        id: number;
        teamId: number;
        nbTurnBeforeNextWave: number;

        constructor() {
            this.id = 0;
            this.teamId = 2;
            this.nbTurnBeforeNextWave = 0;
            super();
        }

        public getMessageId(): number {
            return GameFightNewWaveMessage.ID;
        }

        public reset(): void {
            this.id = 0;
            this.teamId = 2;
            this.nbTurnBeforeNextWave = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameFightNewWaveMessage(param1);
        }

        public serializeAs_GameFightNewWaveMessage(param1: ICustomDataOutput): void {
            if (this.id < 0) {
                throw new Error('Forbidden value (' + this.id + ') on element id.');
            }
            param1.writeByte(this.id);
            param1.writeByte(this.teamId);
            param1.writeShort(this.nbTurnBeforeNextWave);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameFightNewWaveMessage(param1);
        }

        public deserializeAs_GameFightNewWaveMessage(param1: ICustomDataInput): void {
            this.id = param1.readByte();
            if (this.id < 0) {
                throw new Error('Forbidden value (' + this.id + ') on element of GameFightNewWaveMessage.id.');
            }
            this.teamId = param1.readByte();
            if (this.teamId < 0) {
                throw new Error('Forbidden value (' + this.teamId + ') on element of GameFightNewWaveMessage.teamId.');
            }
            this.nbTurnBeforeNextWave = param1.readShort();

        }
    }
    export class GameFightOptionStateUpdateMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5927;

        fightId: number;
        teamId: number;
        option: number;
        state: boolean;

        constructor() {
            this.fightId = 0;
            this.teamId = 2;
            this.option = 3;
            this.state = false;
            super();
        }

        public getMessageId(): number {
            return GameFightOptionStateUpdateMessage.ID;
        }

        public reset(): void {
            this.fightId = 0;
            this.teamId = 2;
            this.option = 3;
            this.state = false;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameFightOptionStateUpdateMessage(param1);
        }

        public serializeAs_GameFightOptionStateUpdateMessage(param1: ICustomDataOutput): void {
            if (this.fightId < 0) {
                throw new Error('Forbidden value (' + this.fightId + ') on element fightId.');
            }
            param1.writeShort(this.fightId);
            param1.writeByte(this.teamId);
            param1.writeByte(this.option);
            param1.writeBoolean(this.state);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameFightOptionStateUpdateMessage(param1);
        }

        public deserializeAs_GameFightOptionStateUpdateMessage(param1: ICustomDataInput): void {
            this.fightId = param1.readShort();
            if (this.fightId < 0) {
                throw new Error('Forbidden value (' + this.fightId + ') on element of GameFightOptionStateUpdateMessage.fightId.');
            }
            this.teamId = param1.readByte();
            if (this.teamId < 0) {
                throw new Error('Forbidden value (' + this.teamId + ') on element of GameFightOptionStateUpdateMessage.teamId.');
            }
            this.option = param1.readByte();
            if (this.option < 0) {
                throw new Error('Forbidden value (' + this.option + ') on element of GameFightOptionStateUpdateMessage.option.');
            }
            this.state = param1.readBoolean();

        }
    }
    export class GameFightOptionToggleMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 707;

        option: number;

        constructor() {
            this.option = 3;
            super();
        }

        public getMessageId(): number {
            return GameFightOptionToggleMessage.ID;
        }

        public reset(): void {
            this.option = 3;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameFightOptionToggleMessage(param1);
        }

        public serializeAs_GameFightOptionToggleMessage(param1: ICustomDataOutput): void {
            param1.writeByte(this.option);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameFightOptionToggleMessage(param1);
        }

        public deserializeAs_GameFightOptionToggleMessage(param1: ICustomDataInput): void {
            this.option = param1.readByte();
            if (this.option < 0) {
                throw new Error('Forbidden value (' + this.option + ') on element of GameFightOptionToggleMessage.option.');
            }

        }
    }
    export class GameFightPlacementPositionRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 704;

        cellId: number;

        constructor() {
            this.cellId = 0;
            super();
        }

        public getMessageId(): number {
            return GameFightPlacementPositionRequestMessage.ID;
        }

        public reset(): void {
            this.cellId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameFightPlacementPositionRequestMessage(param1);
        }

        public serializeAs_GameFightPlacementPositionRequestMessage(param1: ICustomDataOutput): void {
            if (this.cellId < 0 || this.cellId > 559) {
                throw new Error('Forbidden value (' + this.cellId + ') on element cellId.');
            }
            param1.writeVarShort(this.cellId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameFightPlacementPositionRequestMessage(param1);
        }

        public deserializeAs_GameFightPlacementPositionRequestMessage(param1: ICustomDataInput): void {
            this.cellId = param1.readVarUhShort();
            if (this.cellId < 0 || this.cellId > 559) {
                throw new Error('Forbidden value (' + this.cellId + ') on element of GameFightPlacementPositionRequestMessage.cellId.');
            }

        }
    }
    export class GameFightPlacementPossiblePositionsMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 703;

        positionsForChallengers: number[];
        positionsForDefenders: number[];
        teamNumber: number;

        constructor() {
            this.positionsForChallengers = [];
            this.positionsForDefenders = [];
            this.teamNumber = 2;
            super();
        }

        public getMessageId(): number {
            return GameFightPlacementPossiblePositionsMessage.ID;
        }

        public reset(): void {
            this.positionsForChallengers = [];
            this.positionsForDefenders = [];
            this.teamNumber = 2;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameFightPlacementPossiblePositionsMessage(param1);
        }

        public serializeAs_GameFightPlacementPossiblePositionsMessage(param1: ICustomDataOutput): void {
            param1.writeShort(this.positionsForChallengers.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.positionsForChallengers.length) {
                if (this.positionsForChallengers[_loc2_] < 0 || this.positionsForChallengers[_loc2_] > 559) {
                    throw new Error('Forbidden value (' + this.positionsForChallengers[_loc2_] + ') on element 1 (starting at 1) of positionsForChallengers.');
                }
                param1.writeVarShort(this.positionsForChallengers[_loc2_]);
                _loc2_++;
            }
            param1.writeShort(this.positionsForDefenders.length);
            var _loc3_: number = 0;
            while (_loc3_ < this.positionsForDefenders.length) {
                if (this.positionsForDefenders[_loc3_] < 0 || this.positionsForDefenders[_loc3_] > 559) {
                    throw new Error('Forbidden value (' + this.positionsForDefenders[_loc3_] + ') on element 2 (starting at 1) of positionsForDefenders.');
                }
                param1.writeVarShort(this.positionsForDefenders[_loc3_]);
                _loc3_++;
            }
            param1.writeByte(this.teamNumber);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameFightPlacementPossiblePositionsMessage(param1);
        }

        public deserializeAs_GameFightPlacementPossiblePositionsMessage(param1: ICustomDataInput): void {
            var _loc6_: number = 0;
            var _loc7_: number = 0;
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc6_ = param1.readVarUhShort();
                if (_loc6_ < 0 || _loc6_ > 559) {
                    throw new Error('Forbidden value (' + _loc6_ + ') on elements of positionsForChallengers.');
                }
                this.positionsForChallengers.push(_loc6_);
                _loc3_++;
            }
            var _loc4_: number = param1.readUnsignedShort();
            var _loc5_: number = 0;
            while (_loc5_ < _loc4_) {
            _loc7_ = param1.readVarUhShort();
                if (_loc7_ < 0 || _loc7_ > 559) {
                    throw new Error('Forbidden value (' + _loc7_ + ') on elements of positionsForDefenders.');
                }
                this.positionsForDefenders.push(_loc7_);
                _loc5_++;
            }
            this.teamNumber = param1.readByte();
            if (this.teamNumber < 0) {
                throw new Error('Forbidden value (' + this.teamNumber + ') on element of GameFightPlacementPossiblePositionsMessage.teamNumber.');
            }

        }
    }
    export class GameFightPlacementSwapPositionsAcceptMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6547;

        requestId: number;

        constructor() {
            this.requestId = 0;
            super();
        }

        public getMessageId(): number {
            return GameFightPlacementSwapPositionsAcceptMessage.ID;
        }

        public reset(): void {
            this.requestId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameFightPlacementSwapPositionsAcceptMessage(param1);
        }

        public serializeAs_GameFightPlacementSwapPositionsAcceptMessage(param1: ICustomDataOutput): void {
            if (this.requestId < 0) {
                throw new Error('Forbidden value (' + this.requestId + ') on element requestId.');
            }
            param1.writeInt(this.requestId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameFightPlacementSwapPositionsAcceptMessage(param1);
        }

        public deserializeAs_GameFightPlacementSwapPositionsAcceptMessage(param1: ICustomDataInput): void {
            this.requestId = param1.readInt();
            if (this.requestId < 0) {
                throw new Error('Forbidden value (' + this.requestId + ') on element of GameFightPlacementSwapPositionsAcceptMessage.requestId.');
            }

        }
    }
    export class GameFightPlacementSwapPositionsCancelMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6543;

        requestId: number;

        constructor() {
            this.requestId = 0;
            super();
        }

        public getMessageId(): number {
            return GameFightPlacementSwapPositionsCancelMessage.ID;
        }

        public reset(): void {
            this.requestId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameFightPlacementSwapPositionsCancelMessage(param1);
        }

        public serializeAs_GameFightPlacementSwapPositionsCancelMessage(param1: ICustomDataOutput): void {
            if (this.requestId < 0) {
                throw new Error('Forbidden value (' + this.requestId + ') on element requestId.');
            }
            param1.writeInt(this.requestId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameFightPlacementSwapPositionsCancelMessage(param1);
        }

        public deserializeAs_GameFightPlacementSwapPositionsCancelMessage(param1: ICustomDataInput): void {
            this.requestId = param1.readInt();
            if (this.requestId < 0) {
                throw new Error('Forbidden value (' + this.requestId + ') on element of GameFightPlacementSwapPositionsCancelMessage.requestId.');
            }

        }
    }
    export class GameFightPlacementSwapPositionsCancelledMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6546;

        requestId: number;
        cancellerId: number;

        constructor() {
            this.requestId = 0;
            this.cancellerId = 0;
            super();
        }

        public getMessageId(): number {
            return GameFightPlacementSwapPositionsCancelledMessage.ID;
        }

        public reset(): void {
            this.requestId = 0;
            this.cancellerId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameFightPlacementSwapPositionsCancelledMessage(param1);
        }

        public serializeAs_GameFightPlacementSwapPositionsCancelledMessage(param1: ICustomDataOutput): void {
            if (this.requestId < 0) {
                throw new Error('Forbidden value (' + this.requestId + ') on element requestId.');
            }
            param1.writeInt(this.requestId);
            if (this.cancellerId < 0) {
                throw new Error('Forbidden value (' + this.cancellerId + ') on element cancellerId.');
            }
            param1.writeVarInt(this.cancellerId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameFightPlacementSwapPositionsCancelledMessage(param1);
        }

        public deserializeAs_GameFightPlacementSwapPositionsCancelledMessage(param1: ICustomDataInput): void {
            this.requestId = param1.readInt();
            if (this.requestId < 0) {
                throw new Error('Forbidden value (' + this.requestId + ') on element of GameFightPlacementSwapPositionsCancelledMessage.requestId.');
            }
            this.cancellerId = param1.readVarUhInt();
            if (this.cancellerId < 0) {
                throw new Error('Forbidden value (' + this.cancellerId + ') on element of GameFightPlacementSwapPositionsCancelledMessage.cancellerId.');
            }

        }
    }
    export class GameFightPlacementSwapPositionsErrorMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6548;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return GameFightPlacementSwapPositionsErrorMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameFightPlacementSwapPositionsErrorMessage(param1);
        }

        public serializeAs_GameFightPlacementSwapPositionsErrorMessage(param1: ICustomDataOutput): void {

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameFightPlacementSwapPositionsErrorMessage(param1);
        }

        public deserializeAs_GameFightPlacementSwapPositionsErrorMessage(param1: ICustomDataInput): void {

        }
    }
    export class GameFightPlacementSwapPositionsMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6544;

        dispositions: IdentifiedEntityDispositionInformations[];

        constructor() {
            this.dispositions = [];
            super();
        }

        public getMessageId(): number {
            return GameFightPlacementSwapPositionsMessage.ID;
        }

        public reset(): void {
            this.dispositions = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameFightPlacementSwapPositionsMessage(param1);
        }

        public serializeAs_GameFightPlacementSwapPositionsMessage(param1: ICustomDataOutput): void {
            var _loc2_: number = 0;
            while (_loc2_ < 2) {
            this.dispositions[_loc2_].serializeAs_IdentifiedEntityDispositionInformations(param1);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameFightPlacementSwapPositionsMessage(param1);
        }

        public deserializeAs_GameFightPlacementSwapPositionsMessage(param1: ICustomDataInput): void {
            var _loc2_: number = 0;
            while (_loc2_ < 2) {
            this.dispositions[_loc2_] = new IdentifiedEntityDispositionInformations();
                this.dispositions[_loc2_].deserialize(param1);
                _loc2_++;
            }

        }
    }
    export class GameFightPlacementSwapPositionsOfferMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6542;

        requestId: number;
        requesterId: number;
        requesterCellId: number;
        requestedId: number;
        requestedCellId: number;

        constructor() {
            this.requestId = 0;
            this.requesterId = 0;
            this.requesterCellId = 0;
            this.requestedId = 0;
            this.requestedCellId = 0;
            super();
        }

        public getMessageId(): number {
            return GameFightPlacementSwapPositionsOfferMessage.ID;
        }

        public reset(): void {
            this.requestId = 0;
            this.requesterId = 0;
            this.requesterCellId = 0;
            this.requestedId = 0;
            this.requestedCellId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameFightPlacementSwapPositionsOfferMessage(param1);
        }

        public serializeAs_GameFightPlacementSwapPositionsOfferMessage(param1: ICustomDataOutput): void {
            if (this.requestId < 0) {
                throw new Error('Forbidden value (' + this.requestId + ') on element requestId.');
            }
            param1.writeInt(this.requestId);
            if (this.requesterId < 0) {
                throw new Error('Forbidden value (' + this.requesterId + ') on element requesterId.');
            }
            param1.writeVarInt(this.requesterId);
            if (this.requesterCellId < 0 || this.requesterCellId > 559) {
                throw new Error('Forbidden value (' + this.requesterCellId + ') on element requesterCellId.');
            }
            param1.writeVarShort(this.requesterCellId);
            if (this.requestedId < 0) {
                throw new Error('Forbidden value (' + this.requestedId + ') on element requestedId.');
            }
            param1.writeVarInt(this.requestedId);
            if (this.requestedCellId < 0 || this.requestedCellId > 559) {
                throw new Error('Forbidden value (' + this.requestedCellId + ') on element requestedCellId.');
            }
            param1.writeVarShort(this.requestedCellId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameFightPlacementSwapPositionsOfferMessage(param1);
        }

        public deserializeAs_GameFightPlacementSwapPositionsOfferMessage(param1: ICustomDataInput): void {
            this.requestId = param1.readInt();
            if (this.requestId < 0) {
                throw new Error('Forbidden value (' + this.requestId + ') on element of GameFightPlacementSwapPositionsOfferMessage.requestId.');
            }
            this.requesterId = param1.readVarUhInt();
            if (this.requesterId < 0) {
                throw new Error('Forbidden value (' + this.requesterId + ') on element of GameFightPlacementSwapPositionsOfferMessage.requesterId.');
            }
            this.requesterCellId = param1.readVarUhShort();
            if (this.requesterCellId < 0 || this.requesterCellId > 559) {
                throw new Error('Forbidden value (' + this.requesterCellId + ') on element of GameFightPlacementSwapPositionsOfferMessage.requesterCellId.');
            }
            this.requestedId = param1.readVarUhInt();
            if (this.requestedId < 0) {
                throw new Error('Forbidden value (' + this.requestedId + ') on element of GameFightPlacementSwapPositionsOfferMessage.requestedId.');
            }
            this.requestedCellId = param1.readVarUhShort();
            if (this.requestedCellId < 0 || this.requestedCellId > 559) {
                throw new Error('Forbidden value (' + this.requestedCellId + ') on element of GameFightPlacementSwapPositionsOfferMessage.requestedCellId.');
            }

        }
    }
    export class GameFightPlacementSwapPositionsRequestMessage extends GameFightPlacementPositionRequestMessage {
        public static ID: number = 6541;

        requestedId: number;

        constructor() {
            this.requestedId = 0;
            super();
        }

        public getMessageId(): number {
            return GameFightPlacementSwapPositionsRequestMessage.ID;
        }

        public reset(): void {
            this.requestedId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameFightPlacementSwapPositionsRequestMessage(param1);
        }

        public serializeAs_GameFightPlacementSwapPositionsRequestMessage(param1: ICustomDataOutput): void {
            super.serializeAs_GameFightPlacementPositionRequestMessage(param1);
            param1.writeInt(this.requestedId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameFightPlacementSwapPositionsRequestMessage(param1);
        }

        public deserializeAs_GameFightPlacementSwapPositionsRequestMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.requestedId = param1.readInt();

        }
    }
    export class GameFightReadyMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 708;

        isReady: boolean;

        constructor() {
            this.isReady = false;
            super();
        }

        public getMessageId(): number {
            return GameFightReadyMessage.ID;
        }

        public reset(): void {
            this.isReady = false;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameFightReadyMessage(param1);
        }

        public serializeAs_GameFightReadyMessage(param1: ICustomDataOutput): void {
            param1.writeBoolean(this.isReady);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameFightReadyMessage(param1);
        }

        public deserializeAs_GameFightReadyMessage(param1: ICustomDataInput): void {
            this.isReady = param1.readBoolean();

        }
    }
    export class GameFightRemoveTeamMemberMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 711;

        fightId: number;
        teamId: number;
        charId: number;

        constructor() {
            this.fightId = 0;
            this.teamId = 2;
            this.charId = 0;
            super();
        }

        public getMessageId(): number {
            return GameFightRemoveTeamMemberMessage.ID;
        }

        public reset(): void {
            this.fightId = 0;
            this.teamId = 2;
            this.charId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameFightRemoveTeamMemberMessage(param1);
        }

        public serializeAs_GameFightRemoveTeamMemberMessage(param1: ICustomDataOutput): void {
            if (this.fightId < 0) {
                throw new Error('Forbidden value (' + this.fightId + ') on element fightId.');
            }
            param1.writeShort(this.fightId);
            param1.writeByte(this.teamId);
            param1.writeInt(this.charId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameFightRemoveTeamMemberMessage(param1);
        }

        public deserializeAs_GameFightRemoveTeamMemberMessage(param1: ICustomDataInput): void {
            this.fightId = param1.readShort();
            if (this.fightId < 0) {
                throw new Error('Forbidden value (' + this.fightId + ') on element of GameFightRemoveTeamMemberMessage.fightId.');
            }
            this.teamId = param1.readByte();
            if (this.teamId < 0) {
                throw new Error('Forbidden value (' + this.teamId + ') on element of GameFightRemoveTeamMemberMessage.teamId.');
            }
            this.charId = param1.readInt();

        }
    }
    export class GameFightSpectateMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6069;

        effects: FightDispellableEffectExtendedInformations[];
        marks: GameActionMark[];
        gameTurn: number;
        fightStart: number;
        idols: Idol[];

        constructor() {
            this.effects = [];
            this.marks = [];
            this.gameTurn = 0;
            this.fightStart = 0;
            this.idols = [];
            super();
        }

        public getMessageId(): number {
            return GameFightSpectateMessage.ID;
        }

        public reset(): void {
            this.effects = [];
            this.marks = [];
            this.gameTurn = 0;
            this.fightStart = 0;
            this.idols = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameFightSpectateMessage(param1);
        }

        public serializeAs_GameFightSpectateMessage(param1: ICustomDataOutput): void {
            param1.writeShort(this.effects.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.effects.length) {
                (this.effects[_loc2_]).serializeAs_FightDispellableEffectExtendedInformations(param1);
                _loc2_++;
            }
            param1.writeShort(this.marks.length);
            var _loc3_: number = 0;
            while (_loc3_ < this.marks.length) {
                (this.marks[_loc3_]).serializeAs_GameActionMark(param1);
                _loc3_++;
            }
            if (this.gameTurn < 0) {
                throw new Error('Forbidden value (' + this.gameTurn + ') on element gameTurn.');
            }
            param1.writeVarShort(this.gameTurn);
            if (this.fightStart < 0) {
                throw new Error('Forbidden value (' + this.fightStart + ') on element fightStart.');
            }
            param1.writeInt(this.fightStart);
            param1.writeShort(this.idols.length);
            var _loc4_: number = 0;
            while (_loc4_ < this.idols.length) {
                (this.idols[_loc4_]).serializeAs_Idol(param1);
                _loc4_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameFightSpectateMessage(param1);
        }

        public deserializeAs_GameFightSpectateMessage(param1: ICustomDataInput): void {
            var _loc8_: FightDispellableEffectExtendedInformations = null;
            var _loc9_: GameActionMark = null;
            var _loc10_: Idol = null;
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc8_ = new FightDispellableEffectExtendedInformations();
                _loc8_.deserialize(param1);
                this.effects.push(_loc8_);
                _loc3_++;
            }
            var _loc4_: number = param1.readUnsignedShort();
            var _loc5_: number = 0;
            while (_loc5_ < _loc4_) {
            _loc9_ = new GameActionMark();
                _loc9_.deserialize(param1);
                this.marks.push(_loc9_);
                _loc5_++;
            }
            this.gameTurn = param1.readVarUhShort();
            if (this.gameTurn < 0) {
                throw new Error('Forbidden value (' + this.gameTurn + ') on element of GameFightSpectateMessage.gameTurn.');
            }
            this.fightStart = param1.readInt();
            if (this.fightStart < 0) {
                throw new Error('Forbidden value (' + this.fightStart + ') on element of GameFightSpectateMessage.fightStart.');
            }
            var _loc6_: number = param1.readUnsignedShort();
            var _loc7_: number = 0;
            while (_loc7_ < _loc6_) {
            _loc10_ = new Idol();
                _loc10_.deserialize(param1);
                this.idols.push(_loc10_);
                _loc7_++;
            }

        }
    }
    export class GameFightResumeMessage extends GameFightSpectateMessage {
        public static ID: number = 6067;

        spellCooldowns: GameFightSpellCooldown[];
        summonCount: number;
        bombCount: number;

        constructor() {
            this.spellCooldowns = [];
            this.summonCount = 0;
            this.bombCount = 0;
            super();
        }

        public getMessageId(): number {
            return GameFightResumeMessage.ID;
        }

        public reset(): void {
            this.spellCooldowns = [];
            this.summonCount = 0;
            this.bombCount = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameFightResumeMessage(param1);
        }

        public serializeAs_GameFightResumeMessage(param1: ICustomDataOutput): void {
            super.serializeAs_GameFightSpectateMessage(param1);
            param1.writeShort(this.spellCooldowns.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.spellCooldowns.length) {
                (this.spellCooldowns[_loc2_]).serializeAs_GameFightSpellCooldown(param1);
                _loc2_++;
            }
            if (this.summonCount < 0) {
                throw new Error('Forbidden value (' + this.summonCount + ') on element summonCount.');
            }
            param1.writeByte(this.summonCount);
            if (this.bombCount < 0) {
                throw new Error('Forbidden value (' + this.bombCount + ') on element bombCount.');
            }
            param1.writeByte(this.bombCount);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameFightResumeMessage(param1);
        }

        public deserializeAs_GameFightResumeMessage(param1: ICustomDataInput): void {
            var _loc4_: GameFightSpellCooldown = null;
            super.deserialize(param1);
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = new GameFightSpellCooldown();
                _loc4_.deserialize(param1);
                this.spellCooldowns.push(_loc4_);
                _loc3_++;
            }
            this.summonCount = param1.readByte();
            if (this.summonCount < 0) {
                throw new Error('Forbidden value (' + this.summonCount + ') on element of GameFightResumeMessage.summonCount.');
            }
            this.bombCount = param1.readByte();
            if (this.bombCount < 0) {
                throw new Error('Forbidden value (' + this.bombCount + ') on element of GameFightResumeMessage.bombCount.');
            }

        }
    }
    export class GameFightResumeWithSlavesMessage extends GameFightResumeMessage {
        public static ID: number = 6215;

        slavesInfo: GameFightResumeSlaveInfo[];

        constructor() {
            this.slavesInfo = [];
            super();
        }

        public getMessageId(): number {
            return GameFightResumeWithSlavesMessage.ID;
        }

        public reset(): void {
            this.slavesInfo = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameFightResumeWithSlavesMessage(param1);
        }

        public serializeAs_GameFightResumeWithSlavesMessage(param1: ICustomDataOutput): void {
            super.serializeAs_GameFightResumeMessage(param1);
            param1.writeShort(this.slavesInfo.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.slavesInfo.length) {
                (this.slavesInfo[_loc2_]).serializeAs_GameFightResumeSlaveInfo(param1);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameFightResumeWithSlavesMessage(param1);
        }

        public deserializeAs_GameFightResumeWithSlavesMessage(param1: ICustomDataInput): void {
            var _loc4_: GameFightResumeSlaveInfo = null;
            super.deserialize(param1);
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = new GameFightResumeSlaveInfo();
                _loc4_.deserialize(param1);
                this.slavesInfo.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class GameFightSpectatePlayerRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6474;

        playerId: number;

        constructor() {
            this.playerId = 0;
            super();
        }

        public getMessageId(): number {
            return GameFightSpectatePlayerRequestMessage.ID;
        }

        public reset(): void {
            this.playerId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameFightSpectatePlayerRequestMessage(param1);
        }

        public serializeAs_GameFightSpectatePlayerRequestMessage(param1: ICustomDataOutput): void {
            param1.writeInt(this.playerId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameFightSpectatePlayerRequestMessage(param1);
        }

        public deserializeAs_GameFightSpectatePlayerRequestMessage(param1: ICustomDataInput): void {
            this.playerId = param1.readInt();

        }
    }
    export class GameFightSpectatorJoinMessage extends GameFightJoinMessage {
        public static ID: number = 6504;

        namedPartyTeams: NamedPartyTeam[];

        constructor() {
            this.namedPartyTeams = [];
            super();
        }

        public getMessageId(): number {
            return GameFightSpectatorJoinMessage.ID;
        }

        public reset(): void {
            this.namedPartyTeams = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameFightSpectatorJoinMessage(param1);
        }

        public serializeAs_GameFightSpectatorJoinMessage(param1: ICustomDataOutput): void {
            super.serializeAs_GameFightJoinMessage(param1);
            param1.writeShort(this.namedPartyTeams.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.namedPartyTeams.length) {
                (this.namedPartyTeams[_loc2_]).serializeAs_NamedPartyTeam(param1);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameFightSpectatorJoinMessage(param1);
        }

        public deserializeAs_GameFightSpectatorJoinMessage(param1: ICustomDataInput): void {
            var _loc4_: NamedPartyTeam = null;
            super.deserialize(param1);
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = new NamedPartyTeam();
                _loc4_.deserialize(param1);
                this.namedPartyTeams.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class GameFightStartMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 712;

        idols: Idol[];

        constructor() {
            this.idols = [];
            super();
        }

        public getMessageId(): number {
            return GameFightStartMessage.ID;
        }

        public reset(): void {
            this.idols = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameFightStartMessage(param1);
        }

        public serializeAs_GameFightStartMessage(param1: ICustomDataOutput): void {
            param1.writeShort(this.idols.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.idols.length) {
                (this.idols[_loc2_]).serializeAs_Idol(param1);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameFightStartMessage(param1);
        }

        public deserializeAs_GameFightStartMessage(param1: ICustomDataInput): void {
            var _loc4_: Idol = null;
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = new Idol();
                _loc4_.deserialize(param1);
                this.idols.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class GameFightStartingMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 700;

        fightType: number;
        attackerId: number;
        defenderId: number;

        constructor() {
            this.fightType = 0;
            this.attackerId = 0;
            this.defenderId = 0;
            super();
        }

        public getMessageId(): number {
            return GameFightStartingMessage.ID;
        }

        public reset(): void {
            this.fightType = 0;
            this.attackerId = 0;
            this.defenderId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameFightStartingMessage(param1);
        }

        public serializeAs_GameFightStartingMessage(param1: ICustomDataOutput): void {
            param1.writeByte(this.fightType);
            param1.writeInt(this.attackerId);
            param1.writeInt(this.defenderId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameFightStartingMessage(param1);
        }

        public deserializeAs_GameFightStartingMessage(param1: ICustomDataInput): void {
            this.fightType = param1.readByte();
            if (this.fightType < 0) {
                throw new Error('Forbidden value (' + this.fightType + ') on element of GameFightStartingMessage.fightType.');
            }
            this.attackerId = param1.readInt();
            this.defenderId = param1.readInt();

        }
    }
    export class GameFightSynchronizeMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5921;

        fighters: GameFightFighterInformations[];

        constructor() {
            this.fighters = [];
            super();
        }

        public getMessageId(): number {
            return GameFightSynchronizeMessage.ID;
        }

        public reset(): void {
            this.fighters = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameFightSynchronizeMessage(param1);
        }

        public serializeAs_GameFightSynchronizeMessage(param1: ICustomDataOutput): void {
            param1.writeShort(this.fighters.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.fighters.length) {
                param1.writeShort((this.fighters[_loc2_]).getTypeId());
                (this.fighters[_loc2_]).serialize(param1);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameFightSynchronizeMessage(param1);
        }

        public deserializeAs_GameFightSynchronizeMessage(param1: ICustomDataInput): void {
            var _loc4_: number = 0;
            var _loc5_: GameFightFighterInformations = null;
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = param1.readUnsignedShort();
                _loc5_ = <GameFightFighterInformations>ProtocolTypeManager.getInstance(GameFightFighterInformations, _loc4_);
                _loc5_.deserialize(param1);
                this.fighters.push(_loc5_);
                _loc3_++;
            }

        }
    }
    export class GameFightTurnEndMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 719;

        id: number;

        constructor() {
            this.id = 0;
            super();
        }

        public getMessageId(): number {
            return GameFightTurnEndMessage.ID;
        }

        public reset(): void {
            this.id = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameFightTurnEndMessage(param1);
        }

        public serializeAs_GameFightTurnEndMessage(param1: ICustomDataOutput): void {
            param1.writeInt(this.id);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameFightTurnEndMessage(param1);
        }

        public deserializeAs_GameFightTurnEndMessage(param1: ICustomDataInput): void {
            this.id = param1.readInt();

        }
    }
    export class GameFightTurnFinishMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 718;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return GameFightTurnFinishMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameFightTurnFinishMessage(param1);
        }

        public serializeAs_GameFightTurnFinishMessage(param1: ICustomDataOutput): void {

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameFightTurnFinishMessage(param1);
        }

        public deserializeAs_GameFightTurnFinishMessage(param1: ICustomDataInput): void {

        }
    }
    export class GameFightTurnListMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 713;

        ids: number[];
        deadsIds: number[];

        constructor() {
            this.ids = [];
            this.deadsIds = [];
            super();
        }

        public getMessageId(): number {
            return GameFightTurnListMessage.ID;
        }

        public reset(): void {
            this.ids = [];
            this.deadsIds = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameFightTurnListMessage(param1);
        }

        public serializeAs_GameFightTurnListMessage(param1: ICustomDataOutput): void {
            param1.writeShort(this.ids.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.ids.length) {
                param1.writeInt(this.ids[_loc2_]);
                _loc2_++;
            }
            param1.writeShort(this.deadsIds.length);
            var _loc3_: number = 0;
            while (_loc3_ < this.deadsIds.length) {
                param1.writeInt(this.deadsIds[_loc3_]);
                _loc3_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameFightTurnListMessage(param1);
        }

        public deserializeAs_GameFightTurnListMessage(param1: ICustomDataInput): void {
            var _loc6_: any = 0;
            var _loc7_: any = 0;
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc6_ = param1.readInt();
                this.ids.push(_loc6_);
                _loc3_++;
            }
            var _loc4_: number = param1.readUnsignedShort();
            var _loc5_: number = 0;
            while (_loc5_ < _loc4_) {
            _loc7_ = param1.readInt();
                this.deadsIds.push(_loc7_);
                _loc5_++;
            }

        }
    }
    export class GameFightTurnReadyMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 716;

        isReady: boolean;

        constructor() {
            this.isReady = false;
            super();
        }

        public getMessageId(): number {
            return GameFightTurnReadyMessage.ID;
        }

        public reset(): void {
            this.isReady = false;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameFightTurnReadyMessage(param1);
        }

        public serializeAs_GameFightTurnReadyMessage(param1: ICustomDataOutput): void {
            param1.writeBoolean(this.isReady);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameFightTurnReadyMessage(param1);
        }

        public deserializeAs_GameFightTurnReadyMessage(param1: ICustomDataInput): void {
            this.isReady = param1.readBoolean();

        }
    }
    export class GameFightTurnReadyRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 715;

        id: number;

        constructor() {
            this.id = 0;
            super();
        }

        public getMessageId(): number {
            return GameFightTurnReadyRequestMessage.ID;
        }

        public reset(): void {
            this.id = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameFightTurnReadyRequestMessage(param1);
        }

        public serializeAs_GameFightTurnReadyRequestMessage(param1: ICustomDataOutput): void {
            param1.writeInt(this.id);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameFightTurnReadyRequestMessage(param1);
        }

        public deserializeAs_GameFightTurnReadyRequestMessage(param1: ICustomDataInput): void {
            this.id = param1.readInt();

        }
    }
    export class GameFightTurnStartMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 714;

        id: number;
        waitTime: number;

        constructor() {
            this.id = 0;
            this.waitTime = 0;
            super();
        }

        public getMessageId(): number {
            return GameFightTurnStartMessage.ID;
        }

        public reset(): void {
            this.id = 0;
            this.waitTime = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameFightTurnStartMessage(param1);
        }

        public serializeAs_GameFightTurnStartMessage(param1: ICustomDataOutput): void {
            param1.writeInt(this.id);
            if (this.waitTime < 0) {
                throw new Error('Forbidden value (' + this.waitTime + ') on element waitTime.');
            }
            param1.writeVarInt(this.waitTime);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameFightTurnStartMessage(param1);
        }

        public deserializeAs_GameFightTurnStartMessage(param1: ICustomDataInput): void {
            this.id = param1.readInt();
            this.waitTime = param1.readVarUhInt();
            if (this.waitTime < 0) {
                throw new Error('Forbidden value (' + this.waitTime + ') on element of GameFightTurnStartMessage.waitTime.');
            }

        }
    }
    export class GameFightTurnResumeMessage extends GameFightTurnStartMessage {
        public static ID: number = 6307;

        remainingTime: number;

        constructor() {
            this.remainingTime = 0;
            super();
        }

        public getMessageId(): number {
            return GameFightTurnResumeMessage.ID;
        }

        public reset(): void {
            this.remainingTime = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameFightTurnResumeMessage(param1);
        }

        public serializeAs_GameFightTurnResumeMessage(param1: ICustomDataOutput): void {
            super.serializeAs_GameFightTurnStartMessage(param1);
            if (this.remainingTime < 0) {
                throw new Error('Forbidden value (' + this.remainingTime + ') on element remainingTime.');
            }
            param1.writeVarInt(this.remainingTime);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameFightTurnResumeMessage(param1);
        }

        public deserializeAs_GameFightTurnResumeMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.remainingTime = param1.readVarUhInt();
            if (this.remainingTime < 0) {
                throw new Error('Forbidden value (' + this.remainingTime + ') on element of GameFightTurnResumeMessage.remainingTime.');
            }

        }
    }
    export class GameFightTurnStartPlayingMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6465;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return GameFightTurnStartPlayingMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameFightTurnStartPlayingMessage(param1);
        }

        public serializeAs_GameFightTurnStartPlayingMessage(param1: ICustomDataOutput): void {

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameFightTurnStartPlayingMessage(param1);
        }

        public deserializeAs_GameFightTurnStartPlayingMessage(param1: ICustomDataInput): void {

        }
    }
    export class GameFightUpdateTeamMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5572;

        fightId: number;
        team: FightTeamInformations;

        constructor() {
            this.fightId = 0;
            this.team = new FightTeamInformations();
            super();
        }

        public getMessageId(): number {
            return GameFightUpdateTeamMessage.ID;
        }

        public reset(): void {
            this.fightId = 0;
            this.team = new FightTeamInformations();
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameFightUpdateTeamMessage(param1);
        }

        public serializeAs_GameFightUpdateTeamMessage(param1: ICustomDataOutput): void {
            if (this.fightId < 0) {
                throw new Error('Forbidden value (' + this.fightId + ') on element fightId.');
            }
            param1.writeShort(this.fightId);
            this.team.serializeAs_FightTeamInformations(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameFightUpdateTeamMessage(param1);
        }

        public deserializeAs_GameFightUpdateTeamMessage(param1: ICustomDataInput): void {
            this.fightId = param1.readShort();
            if (this.fightId < 0) {
                throw new Error('Forbidden value (' + this.fightId + ') on element of GameFightUpdateTeamMessage.fightId.');
            }
            this.team = new FightTeamInformations();
            this.team.deserialize(param1);

        }
    }
    export class SlaveSwitchContextMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6214;

        masterId: number;
        slaveId: number;
        slaveSpells: SpellItem[];
        slaveStats: CharacterCharacteristicsInformations;
        shortcuts: Shortcut[];

        constructor() {
            this.masterId = 0;
            this.slaveId = 0;
            this.slaveSpells = [];
            this.slaveStats = new CharacterCharacteristicsInformations();
            this.shortcuts = [];
            super();
        }

        public getMessageId(): number {
            return SlaveSwitchContextMessage.ID;
        }

        public reset(): void {
            this.masterId = 0;
            this.slaveId = 0;
            this.slaveSpells = [];
            this.slaveStats = new CharacterCharacteristicsInformations();
            this.shortcuts = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_SlaveSwitchContextMessage(param1);
        }

        public serializeAs_SlaveSwitchContextMessage(param1: ICustomDataOutput): void {
            param1.writeInt(this.masterId);
            param1.writeInt(this.slaveId);
            param1.writeShort(this.slaveSpells.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.slaveSpells.length) {
                (this.slaveSpells[_loc2_]).serializeAs_SpellItem(param1);
                _loc2_++;
            }
            this.slaveStats.serializeAs_CharacterCharacteristicsInformations(param1);
            param1.writeShort(this.shortcuts.length);
            var _loc3_: number = 0;
            while (_loc3_ < this.shortcuts.length) {
                param1.writeShort((this.shortcuts[_loc3_]).getTypeId());
                (this.shortcuts[_loc3_]).serialize(param1);
                _loc3_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_SlaveSwitchContextMessage(param1);
        }

        public deserializeAs_SlaveSwitchContextMessage(param1: ICustomDataInput): void {
            var _loc6_: SpellItem = null;
            var _loc7_: number = 0;
            var _loc8_: Shortcut = null;
            this.masterId = param1.readInt();
            this.slaveId = param1.readInt();
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc6_ = new SpellItem();
                _loc6_.deserialize(param1);
                this.slaveSpells.push(_loc6_);
                _loc3_++;
            }
            this.slaveStats = new CharacterCharacteristicsInformations();
            this.slaveStats.deserialize(param1);
            var _loc4_: number = param1.readUnsignedShort();
            var _loc5_: number = 0;
            while (_loc5_ < _loc4_) {
            _loc7_ = param1.readUnsignedShort();
                _loc8_ = <Shortcut>ProtocolTypeManager.getInstance(Shortcut, _loc7_);
                _loc8_.deserialize(param1);
                this.shortcuts.push(_loc8_);
                _loc5_++;
            }

        }
    }
    export class ChallengeInfoMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6022;

        challengeId: number;
        targetId: number;
        xpBonus: number;
        dropBonus: number;

        constructor() {
            this.challengeId = 0;
            this.targetId = 0;
            this.xpBonus = 0;
            this.dropBonus = 0;
            super();
        }

        public getMessageId(): number {
            return ChallengeInfoMessage.ID;
        }

        public reset(): void {
            this.challengeId = 0;
            this.targetId = 0;
            this.xpBonus = 0;
            this.dropBonus = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ChallengeInfoMessage(param1);
        }

        public serializeAs_ChallengeInfoMessage(param1: ICustomDataOutput): void {
            if (this.challengeId < 0) {
                throw new Error('Forbidden value (' + this.challengeId + ') on element challengeId.');
            }
            param1.writeVarShort(this.challengeId);
            param1.writeInt(this.targetId);
            if (this.xpBonus < 0) {
                throw new Error('Forbidden value (' + this.xpBonus + ') on element xpBonus.');
            }
            param1.writeVarInt(this.xpBonus);
            if (this.dropBonus < 0) {
                throw new Error('Forbidden value (' + this.dropBonus + ') on element dropBonus.');
            }
            param1.writeVarInt(this.dropBonus);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ChallengeInfoMessage(param1);
        }

        public deserializeAs_ChallengeInfoMessage(param1: ICustomDataInput): void {
            this.challengeId = param1.readVarUhShort();
            if (this.challengeId < 0) {
                throw new Error('Forbidden value (' + this.challengeId + ') on element of ChallengeInfoMessage.challengeId.');
            }
            this.targetId = param1.readInt();
            this.xpBonus = param1.readVarUhInt();
            if (this.xpBonus < 0) {
                throw new Error('Forbidden value (' + this.xpBonus + ') on element of ChallengeInfoMessage.xpBonus.');
            }
            this.dropBonus = param1.readVarUhInt();
            if (this.dropBonus < 0) {
                throw new Error('Forbidden value (' + this.dropBonus + ') on element of ChallengeInfoMessage.dropBonus.');
            }

        }
    }
    export class ChallengeResultMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6019;

        challengeId: number;
        success: boolean;

        constructor() {
            this.challengeId = 0;
            this.success = false;
            super();
        }

        public getMessageId(): number {
            return ChallengeResultMessage.ID;
        }

        public reset(): void {
            this.challengeId = 0;
            this.success = false;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ChallengeResultMessage(param1);
        }

        public serializeAs_ChallengeResultMessage(param1: ICustomDataOutput): void {
            if (this.challengeId < 0) {
                throw new Error('Forbidden value (' + this.challengeId + ') on element challengeId.');
            }
            param1.writeVarShort(this.challengeId);
            param1.writeBoolean(this.success);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ChallengeResultMessage(param1);
        }

        public deserializeAs_ChallengeResultMessage(param1: ICustomDataInput): void {
            this.challengeId = param1.readVarUhShort();
            if (this.challengeId < 0) {
                throw new Error('Forbidden value (' + this.challengeId + ') on element of ChallengeResultMessage.challengeId.');
            }
            this.success = param1.readBoolean();

        }
    }
    export class ChallengeTargetUpdateMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6123;

        challengeId: number;
        targetId: number;

        constructor() {
            this.challengeId = 0;
            this.targetId = 0;
            super();
        }

        public getMessageId(): number {
            return ChallengeTargetUpdateMessage.ID;
        }

        public reset(): void {
            this.challengeId = 0;
            this.targetId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ChallengeTargetUpdateMessage(param1);
        }

        public serializeAs_ChallengeTargetUpdateMessage(param1: ICustomDataOutput): void {
            if (this.challengeId < 0) {
                throw new Error('Forbidden value (' + this.challengeId + ') on element challengeId.');
            }
            param1.writeVarShort(this.challengeId);
            param1.writeInt(this.targetId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ChallengeTargetUpdateMessage(param1);
        }

        public deserializeAs_ChallengeTargetUpdateMessage(param1: ICustomDataInput): void {
            this.challengeId = param1.readVarUhShort();
            if (this.challengeId < 0) {
                throw new Error('Forbidden value (' + this.challengeId + ') on element of ChallengeTargetUpdateMessage.challengeId.');
            }
            this.targetId = param1.readInt();

        }
    }
    export class ChallengeTargetsListMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5613;

        targetIds: number[];
        targetCells: number[];

        constructor() {
            this.targetIds = [];
            this.targetCells = [];
            super();
        }

        public getMessageId(): number {
            return ChallengeTargetsListMessage.ID;
        }

        public reset(): void {
            this.targetIds = [];
            this.targetCells = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ChallengeTargetsListMessage(param1);
        }

        public serializeAs_ChallengeTargetsListMessage(param1: ICustomDataOutput): void {
            param1.writeShort(this.targetIds.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.targetIds.length) {
                param1.writeInt(this.targetIds[_loc2_]);
                _loc2_++;
            }
            param1.writeShort(this.targetCells.length);
            var _loc3_: number = 0;
            while (_loc3_ < this.targetCells.length) {
                if (this.targetCells[_loc3_] < -1 || this.targetCells[_loc3_] > 559) {
                    throw new Error('Forbidden value (' + this.targetCells[_loc3_] + ') on element 2 (starting at 1) of targetCells.');
                }
                param1.writeShort(this.targetCells[_loc3_]);
                _loc3_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ChallengeTargetsListMessage(param1);
        }

        public deserializeAs_ChallengeTargetsListMessage(param1: ICustomDataInput): void {
            var _loc6_: any = 0;
            var _loc7_: any = 0;
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc6_ = param1.readInt();
                this.targetIds.push(_loc6_);
                _loc3_++;
            }
            var _loc4_: number = param1.readUnsignedShort();
            var _loc5_: number = 0;
            while (_loc5_ < _loc4_) {
            _loc7_ = param1.readShort();
                if (_loc7_ < -1 || _loc7_ > 559) {
                    throw new Error('Forbidden value (' + _loc7_ + ') on elements of targetCells.');
                }
                this.targetCells.push(_loc7_);
                _loc5_++;
            }

        }
    }
    export class ChallengeTargetsListRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5614;

        challengeId: number;

        constructor() {
            this.challengeId = 0;
            super();
        }

        public getMessageId(): number {
            return ChallengeTargetsListRequestMessage.ID;
        }

        public reset(): void {
            this.challengeId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ChallengeTargetsListRequestMessage(param1);
        }

        public serializeAs_ChallengeTargetsListRequestMessage(param1: ICustomDataOutput): void {
            if (this.challengeId < 0) {
                throw new Error('Forbidden value (' + this.challengeId + ') on element challengeId.');
            }
            param1.writeVarShort(this.challengeId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ChallengeTargetsListRequestMessage(param1);
        }

        public deserializeAs_ChallengeTargetsListRequestMessage(param1: ICustomDataInput): void {
            this.challengeId = param1.readVarUhShort();
            if (this.challengeId < 0) {
                throw new Error('Forbidden value (' + this.challengeId + ') on element of ChallengeTargetsListRequestMessage.challengeId.');
            }

        }
    }
    export class GameFightRefreshFighterMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6309;

        informations: GameContextActorInformations;

        constructor() {
            this.informations = new GameContextActorInformations();
            super();
        }

        public getMessageId(): number {
            return GameFightRefreshFighterMessage.ID;
        }

        public reset(): void {
            this.informations = new GameContextActorInformations();
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameFightRefreshFighterMessage(param1);
        }

        public serializeAs_GameFightRefreshFighterMessage(param1: ICustomDataOutput): void {
            param1.writeShort(this.informations.getTypeId());
            this.informations.serialize(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameFightRefreshFighterMessage(param1);
        }

        public deserializeAs_GameFightRefreshFighterMessage(param1: ICustomDataInput): void {
            var _loc2_: number = param1.readUnsignedShort();
            this.informations = <GameContextActorInformations>ProtocolTypeManager.getInstance(GameContextActorInformations, _loc2_);
            this.informations.deserialize(param1);

        }
    }
    export class GameFightShowFighterMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5864;

        informations: GameFightFighterInformations;

        constructor() {
            this.informations = new GameFightFighterInformations();
            super();
        }

        public getMessageId(): number {
            return GameFightShowFighterMessage.ID;
        }

        public reset(): void {
            this.informations = new GameFightFighterInformations();
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameFightShowFighterMessage(param1);
        }

        public serializeAs_GameFightShowFighterMessage(param1: ICustomDataOutput): void {
            param1.writeShort(this.informations.getTypeId());
            this.informations.serialize(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameFightShowFighterMessage(param1);
        }

        public deserializeAs_GameFightShowFighterMessage(param1: ICustomDataInput): void {
            var _loc2_: number = param1.readUnsignedShort();
            this.informations = <GameFightFighterInformations>ProtocolTypeManager.getInstance(GameFightFighterInformations, _loc2_);
            this.informations.deserialize(param1);

        }
    }
    export class GameFightShowFighterRandomStaticPoseMessage extends GameFightShowFighterMessage {
        public static ID: number = 6218;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return GameFightShowFighterRandomStaticPoseMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameFightShowFighterRandomStaticPoseMessage(param1);
        }

        public serializeAs_GameFightShowFighterRandomStaticPoseMessage(param1: ICustomDataOutput): void {
            super.serializeAs_GameFightShowFighterMessage(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameFightShowFighterRandomStaticPoseMessage(param1);
        }

        public deserializeAs_GameFightShowFighterRandomStaticPoseMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);

        }
    }
    export class GameDataPaddockObjectAddMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5990;

        paddockItemDescription: PaddockItem;

        constructor() {
            this.paddockItemDescription = new PaddockItem();
            super();
        }

        public getMessageId(): number {
            return GameDataPaddockObjectAddMessage.ID;
        }

        public reset(): void {
            this.paddockItemDescription = new PaddockItem();
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameDataPaddockObjectAddMessage(param1);
        }

        public serializeAs_GameDataPaddockObjectAddMessage(param1: ICustomDataOutput): void {
            this.paddockItemDescription.serializeAs_PaddockItem(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameDataPaddockObjectAddMessage(param1);
        }

        public deserializeAs_GameDataPaddockObjectAddMessage(param1: ICustomDataInput): void {
            this.paddockItemDescription = new PaddockItem();
            this.paddockItemDescription.deserialize(param1);

        }
    }
    export class GameDataPaddockObjectListAddMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5992;

        paddockItemDescription: PaddockItem[];

        constructor() {
            this.paddockItemDescription = [];
            super();
        }

        public getMessageId(): number {
            return GameDataPaddockObjectListAddMessage.ID;
        }

        public reset(): void {
            this.paddockItemDescription = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameDataPaddockObjectListAddMessage(param1);
        }

        public serializeAs_GameDataPaddockObjectListAddMessage(param1: ICustomDataOutput): void {
            param1.writeShort(this.paddockItemDescription.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.paddockItemDescription.length) {
                (this.paddockItemDescription[_loc2_]).serializeAs_PaddockItem(param1);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameDataPaddockObjectListAddMessage(param1);
        }

        public deserializeAs_GameDataPaddockObjectListAddMessage(param1: ICustomDataInput): void {
            var _loc4_: PaddockItem = null;
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = new PaddockItem();
                _loc4_.deserialize(param1);
                this.paddockItemDescription.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class GameDataPaddockObjectRemoveMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5993;

        cellId: number;

        constructor() {
            this.cellId = 0;
            super();
        }

        public getMessageId(): number {
            return GameDataPaddockObjectRemoveMessage.ID;
        }

        public reset(): void {
            this.cellId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameDataPaddockObjectRemoveMessage(param1);
        }

        public serializeAs_GameDataPaddockObjectRemoveMessage(param1: ICustomDataOutput): void {
            if (this.cellId < 0 || this.cellId > 559) {
                throw new Error('Forbidden value (' + this.cellId + ') on element cellId.');
            }
            param1.writeVarShort(this.cellId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameDataPaddockObjectRemoveMessage(param1);
        }

        public deserializeAs_GameDataPaddockObjectRemoveMessage(param1: ICustomDataInput): void {
            this.cellId = param1.readVarUhShort();
            if (this.cellId < 0 || this.cellId > 559) {
                throw new Error('Forbidden value (' + this.cellId + ') on element of GameDataPaddockObjectRemoveMessage.cellId.');
            }

        }
    }
    export class MountDataErrorMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6172;

        reason: number;

        constructor() {
            this.reason = 0;
            super();
        }

        public getMessageId(): number {
            return MountDataErrorMessage.ID;
        }

        public reset(): void {
            this.reason = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_MountDataErrorMessage(param1);
        }

        public serializeAs_MountDataErrorMessage(param1: ICustomDataOutput): void {
            param1.writeByte(this.reason);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_MountDataErrorMessage(param1);
        }

        public deserializeAs_MountDataErrorMessage(param1: ICustomDataInput): void {
            this.reason = param1.readByte();
            if (this.reason < 0) {
                throw new Error('Forbidden value (' + this.reason + ') on element of MountDataErrorMessage.reason.');
            }

        }
    }
    export class MountDataMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5973;

        mountData: MountClientData;

        constructor() {
            this.mountData = new MountClientData();
            super();
        }

        public getMessageId(): number {
            return MountDataMessage.ID;
        }

        public reset(): void {
            this.mountData = new MountClientData();
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_MountDataMessage(param1);
        }

        public serializeAs_MountDataMessage(param1: ICustomDataOutput): void {
            this.mountData.serializeAs_MountClientData(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_MountDataMessage(param1);
        }

        public deserializeAs_MountDataMessage(param1: ICustomDataInput): void {
            this.mountData = new MountClientData();
            this.mountData.deserialize(param1);

        }
    }
    export class MountEmoteIconUsedOkMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5978;

        mountId: number;
        reactionType: number;

        constructor() {
            this.mountId = 0;
            this.reactionType = 0;
            super();
        }

        public getMessageId(): number {
            return MountEmoteIconUsedOkMessage.ID;
        }

        public reset(): void {
            this.mountId = 0;
            this.reactionType = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_MountEmoteIconUsedOkMessage(param1);
        }

        public serializeAs_MountEmoteIconUsedOkMessage(param1: ICustomDataOutput): void {
            param1.writeVarInt(this.mountId);
            if (this.reactionType < 0) {
                throw new Error('Forbidden value (' + this.reactionType + ') on element reactionType.');
            }
            param1.writeByte(this.reactionType);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_MountEmoteIconUsedOkMessage(param1);
        }

        public deserializeAs_MountEmoteIconUsedOkMessage(param1: ICustomDataInput): void {
            this.mountId = param1.readVarInt();
            this.reactionType = param1.readByte();
            if (this.reactionType < 0) {
                throw new Error('Forbidden value (' + this.reactionType + ') on element of MountEmoteIconUsedOkMessage.reactionType.');
            }

        }
    }
    export class MountEquipedErrorMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5963;

        errorType: number;

        constructor() {
            this.errorType = 0;
            super();
        }

        public getMessageId(): number {
            return MountEquipedErrorMessage.ID;
        }

        public reset(): void {
            this.errorType = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_MountEquipedErrorMessage(param1);
        }

        public serializeAs_MountEquipedErrorMessage(param1: ICustomDataOutput): void {
            param1.writeByte(this.errorType);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_MountEquipedErrorMessage(param1);
        }

        public deserializeAs_MountEquipedErrorMessage(param1: ICustomDataInput): void {
            this.errorType = param1.readByte();
            if (this.errorType < 0) {
                throw new Error('Forbidden value (' + this.errorType + ') on element of MountEquipedErrorMessage.errorType.');
            }

        }
    }
    export class MountFeedRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6189;

        mountUid: number;
        mountLocation: number;
        mountFoodUid: number;
        quantity: number;

        constructor() {
            this.mountUid = 0;
            this.mountLocation = 0;
            this.mountFoodUid = 0;
            this.quantity = 0;
            super();
        }

        public getMessageId(): number {
            return MountFeedRequestMessage.ID;
        }

        public reset(): void {
            this.mountUid = 0;
            this.mountLocation = 0;
            this.mountFoodUid = 0;
            this.quantity = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_MountFeedRequestMessage(param1);
        }

        public serializeAs_MountFeedRequestMessage(param1: ICustomDataOutput): void {
            if (this.mountUid < 0) {
                throw new Error('Forbidden value (' + this.mountUid + ') on element mountUid.');
            }
            param1.writeVarInt(this.mountUid);
            param1.writeByte(this.mountLocation);
            if (this.mountFoodUid < 0) {
                throw new Error('Forbidden value (' + this.mountFoodUid + ') on element mountFoodUid.');
            }
            param1.writeVarInt(this.mountFoodUid);
            if (this.quantity < 0) {
                throw new Error('Forbidden value (' + this.quantity + ') on element quantity.');
            }
            param1.writeVarInt(this.quantity);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_MountFeedRequestMessage(param1);
        }

        public deserializeAs_MountFeedRequestMessage(param1: ICustomDataInput): void {
            this.mountUid = param1.readVarUhInt();
            if (this.mountUid < 0) {
                throw new Error('Forbidden value (' + this.mountUid + ') on element of MountFeedRequestMessage.mountUid.');
            }
            this.mountLocation = param1.readByte();
            this.mountFoodUid = param1.readVarUhInt();
            if (this.mountFoodUid < 0) {
                throw new Error('Forbidden value (' + this.mountFoodUid + ') on element of MountFeedRequestMessage.mountFoodUid.');
            }
            this.quantity = param1.readVarUhInt();
            if (this.quantity < 0) {
                throw new Error('Forbidden value (' + this.quantity + ') on element of MountFeedRequestMessage.quantity.');
            }

        }
    }
    export class MountInformationInPaddockRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5975;

        mapRideId: number;

        constructor() {
            this.mapRideId = 0;
            super();
        }

        public getMessageId(): number {
            return MountInformationInPaddockRequestMessage.ID;
        }

        public reset(): void {
            this.mapRideId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_MountInformationInPaddockRequestMessage(param1);
        }

        public serializeAs_MountInformationInPaddockRequestMessage(param1: ICustomDataOutput): void {
            param1.writeVarInt(this.mapRideId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_MountInformationInPaddockRequestMessage(param1);
        }

        public deserializeAs_MountInformationInPaddockRequestMessage(param1: ICustomDataInput): void {
            this.mapRideId = param1.readVarInt();

        }
    }
    export class MountInformationRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5972;

        id: number;
        time: number;

        constructor() {
            this.id = 0;
            this.time = 0;
            super();
        }

        public getMessageId(): number {
            return MountInformationRequestMessage.ID;
        }

        public reset(): void {
            this.id = 0;
            this.time = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_MountInformationRequestMessage(param1);
        }

        public serializeAs_MountInformationRequestMessage(param1: ICustomDataOutput): void {
            if (this.id < -9.007199254740992E15 || this.id > 9.007199254740992E15) {
                throw new Error('Forbidden value (' + this.id + ') on element id.');
            }
            param1.writeDouble(this.id);
            if (this.time < -9.007199254740992E15 || this.time > 9.007199254740992E15) {
                throw new Error('Forbidden value (' + this.time + ') on element time.');
            }
            param1.writeDouble(this.time);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_MountInformationRequestMessage(param1);
        }

        public deserializeAs_MountInformationRequestMessage(param1: ICustomDataInput): void {
            this.id = param1.readDouble();
            if (this.id < -9.007199254740992E15 || this.id > 9.007199254740992E15) {
                throw new Error('Forbidden value (' + this.id + ') on element of MountInformationRequestMessage.id.');
            }
            this.time = param1.readDouble();
            if (this.time < -9.007199254740992E15 || this.time > 9.007199254740992E15) {
                throw new Error('Forbidden value (' + this.time + ') on element of MountInformationRequestMessage.time.');
            }

        }
    }
    export class MountReleaseRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5980;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return MountReleaseRequestMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_MountReleaseRequestMessage(param1);
        }

        public serializeAs_MountReleaseRequestMessage(param1: ICustomDataOutput): void {

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_MountReleaseRequestMessage(param1);
        }

        public deserializeAs_MountReleaseRequestMessage(param1: ICustomDataInput): void {

        }
    }
    export class MountReleasedMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6308;

        mountId: number;

        constructor() {
            this.mountId = 0;
            super();
        }

        public getMessageId(): number {
            return MountReleasedMessage.ID;
        }

        public reset(): void {
            this.mountId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_MountReleasedMessage(param1);
        }

        public serializeAs_MountReleasedMessage(param1: ICustomDataOutput): void {
            param1.writeVarInt(this.mountId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_MountReleasedMessage(param1);
        }

        public deserializeAs_MountReleasedMessage(param1: ICustomDataInput): void {
            this.mountId = param1.readVarInt();

        }
    }
    export class MountRenameRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5987;

        name: string;
        mountId: number;

        constructor() {
            this.name = '';
            this.mountId = 0;
            super();
        }

        public getMessageId(): number {
            return MountRenameRequestMessage.ID;
        }

        public reset(): void {
            this.name = '';
            this.mountId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_MountRenameRequestMessage(param1);
        }

        public serializeAs_MountRenameRequestMessage(param1: ICustomDataOutput): void {
            param1.writeUTF(this.name);
            param1.writeVarInt(this.mountId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_MountRenameRequestMessage(param1);
        }

        public deserializeAs_MountRenameRequestMessage(param1: ICustomDataInput): void {
            this.name = param1.readUTF();
            this.mountId = param1.readVarInt();

        }
    }
    export class MountRenamedMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5983;

        mountId: number;
        name: string;

        constructor() {
            this.mountId = 0;
            this.name = '';
            super();
        }

        public getMessageId(): number {
            return MountRenamedMessage.ID;
        }

        public reset(): void {
            this.mountId = 0;
            this.name = '';
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_MountRenamedMessage(param1);
        }

        public serializeAs_MountRenamedMessage(param1: ICustomDataOutput): void {
            param1.writeVarInt(this.mountId);
            param1.writeUTF(this.name);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_MountRenamedMessage(param1);
        }

        public deserializeAs_MountRenamedMessage(param1: ICustomDataInput): void {
            this.mountId = param1.readVarInt();
            this.name = param1.readUTF();

        }
    }
    export class MountRidingMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5967;

        isRiding: boolean;

        constructor() {
            this.isRiding = false;
            super();
        }

        public getMessageId(): number {
            return MountRidingMessage.ID;
        }

        public reset(): void {
            this.isRiding = false;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_MountRidingMessage(param1);
        }

        public serializeAs_MountRidingMessage(param1: ICustomDataOutput): void {
            param1.writeBoolean(this.isRiding);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_MountRidingMessage(param1);
        }

        public deserializeAs_MountRidingMessage(param1: ICustomDataInput): void {
            this.isRiding = param1.readBoolean();

        }
    }
    export class MountSetMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5968;

        mountData: MountClientData;

        constructor() {
            this.mountData = new MountClientData();
            super();
        }

        public getMessageId(): number {
            return MountSetMessage.ID;
        }

        public reset(): void {
            this.mountData = new MountClientData();
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_MountSetMessage(param1);
        }

        public serializeAs_MountSetMessage(param1: ICustomDataOutput): void {
            this.mountData.serializeAs_MountClientData(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_MountSetMessage(param1);
        }

        public deserializeAs_MountSetMessage(param1: ICustomDataInput): void {
            this.mountData = new MountClientData();
            this.mountData.deserialize(param1);

        }
    }
    export class MountSetXpRatioRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5989;

        xpRatio: number;

        constructor() {
            this.xpRatio = 0;
            super();
        }

        public getMessageId(): number {
            return MountSetXpRatioRequestMessage.ID;
        }

        public reset(): void {
            this.xpRatio = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_MountSetXpRatioRequestMessage(param1);
        }

        public serializeAs_MountSetXpRatioRequestMessage(param1: ICustomDataOutput): void {
            if (this.xpRatio < 0) {
                throw new Error('Forbidden value (' + this.xpRatio + ') on element xpRatio.');
            }
            param1.writeByte(this.xpRatio);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_MountSetXpRatioRequestMessage(param1);
        }

        public deserializeAs_MountSetXpRatioRequestMessage(param1: ICustomDataInput): void {
            this.xpRatio = param1.readByte();
            if (this.xpRatio < 0) {
                throw new Error('Forbidden value (' + this.xpRatio + ') on element of MountSetXpRatioRequestMessage.xpRatio.');
            }

        }
    }
    export class MountSterilizeRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5962;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return MountSterilizeRequestMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_MountSterilizeRequestMessage(param1);
        }

        public serializeAs_MountSterilizeRequestMessage(param1: ICustomDataOutput): void {

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_MountSterilizeRequestMessage(param1);
        }

        public deserializeAs_MountSterilizeRequestMessage(param1: ICustomDataInput): void {

        }
    }
    export class MountSterilizedMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5977;

        mountId: number;

        constructor() {
            this.mountId = 0;
            super();
        }

        public getMessageId(): number {
            return MountSterilizedMessage.ID;
        }

        public reset(): void {
            this.mountId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_MountSterilizedMessage(param1);
        }

        public serializeAs_MountSterilizedMessage(param1: ICustomDataOutput): void {
            param1.writeVarInt(this.mountId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_MountSterilizedMessage(param1);
        }

        public deserializeAs_MountSterilizedMessage(param1: ICustomDataInput): void {
            this.mountId = param1.readVarInt();

        }
    }
    export class MountToggleRidingRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5976;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return MountToggleRidingRequestMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_MountToggleRidingRequestMessage(param1);
        }

        public serializeAs_MountToggleRidingRequestMessage(param1: ICustomDataOutput): void {

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_MountToggleRidingRequestMessage(param1);
        }

        public deserializeAs_MountToggleRidingRequestMessage(param1: ICustomDataInput): void {

        }
    }
    export class MountUnSetMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5982;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return MountUnSetMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_MountUnSetMessage(param1);
        }

        public serializeAs_MountUnSetMessage(param1: ICustomDataOutput): void {

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_MountUnSetMessage(param1);
        }

        public deserializeAs_MountUnSetMessage(param1: ICustomDataInput): void {

        }
    }
    export class MountXpRatioMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5970;

        ratio: number;

        constructor() {
            this.ratio = 0;
            super();
        }

        public getMessageId(): number {
            return MountXpRatioMessage.ID;
        }

        public reset(): void {
            this.ratio = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_MountXpRatioMessage(param1);
        }

        public serializeAs_MountXpRatioMessage(param1: ICustomDataOutput): void {
            if (this.ratio < 0) {
                throw new Error('Forbidden value (' + this.ratio + ') on element ratio.');
            }
            param1.writeByte(this.ratio);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_MountXpRatioMessage(param1);
        }

        public deserializeAs_MountXpRatioMessage(param1: ICustomDataInput): void {
            this.ratio = param1.readByte();
            if (this.ratio < 0) {
                throw new Error('Forbidden value (' + this.ratio + ') on element of MountXpRatioMessage.ratio.');
            }

        }
    }
    export class PaddockBuyRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5951;

        proposedPrice: number;

        constructor() {
            this.proposedPrice = 0;
            super();
        }

        public getMessageId(): number {
            return PaddockBuyRequestMessage.ID;
        }

        public reset(): void {
            this.proposedPrice = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_PaddockBuyRequestMessage(param1);
        }

        public serializeAs_PaddockBuyRequestMessage(param1: ICustomDataOutput): void {
            if (this.proposedPrice < 0) {
                throw new Error('Forbidden value (' + this.proposedPrice + ') on element proposedPrice.');
            }
            param1.writeVarInt(this.proposedPrice);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_PaddockBuyRequestMessage(param1);
        }

        public deserializeAs_PaddockBuyRequestMessage(param1: ICustomDataInput): void {
            this.proposedPrice = param1.readVarUhInt();
            if (this.proposedPrice < 0) {
                throw new Error('Forbidden value (' + this.proposedPrice + ') on element of PaddockBuyRequestMessage.proposedPrice.');
            }

        }
    }
    export class PaddockBuyResultMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6516;

        paddockId: number;
        bought: boolean;
        realPrice: number;

        constructor() {
            this.paddockId = 0;
            this.bought = false;
            this.realPrice = 0;
            super();
        }

        public getMessageId(): number {
            return PaddockBuyResultMessage.ID;
        }

        public reset(): void {
            this.paddockId = 0;
            this.bought = false;
            this.realPrice = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_PaddockBuyResultMessage(param1);
        }

        public serializeAs_PaddockBuyResultMessage(param1: ICustomDataOutput): void {
            param1.writeInt(this.paddockId);
            param1.writeBoolean(this.bought);
            if (this.realPrice < 0) {
                throw new Error('Forbidden value (' + this.realPrice + ') on element realPrice.');
            }
            param1.writeVarInt(this.realPrice);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_PaddockBuyResultMessage(param1);
        }

        public deserializeAs_PaddockBuyResultMessage(param1: ICustomDataInput): void {
            this.paddockId = param1.readInt();
            this.bought = param1.readBoolean();
            this.realPrice = param1.readVarUhInt();
            if (this.realPrice < 0) {
                throw new Error('Forbidden value (' + this.realPrice + ') on element of PaddockBuyResultMessage.realPrice.');
            }

        }
    }
    export class PaddockMoveItemRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6052;

        oldCellId: number;
        newCellId: number;

        constructor() {
            this.oldCellId = 0;
            this.newCellId = 0;
            super();
        }

        public getMessageId(): number {
            return PaddockMoveItemRequestMessage.ID;
        }

        public reset(): void {
            this.oldCellId = 0;
            this.newCellId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_PaddockMoveItemRequestMessage(param1);
        }

        public serializeAs_PaddockMoveItemRequestMessage(param1: ICustomDataOutput): void {
            if (this.oldCellId < 0 || this.oldCellId > 559) {
                throw new Error('Forbidden value (' + this.oldCellId + ') on element oldCellId.');
            }
            param1.writeVarShort(this.oldCellId);
            if (this.newCellId < 0 || this.newCellId > 559) {
                throw new Error('Forbidden value (' + this.newCellId + ') on element newCellId.');
            }
            param1.writeVarShort(this.newCellId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_PaddockMoveItemRequestMessage(param1);
        }

        public deserializeAs_PaddockMoveItemRequestMessage(param1: ICustomDataInput): void {
            this.oldCellId = param1.readVarUhShort();
            if (this.oldCellId < 0 || this.oldCellId > 559) {
                throw new Error('Forbidden value (' + this.oldCellId + ') on element of PaddockMoveItemRequestMessage.oldCellId.');
            }
            this.newCellId = param1.readVarUhShort();
            if (this.newCellId < 0 || this.newCellId > 559) {
                throw new Error('Forbidden value (' + this.newCellId + ') on element of PaddockMoveItemRequestMessage.newCellId.');
            }

        }
    }
    export class PaddockRemoveItemRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5958;

        cellId: number;

        constructor() {
            this.cellId = 0;
            super();
        }

        public getMessageId(): number {
            return PaddockRemoveItemRequestMessage.ID;
        }

        public reset(): void {
            this.cellId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_PaddockRemoveItemRequestMessage(param1);
        }

        public serializeAs_PaddockRemoveItemRequestMessage(param1: ICustomDataOutput): void {
            if (this.cellId < 0 || this.cellId > 559) {
                throw new Error('Forbidden value (' + this.cellId + ') on element cellId.');
            }
            param1.writeVarShort(this.cellId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_PaddockRemoveItemRequestMessage(param1);
        }

        public deserializeAs_PaddockRemoveItemRequestMessage(param1: ICustomDataInput): void {
            this.cellId = param1.readVarUhShort();
            if (this.cellId < 0 || this.cellId > 559) {
                throw new Error('Forbidden value (' + this.cellId + ') on element of PaddockRemoveItemRequestMessage.cellId.');
            }

        }
    }
    export class PaddockSellRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5953;

        price: number;

        constructor() {
            this.price = 0;
            super();
        }

        public getMessageId(): number {
            return PaddockSellRequestMessage.ID;
        }

        public reset(): void {
            this.price = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_PaddockSellRequestMessage(param1);
        }

        public serializeAs_PaddockSellRequestMessage(param1: ICustomDataOutput): void {
            if (this.price < 0) {
                throw new Error('Forbidden value (' + this.price + ') on element price.');
            }
            param1.writeVarInt(this.price);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_PaddockSellRequestMessage(param1);
        }

        public deserializeAs_PaddockSellRequestMessage(param1: ICustomDataInput): void {
            this.price = param1.readVarUhInt();
            if (this.price < 0) {
                throw new Error('Forbidden value (' + this.price + ') on element of PaddockSellRequestMessage.price.');
            }

        }
    }
    export class NotificationByServerMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6103;

        id: number;
        parameters: string[];
        forceOpen: boolean;

        constructor() {
            this.id = 0;
            this.parameters = [];
            this.forceOpen = false;
            super();
        }

        public getMessageId(): number {
            return NotificationByServerMessage.ID;
        }

        public reset(): void {
            this.id = 0;
            this.parameters = [];
            this.forceOpen = false;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_NotificationByServerMessage(param1);
        }

        public serializeAs_NotificationByServerMessage(param1: ICustomDataOutput): void {
            if (this.id < 0) {
                throw new Error('Forbidden value (' + this.id + ') on element id.');
            }
            param1.writeVarShort(this.id);
            param1.writeShort(this.parameters.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.parameters.length) {
                param1.writeUTF(this.parameters[_loc2_]);
                _loc2_++;
            }
            param1.writeBoolean(this.forceOpen);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_NotificationByServerMessage(param1);
        }

        public deserializeAs_NotificationByServerMessage(param1: ICustomDataInput): void {
            var _loc4_: string = null;
            this.id = param1.readVarUhShort();
            if (this.id < 0) {
                throw new Error('Forbidden value (' + this.id + ') on element of NotificationByServerMessage.id.');
            }
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = param1.readUTF();
                this.parameters.push(_loc4_);
                _loc3_++;
            }
            this.forceOpen = param1.readBoolean();

        }
    }
    export class NotificationListMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6087;

        flags: number[];

        constructor() {
            this.flags = [];
            super();
        }

        public getMessageId(): number {
            return NotificationListMessage.ID;
        }

        public reset(): void {
            this.flags = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_NotificationListMessage(param1);
        }

        public serializeAs_NotificationListMessage(param1: ICustomDataOutput): void {
            param1.writeShort(this.flags.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.flags.length) {
                param1.writeVarInt(this.flags[_loc2_]);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_NotificationListMessage(param1);
        }

        public deserializeAs_NotificationListMessage(param1: ICustomDataInput): void {
            var _loc4_: any = 0;
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = param1.readVarInt();
                this.flags.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class NotificationResetMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6089;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return NotificationResetMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_NotificationResetMessage(param1);
        }

        public serializeAs_NotificationResetMessage(param1: ICustomDataOutput): void {

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_NotificationResetMessage(param1);
        }

        public deserializeAs_NotificationResetMessage(param1: ICustomDataInput): void {

        }
    }
    export class NotificationUpdateFlagMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6090;

        index: number;

        constructor() {
            this.index = 0;
            super();
        }

        public getMessageId(): number {
            return NotificationUpdateFlagMessage.ID;
        }

        public reset(): void {
            this.index = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_NotificationUpdateFlagMessage(param1);
        }

        public serializeAs_NotificationUpdateFlagMessage(param1: ICustomDataOutput): void {
            if (this.index < 0) {
                throw new Error('Forbidden value (' + this.index + ') on element index.');
            }
            param1.writeVarShort(this.index);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_NotificationUpdateFlagMessage(param1);
        }

        public deserializeAs_NotificationUpdateFlagMessage(param1: ICustomDataInput): void {
            this.index = param1.readVarUhShort();
            if (this.index < 0) {
                throw new Error('Forbidden value (' + this.index + ') on element of NotificationUpdateFlagMessage.index.');
            }

        }
    }
    export class ChangeMapMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 221;

        mapId: number;

        constructor() {
            this.mapId = 0;
            super();
        }

        public getMessageId(): number {
            return ChangeMapMessage.ID;
        }

        public reset(): void {
            this.mapId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ChangeMapMessage(param1);
        }

        public serializeAs_ChangeMapMessage(param1: ICustomDataOutput): void {
            if (this.mapId < 0) {
                throw new Error('Forbidden value (' + this.mapId + ') on element mapId.');
            }
            param1.writeInt(this.mapId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ChangeMapMessage(param1);
        }

        public deserializeAs_ChangeMapMessage(param1: ICustomDataInput): void {
            this.mapId = param1.readInt();
            if (this.mapId < 0) {
                throw new Error('Forbidden value (' + this.mapId + ') on element of ChangeMapMessage.mapId.');
            }

        }
    }
    export class CurrentMapMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 220;

        mapId: number;
        mapKey: string;

        constructor() {
            this.mapId = 0;
            this.mapKey = '';
            super();
        }

        public getMessageId(): number {
            return CurrentMapMessage.ID;
        }

        public reset(): void {
            this.mapId = 0;
            this.mapKey = '';
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_CurrentMapMessage(param1);
        }

        public serializeAs_CurrentMapMessage(param1: ICustomDataOutput): void {
            if (this.mapId < 0) {
                throw new Error('Forbidden value (' + this.mapId + ') on element mapId.');
            }
            param1.writeInt(this.mapId);
            param1.writeUTF(this.mapKey);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_CurrentMapMessage(param1);
        }

        public deserializeAs_CurrentMapMessage(param1: ICustomDataInput): void {
            this.mapId = param1.readInt();
            if (this.mapId < 0) {
                throw new Error('Forbidden value (' + this.mapId + ') on element of CurrentMapMessage.mapId.');
            }
            this.mapKey = param1.readUTF();

        }
    }
    export class ErrorMapNotFoundMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6197;

        mapId: number;

        constructor() {
            this.mapId = 0;
            super();
        }

        public getMessageId(): number {
            return ErrorMapNotFoundMessage.ID;
        }

        public reset(): void {
            this.mapId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ErrorMapNotFoundMessage(param1);
        }

        public serializeAs_ErrorMapNotFoundMessage(param1: ICustomDataOutput): void {
            if (this.mapId < 0) {
                throw new Error('Forbidden value (' + this.mapId + ') on element mapId.');
            }
            param1.writeInt(this.mapId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ErrorMapNotFoundMessage(param1);
        }

        public deserializeAs_ErrorMapNotFoundMessage(param1: ICustomDataInput): void {
            this.mapId = param1.readInt();
            if (this.mapId < 0) {
                throw new Error('Forbidden value (' + this.mapId + ') on element of ErrorMapNotFoundMessage.mapId.');
            }

        }
    }
    export class GameRolePlayShowActorMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5632;

        informations: GameRolePlayActorInformations;

        constructor() {
            this.informations = new GameRolePlayActorInformations();
            super();
        }

        public getMessageId(): number {
            return GameRolePlayShowActorMessage.ID;
        }

        public reset(): void {
            this.informations = new GameRolePlayActorInformations();
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameRolePlayShowActorMessage(param1);
        }

        public serializeAs_GameRolePlayShowActorMessage(param1: ICustomDataOutput): void {
            param1.writeShort(this.informations.getTypeId());
            this.informations.serialize(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameRolePlayShowActorMessage(param1);
        }

        public deserializeAs_GameRolePlayShowActorMessage(param1: ICustomDataInput): void {
            var _loc2_: number = param1.readUnsignedShort();
            this.informations = <GameRolePlayActorInformations>ProtocolTypeManager.getInstance(GameRolePlayActorInformations, _loc2_);
            this.informations.deserialize(param1);

        }
    }
    export class GameRolePlayShowActorWithEventMessage extends GameRolePlayShowActorMessage {
        public static ID: number = 6407;

        actorEventId: number;

        constructor() {
            this.actorEventId = 0;
            super();
        }

        public getMessageId(): number {
            return GameRolePlayShowActorWithEventMessage.ID;
        }

        public reset(): void {
            this.actorEventId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameRolePlayShowActorWithEventMessage(param1);
        }

        public serializeAs_GameRolePlayShowActorWithEventMessage(param1: ICustomDataOutput): void {
            super.serializeAs_GameRolePlayShowActorMessage(param1);
            if (this.actorEventId < 0) {
                throw new Error('Forbidden value (' + this.actorEventId + ') on element actorEventId.');
            }
            param1.writeByte(this.actorEventId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameRolePlayShowActorWithEventMessage(param1);
        }

        public deserializeAs_GameRolePlayShowActorWithEventMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.actorEventId = param1.readByte();
            if (this.actorEventId < 0) {
                throw new Error('Forbidden value (' + this.actorEventId + ') on element of GameRolePlayShowActorWithEventMessage.actorEventId.');
            }

        }
    }
    export class MapComplementaryInformationsDataMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 226;

        subAreaId: number;
        mapId: number;
        houses: HouseInformations[];
        actors: GameRolePlayActorInformations[];
        interactiveElements: InteractiveElement[];
        statedElements: StatedElement[];
        obstacles: MapObstacle[];
        fights: FightCommonInformations[];

        constructor() {
            this.subAreaId = 0;
            this.mapId = 0;
            this.houses = [];
            this.actors = [];
            this.interactiveElements = [];
            this.statedElements = [];
            this.obstacles = [];
            this.fights = [];
            super();
        }

        public getMessageId(): number {
            return MapComplementaryInformationsDataMessage.ID;
        }

        public reset(): void {
            this.subAreaId = 0;
            this.mapId = 0;
            this.houses = [];
            this.actors = [];
            this.interactiveElements = [];
            this.statedElements = [];
            this.obstacles = [];
            this.fights = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_MapComplementaryInformationsDataMessage(param1);
        }

        public serializeAs_MapComplementaryInformationsDataMessage(param1: ICustomDataOutput): void {
            if (this.subAreaId < 0) {
                throw new Error('Forbidden value (' + this.subAreaId + ') on element subAreaId.');
            }
            param1.writeVarShort(this.subAreaId);
            if (this.mapId < 0) {
                throw new Error('Forbidden value (' + this.mapId + ') on element mapId.');
            }
            param1.writeInt(this.mapId);
            param1.writeShort(this.houses.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.houses.length) {
                param1.writeShort((this.houses[_loc2_]).getTypeId());
                (this.houses[_loc2_]).serialize(param1);
                _loc2_++;
            }
            param1.writeShort(this.actors.length);
            var _loc3_: number = 0;
            while (_loc3_ < this.actors.length) {
                param1.writeShort((this.actors[_loc3_]).getTypeId());
                (this.actors[_loc3_]).serialize(param1);
                _loc3_++;
            }
            param1.writeShort(this.interactiveElements.length);
            var _loc4_: number = 0;
            while (_loc4_ < this.interactiveElements.length) {
                param1.writeShort((this.interactiveElements[_loc4_]).getTypeId());
                (this.interactiveElements[_loc4_]).serialize(param1);
                _loc4_++;
            }
            param1.writeShort(this.statedElements.length);
            var _loc5_: number = 0;
            while (_loc5_ < this.statedElements.length) {
                (this.statedElements[_loc5_]).serializeAs_StatedElement(param1);
                _loc5_++;
            }
            param1.writeShort(this.obstacles.length);
            var _loc6_: number = 0;
            while (_loc6_ < this.obstacles.length) {
                (this.obstacles[_loc6_]).serializeAs_MapObstacle(param1);
                _loc6_++;
            }
            param1.writeShort(this.fights.length);
            var _loc7_: number = 0;
            while (_loc7_ < this.fights.length) {
                (this.fights[_loc7_]).serializeAs_FightCommonInformations(param1);
                _loc7_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_MapComplementaryInformationsDataMessage(param1);
        }

        public deserializeAs_MapComplementaryInformationsDataMessage(param1: ICustomDataInput): void {
            var _loc14_: number = 0;
            var _loc15_: HouseInformations = null;
            var _loc16_: number = 0;
            var _loc17_: GameRolePlayActorInformations = null;
            var _loc18_: number = 0;
            var _loc19_: InteractiveElement = null;
            var _loc20_: StatedElement = null;
            var _loc21_: MapObstacle = null;
            var _loc22_: FightCommonInformations = null;
            this.subAreaId = param1.readVarUhShort();
            if (this.subAreaId < 0) {
                throw new Error('Forbidden value (' + this.subAreaId + ') on element of MapComplementaryInformationsDataMessage.subAreaId.');
            }
            this.mapId = param1.readInt();
            if (this.mapId < 0) {
                throw new Error('Forbidden value (' + this.mapId + ') on element of MapComplementaryInformationsDataMessage.mapId.');
            }
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc14_ = param1.readUnsignedShort();
                _loc15_ = <HouseInformations>ProtocolTypeManager.getInstance(HouseInformations, _loc14_);
                _loc15_.deserialize(param1);
                this.houses.push(_loc15_);
                _loc3_++;
            }
            var _loc4_: number = param1.readUnsignedShort();
            var _loc5_: number = 0;
            while (_loc5_ < _loc4_) {
            _loc16_ = param1.readUnsignedShort();
                _loc17_ = <GameRolePlayActorInformations>ProtocolTypeManager.getInstance(GameRolePlayActorInformations, _loc16_);
                _loc17_.deserialize(param1);
                this.actors.push(_loc17_);
                _loc5_++;
            }
            var _loc6_: number = param1.readUnsignedShort();
            var _loc7_: number = 0;
            while (_loc7_ < _loc6_) {
            _loc18_ = param1.readUnsignedShort();
                _loc19_ = <InteractiveElement>ProtocolTypeManager.getInstance(InteractiveElement, _loc18_);
                _loc19_.deserialize(param1);
                this.interactiveElements.push(_loc19_);
                _loc7_++;
            }
            var _loc8_: number = param1.readUnsignedShort();
            var _loc9_: number = 0;
            while (_loc9_ < _loc8_) {
            _loc20_ = new StatedElement();
                _loc20_.deserialize(param1);
                this.statedElements.push(_loc20_);
                _loc9_++;
            }
            var _loc10_: number = param1.readUnsignedShort();
            var _loc11_: number = 0;
            while (_loc11_ < _loc10_) {
            _loc21_ = new MapObstacle();
                _loc21_.deserialize(param1);
                this.obstacles.push(_loc21_);
                _loc11_++;
            }
            var _loc12_: number = param1.readUnsignedShort();
            var _loc13_: number = 0;
            while (_loc13_ < _loc12_) {
            _loc22_ = new FightCommonInformations();
                _loc22_.deserialize(param1);
                this.fights.push(_loc22_);
                _loc13_++;
            }

        }
    }
    export class MapComplementaryInformationsDataInHouseMessage extends MapComplementaryInformationsDataMessage {
        public static ID: number = 6130;

        currentHouse: HouseInformationsInside;

        constructor() {
            this.currentHouse = new HouseInformationsInside();
            super();
        }

        public getMessageId(): number {
            return MapComplementaryInformationsDataInHouseMessage.ID;
        }

        public reset(): void {
            this.currentHouse = new HouseInformationsInside();
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_MapComplementaryInformationsDataInHouseMessage(param1);
        }

        public serializeAs_MapComplementaryInformationsDataInHouseMessage(param1: ICustomDataOutput): void {
            super.serializeAs_MapComplementaryInformationsDataMessage(param1);
            this.currentHouse.serializeAs_HouseInformationsInside(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_MapComplementaryInformationsDataInHouseMessage(param1);
        }

        public deserializeAs_MapComplementaryInformationsDataInHouseMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.currentHouse = new HouseInformationsInside();
            this.currentHouse.deserialize(param1);

        }
    }
    export class MapComplementaryInformationsWithCoordsMessage extends MapComplementaryInformationsDataMessage {
        public static ID: number = 6268;

        worldX: number;
        worldY: number;

        constructor() {
            this.worldX = 0;
            this.worldY = 0;
            super();
        }

        public getMessageId(): number {
            return MapComplementaryInformationsWithCoordsMessage.ID;
        }

        public reset(): void {
            this.worldX = 0;
            this.worldY = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_MapComplementaryInformationsWithCoordsMessage(param1);
        }

        public serializeAs_MapComplementaryInformationsWithCoordsMessage(param1: ICustomDataOutput): void {
            super.serializeAs_MapComplementaryInformationsDataMessage(param1);
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error('Forbidden value (' + this.worldX + ') on element worldX.');
            }
            param1.writeShort(this.worldX);
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error('Forbidden value (' + this.worldY + ') on element worldY.');
            }
            param1.writeShort(this.worldY);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_MapComplementaryInformationsWithCoordsMessage(param1);
        }

        public deserializeAs_MapComplementaryInformationsWithCoordsMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.worldX = param1.readShort();
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error('Forbidden value (' + this.worldX + ') on element of MapComplementaryInformationsWithCoordsMessage.worldX.');
            }
            this.worldY = param1.readShort();
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error('Forbidden value (' + this.worldY + ') on element of MapComplementaryInformationsWithCoordsMessage.worldY.');
            }

        }
    }
    export class MapFightCountMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 210;

        fightCount: number;

        constructor() {
            this.fightCount = 0;
            super();
        }

        public getMessageId(): number {
            return MapFightCountMessage.ID;
        }

        public reset(): void {
            this.fightCount = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_MapFightCountMessage(param1);
        }

        public serializeAs_MapFightCountMessage(param1: ICustomDataOutput): void {
            if (this.fightCount < 0) {
                throw new Error('Forbidden value (' + this.fightCount + ') on element fightCount.');
            }
            param1.writeVarShort(this.fightCount);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_MapFightCountMessage(param1);
        }

        public deserializeAs_MapFightCountMessage(param1: ICustomDataInput): void {
            this.fightCount = param1.readVarUhShort();
            if (this.fightCount < 0) {
                throw new Error('Forbidden value (' + this.fightCount + ') on element of MapFightCountMessage.fightCount.');
            }

        }
    }
    export class MapInformationsRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 225;

        mapId: number;

        constructor() {
            this.mapId = 0;
            super();
        }

        public getMessageId(): number {
            return MapInformationsRequestMessage.ID;
        }

        public reset(): void {
            this.mapId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_MapInformationsRequestMessage(param1);
        }

        public serializeAs_MapInformationsRequestMessage(param1: ICustomDataOutput): void {
            if (this.mapId < 0) {
                throw new Error('Forbidden value (' + this.mapId + ') on element mapId.');
            }
            param1.writeInt(this.mapId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_MapInformationsRequestMessage(param1);
        }

        public deserializeAs_MapInformationsRequestMessage(param1: ICustomDataInput): void {
            this.mapId = param1.readInt();
            if (this.mapId < 0) {
                throw new Error('Forbidden value (' + this.mapId + ') on element of MapInformationsRequestMessage.mapId.');
            }

        }
    }
    export class MapObstacleUpdateMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6051;

        obstacles: MapObstacle[];

        constructor() {
            this.obstacles = [];
            super();
        }

        public getMessageId(): number {
            return MapObstacleUpdateMessage.ID;
        }

        public reset(): void {
            this.obstacles = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_MapObstacleUpdateMessage(param1);
        }

        public serializeAs_MapObstacleUpdateMessage(param1: ICustomDataOutput): void {
            param1.writeShort(this.obstacles.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.obstacles.length) {
                (this.obstacles[_loc2_]).serializeAs_MapObstacle(param1);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_MapObstacleUpdateMessage(param1);
        }

        public deserializeAs_MapObstacleUpdateMessage(param1: ICustomDataInput): void {
            var _loc4_: MapObstacle = null;
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = new MapObstacle();
                _loc4_.deserialize(param1);
                this.obstacles.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class MapRunningFightDetailsMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5751;

        fightId: number;
        attackers: GameFightFighterLightInformations[];
        defenders: GameFightFighterLightInformations[];

        constructor() {
            this.fightId = 0;
            this.attackers = [];
            this.defenders = [];
            super();
        }

        public getMessageId(): number {
            return MapRunningFightDetailsMessage.ID;
        }

        public reset(): void {
            this.fightId = 0;
            this.attackers = [];
            this.defenders = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_MapRunningFightDetailsMessage(param1);
        }

        public serializeAs_MapRunningFightDetailsMessage(param1: ICustomDataOutput): void {
            if (this.fightId < 0) {
                throw new Error('Forbidden value (' + this.fightId + ') on element fightId.');
            }
            param1.writeInt(this.fightId);
            param1.writeShort(this.attackers.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.attackers.length) {
                param1.writeShort((this.attackers[_loc2_]).getTypeId());
                (this.attackers[_loc2_]).serialize(param1);
                _loc2_++;
            }
            param1.writeShort(this.defenders.length);
            var _loc3_: number = 0;
            while (_loc3_ < this.defenders.length) {
                param1.writeShort((this.defenders[_loc3_]).getTypeId());
                (this.defenders[_loc3_]).serialize(param1);
                _loc3_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_MapRunningFightDetailsMessage(param1);
        }

        public deserializeAs_MapRunningFightDetailsMessage(param1: ICustomDataInput): void {
            var _loc6_: number = 0;
            var _loc7_: GameFightFighterLightInformations = null;
            var _loc8_: number = 0;
            var _loc9_: GameFightFighterLightInformations = null;
            this.fightId = param1.readInt();
            if (this.fightId < 0) {
                throw new Error('Forbidden value (' + this.fightId + ') on element of MapRunningFightDetailsMessage.fightId.');
            }
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc6_ = param1.readUnsignedShort();
                _loc7_ = <GameFightFighterLightInformations>ProtocolTypeManager.getInstance(GameFightFighterLightInformations, _loc6_);
                _loc7_.deserialize(param1);
                this.attackers.push(_loc7_);
                _loc3_++;
            }
            var _loc4_: number = param1.readUnsignedShort();
            var _loc5_: number = 0;
            while (_loc5_ < _loc4_) {
            _loc8_ = param1.readUnsignedShort();
                _loc9_ = <GameFightFighterLightInformations>ProtocolTypeManager.getInstance(GameFightFighterLightInformations, _loc8_);
                _loc9_.deserialize(param1);
                this.defenders.push(_loc9_);
                _loc5_++;
            }

        }
    }
    export class MapRunningFightDetailsExtendedMessage extends MapRunningFightDetailsMessage {
        public static ID: number = 6500;

        namedPartyTeams: NamedPartyTeam[];

        constructor() {
            this.namedPartyTeams = [];
            super();
        }

        public getMessageId(): number {
            return MapRunningFightDetailsExtendedMessage.ID;
        }

        public reset(): void {
            this.namedPartyTeams = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_MapRunningFightDetailsExtendedMessage(param1);
        }

        public serializeAs_MapRunningFightDetailsExtendedMessage(param1: ICustomDataOutput): void {
            super.serializeAs_MapRunningFightDetailsMessage(param1);
            param1.writeShort(this.namedPartyTeams.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.namedPartyTeams.length) {
                (this.namedPartyTeams[_loc2_]).serializeAs_NamedPartyTeam(param1);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_MapRunningFightDetailsExtendedMessage(param1);
        }

        public deserializeAs_MapRunningFightDetailsExtendedMessage(param1: ICustomDataInput): void {
            var _loc4_: NamedPartyTeam = null;
            super.deserialize(param1);
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = new NamedPartyTeam();
                _loc4_.deserialize(param1);
                this.namedPartyTeams.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class MapRunningFightDetailsRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5750;

        fightId: number;

        constructor() {
            this.fightId = 0;
            super();
        }

        public getMessageId(): number {
            return MapRunningFightDetailsRequestMessage.ID;
        }

        public reset(): void {
            this.fightId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_MapRunningFightDetailsRequestMessage(param1);
        }

        public serializeAs_MapRunningFightDetailsRequestMessage(param1: ICustomDataOutput): void {
            if (this.fightId < 0) {
                throw new Error('Forbidden value (' + this.fightId + ') on element fightId.');
            }
            param1.writeInt(this.fightId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_MapRunningFightDetailsRequestMessage(param1);
        }

        public deserializeAs_MapRunningFightDetailsRequestMessage(param1: ICustomDataInput): void {
            this.fightId = param1.readInt();
            if (this.fightId < 0) {
                throw new Error('Forbidden value (' + this.fightId + ') on element of MapRunningFightDetailsRequestMessage.fightId.');
            }

        }
    }
    export class MapRunningFightListMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5743;

        fights: FightExternalInformations[];

        constructor() {
            this.fights = [];
            super();
        }

        public getMessageId(): number {
            return MapRunningFightListMessage.ID;
        }

        public reset(): void {
            this.fights = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_MapRunningFightListMessage(param1);
        }

        public serializeAs_MapRunningFightListMessage(param1: ICustomDataOutput): void {
            param1.writeShort(this.fights.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.fights.length) {
                (this.fights[_loc2_]).serializeAs_FightExternalInformations(param1);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_MapRunningFightListMessage(param1);
        }

        public deserializeAs_MapRunningFightListMessage(param1: ICustomDataInput): void {
            var _loc4_: FightExternalInformations = null;
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = new FightExternalInformations();
                _loc4_.deserialize(param1);
                this.fights.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class MapRunningFightListRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5742;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return MapRunningFightListRequestMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_MapRunningFightListRequestMessage(param1);
        }

        public serializeAs_MapRunningFightListRequestMessage(param1: ICustomDataOutput): void {

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_MapRunningFightListRequestMessage(param1);
        }

        public deserializeAs_MapRunningFightListRequestMessage(param1: ICustomDataInput): void {

        }
    }
    export class StopToListenRunningFightRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6124;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return StopToListenRunningFightRequestMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_StopToListenRunningFightRequestMessage(param1);
        }

        public serializeAs_StopToListenRunningFightRequestMessage(param1: ICustomDataOutput): void {

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_StopToListenRunningFightRequestMessage(param1);
        }

        public deserializeAs_StopToListenRunningFightRequestMessage(param1: ICustomDataInput): void {

        }
    }
    export class TeleportOnSameMapMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6048;

        targetId: number;
        cellId: number;

        constructor() {
            this.targetId = 0;
            this.cellId = 0;
            super();
        }

        public getMessageId(): number {
            return TeleportOnSameMapMessage.ID;
        }

        public reset(): void {
            this.targetId = 0;
            this.cellId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_TeleportOnSameMapMessage(param1);
        }

        public serializeAs_TeleportOnSameMapMessage(param1: ICustomDataOutput): void {
            param1.writeInt(this.targetId);
            if (this.cellId < 0 || this.cellId > 559) {
                throw new Error('Forbidden value (' + this.cellId + ') on element cellId.');
            }
            param1.writeVarShort(this.cellId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_TeleportOnSameMapMessage(param1);
        }

        public deserializeAs_TeleportOnSameMapMessage(param1: ICustomDataInput): void {
            this.targetId = param1.readInt();
            this.cellId = param1.readVarUhShort();
            if (this.cellId < 0 || this.cellId > 559) {
                throw new Error('Forbidden value (' + this.cellId + ') on element of TeleportOnSameMapMessage.cellId.');
            }

        }
    }
    export class GameRolePlayFreeSoulRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 745;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return GameRolePlayFreeSoulRequestMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameRolePlayFreeSoulRequestMessage(param1);
        }

        public serializeAs_GameRolePlayFreeSoulRequestMessage(param1: ICustomDataOutput): void {

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameRolePlayFreeSoulRequestMessage(param1);
        }

        public deserializeAs_GameRolePlayFreeSoulRequestMessage(param1: ICustomDataInput): void {

        }
    }
    export class GameRolePlayGameOverMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 746;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return GameRolePlayGameOverMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameRolePlayGameOverMessage(param1);
        }

        public serializeAs_GameRolePlayGameOverMessage(param1: ICustomDataOutput): void {

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameRolePlayGameOverMessage(param1);
        }

        public deserializeAs_GameRolePlayGameOverMessage(param1: ICustomDataInput): void {

        }
    }
    export class GameRolePlayPlayerLifeStatusMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5996;

        state: number;

        constructor() {
            this.state = 0;
            super();
        }

        public getMessageId(): number {
            return GameRolePlayPlayerLifeStatusMessage.ID;
        }

        public reset(): void {
            this.state = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameRolePlayPlayerLifeStatusMessage(param1);
        }

        public serializeAs_GameRolePlayPlayerLifeStatusMessage(param1: ICustomDataOutput): void {
            param1.writeByte(this.state);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameRolePlayPlayerLifeStatusMessage(param1);
        }

        public deserializeAs_GameRolePlayPlayerLifeStatusMessage(param1: ICustomDataInput): void {
            this.state = param1.readByte();
            if (this.state < 0) {
                throw new Error('Forbidden value (' + this.state + ') on element of GameRolePlayPlayerLifeStatusMessage.state.');
            }

        }
    }
    export class WarnOnPermaDeathMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6512;

        enable: boolean;

        constructor() {
            this.enable = false;
            super();
        }

        public getMessageId(): number {
            return WarnOnPermaDeathMessage.ID;
        }

        public reset(): void {
            this.enable = false;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_WarnOnPermaDeathMessage(param1);
        }

        public serializeAs_WarnOnPermaDeathMessage(param1: ICustomDataOutput): void {
            param1.writeBoolean(this.enable);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_WarnOnPermaDeathMessage(param1);
        }

        public deserializeAs_WarnOnPermaDeathMessage(param1: ICustomDataInput): void {
            this.enable = param1.readBoolean();

        }
    }
    export class GameRolePlayDelayedActionFinishedMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6150;

        delayedCharacterId: number;
        delayTypeId: number;

        constructor() {
            this.delayedCharacterId = 0;
            this.delayTypeId = 0;
            super();
        }

        public getMessageId(): number {
            return GameRolePlayDelayedActionFinishedMessage.ID;
        }

        public reset(): void {
            this.delayedCharacterId = 0;
            this.delayTypeId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameRolePlayDelayedActionFinishedMessage(param1);
        }

        public serializeAs_GameRolePlayDelayedActionFinishedMessage(param1: ICustomDataOutput): void {
            param1.writeInt(this.delayedCharacterId);
            param1.writeByte(this.delayTypeId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameRolePlayDelayedActionFinishedMessage(param1);
        }

        public deserializeAs_GameRolePlayDelayedActionFinishedMessage(param1: ICustomDataInput): void {
            this.delayedCharacterId = param1.readInt();
            this.delayTypeId = param1.readByte();
            if (this.delayTypeId < 0) {
                throw new Error('Forbidden value (' + this.delayTypeId + ') on element of GameRolePlayDelayedActionFinishedMessage.delayTypeId.');
            }

        }
    }
    export class GameRolePlayDelayedActionMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6153;

        delayedCharacterId: number;
        delayTypeId: number;
        delayEndTime: number;

        constructor() {
            this.delayedCharacterId = 0;
            this.delayTypeId = 0;
            this.delayEndTime = 0;
            super();
        }

        public getMessageId(): number {
            return GameRolePlayDelayedActionMessage.ID;
        }

        public reset(): void {
            this.delayedCharacterId = 0;
            this.delayTypeId = 0;
            this.delayEndTime = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameRolePlayDelayedActionMessage(param1);
        }

        public serializeAs_GameRolePlayDelayedActionMessage(param1: ICustomDataOutput): void {
            param1.writeInt(this.delayedCharacterId);
            param1.writeByte(this.delayTypeId);
            if (this.delayEndTime < 0 || this.delayEndTime > 9.007199254740992E15) {
                throw new Error('Forbidden value (' + this.delayEndTime + ') on element delayEndTime.');
            }
            param1.writeDouble(this.delayEndTime);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameRolePlayDelayedActionMessage(param1);
        }

        public deserializeAs_GameRolePlayDelayedActionMessage(param1: ICustomDataInput): void {
            this.delayedCharacterId = param1.readInt();
            this.delayTypeId = param1.readByte();
            if (this.delayTypeId < 0) {
                throw new Error('Forbidden value (' + this.delayTypeId + ') on element of GameRolePlayDelayedActionMessage.delayTypeId.');
            }
            this.delayEndTime = param1.readDouble();
            if (this.delayEndTime < 0 || this.delayEndTime > 9.007199254740992E15) {
                throw new Error('Forbidden value (' + this.delayEndTime + ') on element of GameRolePlayDelayedActionMessage.delayEndTime.');
            }

        }
    }
    export class GameRolePlayDelayedObjectUseMessage extends GameRolePlayDelayedActionMessage {
        public static ID: number = 6425;

        objectGID: number;

        constructor() {
            this.objectGID = 0;
            super();
        }

        public getMessageId(): number {
            return GameRolePlayDelayedObjectUseMessage.ID;
        }

        public reset(): void {
            this.objectGID = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameRolePlayDelayedObjectUseMessage(param1);
        }

        public serializeAs_GameRolePlayDelayedObjectUseMessage(param1: ICustomDataOutput): void {
            super.serializeAs_GameRolePlayDelayedActionMessage(param1);
            if (this.objectGID < 0) {
                throw new Error('Forbidden value (' + this.objectGID + ') on element objectGID.');
            }
            param1.writeVarShort(this.objectGID);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameRolePlayDelayedObjectUseMessage(param1);
        }

        public deserializeAs_GameRolePlayDelayedObjectUseMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.objectGID = param1.readVarUhShort();
            if (this.objectGID < 0) {
                throw new Error('Forbidden value (' + this.objectGID + ') on element of GameRolePlayDelayedObjectUseMessage.objectGID.');
            }

        }
    }
    export class ComicReadingBeginMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6536;

        comicId: number;

        constructor() {
            this.comicId = 0;
            super();
        }

        public getMessageId(): number {
            return ComicReadingBeginMessage.ID;
        }

        public reset(): void {
            this.comicId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ComicReadingBeginMessage(param1);
        }

        public serializeAs_ComicReadingBeginMessage(param1: ICustomDataOutput): void {
            if (this.comicId < 0) {
                throw new Error('Forbidden value (' + this.comicId + ') on element comicId.');
            }
            param1.writeVarShort(this.comicId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ComicReadingBeginMessage(param1);
        }

        public deserializeAs_ComicReadingBeginMessage(param1: ICustomDataInput): void {
            this.comicId = param1.readVarUhShort();
            if (this.comicId < 0) {
                throw new Error('Forbidden value (' + this.comicId + ') on element of ComicReadingBeginMessage.comicId.');
            }

        }
    }
    export class DocumentReadingBeginMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5675;

        documentId: number;

        constructor() {
            this.documentId = 0;
            super();
        }

        public getMessageId(): number {
            return DocumentReadingBeginMessage.ID;
        }

        public reset(): void {
            this.documentId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_DocumentReadingBeginMessage(param1);
        }

        public serializeAs_DocumentReadingBeginMessage(param1: ICustomDataOutput): void {
            if (this.documentId < 0) {
                throw new Error('Forbidden value (' + this.documentId + ') on element documentId.');
            }
            param1.writeVarShort(this.documentId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_DocumentReadingBeginMessage(param1);
        }

        public deserializeAs_DocumentReadingBeginMessage(param1: ICustomDataInput): void {
            this.documentId = param1.readVarUhShort();
            if (this.documentId < 0) {
                throw new Error('Forbidden value (' + this.documentId + ') on element of DocumentReadingBeginMessage.documentId.');
            }

        }
    }
    export class EmoteAddMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5644;

        emoteId: number;

        constructor() {
            this.emoteId = 0;
            super();
        }

        public getMessageId(): number {
            return EmoteAddMessage.ID;
        }

        public reset(): void {
            this.emoteId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_EmoteAddMessage(param1);
        }

        public serializeAs_EmoteAddMessage(param1: ICustomDataOutput): void {
            if (this.emoteId < 0 || this.emoteId > 255) {
                throw new Error('Forbidden value (' + this.emoteId + ') on element emoteId.');
            }
            param1.writeByte(this.emoteId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_EmoteAddMessage(param1);
        }

        public deserializeAs_EmoteAddMessage(param1: ICustomDataInput): void {
            this.emoteId = param1.readUnsignedByte();
            if (this.emoteId < 0 || this.emoteId > 255) {
                throw new Error('Forbidden value (' + this.emoteId + ') on element of EmoteAddMessage.emoteId.');
            }

        }
    }
    export class EmoteListMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5689;

        emoteIds: number[];

        constructor() {
            this.emoteIds = [];
            super();
        }

        public getMessageId(): number {
            return EmoteListMessage.ID;
        }

        public reset(): void {
            this.emoteIds = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_EmoteListMessage(param1);
        }

        public serializeAs_EmoteListMessage(param1: ICustomDataOutput): void {
            param1.writeShort(this.emoteIds.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.emoteIds.length) {
                if (this.emoteIds[_loc2_] < 0 || this.emoteIds[_loc2_] > 255) {
                    throw new Error('Forbidden value (' + this.emoteIds[_loc2_] + ') on element 1 (starting at 1) of emoteIds.');
                }
                param1.writeByte(this.emoteIds[_loc2_]);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_EmoteListMessage(param1);
        }

        public deserializeAs_EmoteListMessage(param1: ICustomDataInput): void {
            var _loc4_: number = 0;
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = param1.readUnsignedByte();
                if (_loc4_ < 0 || _loc4_ > 255) {
                    throw new Error('Forbidden value (' + _loc4_ + ') on elements of emoteIds.');
                }
                this.emoteIds.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class EmotePlayAbstractMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5690;

        emoteId: number;
        emoteStartTime: number;

        constructor() {
            this.emoteId = 0;
            this.emoteStartTime = 0;
            super();
        }

        public getMessageId(): number {
            return EmotePlayAbstractMessage.ID;
        }

        public reset(): void {
            this.emoteId = 0;
            this.emoteStartTime = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_EmotePlayAbstractMessage(param1);
        }

        public serializeAs_EmotePlayAbstractMessage(param1: ICustomDataOutput): void {
            if (this.emoteId < 0 || this.emoteId > 255) {
                throw new Error('Forbidden value (' + this.emoteId + ') on element emoteId.');
            }
            param1.writeByte(this.emoteId);
            if (this.emoteStartTime < -9.007199254740992E15 || this.emoteStartTime > 9.007199254740992E15) {
                throw new Error('Forbidden value (' + this.emoteStartTime + ') on element emoteStartTime.');
            }
            param1.writeDouble(this.emoteStartTime);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_EmotePlayAbstractMessage(param1);
        }

        public deserializeAs_EmotePlayAbstractMessage(param1: ICustomDataInput): void {
            this.emoteId = param1.readUnsignedByte();
            if (this.emoteId < 0 || this.emoteId > 255) {
                throw new Error('Forbidden value (' + this.emoteId + ') on element of EmotePlayAbstractMessage.emoteId.');
            }
            this.emoteStartTime = param1.readDouble();
            if (this.emoteStartTime < -9.007199254740992E15 || this.emoteStartTime > 9.007199254740992E15) {
                throw new Error('Forbidden value (' + this.emoteStartTime + ') on element of EmotePlayAbstractMessage.emoteStartTime.');
            }

        }
    }
    export class EmotePlayErrorMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5688;

        emoteId: number;

        constructor() {
            this.emoteId = 0;
            super();
        }

        public getMessageId(): number {
            return EmotePlayErrorMessage.ID;
        }

        public reset(): void {
            this.emoteId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_EmotePlayErrorMessage(param1);
        }

        public serializeAs_EmotePlayErrorMessage(param1: ICustomDataOutput): void {
            if (this.emoteId < 0 || this.emoteId > 255) {
                throw new Error('Forbidden value (' + this.emoteId + ') on element emoteId.');
            }
            param1.writeByte(this.emoteId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_EmotePlayErrorMessage(param1);
        }

        public deserializeAs_EmotePlayErrorMessage(param1: ICustomDataInput): void {
            this.emoteId = param1.readUnsignedByte();
            if (this.emoteId < 0 || this.emoteId > 255) {
                throw new Error('Forbidden value (' + this.emoteId + ') on element of EmotePlayErrorMessage.emoteId.');
            }

        }
    }
    export class EmotePlayMassiveMessage extends EmotePlayAbstractMessage {
        public static ID: number = 5691;

        actorIds: number[];

        constructor() {
            this.actorIds = [];
            super();
        }

        public getMessageId(): number {
            return EmotePlayMassiveMessage.ID;
        }

        public reset(): void {
            this.actorIds = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_EmotePlayMassiveMessage(param1);
        }

        public serializeAs_EmotePlayMassiveMessage(param1: ICustomDataOutput): void {
            super.serializeAs_EmotePlayAbstractMessage(param1);
            param1.writeShort(this.actorIds.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.actorIds.length) {
                param1.writeInt(this.actorIds[_loc2_]);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_EmotePlayMassiveMessage(param1);
        }

        public deserializeAs_EmotePlayMassiveMessage(param1: ICustomDataInput): void {
            var _loc4_: any = 0;
            super.deserialize(param1);
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = param1.readInt();
                this.actorIds.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class EmotePlayMessage extends EmotePlayAbstractMessage {
        public static ID: number = 5683;

        actorId: number;
        accountId: number;

        constructor() {
            this.actorId = 0;
            this.accountId = 0;
            super();
        }

        public getMessageId(): number {
            return EmotePlayMessage.ID;
        }

        public reset(): void {
            this.actorId = 0;
            this.accountId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_EmotePlayMessage(param1);
        }

        public serializeAs_EmotePlayMessage(param1: ICustomDataOutput): void {
            super.serializeAs_EmotePlayAbstractMessage(param1);
            param1.writeInt(this.actorId);
            if (this.accountId < 0) {
                throw new Error('Forbidden value (' + this.accountId + ') on element accountId.');
            }
            param1.writeInt(this.accountId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_EmotePlayMessage(param1);
        }

        public deserializeAs_EmotePlayMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.actorId = param1.readInt();
            this.accountId = param1.readInt();
            if (this.accountId < 0) {
                throw new Error('Forbidden value (' + this.accountId + ') on element of EmotePlayMessage.accountId.');
            }

        }
    }
    export class EmotePlayRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5685;

        emoteId: number;

        constructor() {
            this.emoteId = 0;
            super();
        }

        public getMessageId(): number {
            return EmotePlayRequestMessage.ID;
        }

        public reset(): void {
            this.emoteId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_EmotePlayRequestMessage(param1);
        }

        public serializeAs_EmotePlayRequestMessage(param1: ICustomDataOutput): void {
            if (this.emoteId < 0 || this.emoteId > 255) {
                throw new Error('Forbidden value (' + this.emoteId + ') on element emoteId.');
            }
            param1.writeByte(this.emoteId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_EmotePlayRequestMessage(param1);
        }

        public deserializeAs_EmotePlayRequestMessage(param1: ICustomDataInput): void {
            this.emoteId = param1.readUnsignedByte();
            if (this.emoteId < 0 || this.emoteId > 255) {
                throw new Error('Forbidden value (' + this.emoteId + ') on element of EmotePlayRequestMessage.emoteId.');
            }

        }
    }
    export class EmoteRemoveMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5687;

        emoteId: number;

        constructor() {
            this.emoteId = 0;
            super();
        }

        public getMessageId(): number {
            return EmoteRemoveMessage.ID;
        }

        public reset(): void {
            this.emoteId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_EmoteRemoveMessage(param1);
        }

        public serializeAs_EmoteRemoveMessage(param1: ICustomDataOutput): void {
            if (this.emoteId < 0 || this.emoteId > 255) {
                throw new Error('Forbidden value (' + this.emoteId + ') on element emoteId.');
            }
            param1.writeByte(this.emoteId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_EmoteRemoveMessage(param1);
        }

        public deserializeAs_EmoteRemoveMessage(param1: ICustomDataInput): void {
            this.emoteId = param1.readUnsignedByte();
            if (this.emoteId < 0 || this.emoteId > 255) {
                throw new Error('Forbidden value (' + this.emoteId + ') on element of EmoteRemoveMessage.emoteId.');
            }

        }
    }
    export class GameRolePlayAggressionMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6073;

        attackerId: number;
        defenderId: number;

        constructor() {
            this.attackerId = 0;
            this.defenderId = 0;
            super();
        }

        public getMessageId(): number {
            return GameRolePlayAggressionMessage.ID;
        }

        public reset(): void {
            this.attackerId = 0;
            this.defenderId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameRolePlayAggressionMessage(param1);
        }

        public serializeAs_GameRolePlayAggressionMessage(param1: ICustomDataOutput): void {
            if (this.attackerId < 0) {
                throw new Error('Forbidden value (' + this.attackerId + ') on element attackerId.');
            }
            param1.writeVarInt(this.attackerId);
            if (this.defenderId < 0) {
                throw new Error('Forbidden value (' + this.defenderId + ') on element defenderId.');
            }
            param1.writeVarInt(this.defenderId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameRolePlayAggressionMessage(param1);
        }

        public deserializeAs_GameRolePlayAggressionMessage(param1: ICustomDataInput): void {
            this.attackerId = param1.readVarUhInt();
            if (this.attackerId < 0) {
                throw new Error('Forbidden value (' + this.attackerId + ') on element of GameRolePlayAggressionMessage.attackerId.');
            }
            this.defenderId = param1.readVarUhInt();
            if (this.defenderId < 0) {
                throw new Error('Forbidden value (' + this.defenderId + ') on element of GameRolePlayAggressionMessage.defenderId.');
            }

        }
    }
    export class GameRolePlayAttackMonsterRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6191;

        monsterGroupId: number;

        constructor() {
            this.monsterGroupId = 0;
            super();
        }

        public getMessageId(): number {
            return GameRolePlayAttackMonsterRequestMessage.ID;
        }

        public reset(): void {
            this.monsterGroupId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameRolePlayAttackMonsterRequestMessage(param1);
        }

        public serializeAs_GameRolePlayAttackMonsterRequestMessage(param1: ICustomDataOutput): void {
            param1.writeInt(this.monsterGroupId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameRolePlayAttackMonsterRequestMessage(param1);
        }

        public deserializeAs_GameRolePlayAttackMonsterRequestMessage(param1: ICustomDataInput): void {
            this.monsterGroupId = param1.readInt();

        }
    }
    export class GameRolePlayFightRequestCanceledMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5822;

        fightId: number;
        sourceId: number;
        targetId: number;

        constructor() {
            this.fightId = 0;
            this.sourceId = 0;
            this.targetId = 0;
            super();
        }

        public getMessageId(): number {
            return GameRolePlayFightRequestCanceledMessage.ID;
        }

        public reset(): void {
            this.fightId = 0;
            this.sourceId = 0;
            this.targetId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameRolePlayFightRequestCanceledMessage(param1);
        }

        public serializeAs_GameRolePlayFightRequestCanceledMessage(param1: ICustomDataOutput): void {
            param1.writeInt(this.fightId);
            if (this.sourceId < 0) {
                throw new Error('Forbidden value (' + this.sourceId + ') on element sourceId.');
            }
            param1.writeVarInt(this.sourceId);
            param1.writeInt(this.targetId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameRolePlayFightRequestCanceledMessage(param1);
        }

        public deserializeAs_GameRolePlayFightRequestCanceledMessage(param1: ICustomDataInput): void {
            this.fightId = param1.readInt();
            this.sourceId = param1.readVarUhInt();
            if (this.sourceId < 0) {
                throw new Error('Forbidden value (' + this.sourceId + ') on element of GameRolePlayFightRequestCanceledMessage.sourceId.');
            }
            this.targetId = param1.readInt();

        }
    }
    export class GameRolePlayPlayerFightFriendlyAnswerMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5732;

        fightId: number;
        accept: boolean;

        constructor() {
            this.fightId = 0;
            this.accept = false;
            super();
        }

        public getMessageId(): number {
            return GameRolePlayPlayerFightFriendlyAnswerMessage.ID;
        }

        public reset(): void {
            this.fightId = 0;
            this.accept = false;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameRolePlayPlayerFightFriendlyAnswerMessage(param1);
        }

        public serializeAs_GameRolePlayPlayerFightFriendlyAnswerMessage(param1: ICustomDataOutput): void {
            param1.writeInt(this.fightId);
            param1.writeBoolean(this.accept);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameRolePlayPlayerFightFriendlyAnswerMessage(param1);
        }

        public deserializeAs_GameRolePlayPlayerFightFriendlyAnswerMessage(param1: ICustomDataInput): void {
            this.fightId = param1.readInt();
            this.accept = param1.readBoolean();

        }
    }
    export class GameRolePlayPlayerFightFriendlyAnsweredMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5733;

        fightId: number;
        sourceId: number;
        targetId: number;
        accept: boolean;

        constructor() {
            this.fightId = 0;
            this.sourceId = 0;
            this.targetId = 0;
            this.accept = false;
            super();
        }

        public getMessageId(): number {
            return GameRolePlayPlayerFightFriendlyAnsweredMessage.ID;
        }

        public reset(): void {
            this.fightId = 0;
            this.sourceId = 0;
            this.targetId = 0;
            this.accept = false;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameRolePlayPlayerFightFriendlyAnsweredMessage(param1);
        }

        public serializeAs_GameRolePlayPlayerFightFriendlyAnsweredMessage(param1: ICustomDataOutput): void {
            param1.writeInt(this.fightId);
            if (this.sourceId < 0) {
                throw new Error('Forbidden value (' + this.sourceId + ') on element sourceId.');
            }
            param1.writeVarInt(this.sourceId);
            if (this.targetId < 0) {
                throw new Error('Forbidden value (' + this.targetId + ') on element targetId.');
            }
            param1.writeVarInt(this.targetId);
            param1.writeBoolean(this.accept);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameRolePlayPlayerFightFriendlyAnsweredMessage(param1);
        }

        public deserializeAs_GameRolePlayPlayerFightFriendlyAnsweredMessage(param1: ICustomDataInput): void {
            this.fightId = param1.readInt();
            this.sourceId = param1.readVarUhInt();
            if (this.sourceId < 0) {
                throw new Error('Forbidden value (' + this.sourceId + ') on element of GameRolePlayPlayerFightFriendlyAnsweredMessage.sourceId.');
            }
            this.targetId = param1.readVarUhInt();
            if (this.targetId < 0) {
                throw new Error('Forbidden value (' + this.targetId + ') on element of GameRolePlayPlayerFightFriendlyAnsweredMessage.targetId.');
            }
            this.accept = param1.readBoolean();

        }
    }
    export class GameRolePlayPlayerFightFriendlyRequestedMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5937;

        fightId: number;
        sourceId: number;
        targetId: number;

        constructor() {
            this.fightId = 0;
            this.sourceId = 0;
            this.targetId = 0;
            super();
        }

        public getMessageId(): number {
            return GameRolePlayPlayerFightFriendlyRequestedMessage.ID;
        }

        public reset(): void {
            this.fightId = 0;
            this.sourceId = 0;
            this.targetId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameRolePlayPlayerFightFriendlyRequestedMessage(param1);
        }

        public serializeAs_GameRolePlayPlayerFightFriendlyRequestedMessage(param1: ICustomDataOutput): void {
            if (this.fightId < 0) {
                throw new Error('Forbidden value (' + this.fightId + ') on element fightId.');
            }
            param1.writeInt(this.fightId);
            if (this.sourceId < 0) {
                throw new Error('Forbidden value (' + this.sourceId + ') on element sourceId.');
            }
            param1.writeVarInt(this.sourceId);
            if (this.targetId < 0) {
                throw new Error('Forbidden value (' + this.targetId + ') on element targetId.');
            }
            param1.writeVarInt(this.targetId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameRolePlayPlayerFightFriendlyRequestedMessage(param1);
        }

        public deserializeAs_GameRolePlayPlayerFightFriendlyRequestedMessage(param1: ICustomDataInput): void {
            this.fightId = param1.readInt();
            if (this.fightId < 0) {
                throw new Error('Forbidden value (' + this.fightId + ') on element of GameRolePlayPlayerFightFriendlyRequestedMessage.fightId.');
            }
            this.sourceId = param1.readVarUhInt();
            if (this.sourceId < 0) {
                throw new Error('Forbidden value (' + this.sourceId + ') on element of GameRolePlayPlayerFightFriendlyRequestedMessage.sourceId.');
            }
            this.targetId = param1.readVarUhInt();
            if (this.targetId < 0) {
                throw new Error('Forbidden value (' + this.targetId + ') on element of GameRolePlayPlayerFightFriendlyRequestedMessage.targetId.');
            }

        }
    }
    export class GameRolePlayPlayerFightRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5731;

        targetId: number;
        targetCellId: number;
        friendly: boolean;

        constructor() {
            this.targetId = 0;
            this.targetCellId = 0;
            this.friendly = false;
            super();
        }

        public getMessageId(): number {
            return GameRolePlayPlayerFightRequestMessage.ID;
        }

        public reset(): void {
            this.targetId = 0;
            this.targetCellId = 0;
            this.friendly = false;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameRolePlayPlayerFightRequestMessage(param1);
        }

        public serializeAs_GameRolePlayPlayerFightRequestMessage(param1: ICustomDataOutput): void {
            if (this.targetId < 0) {
                throw new Error('Forbidden value (' + this.targetId + ') on element targetId.');
            }
            param1.writeVarInt(this.targetId);
            if (this.targetCellId < -1 || this.targetCellId > 559) {
                throw new Error('Forbidden value (' + this.targetCellId + ') on element targetCellId.');
            }
            param1.writeShort(this.targetCellId);
            param1.writeBoolean(this.friendly);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameRolePlayPlayerFightRequestMessage(param1);
        }

        public deserializeAs_GameRolePlayPlayerFightRequestMessage(param1: ICustomDataInput): void {
            this.targetId = param1.readVarUhInt();
            if (this.targetId < 0) {
                throw new Error('Forbidden value (' + this.targetId + ') on element of GameRolePlayPlayerFightRequestMessage.targetId.');
            }
            this.targetCellId = param1.readShort();
            if (this.targetCellId < -1 || this.targetCellId > 559) {
                throw new Error('Forbidden value (' + this.targetCellId + ') on element of GameRolePlayPlayerFightRequestMessage.targetCellId.');
            }
            this.friendly = param1.readBoolean();

        }
    }
    export class GameRolePlayRemoveChallengeMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 300;

        fightId: number;

        constructor() {
            this.fightId = 0;
            super();
        }

        public getMessageId(): number {
            return GameRolePlayRemoveChallengeMessage.ID;
        }

        public reset(): void {
            this.fightId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameRolePlayRemoveChallengeMessage(param1);
        }

        public serializeAs_GameRolePlayRemoveChallengeMessage(param1: ICustomDataOutput): void {
            param1.writeInt(this.fightId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameRolePlayRemoveChallengeMessage(param1);
        }

        public deserializeAs_GameRolePlayRemoveChallengeMessage(param1: ICustomDataInput): void {
            this.fightId = param1.readInt();

        }
    }
    export class GameRolePlayShowChallengeMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 301;

        commonsInfos: FightCommonInformations;

        constructor() {
            this.commonsInfos = new FightCommonInformations();
            super();
        }

        public getMessageId(): number {
            return GameRolePlayShowChallengeMessage.ID;
        }

        public reset(): void {
            this.commonsInfos = new FightCommonInformations();
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameRolePlayShowChallengeMessage(param1);
        }

        public serializeAs_GameRolePlayShowChallengeMessage(param1: ICustomDataOutput): void {
            this.commonsInfos.serializeAs_FightCommonInformations(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameRolePlayShowChallengeMessage(param1);
        }

        public deserializeAs_GameRolePlayShowChallengeMessage(param1: ICustomDataInput): void {
            this.commonsInfos = new FightCommonInformations();
            this.commonsInfos.deserialize(param1);

        }
    }
    export class GameRolePlayArenaFightAnswerMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6279;

        fightId: number;
        accept: boolean;

        constructor() {
            this.fightId = 0;
            this.accept = false;
            super();
        }

        public getMessageId(): number {
            return GameRolePlayArenaFightAnswerMessage.ID;
        }

        public reset(): void {
            this.fightId = 0;
            this.accept = false;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameRolePlayArenaFightAnswerMessage(param1);
        }

        public serializeAs_GameRolePlayArenaFightAnswerMessage(param1: ICustomDataOutput): void {
            param1.writeInt(this.fightId);
            param1.writeBoolean(this.accept);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameRolePlayArenaFightAnswerMessage(param1);
        }

        public deserializeAs_GameRolePlayArenaFightAnswerMessage(param1: ICustomDataInput): void {
            this.fightId = param1.readInt();
            this.accept = param1.readBoolean();

        }
    }
    export class GameRolePlayArenaFightPropositionMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6276;

        fightId: number;
        alliesId: number[];
        duration: number;

        constructor() {
            this.fightId = 0;
            this.alliesId = [];
            this.duration = 0;
            super();
        }

        public getMessageId(): number {
            return GameRolePlayArenaFightPropositionMessage.ID;
        }

        public reset(): void {
            this.fightId = 0;
            this.alliesId = [];
            this.duration = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameRolePlayArenaFightPropositionMessage(param1);
        }

        public serializeAs_GameRolePlayArenaFightPropositionMessage(param1: ICustomDataOutput): void {
            if (this.fightId < 0) {
                throw new Error('Forbidden value (' + this.fightId + ') on element fightId.');
            }
            param1.writeInt(this.fightId);
            param1.writeShort(this.alliesId.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.alliesId.length) {
                param1.writeInt(this.alliesId[_loc2_]);
                _loc2_++;
            }
            if (this.duration < 0) {
                throw new Error('Forbidden value (' + this.duration + ') on element duration.');
            }
            param1.writeVarShort(this.duration);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameRolePlayArenaFightPropositionMessage(param1);
        }

        public deserializeAs_GameRolePlayArenaFightPropositionMessage(param1: ICustomDataInput): void {
            var _loc4_: any = 0;
            this.fightId = param1.readInt();
            if (this.fightId < 0) {
                throw new Error('Forbidden value (' + this.fightId + ') on element of GameRolePlayArenaFightPropositionMessage.fightId.');
            }
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = param1.readInt();
                this.alliesId.push(_loc4_);
                _loc3_++;
            }
            this.duration = param1.readVarUhShort();
            if (this.duration < 0) {
                throw new Error('Forbidden value (' + this.duration + ') on element of GameRolePlayArenaFightPropositionMessage.duration.');
            }

        }
    }
    export class GameRolePlayArenaFighterStatusMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6281;

        fightId: number;
        playerId: number;
        accepted: boolean;

        constructor() {
            this.fightId = 0;
            this.playerId = 0;
            this.accepted = false;
            super();
        }

        public getMessageId(): number {
            return GameRolePlayArenaFighterStatusMessage.ID;
        }

        public reset(): void {
            this.fightId = 0;
            this.playerId = 0;
            this.accepted = false;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameRolePlayArenaFighterStatusMessage(param1);
        }

        public serializeAs_GameRolePlayArenaFighterStatusMessage(param1: ICustomDataOutput): void {
            param1.writeInt(this.fightId);
            param1.writeInt(this.playerId);
            param1.writeBoolean(this.accepted);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameRolePlayArenaFighterStatusMessage(param1);
        }

        public deserializeAs_GameRolePlayArenaFighterStatusMessage(param1: ICustomDataInput): void {
            this.fightId = param1.readInt();
            this.playerId = param1.readInt();
            this.accepted = param1.readBoolean();

        }
    }
    export class GameRolePlayArenaRegisterMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6280;

        battleMode: number;

        constructor() {
            this.battleMode = 3;
            super();
        }

        public getMessageId(): number {
            return GameRolePlayArenaRegisterMessage.ID;
        }

        public reset(): void {
            this.battleMode = 3;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameRolePlayArenaRegisterMessage(param1);
        }

        public serializeAs_GameRolePlayArenaRegisterMessage(param1: ICustomDataOutput): void {
            param1.writeInt(this.battleMode);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameRolePlayArenaRegisterMessage(param1);
        }

        public deserializeAs_GameRolePlayArenaRegisterMessage(param1: ICustomDataInput): void {
            this.battleMode = param1.readInt();
            if (this.battleMode < 0) {
                throw new Error('Forbidden value (' + this.battleMode + ') on element of GameRolePlayArenaRegisterMessage.battleMode.');
            }

        }
    }
    export class GameRolePlayArenaRegistrationStatusMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6284;

        registered: boolean;
        step: number;
        battleMode: number;

        constructor() {
            this.registered = false;
            this.step = 0;
            this.battleMode = 3;
            super();
        }

        public getMessageId(): number {
            return GameRolePlayArenaRegistrationStatusMessage.ID;
        }

        public reset(): void {
            this.registered = false;
            this.step = 0;
            this.battleMode = 3;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameRolePlayArenaRegistrationStatusMessage(param1);
        }

        public serializeAs_GameRolePlayArenaRegistrationStatusMessage(param1: ICustomDataOutput): void {
            param1.writeBoolean(this.registered);
            param1.writeByte(this.step);
            param1.writeInt(this.battleMode);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameRolePlayArenaRegistrationStatusMessage(param1);
        }

        public deserializeAs_GameRolePlayArenaRegistrationStatusMessage(param1: ICustomDataInput): void {
            this.registered = param1.readBoolean();
            this.step = param1.readByte();
            if (this.step < 0) {
                throw new Error('Forbidden value (' + this.step + ') on element of GameRolePlayArenaRegistrationStatusMessage.step.');
            }
            this.battleMode = param1.readInt();
            if (this.battleMode < 0) {
                throw new Error('Forbidden value (' + this.battleMode + ') on element of GameRolePlayArenaRegistrationStatusMessage.battleMode.');
            }

        }
    }
    export class GameRolePlayArenaSwitchToFightServerMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6575;

        address: string;
        port: number;
        ticket: number[];

        constructor() {
            this.address = '';
            this.port = 0;
            this.ticket = [];
            super();
        }

        public getMessageId(): number {
            return GameRolePlayArenaSwitchToFightServerMessage.ID;
        }

        public reset(): void {
            this.address = '';
            this.port = 0;
            this.ticket = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameRolePlayArenaSwitchToFightServerMessage(param1);
        }

        public serializeAs_GameRolePlayArenaSwitchToFightServerMessage(param1: ICustomDataOutput): void {
            param1.writeUTF(this.address);
            if (this.port < 0 || this.port > 65535) {
                throw new Error('Forbidden value (' + this.port + ') on element port.');
            }
            param1.writeShort(this.port);
            param1.writeVarInt(this.ticket.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.ticket.length) {
                param1.writeByte(this.ticket[_loc2_]);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameRolePlayArenaSwitchToFightServerMessage(param1);
        }

        public deserializeAs_GameRolePlayArenaSwitchToFightServerMessage(param1: ICustomDataInput): void {
            var _loc4_: any = 0;
            this.address = param1.readUTF();
            this.port = param1.readUnsignedShort();
            if (this.port < 0 || this.port > 65535) {
                throw new Error('Forbidden value (' + this.port + ') on element of GameRolePlayArenaSwitchToFightServerMessage.port.');
            }
            var _loc2_: number = param1.readVarInt();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = param1.readByte();
                this.ticket.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class GameRolePlayArenaSwitchToGameServerMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6574;

        validToken: boolean;
        ticket: number[];
        homeServerId: number;

        constructor() {
            this.validToken = false;
            this.ticket = [];
            this.homeServerId = 0;
            super();
        }

        public getMessageId(): number {
            return GameRolePlayArenaSwitchToGameServerMessage.ID;
        }

        public reset(): void {
            this.validToken = false;
            this.ticket = [];
            this.homeServerId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameRolePlayArenaSwitchToGameServerMessage(param1);
        }

        public serializeAs_GameRolePlayArenaSwitchToGameServerMessage(param1: ICustomDataOutput): void {
            param1.writeBoolean(this.validToken);
            param1.writeVarInt(this.ticket.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.ticket.length) {
                param1.writeByte(this.ticket[_loc2_]);
                _loc2_++;
            }
            param1.writeShort(this.homeServerId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameRolePlayArenaSwitchToGameServerMessage(param1);
        }

        public deserializeAs_GameRolePlayArenaSwitchToGameServerMessage(param1: ICustomDataInput): void {
            var _loc4_: any = 0;
            this.validToken = param1.readBoolean();
            var _loc2_: number = param1.readVarInt();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = param1.readByte();
                this.ticket.push(_loc4_);
                _loc3_++;
            }
            this.homeServerId = param1.readShort();

        }
    }
    export class GameRolePlayArenaUnregisterMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6282;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return GameRolePlayArenaUnregisterMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameRolePlayArenaUnregisterMessage(param1);
        }

        public serializeAs_GameRolePlayArenaUnregisterMessage(param1: ICustomDataOutput): void {

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameRolePlayArenaUnregisterMessage(param1);
        }

        public deserializeAs_GameRolePlayArenaUnregisterMessage(param1: ICustomDataInput): void {

        }
    }
    export class GameRolePlayArenaUpdatePlayerInfosMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6301;

        rank: number;
        bestDailyRank: number;
        bestRank: number;
        victoryCount: number;
        arenaFightcount: number;

        constructor() {
            this.rank = 0;
            this.bestDailyRank = 0;
            this.bestRank = 0;
            this.victoryCount = 0;
            this.arenaFightcount = 0;
            super();
        }

        public getMessageId(): number {
            return GameRolePlayArenaUpdatePlayerInfosMessage.ID;
        }

        public reset(): void {
            this.rank = 0;
            this.bestDailyRank = 0;
            this.bestRank = 0;
            this.victoryCount = 0;
            this.arenaFightcount = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameRolePlayArenaUpdatePlayerInfosMessage(param1);
        }

        public serializeAs_GameRolePlayArenaUpdatePlayerInfosMessage(param1: ICustomDataOutput): void {
            if (this.rank < 0 || this.rank > 2300) {
                throw new Error('Forbidden value (' + this.rank + ') on element rank.');
            }
            param1.writeVarShort(this.rank);
            if (this.bestDailyRank < 0 || this.bestDailyRank > 2300) {
                throw new Error('Forbidden value (' + this.bestDailyRank + ') on element bestDailyRank.');
            }
            param1.writeVarShort(this.bestDailyRank);
            if (this.bestRank < 0 || this.bestRank > 2300) {
                throw new Error('Forbidden value (' + this.bestRank + ') on element bestRank.');
            }
            param1.writeVarShort(this.bestRank);
            if (this.victoryCount < 0) {
                throw new Error('Forbidden value (' + this.victoryCount + ') on element victoryCount.');
            }
            param1.writeVarShort(this.victoryCount);
            if (this.arenaFightcount < 0) {
                throw new Error('Forbidden value (' + this.arenaFightcount + ') on element arenaFightcount.');
            }
            param1.writeVarShort(this.arenaFightcount);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameRolePlayArenaUpdatePlayerInfosMessage(param1);
        }

        public deserializeAs_GameRolePlayArenaUpdatePlayerInfosMessage(param1: ICustomDataInput): void {
            this.rank = param1.readVarUhShort();
            if (this.rank < 0 || this.rank > 2300) {
                throw new Error('Forbidden value (' + this.rank + ') on element of GameRolePlayArenaUpdatePlayerInfosMessage.rank.');
            }
            this.bestDailyRank = param1.readVarUhShort();
            if (this.bestDailyRank < 0 || this.bestDailyRank > 2300) {
                throw new Error('Forbidden value (' + this.bestDailyRank + ') on element of GameRolePlayArenaUpdatePlayerInfosMessage.bestDailyRank.');
            }
            this.bestRank = param1.readVarUhShort();
            if (this.bestRank < 0 || this.bestRank > 2300) {
                throw new Error('Forbidden value (' + this.bestRank + ') on element of GameRolePlayArenaUpdatePlayerInfosMessage.bestRank.');
            }
            this.victoryCount = param1.readVarUhShort();
            if (this.victoryCount < 0) {
                throw new Error('Forbidden value (' + this.victoryCount + ') on element of GameRolePlayArenaUpdatePlayerInfosMessage.victoryCount.');
            }
            this.arenaFightcount = param1.readVarUhShort();
            if (this.arenaFightcount < 0) {
                throw new Error('Forbidden value (' + this.arenaFightcount + ') on element of GameRolePlayArenaUpdatePlayerInfosMessage.arenaFightcount.');
            }

        }
    }
    export class AccountHouseMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6315;

        houses: AccountHouseInformations[];

        constructor() {
            this.houses = [];
            super();
        }

        public getMessageId(): number {
            return AccountHouseMessage.ID;
        }

        public reset(): void {
            this.houses = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_AccountHouseMessage(param1);
        }

        public serializeAs_AccountHouseMessage(param1: ICustomDataOutput): void {
            param1.writeShort(this.houses.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.houses.length) {
                (this.houses[_loc2_]).serializeAs_AccountHouseInformations(param1);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_AccountHouseMessage(param1);
        }

        public deserializeAs_AccountHouseMessage(param1: ICustomDataInput): void {
            var _loc4_: AccountHouseInformations = null;
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = new AccountHouseInformations();
                _loc4_.deserialize(param1);
                this.houses.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class HouseBuyRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5738;

        proposedPrice: number;

        constructor() {
            this.proposedPrice = 0;
            super();
        }

        public getMessageId(): number {
            return HouseBuyRequestMessage.ID;
        }

        public reset(): void {
            this.proposedPrice = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_HouseBuyRequestMessage(param1);
        }

        public serializeAs_HouseBuyRequestMessage(param1: ICustomDataOutput): void {
            if (this.proposedPrice < 0) {
                throw new Error('Forbidden value (' + this.proposedPrice + ') on element proposedPrice.');
            }
            param1.writeVarInt(this.proposedPrice);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_HouseBuyRequestMessage(param1);
        }

        public deserializeAs_HouseBuyRequestMessage(param1: ICustomDataInput): void {
            this.proposedPrice = param1.readVarUhInt();
            if (this.proposedPrice < 0) {
                throw new Error('Forbidden value (' + this.proposedPrice + ') on element of HouseBuyRequestMessage.proposedPrice.');
            }

        }
    }
    export class HouseBuyResultMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5735;

        houseId: number;
        bought: boolean;
        realPrice: number;

        constructor() {
            this.houseId = 0;
            this.bought = false;
            this.realPrice = 0;
            super();
        }

        public getMessageId(): number {
            return HouseBuyResultMessage.ID;
        }

        public reset(): void {
            this.houseId = 0;
            this.bought = false;
            this.realPrice = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_HouseBuyResultMessage(param1);
        }

        public serializeAs_HouseBuyResultMessage(param1: ICustomDataOutput): void {
            if (this.houseId < 0) {
                throw new Error('Forbidden value (' + this.houseId + ') on element houseId.');
            }
            param1.writeVarInt(this.houseId);
            param1.writeBoolean(this.bought);
            if (this.realPrice < 0) {
                throw new Error('Forbidden value (' + this.realPrice + ') on element realPrice.');
            }
            param1.writeVarInt(this.realPrice);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_HouseBuyResultMessage(param1);
        }

        public deserializeAs_HouseBuyResultMessage(param1: ICustomDataInput): void {
            this.houseId = param1.readVarUhInt();
            if (this.houseId < 0) {
                throw new Error('Forbidden value (' + this.houseId + ') on element of HouseBuyResultMessage.houseId.');
            }
            this.bought = param1.readBoolean();
            this.realPrice = param1.readVarUhInt();
            if (this.realPrice < 0) {
                throw new Error('Forbidden value (' + this.realPrice + ') on element of HouseBuyResultMessage.realPrice.');
            }

        }
    }
    export class HouseKickIndoorMerchantRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5661;

        cellId: number;

        constructor() {
            this.cellId = 0;
            super();
        }

        public getMessageId(): number {
            return HouseKickIndoorMerchantRequestMessage.ID;
        }

        public reset(): void {
            this.cellId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_HouseKickIndoorMerchantRequestMessage(param1);
        }

        public serializeAs_HouseKickIndoorMerchantRequestMessage(param1: ICustomDataOutput): void {
            if (this.cellId < 0 || this.cellId > 559) {
                throw new Error('Forbidden value (' + this.cellId + ') on element cellId.');
            }
            param1.writeVarShort(this.cellId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_HouseKickIndoorMerchantRequestMessage(param1);
        }

        public deserializeAs_HouseKickIndoorMerchantRequestMessage(param1: ICustomDataInput): void {
            this.cellId = param1.readVarUhShort();
            if (this.cellId < 0 || this.cellId > 559) {
                throw new Error('Forbidden value (' + this.cellId + ') on element of HouseKickIndoorMerchantRequestMessage.cellId.');
            }

        }
    }
    export class HouseKickRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5698;

        id: number;

        constructor() {
            this.id = 0;
            super();
        }

        public getMessageId(): number {
            return HouseKickRequestMessage.ID;
        }

        public reset(): void {
            this.id = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_HouseKickRequestMessage(param1);
        }

        public serializeAs_HouseKickRequestMessage(param1: ICustomDataOutput): void {
            if (this.id < 0) {
                throw new Error('Forbidden value (' + this.id + ') on element id.');
            }
            param1.writeVarInt(this.id);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_HouseKickRequestMessage(param1);
        }

        public deserializeAs_HouseKickRequestMessage(param1: ICustomDataInput): void {
            this.id = param1.readVarUhInt();
            if (this.id < 0) {
                throw new Error('Forbidden value (' + this.id + ') on element of HouseKickRequestMessage.id.');
            }

        }
    }
    export class LockableChangeCodeMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5666;

        code: string;

        constructor() {
            this.code = '';
            super();
        }

        public getMessageId(): number {
            return LockableChangeCodeMessage.ID;
        }

        public reset(): void {
            this.code = '';
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_LockableChangeCodeMessage(param1);
        }

        public serializeAs_LockableChangeCodeMessage(param1: ICustomDataOutput): void {
            param1.writeUTF(this.code);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_LockableChangeCodeMessage(param1);
        }

        public deserializeAs_LockableChangeCodeMessage(param1: ICustomDataInput): void {
            this.code = param1.readUTF();

        }
    }
    export class HouseLockFromInsideRequestMessage extends LockableChangeCodeMessage {
        public static ID: number = 5885;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return HouseLockFromInsideRequestMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_HouseLockFromInsideRequestMessage(param1);
        }

        public serializeAs_HouseLockFromInsideRequestMessage(param1: ICustomDataOutput): void {
            super.serializeAs_LockableChangeCodeMessage(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_HouseLockFromInsideRequestMessage(param1);
        }

        public deserializeAs_HouseLockFromInsideRequestMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);

        }
    }
    export class HousePropertiesMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5734;

        properties: HouseInformations;

        constructor() {
            this.properties = new HouseInformations();
            super();
        }

        public getMessageId(): number {
            return HousePropertiesMessage.ID;
        }

        public reset(): void {
            this.properties = new HouseInformations();
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_HousePropertiesMessage(param1);
        }

        public serializeAs_HousePropertiesMessage(param1: ICustomDataOutput): void {
            param1.writeShort(this.properties.getTypeId());
            this.properties.serialize(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_HousePropertiesMessage(param1);
        }

        public deserializeAs_HousePropertiesMessage(param1: ICustomDataInput): void {
            var _loc2_: number = param1.readUnsignedShort();
            this.properties = <HouseInformations>ProtocolTypeManager.getInstance(HouseInformations, _loc2_);
            this.properties.deserialize(param1);

        }
    }
    export class HouseSellRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5697;

        amount: number;

        constructor() {
            this.amount = 0;
            super();
        }

        public getMessageId(): number {
            return HouseSellRequestMessage.ID;
        }

        public reset(): void {
            this.amount = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_HouseSellRequestMessage(param1);
        }

        public serializeAs_HouseSellRequestMessage(param1: ICustomDataOutput): void {
            if (this.amount < 0) {
                throw new Error('Forbidden value (' + this.amount + ') on element amount.');
            }
            param1.writeVarInt(this.amount);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_HouseSellRequestMessage(param1);
        }

        public deserializeAs_HouseSellRequestMessage(param1: ICustomDataInput): void {
            this.amount = param1.readVarUhInt();
            if (this.amount < 0) {
                throw new Error('Forbidden value (' + this.amount + ') on element of HouseSellRequestMessage.amount.');
            }

        }
    }
    export class HouseSellFromInsideRequestMessage extends HouseSellRequestMessage {
        public static ID: number = 5884;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return HouseSellFromInsideRequestMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_HouseSellFromInsideRequestMessage(param1);
        }

        public serializeAs_HouseSellFromInsideRequestMessage(param1: ICustomDataOutput): void {
            super.serializeAs_HouseSellRequestMessage(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_HouseSellFromInsideRequestMessage(param1);
        }

        public deserializeAs_HouseSellFromInsideRequestMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);

        }
    }
    export class HouseSoldMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5737;

        houseId: number;
        realPrice: number;
        buyerName: string;

        constructor() {
            this.houseId = 0;
            this.realPrice = 0;
            this.buyerName = '';
            super();
        }

        public getMessageId(): number {
            return HouseSoldMessage.ID;
        }

        public reset(): void {
            this.houseId = 0;
            this.realPrice = 0;
            this.buyerName = '';
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_HouseSoldMessage(param1);
        }

        public serializeAs_HouseSoldMessage(param1: ICustomDataOutput): void {
            if (this.houseId < 0) {
                throw new Error('Forbidden value (' + this.houseId + ') on element houseId.');
            }
            param1.writeVarInt(this.houseId);
            if (this.realPrice < 0) {
                throw new Error('Forbidden value (' + this.realPrice + ') on element realPrice.');
            }
            param1.writeVarInt(this.realPrice);
            param1.writeUTF(this.buyerName);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_HouseSoldMessage(param1);
        }

        public deserializeAs_HouseSoldMessage(param1: ICustomDataInput): void {
            this.houseId = param1.readVarUhInt();
            if (this.houseId < 0) {
                throw new Error('Forbidden value (' + this.houseId + ') on element of HouseSoldMessage.houseId.');
            }
            this.realPrice = param1.readVarUhInt();
            if (this.realPrice < 0) {
                throw new Error('Forbidden value (' + this.realPrice + ') on element of HouseSoldMessage.realPrice.');
            }
            this.buyerName = param1.readUTF();

        }
    }
    export class HouseToSellFilterMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6137;

        areaId: number;
        atLeastNbRoom: number;
        atLeastNbChest: number;
        skillRequested: number;
        maxPrice: number;

        constructor() {
            this.areaId = 0;
            this.atLeastNbRoom = 0;
            this.atLeastNbChest = 0;
            this.skillRequested = 0;
            this.maxPrice = 0;
            super();
        }

        public getMessageId(): number {
            return HouseToSellFilterMessage.ID;
        }

        public reset(): void {
            this.areaId = 0;
            this.atLeastNbRoom = 0;
            this.atLeastNbChest = 0;
            this.skillRequested = 0;
            this.maxPrice = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_HouseToSellFilterMessage(param1);
        }

        public serializeAs_HouseToSellFilterMessage(param1: ICustomDataOutput): void {
            param1.writeInt(this.areaId);
            if (this.atLeastNbRoom < 0) {
                throw new Error('Forbidden value (' + this.atLeastNbRoom + ') on element atLeastNbRoom.');
            }
            param1.writeByte(this.atLeastNbRoom);
            if (this.atLeastNbChest < 0) {
                throw new Error('Forbidden value (' + this.atLeastNbChest + ') on element atLeastNbChest.');
            }
            param1.writeByte(this.atLeastNbChest);
            if (this.skillRequested < 0) {
                throw new Error('Forbidden value (' + this.skillRequested + ') on element skillRequested.');
            }
            param1.writeVarShort(this.skillRequested);
            if (this.maxPrice < 0) {
                throw new Error('Forbidden value (' + this.maxPrice + ') on element maxPrice.');
            }
            param1.writeVarInt(this.maxPrice);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_HouseToSellFilterMessage(param1);
        }

        public deserializeAs_HouseToSellFilterMessage(param1: ICustomDataInput): void {
            this.areaId = param1.readInt();
            this.atLeastNbRoom = param1.readByte();
            if (this.atLeastNbRoom < 0) {
                throw new Error('Forbidden value (' + this.atLeastNbRoom + ') on element of HouseToSellFilterMessage.atLeastNbRoom.');
            }
            this.atLeastNbChest = param1.readByte();
            if (this.atLeastNbChest < 0) {
                throw new Error('Forbidden value (' + this.atLeastNbChest + ') on element of HouseToSellFilterMessage.atLeastNbChest.');
            }
            this.skillRequested = param1.readVarUhShort();
            if (this.skillRequested < 0) {
                throw new Error('Forbidden value (' + this.skillRequested + ') on element of HouseToSellFilterMessage.skillRequested.');
            }
            this.maxPrice = param1.readVarUhInt();
            if (this.maxPrice < 0) {
                throw new Error('Forbidden value (' + this.maxPrice + ') on element of HouseToSellFilterMessage.maxPrice.');
            }

        }
    }
    export class HouseToSellListMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6140;

        pageIndex: number;
        totalPage: number;
        houseList: HouseInformationsForSell[];

        constructor() {
            this.pageIndex = 0;
            this.totalPage = 0;
            this.houseList = [];
            super();
        }

        public getMessageId(): number {
            return HouseToSellListMessage.ID;
        }

        public reset(): void {
            this.pageIndex = 0;
            this.totalPage = 0;
            this.houseList = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_HouseToSellListMessage(param1);
        }

        public serializeAs_HouseToSellListMessage(param1: ICustomDataOutput): void {
            if (this.pageIndex < 0) {
                throw new Error('Forbidden value (' + this.pageIndex + ') on element pageIndex.');
            }
            param1.writeVarShort(this.pageIndex);
            if (this.totalPage < 0) {
                throw new Error('Forbidden value (' + this.totalPage + ') on element totalPage.');
            }
            param1.writeVarShort(this.totalPage);
            param1.writeShort(this.houseList.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.houseList.length) {
                (this.houseList[_loc2_]).serializeAs_HouseInformationsForSell(param1);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_HouseToSellListMessage(param1);
        }

        public deserializeAs_HouseToSellListMessage(param1: ICustomDataInput): void {
            var _loc4_: HouseInformationsForSell = null;
            this.pageIndex = param1.readVarUhShort();
            if (this.pageIndex < 0) {
                throw new Error('Forbidden value (' + this.pageIndex + ') on element of HouseToSellListMessage.pageIndex.');
            }
            this.totalPage = param1.readVarUhShort();
            if (this.totalPage < 0) {
                throw new Error('Forbidden value (' + this.totalPage + ') on element of HouseToSellListMessage.totalPage.');
            }
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = new HouseInformationsForSell();
                _loc4_.deserialize(param1);
                this.houseList.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class HouseToSellListRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6139;

        pageIndex: number;

        constructor() {
            this.pageIndex = 0;
            super();
        }

        public getMessageId(): number {
            return HouseToSellListRequestMessage.ID;
        }

        public reset(): void {
            this.pageIndex = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_HouseToSellListRequestMessage(param1);
        }

        public serializeAs_HouseToSellListRequestMessage(param1: ICustomDataOutput): void {
            if (this.pageIndex < 0) {
                throw new Error('Forbidden value (' + this.pageIndex + ') on element pageIndex.');
            }
            param1.writeVarShort(this.pageIndex);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_HouseToSellListRequestMessage(param1);
        }

        public deserializeAs_HouseToSellListRequestMessage(param1: ICustomDataInput): void {
            this.pageIndex = param1.readVarUhShort();
            if (this.pageIndex < 0) {
                throw new Error('Forbidden value (' + this.pageIndex + ') on element of HouseToSellListRequestMessage.pageIndex.');
            }

        }
    }
    export class HouseGuildNoneMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5701;

        houseId: number;

        constructor() {
            this.houseId = 0;
            super();
        }

        public getMessageId(): number {
            return HouseGuildNoneMessage.ID;
        }

        public reset(): void {
            this.houseId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_HouseGuildNoneMessage(param1);
        }

        public serializeAs_HouseGuildNoneMessage(param1: ICustomDataOutput): void {
            if (this.houseId < 0) {
                throw new Error('Forbidden value (' + this.houseId + ') on element houseId.');
            }
            param1.writeVarInt(this.houseId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_HouseGuildNoneMessage(param1);
        }

        public deserializeAs_HouseGuildNoneMessage(param1: ICustomDataInput): void {
            this.houseId = param1.readVarUhInt();
            if (this.houseId < 0) {
                throw new Error('Forbidden value (' + this.houseId + ') on element of HouseGuildNoneMessage.houseId.');
            }

        }
    }
    export class HouseGuildRightsMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5703;

        houseId: number;
        guildInfo: GuildInformations;
        rights: number;

        constructor() {
            this.houseId = 0;
            this.guildInfo = new GuildInformations();
            this.rights = 0;
            super();
        }

        public getMessageId(): number {
            return HouseGuildRightsMessage.ID;
        }

        public reset(): void {
            this.houseId = 0;
            this.guildInfo = new GuildInformations();
            this.rights = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_HouseGuildRightsMessage(param1);
        }

        public serializeAs_HouseGuildRightsMessage(param1: ICustomDataOutput): void {
            if (this.houseId < 0) {
                throw new Error('Forbidden value (' + this.houseId + ') on element houseId.');
            }
            param1.writeVarInt(this.houseId);
            this.guildInfo.serializeAs_GuildInformations(param1);
            if (this.rights < 0) {
                throw new Error('Forbidden value (' + this.rights + ') on element rights.');
            }
            param1.writeVarInt(this.rights);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_HouseGuildRightsMessage(param1);
        }

        public deserializeAs_HouseGuildRightsMessage(param1: ICustomDataInput): void {
            this.houseId = param1.readVarUhInt();
            if (this.houseId < 0) {
                throw new Error('Forbidden value (' + this.houseId + ') on element of HouseGuildRightsMessage.houseId.');
            }
            this.guildInfo = new GuildInformations();
            this.guildInfo.deserialize(param1);
            this.rights = param1.readVarUhInt();
            if (this.rights < 0) {
                throw new Error('Forbidden value (' + this.rights + ') on element of HouseGuildRightsMessage.rights.');
            }

        }
    }
    export class HouseGuildRightsViewMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5700;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return HouseGuildRightsViewMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_HouseGuildRightsViewMessage(param1);
        }

        public serializeAs_HouseGuildRightsViewMessage(param1: ICustomDataOutput): void {

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_HouseGuildRightsViewMessage(param1);
        }

        public deserializeAs_HouseGuildRightsViewMessage(param1: ICustomDataInput): void {

        }
    }
    export class HouseGuildShareRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5704;

        enable: boolean;
        rights: number;

        constructor() {
            this.enable = false;
            this.rights = 0;
            super();
        }

        public getMessageId(): number {
            return HouseGuildShareRequestMessage.ID;
        }

        public reset(): void {
            this.enable = false;
            this.rights = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_HouseGuildShareRequestMessage(param1);
        }

        public serializeAs_HouseGuildShareRequestMessage(param1: ICustomDataOutput): void {
            param1.writeBoolean(this.enable);
            if (this.rights < 0) {
                throw new Error('Forbidden value (' + this.rights + ') on element rights.');
            }
            param1.writeVarInt(this.rights);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_HouseGuildShareRequestMessage(param1);
        }

        public deserializeAs_HouseGuildShareRequestMessage(param1: ICustomDataInput): void {
            this.enable = param1.readBoolean();
            this.rights = param1.readVarUhInt();
            if (this.rights < 0) {
                throw new Error('Forbidden value (' + this.rights + ') on element of HouseGuildShareRequestMessage.rights.');
            }

        }
    }
    export class JobAllowMultiCraftRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5748;

        enabled: boolean;

        constructor() {
            this.enabled = false;
            super();
        }

        public getMessageId(): number {
            return JobAllowMultiCraftRequestMessage.ID;
        }

        public reset(): void {
            this.enabled = false;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_JobAllowMultiCraftRequestMessage(param1);
        }

        public serializeAs_JobAllowMultiCraftRequestMessage(param1: ICustomDataOutput): void {
            param1.writeBoolean(this.enabled);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_JobAllowMultiCraftRequestMessage(param1);
        }

        public deserializeAs_JobAllowMultiCraftRequestMessage(param1: ICustomDataInput): void {
            this.enabled = param1.readBoolean();

        }
    }
    export class JobBookSubscriptionMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6593;

        addedOrDeleted: boolean;
        jobId: number;

        constructor() {
            this.addedOrDeleted = false;
            this.jobId = 0;
            super();
        }

        public getMessageId(): number {
            return JobBookSubscriptionMessage.ID;
        }

        public reset(): void {
            this.addedOrDeleted = false;
            this.jobId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_JobBookSubscriptionMessage(param1);
        }

        public serializeAs_JobBookSubscriptionMessage(param1: ICustomDataOutput): void {
            param1.writeBoolean(this.addedOrDeleted);
            if (this.jobId < 0) {
                throw new Error('Forbidden value (' + this.jobId + ') on element jobId.');
            }
            param1.writeByte(this.jobId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_JobBookSubscriptionMessage(param1);
        }

        public deserializeAs_JobBookSubscriptionMessage(param1: ICustomDataInput): void {
            this.addedOrDeleted = param1.readBoolean();
            this.jobId = param1.readByte();
            if (this.jobId < 0) {
                throw new Error('Forbidden value (' + this.jobId + ') on element of JobBookSubscriptionMessage.jobId.');
            }

        }
    }
    export class JobCrafterDirectoryAddMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5651;

        listEntry: JobCrafterDirectoryListEntry;

        constructor() {
            this.listEntry = new JobCrafterDirectoryListEntry();
            super();
        }

        public getMessageId(): number {
            return JobCrafterDirectoryAddMessage.ID;
        }

        public reset(): void {
            this.listEntry = new JobCrafterDirectoryListEntry();
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_JobCrafterDirectoryAddMessage(param1);
        }

        public serializeAs_JobCrafterDirectoryAddMessage(param1: ICustomDataOutput): void {
            this.listEntry.serializeAs_JobCrafterDirectoryListEntry(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_JobCrafterDirectoryAddMessage(param1);
        }

        public deserializeAs_JobCrafterDirectoryAddMessage(param1: ICustomDataInput): void {
            this.listEntry = new JobCrafterDirectoryListEntry();
            this.listEntry.deserialize(param1);

        }
    }
    export class JobCrafterDirectoryDefineSettingsMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5649;

        settings: JobCrafterDirectorySettings;

        constructor() {
            this.settings = new JobCrafterDirectorySettings();
            super();
        }

        public getMessageId(): number {
            return JobCrafterDirectoryDefineSettingsMessage.ID;
        }

        public reset(): void {
            this.settings = new JobCrafterDirectorySettings();
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_JobCrafterDirectoryDefineSettingsMessage(param1);
        }

        public serializeAs_JobCrafterDirectoryDefineSettingsMessage(param1: ICustomDataOutput): void {
            this.settings.serializeAs_JobCrafterDirectorySettings(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_JobCrafterDirectoryDefineSettingsMessage(param1);
        }

        public deserializeAs_JobCrafterDirectoryDefineSettingsMessage(param1: ICustomDataInput): void {
            this.settings = new JobCrafterDirectorySettings();
            this.settings.deserialize(param1);

        }
    }
    export class JobCrafterDirectoryEntryMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6044;

        playerInfo: JobCrafterDirectoryEntryPlayerInfo;
        jobInfoList: JobCrafterDirectoryEntryJobInfo[];
        playerLook: EntityLook;

        constructor() {
            this.playerInfo = new JobCrafterDirectoryEntryPlayerInfo();
            this.jobInfoList = [];
            this.playerLook = new EntityLook();
            super();
        }

        public getMessageId(): number {
            return JobCrafterDirectoryEntryMessage.ID;
        }

        public reset(): void {
            this.playerInfo = new JobCrafterDirectoryEntryPlayerInfo();
            this.jobInfoList = [];
            this.playerLook = new EntityLook();
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_JobCrafterDirectoryEntryMessage(param1);
        }

        public serializeAs_JobCrafterDirectoryEntryMessage(param1: ICustomDataOutput): void {
            this.playerInfo.serializeAs_JobCrafterDirectoryEntryPlayerInfo(param1);
            param1.writeShort(this.jobInfoList.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.jobInfoList.length) {
                (this.jobInfoList[_loc2_]).serializeAs_JobCrafterDirectoryEntryJobInfo(param1);
                _loc2_++;
            }
            this.playerLook.serializeAs_EntityLook(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_JobCrafterDirectoryEntryMessage(param1);
        }

        public deserializeAs_JobCrafterDirectoryEntryMessage(param1: ICustomDataInput): void {
            var _loc4_: JobCrafterDirectoryEntryJobInfo = null;
            this.playerInfo = new JobCrafterDirectoryEntryPlayerInfo();
            this.playerInfo.deserialize(param1);
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = new JobCrafterDirectoryEntryJobInfo();
                _loc4_.deserialize(param1);
                this.jobInfoList.push(_loc4_);
                _loc3_++;
            }
            this.playerLook = new EntityLook();
            this.playerLook.deserialize(param1);

        }
    }
    export class JobCrafterDirectoryEntryRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6043;

        playerId: number;

        constructor() {
            this.playerId = 0;
            super();
        }

        public getMessageId(): number {
            return JobCrafterDirectoryEntryRequestMessage.ID;
        }

        public reset(): void {
            this.playerId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_JobCrafterDirectoryEntryRequestMessage(param1);
        }

        public serializeAs_JobCrafterDirectoryEntryRequestMessage(param1: ICustomDataOutput): void {
            if (this.playerId < 0) {
                throw new Error('Forbidden value (' + this.playerId + ') on element playerId.');
            }
            param1.writeVarInt(this.playerId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_JobCrafterDirectoryEntryRequestMessage(param1);
        }

        public deserializeAs_JobCrafterDirectoryEntryRequestMessage(param1: ICustomDataInput): void {
            this.playerId = param1.readVarUhInt();
            if (this.playerId < 0) {
                throw new Error('Forbidden value (' + this.playerId + ') on element of JobCrafterDirectoryEntryRequestMessage.playerId.');
            }

        }
    }
    export class JobCrafterDirectoryListMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6046;

        listEntries: JobCrafterDirectoryListEntry[];

        constructor() {
            this.listEntries = [];
            super();
        }

        public getMessageId(): number {
            return JobCrafterDirectoryListMessage.ID;
        }

        public reset(): void {
            this.listEntries = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_JobCrafterDirectoryListMessage(param1);
        }

        public serializeAs_JobCrafterDirectoryListMessage(param1: ICustomDataOutput): void {
            param1.writeShort(this.listEntries.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.listEntries.length) {
                (this.listEntries[_loc2_]).serializeAs_JobCrafterDirectoryListEntry(param1);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_JobCrafterDirectoryListMessage(param1);
        }

        public deserializeAs_JobCrafterDirectoryListMessage(param1: ICustomDataInput): void {
            var _loc4_: JobCrafterDirectoryListEntry = null;
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = new JobCrafterDirectoryListEntry();
                _loc4_.deserialize(param1);
                this.listEntries.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class JobCrafterDirectoryListRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6047;

        jobId: number;

        constructor() {
            this.jobId = 0;
            super();
        }

        public getMessageId(): number {
            return JobCrafterDirectoryListRequestMessage.ID;
        }

        public reset(): void {
            this.jobId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_JobCrafterDirectoryListRequestMessage(param1);
        }

        public serializeAs_JobCrafterDirectoryListRequestMessage(param1: ICustomDataOutput): void {
            if (this.jobId < 0) {
                throw new Error('Forbidden value (' + this.jobId + ') on element jobId.');
            }
            param1.writeByte(this.jobId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_JobCrafterDirectoryListRequestMessage(param1);
        }

        public deserializeAs_JobCrafterDirectoryListRequestMessage(param1: ICustomDataInput): void {
            this.jobId = param1.readByte();
            if (this.jobId < 0) {
                throw new Error('Forbidden value (' + this.jobId + ') on element of JobCrafterDirectoryListRequestMessage.jobId.');
            }

        }
    }
    export class JobCrafterDirectoryRemoveMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5653;

        jobId: number;
        playerId: number;

        constructor() {
            this.jobId = 0;
            this.playerId = 0;
            super();
        }

        public getMessageId(): number {
            return JobCrafterDirectoryRemoveMessage.ID;
        }

        public reset(): void {
            this.jobId = 0;
            this.playerId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_JobCrafterDirectoryRemoveMessage(param1);
        }

        public serializeAs_JobCrafterDirectoryRemoveMessage(param1: ICustomDataOutput): void {
            if (this.jobId < 0) {
                throw new Error('Forbidden value (' + this.jobId + ') on element jobId.');
            }
            param1.writeByte(this.jobId);
            if (this.playerId < 0) {
                throw new Error('Forbidden value (' + this.playerId + ') on element playerId.');
            }
            param1.writeVarInt(this.playerId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_JobCrafterDirectoryRemoveMessage(param1);
        }

        public deserializeAs_JobCrafterDirectoryRemoveMessage(param1: ICustomDataInput): void {
            this.jobId = param1.readByte();
            if (this.jobId < 0) {
                throw new Error('Forbidden value (' + this.jobId + ') on element of JobCrafterDirectoryRemoveMessage.jobId.');
            }
            this.playerId = param1.readVarUhInt();
            if (this.playerId < 0) {
                throw new Error('Forbidden value (' + this.playerId + ') on element of JobCrafterDirectoryRemoveMessage.playerId.');
            }

        }
    }
    export class JobCrafterDirectorySettingsMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5652;

        craftersSettings: JobCrafterDirectorySettings[];

        constructor() {
            this.craftersSettings = [];
            super();
        }

        public getMessageId(): number {
            return JobCrafterDirectorySettingsMessage.ID;
        }

        public reset(): void {
            this.craftersSettings = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_JobCrafterDirectorySettingsMessage(param1);
        }

        public serializeAs_JobCrafterDirectorySettingsMessage(param1: ICustomDataOutput): void {
            param1.writeShort(this.craftersSettings.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.craftersSettings.length) {
                (this.craftersSettings[_loc2_]).serializeAs_JobCrafterDirectorySettings(param1);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_JobCrafterDirectorySettingsMessage(param1);
        }

        public deserializeAs_JobCrafterDirectorySettingsMessage(param1: ICustomDataInput): void {
            var _loc4_: JobCrafterDirectorySettings = null;
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = new JobCrafterDirectorySettings();
                _loc4_.deserialize(param1);
                this.craftersSettings.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class JobDescriptionMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5655;

        jobsDescription: JobDescription[];

        constructor() {
            this.jobsDescription = [];
            super();
        }

        public getMessageId(): number {
            return JobDescriptionMessage.ID;
        }

        public reset(): void {
            this.jobsDescription = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_JobDescriptionMessage(param1);
        }

        public serializeAs_JobDescriptionMessage(param1: ICustomDataOutput): void {
            param1.writeShort(this.jobsDescription.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.jobsDescription.length) {
                (this.jobsDescription[_loc2_]).serializeAs_JobDescription(param1);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_JobDescriptionMessage(param1);
        }

        public deserializeAs_JobDescriptionMessage(param1: ICustomDataInput): void {
            var _loc4_: JobDescription = null;
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = new JobDescription();
                _loc4_.deserialize(param1);
                this.jobsDescription.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class JobExperienceMultiUpdateMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5809;

        experiencesUpdate: JobExperience[];

        constructor() {
            this.experiencesUpdate = [];
            super();
        }

        public getMessageId(): number {
            return JobExperienceMultiUpdateMessage.ID;
        }

        public reset(): void {
            this.experiencesUpdate = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_JobExperienceMultiUpdateMessage(param1);
        }

        public serializeAs_JobExperienceMultiUpdateMessage(param1: ICustomDataOutput): void {
            param1.writeShort(this.experiencesUpdate.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.experiencesUpdate.length) {
                (this.experiencesUpdate[_loc2_]).serializeAs_JobExperience(param1);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_JobExperienceMultiUpdateMessage(param1);
        }

        public deserializeAs_JobExperienceMultiUpdateMessage(param1: ICustomDataInput): void {
            var _loc4_: JobExperience = null;
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = new JobExperience();
                _loc4_.deserialize(param1);
                this.experiencesUpdate.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class JobExperienceUpdateMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5654;

        experiencesUpdate: JobExperience;

        constructor() {
            this.experiencesUpdate = new JobExperience();
            super();
        }

        public getMessageId(): number {
            return JobExperienceUpdateMessage.ID;
        }

        public reset(): void {
            this.experiencesUpdate = new JobExperience();
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_JobExperienceUpdateMessage(param1);
        }

        public serializeAs_JobExperienceUpdateMessage(param1: ICustomDataOutput): void {
            this.experiencesUpdate.serializeAs_JobExperience(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_JobExperienceUpdateMessage(param1);
        }

        public deserializeAs_JobExperienceUpdateMessage(param1: ICustomDataInput): void {
            this.experiencesUpdate = new JobExperience();
            this.experiencesUpdate.deserialize(param1);

        }
    }
    export class JobExperienceOtherPlayerUpdateMessage extends JobExperienceUpdateMessage {
        public static ID: number = 6599;

        playerId: number;

        constructor() {
            this.playerId = 0;
            super();
        }

        public getMessageId(): number {
            return JobExperienceOtherPlayerUpdateMessage.ID;
        }

        public reset(): void {
            this.playerId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_JobExperienceOtherPlayerUpdateMessage(param1);
        }

        public serializeAs_JobExperienceOtherPlayerUpdateMessage(param1: ICustomDataOutput): void {
            super.serializeAs_JobExperienceUpdateMessage(param1);
            if (this.playerId < 0) {
                throw new Error('Forbidden value (' + this.playerId + ') on element playerId.');
            }
            param1.writeVarInt(this.playerId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_JobExperienceOtherPlayerUpdateMessage(param1);
        }

        public deserializeAs_JobExperienceOtherPlayerUpdateMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.playerId = param1.readVarUhInt();
            if (this.playerId < 0) {
                throw new Error('Forbidden value (' + this.playerId + ') on element of JobExperienceOtherPlayerUpdateMessage.playerId.');
            }

        }
    }
    export class JobLevelUpMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5656;

        newLevel: number;
        jobsDescription: JobDescription;

        constructor() {
            this.newLevel = 0;
            this.jobsDescription = new JobDescription();
            super();
        }

        public getMessageId(): number {
            return JobLevelUpMessage.ID;
        }

        public reset(): void {
            this.newLevel = 0;
            this.jobsDescription = new JobDescription();
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_JobLevelUpMessage(param1);
        }

        public serializeAs_JobLevelUpMessage(param1: ICustomDataOutput): void {
            if (this.newLevel < 0 || this.newLevel > 255) {
                throw new Error('Forbidden value (' + this.newLevel + ') on element newLevel.');
            }
            param1.writeByte(this.newLevel);
            this.jobsDescription.serializeAs_JobDescription(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_JobLevelUpMessage(param1);
        }

        public deserializeAs_JobLevelUpMessage(param1: ICustomDataInput): void {
            this.newLevel = param1.readUnsignedByte();
            if (this.newLevel < 0 || this.newLevel > 255) {
                throw new Error('Forbidden value (' + this.newLevel + ') on element of JobLevelUpMessage.newLevel.');
            }
            this.jobsDescription = new JobDescription();
            this.jobsDescription.deserialize(param1);

        }
    }
    export class JobMultiCraftAvailableSkillsMessage extends JobAllowMultiCraftRequestMessage {
        public static ID: number = 5747;

        playerId: number;
        skills: number[];

        constructor() {
            this.playerId = 0;
            this.skills = [];
            super();
        }

        public getMessageId(): number {
            return JobMultiCraftAvailableSkillsMessage.ID;
        }

        public reset(): void {
            this.playerId = 0;
            this.skills = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_JobMultiCraftAvailableSkillsMessage(param1);
        }

        public serializeAs_JobMultiCraftAvailableSkillsMessage(param1: ICustomDataOutput): void {
            super.serializeAs_JobAllowMultiCraftRequestMessage(param1);
            if (this.playerId < 0) {
                throw new Error('Forbidden value (' + this.playerId + ') on element playerId.');
            }
            param1.writeVarInt(this.playerId);
            param1.writeShort(this.skills.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.skills.length) {
                if (this.skills[_loc2_] < 0) {
                    throw new Error('Forbidden value (' + this.skills[_loc2_] + ') on element 2 (starting at 1) of skills.');
                }
                param1.writeVarShort(this.skills[_loc2_]);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_JobMultiCraftAvailableSkillsMessage(param1);
        }

        public deserializeAs_JobMultiCraftAvailableSkillsMessage(param1: ICustomDataInput): void {
            var _loc4_: number = 0;
            super.deserialize(param1);
            this.playerId = param1.readVarUhInt();
            if (this.playerId < 0) {
                throw new Error('Forbidden value (' + this.playerId + ') on element of JobMultiCraftAvailableSkillsMessage.playerId.');
            }
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = param1.readVarUhShort();
                if (_loc4_ < 0) {
                    throw new Error('Forbidden value (' + _loc4_ + ') on elements of skills.');
                }
                this.skills.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class LockableCodeResultMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5672;

        result: number;

        constructor() {
            this.result = 0;
            super();
        }

        public getMessageId(): number {
            return LockableCodeResultMessage.ID;
        }

        public reset(): void {
            this.result = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_LockableCodeResultMessage(param1);
        }

        public serializeAs_LockableCodeResultMessage(param1: ICustomDataOutput): void {
            param1.writeByte(this.result);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_LockableCodeResultMessage(param1);
        }

        public deserializeAs_LockableCodeResultMessage(param1: ICustomDataInput): void {
            this.result = param1.readByte();
            if (this.result < 0) {
                throw new Error('Forbidden value (' + this.result + ') on element of LockableCodeResultMessage.result.');
            }

        }
    }
    export class LockableShowCodeDialogMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5740;

        changeOrUse: boolean;
        codeSize: number;

        constructor() {
            this.changeOrUse = false;
            this.codeSize = 0;
            super();
        }

        public getMessageId(): number {
            return LockableShowCodeDialogMessage.ID;
        }

        public reset(): void {
            this.changeOrUse = false;
            this.codeSize = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_LockableShowCodeDialogMessage(param1);
        }

        public serializeAs_LockableShowCodeDialogMessage(param1: ICustomDataOutput): void {
            param1.writeBoolean(this.changeOrUse);
            if (this.codeSize < 0) {
                throw new Error('Forbidden value (' + this.codeSize + ') on element codeSize.');
            }
            param1.writeByte(this.codeSize);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_LockableShowCodeDialogMessage(param1);
        }

        public deserializeAs_LockableShowCodeDialogMessage(param1: ICustomDataInput): void {
            this.changeOrUse = param1.readBoolean();
            this.codeSize = param1.readByte();
            if (this.codeSize < 0) {
                throw new Error('Forbidden value (' + this.codeSize + ') on element of LockableShowCodeDialogMessage.codeSize.');
            }

        }
    }
    export class LockableStateUpdateAbstractMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5671;

        locked: boolean;

        constructor() {
            this.locked = false;
            super();
        }

        public getMessageId(): number {
            return LockableStateUpdateAbstractMessage.ID;
        }

        public reset(): void {
            this.locked = false;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_LockableStateUpdateAbstractMessage(param1);
        }

        public serializeAs_LockableStateUpdateAbstractMessage(param1: ICustomDataOutput): void {
            param1.writeBoolean(this.locked);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_LockableStateUpdateAbstractMessage(param1);
        }

        public deserializeAs_LockableStateUpdateAbstractMessage(param1: ICustomDataInput): void {
            this.locked = param1.readBoolean();

        }
    }
    export class LockableStateUpdateHouseDoorMessage extends LockableStateUpdateAbstractMessage {
        public static ID: number = 5668;

        houseId: number;

        constructor() {
            this.houseId = 0;
            super();
        }

        public getMessageId(): number {
            return LockableStateUpdateHouseDoorMessage.ID;
        }

        public reset(): void {
            this.houseId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_LockableStateUpdateHouseDoorMessage(param1);
        }

        public serializeAs_LockableStateUpdateHouseDoorMessage(param1: ICustomDataOutput): void {
            super.serializeAs_LockableStateUpdateAbstractMessage(param1);
            if (this.houseId < 0) {
                throw new Error('Forbidden value (' + this.houseId + ') on element houseId.');
            }
            param1.writeVarInt(this.houseId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_LockableStateUpdateHouseDoorMessage(param1);
        }

        public deserializeAs_LockableStateUpdateHouseDoorMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.houseId = param1.readVarUhInt();
            if (this.houseId < 0) {
                throw new Error('Forbidden value (' + this.houseId + ') on element of LockableStateUpdateHouseDoorMessage.houseId.');
            }

        }
    }
    export class LockableStateUpdateStorageMessage extends LockableStateUpdateAbstractMessage {
        public static ID: number = 5669;

        mapId: number;
        elementId: number;

        constructor() {
            this.mapId = 0;
            this.elementId = 0;
            super();
        }

        public getMessageId(): number {
            return LockableStateUpdateStorageMessage.ID;
        }

        public reset(): void {
            this.mapId = 0;
            this.elementId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_LockableStateUpdateStorageMessage(param1);
        }

        public serializeAs_LockableStateUpdateStorageMessage(param1: ICustomDataOutput): void {
            super.serializeAs_LockableStateUpdateAbstractMessage(param1);
            param1.writeInt(this.mapId);
            if (this.elementId < 0) {
                throw new Error('Forbidden value (' + this.elementId + ') on element elementId.');
            }
            param1.writeVarInt(this.elementId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_LockableStateUpdateStorageMessage(param1);
        }

        public deserializeAs_LockableStateUpdateStorageMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.mapId = param1.readInt();
            this.elementId = param1.readVarUhInt();
            if (this.elementId < 0) {
                throw new Error('Forbidden value (' + this.elementId + ') on element of LockableStateUpdateStorageMessage.elementId.');
            }

        }
    }
    export class LockableUseCodeMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5667;

        code: string;

        constructor() {
            this.code = '';
            super();
        }

        public getMessageId(): number {
            return LockableUseCodeMessage.ID;
        }

        public reset(): void {
            this.code = '';
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_LockableUseCodeMessage(param1);
        }

        public serializeAs_LockableUseCodeMessage(param1: ICustomDataOutput): void {
            param1.writeUTF(this.code);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_LockableUseCodeMessage(param1);
        }

        public deserializeAs_LockableUseCodeMessage(param1: ICustomDataInput): void {
            this.code = param1.readUTF();

        }
    }
    export class AlliancePrismDialogQuestionMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6448;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return AlliancePrismDialogQuestionMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_AlliancePrismDialogQuestionMessage(param1);
        }

        public serializeAs_AlliancePrismDialogQuestionMessage(param1: ICustomDataOutput): void {

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_AlliancePrismDialogQuestionMessage(param1);
        }

        public deserializeAs_AlliancePrismDialogQuestionMessage(param1: ICustomDataInput): void {

        }
    }
    export class TaxCollectorDialogQuestionBasicMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5619;

        guildInfo: BasicGuildInformations;

        constructor() {
            this.guildInfo = new BasicGuildInformations();
            super();
        }

        public getMessageId(): number {
            return TaxCollectorDialogQuestionBasicMessage.ID;
        }

        public reset(): void {
            this.guildInfo = new BasicGuildInformations();
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_TaxCollectorDialogQuestionBasicMessage(param1);
        }

        public serializeAs_TaxCollectorDialogQuestionBasicMessage(param1: ICustomDataOutput): void {
            this.guildInfo.serializeAs_BasicGuildInformations(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_TaxCollectorDialogQuestionBasicMessage(param1);
        }

        public deserializeAs_TaxCollectorDialogQuestionBasicMessage(param1: ICustomDataInput): void {
            this.guildInfo = new BasicGuildInformations();
            this.guildInfo.deserialize(param1);

        }
    }
    export class TaxCollectorDialogQuestionExtendedMessage extends TaxCollectorDialogQuestionBasicMessage {
        public static ID: number = 5615;

        maxPods: number;
        prospecting: number;
        wisdom: number;
        taxCollectorsCount: number;
        taxCollectorAttack: number;
        kamas: number;
        experience: number;
        pods: number;
        itemsValue: number;

        constructor() {
            this.maxPods = 0;
            this.prospecting = 0;
            this.wisdom = 0;
            this.taxCollectorsCount = 0;
            this.taxCollectorAttack = 0;
            this.kamas = 0;
            this.experience = 0;
            this.pods = 0;
            this.itemsValue = 0;
            super();
        }

        public getMessageId(): number {
            return TaxCollectorDialogQuestionExtendedMessage.ID;
        }

        public reset(): void {
            this.maxPods = 0;
            this.prospecting = 0;
            this.wisdom = 0;
            this.taxCollectorsCount = 0;
            this.taxCollectorAttack = 0;
            this.kamas = 0;
            this.experience = 0;
            this.pods = 0;
            this.itemsValue = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_TaxCollectorDialogQuestionExtendedMessage(param1);
        }

        public serializeAs_TaxCollectorDialogQuestionExtendedMessage(param1: ICustomDataOutput): void {
            super.serializeAs_TaxCollectorDialogQuestionBasicMessage(param1);
            if (this.maxPods < 0) {
                throw new Error('Forbidden value (' + this.maxPods + ') on element maxPods.');
            }
            param1.writeVarShort(this.maxPods);
            if (this.prospecting < 0) {
                throw new Error('Forbidden value (' + this.prospecting + ') on element prospecting.');
            }
            param1.writeVarShort(this.prospecting);
            if (this.wisdom < 0) {
                throw new Error('Forbidden value (' + this.wisdom + ') on element wisdom.');
            }
            param1.writeVarShort(this.wisdom);
            if (this.taxCollectorsCount < 0) {
                throw new Error('Forbidden value (' + this.taxCollectorsCount + ') on element taxCollectorsCount.');
            }
            param1.writeByte(this.taxCollectorsCount);
            param1.writeInt(this.taxCollectorAttack);
            if (this.kamas < 0) {
                throw new Error('Forbidden value (' + this.kamas + ') on element kamas.');
            }
            param1.writeVarInt(this.kamas);
            if (this.experience < 0 || this.experience > 9.007199254740992E15) {
                throw new Error('Forbidden value (' + this.experience + ') on element experience.');
            }
            param1.writeVarLong(this.experience);
            if (this.pods < 0) {
                throw new Error('Forbidden value (' + this.pods + ') on element pods.');
            }
            param1.writeVarInt(this.pods);
            if (this.itemsValue < 0) {
                throw new Error('Forbidden value (' + this.itemsValue + ') on element itemsValue.');
            }
            param1.writeVarInt(this.itemsValue);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_TaxCollectorDialogQuestionExtendedMessage(param1);
        }

        public deserializeAs_TaxCollectorDialogQuestionExtendedMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.maxPods = param1.readVarUhShort();
            if (this.maxPods < 0) {
                throw new Error('Forbidden value (' + this.maxPods + ') on element of TaxCollectorDialogQuestionExtendedMessage.maxPods.');
            }
            this.prospecting = param1.readVarUhShort();
            if (this.prospecting < 0) {
                throw new Error('Forbidden value (' + this.prospecting + ') on element of TaxCollectorDialogQuestionExtendedMessage.prospecting.');
            }
            this.wisdom = param1.readVarUhShort();
            if (this.wisdom < 0) {
                throw new Error('Forbidden value (' + this.wisdom + ') on element of TaxCollectorDialogQuestionExtendedMessage.wisdom.');
            }
            this.taxCollectorsCount = param1.readByte();
            if (this.taxCollectorsCount < 0) {
                throw new Error('Forbidden value (' + this.taxCollectorsCount + ') on element of TaxCollectorDialogQuestionExtendedMessage.taxCollectorsCount.');
            }
            this.taxCollectorAttack = param1.readInt();
            this.kamas = param1.readVarUhInt();
            if (this.kamas < 0) {
                throw new Error('Forbidden value (' + this.kamas + ') on element of TaxCollectorDialogQuestionExtendedMessage.kamas.');
            }
            this.experience = param1.readVarUhLong();
            if (this.experience < 0 || this.experience > 9.007199254740992E15) {
                throw new Error('Forbidden value (' + this.experience + ') on element of TaxCollectorDialogQuestionExtendedMessage.experience.');
            }
            this.pods = param1.readVarUhInt();
            if (this.pods < 0) {
                throw new Error('Forbidden value (' + this.pods + ') on element of TaxCollectorDialogQuestionExtendedMessage.pods.');
            }
            this.itemsValue = param1.readVarUhInt();
            if (this.itemsValue < 0) {
                throw new Error('Forbidden value (' + this.itemsValue + ') on element of TaxCollectorDialogQuestionExtendedMessage.itemsValue.');
            }

        }
    }
    export class AllianceTaxCollectorDialogQuestionExtendedMessage extends TaxCollectorDialogQuestionExtendedMessage {
        public static ID: number = 6445;

        alliance: BasicNamedAllianceInformations;

        constructor() {
            this.alliance = new BasicNamedAllianceInformations();
            super();
        }

        public getMessageId(): number {
            return AllianceTaxCollectorDialogQuestionExtendedMessage.ID;
        }

        public reset(): void {
            this.alliance = new BasicNamedAllianceInformations();
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_AllianceTaxCollectorDialogQuestionExtendedMessage(param1);
        }

        public serializeAs_AllianceTaxCollectorDialogQuestionExtendedMessage(param1: ICustomDataOutput): void {
            super.serializeAs_TaxCollectorDialogQuestionExtendedMessage(param1);
            this.alliance.serializeAs_BasicNamedAllianceInformations(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_AllianceTaxCollectorDialogQuestionExtendedMessage(param1);
        }

        public deserializeAs_AllianceTaxCollectorDialogQuestionExtendedMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.alliance = new BasicNamedAllianceInformations();
            this.alliance.deserialize(param1);

        }
    }
    export class EntityTalkMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6110;

        entityId: number;
        textId: number;
        parameters: string[];

        constructor() {
            this.entityId = 0;
            this.textId = 0;
            this.parameters = [];
            super();
        }

        public getMessageId(): number {
            return EntityTalkMessage.ID;
        }

        public reset(): void {
            this.entityId = 0;
            this.textId = 0;
            this.parameters = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_EntityTalkMessage(param1);
        }

        public serializeAs_EntityTalkMessage(param1: ICustomDataOutput): void {
            param1.writeInt(this.entityId);
            if (this.textId < 0) {
                throw new Error('Forbidden value (' + this.textId + ') on element textId.');
            }
            param1.writeVarShort(this.textId);
            param1.writeShort(this.parameters.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.parameters.length) {
                param1.writeUTF(this.parameters[_loc2_]);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_EntityTalkMessage(param1);
        }

        public deserializeAs_EntityTalkMessage(param1: ICustomDataInput): void {
            var _loc4_: string = null;
            this.entityId = param1.readInt();
            this.textId = param1.readVarUhShort();
            if (this.textId < 0) {
                throw new Error('Forbidden value (' + this.textId + ') on element of EntityTalkMessage.textId.');
            }
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = param1.readUTF();
                this.parameters.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class MapNpcsQuestStatusUpdateMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5642;

        mapId: number;
        npcsIdsWithQuest: number[];
        questFlags: GameRolePlayNpcQuestFlag[];
        npcsIdsWithoutQuest: number[];

        constructor() {
            this.mapId = 0;
            this.npcsIdsWithQuest = [];
            this.questFlags = [];
            this.npcsIdsWithoutQuest = [];
            super();
        }

        public getMessageId(): number {
            return MapNpcsQuestStatusUpdateMessage.ID;
        }

        public reset(): void {
            this.mapId = 0;
            this.npcsIdsWithQuest = [];
            this.questFlags = [];
            this.npcsIdsWithoutQuest = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_MapNpcsQuestStatusUpdateMessage(param1);
        }

        public serializeAs_MapNpcsQuestStatusUpdateMessage(param1: ICustomDataOutput): void {
            param1.writeInt(this.mapId);
            param1.writeShort(this.npcsIdsWithQuest.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.npcsIdsWithQuest.length) {
                param1.writeInt(this.npcsIdsWithQuest[_loc2_]);
                _loc2_++;
            }
            param1.writeShort(this.questFlags.length);
            var _loc3_: number = 0;
            while (_loc3_ < this.questFlags.length) {
                (this.questFlags[_loc3_]).serializeAs_GameRolePlayNpcQuestFlag(param1);
                _loc3_++;
            }
            param1.writeShort(this.npcsIdsWithoutQuest.length);
            var _loc4_: number = 0;
            while (_loc4_ < this.npcsIdsWithoutQuest.length) {
                param1.writeInt(this.npcsIdsWithoutQuest[_loc4_]);
                _loc4_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_MapNpcsQuestStatusUpdateMessage(param1);
        }

        public deserializeAs_MapNpcsQuestStatusUpdateMessage(param1: ICustomDataInput): void {
            var _loc8_: any = 0;
            var _loc9_: GameRolePlayNpcQuestFlag = null;
            var _loc10_: any = 0;
            this.mapId = param1.readInt();
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc8_ = param1.readInt();
                this.npcsIdsWithQuest.push(_loc8_);
                _loc3_++;
            }
            var _loc4_: number = param1.readUnsignedShort();
            var _loc5_: number = 0;
            while (_loc5_ < _loc4_) {
            _loc9_ = new GameRolePlayNpcQuestFlag();
                _loc9_.deserialize(param1);
                this.questFlags.push(_loc9_);
                _loc5_++;
            }
            var _loc6_: number = param1.readUnsignedShort();
            var _loc7_: number = 0;
            while (_loc7_ < _loc6_) {
            _loc10_ = param1.readInt();
                this.npcsIdsWithoutQuest.push(_loc10_);
                _loc7_++;
            }

        }
    }
    export class NpcDialogCreationMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5618;

        mapId: number;
        npcId: number;

        constructor() {
            this.mapId = 0;
            this.npcId = 0;
            super();
        }

        public getMessageId(): number {
            return NpcDialogCreationMessage.ID;
        }

        public reset(): void {
            this.mapId = 0;
            this.npcId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_NpcDialogCreationMessage(param1);
        }

        public serializeAs_NpcDialogCreationMessage(param1: ICustomDataOutput): void {
            param1.writeInt(this.mapId);
            param1.writeInt(this.npcId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_NpcDialogCreationMessage(param1);
        }

        public deserializeAs_NpcDialogCreationMessage(param1: ICustomDataInput): void {
            this.mapId = param1.readInt();
            this.npcId = param1.readInt();

        }
    }
    export class NpcDialogQuestionMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5617;

        messageId: number;
        dialogParams: string[];
        visibleReplies: number[];

        constructor() {
            this.messageId = 0;
            this.dialogParams = [];
            this.visibleReplies = [];
            super();
        }

        public getMessageId(): number {
            return NpcDialogQuestionMessage.ID;
        }

        public reset(): void {
            this.messageId = 0;
            this.dialogParams = [];
            this.visibleReplies = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_NpcDialogQuestionMessage(param1);
        }

        public serializeAs_NpcDialogQuestionMessage(param1: ICustomDataOutput): void {
            if (this.messageId < 0) {
                throw new Error('Forbidden value (' + this.messageId + ') on element messageId.');
            }
            param1.writeVarShort(this.messageId);
            param1.writeShort(this.dialogParams.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.dialogParams.length) {
                param1.writeUTF(this.dialogParams[_loc2_]);
                _loc2_++;
            }
            param1.writeShort(this.visibleReplies.length);
            var _loc3_: number = 0;
            while (_loc3_ < this.visibleReplies.length) {
                if (this.visibleReplies[_loc3_] < 0) {
                    throw new Error('Forbidden value (' + this.visibleReplies[_loc3_] + ') on element 3 (starting at 1) of visibleReplies.');
                }
                param1.writeVarShort(this.visibleReplies[_loc3_]);
                _loc3_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_NpcDialogQuestionMessage(param1);
        }

        public deserializeAs_NpcDialogQuestionMessage(param1: ICustomDataInput): void {
            var _loc6_: string = null;
            var _loc7_: number = 0;
            this.messageId = param1.readVarUhShort();
            if (this.messageId < 0) {
                throw new Error('Forbidden value (' + this.messageId + ') on element of NpcDialogQuestionMessage.messageId.');
            }
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc6_ = param1.readUTF();
                this.dialogParams.push(_loc6_);
                _loc3_++;
            }
            var _loc4_: number = param1.readUnsignedShort();
            var _loc5_: number = 0;
            while (_loc5_ < _loc4_) {
            _loc7_ = param1.readVarUhShort();
                if (_loc7_ < 0) {
                    throw new Error('Forbidden value (' + _loc7_ + ') on elements of visibleReplies.');
                }
                this.visibleReplies.push(_loc7_);
                _loc5_++;
            }

        }
    }
    export class NpcDialogReplyMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5616;

        replyId: number;

        constructor() {
            this.replyId = 0;
            super();
        }

        public getMessageId(): number {
            return NpcDialogReplyMessage.ID;
        }

        public reset(): void {
            this.replyId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_NpcDialogReplyMessage(param1);
        }

        public serializeAs_NpcDialogReplyMessage(param1: ICustomDataOutput): void {
            if (this.replyId < 0) {
                throw new Error('Forbidden value (' + this.replyId + ') on element replyId.');
            }
            param1.writeVarShort(this.replyId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_NpcDialogReplyMessage(param1);
        }

        public deserializeAs_NpcDialogReplyMessage(param1: ICustomDataInput): void {
            this.replyId = param1.readVarUhShort();
            if (this.replyId < 0) {
                throw new Error('Forbidden value (' + this.replyId + ') on element of NpcDialogReplyMessage.replyId.');
            }

        }
    }
    export class NpcGenericActionFailureMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5900;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return NpcGenericActionFailureMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_NpcGenericActionFailureMessage(param1);
        }

        public serializeAs_NpcGenericActionFailureMessage(param1: ICustomDataOutput): void {

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_NpcGenericActionFailureMessage(param1);
        }

        public deserializeAs_NpcGenericActionFailureMessage(param1: ICustomDataInput): void {

        }
    }
    export class NpcGenericActionRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5898;

        npcId: number;
        npcActionId: number;
        npcMapId: number;

        constructor() {
            this.npcId = 0;
            this.npcActionId = 0;
            this.npcMapId = 0;
            super();
        }

        public getMessageId(): number {
            return NpcGenericActionRequestMessage.ID;
        }

        public reset(): void {
            this.npcId = 0;
            this.npcActionId = 0;
            this.npcMapId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_NpcGenericActionRequestMessage(param1);
        }

        public serializeAs_NpcGenericActionRequestMessage(param1: ICustomDataOutput): void {
            param1.writeInt(this.npcId);
            if (this.npcActionId < 0) {
                throw new Error('Forbidden value (' + this.npcActionId + ') on element npcActionId.');
            }
            param1.writeByte(this.npcActionId);
            param1.writeInt(this.npcMapId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_NpcGenericActionRequestMessage(param1);
        }

        public deserializeAs_NpcGenericActionRequestMessage(param1: ICustomDataInput): void {
            this.npcId = param1.readInt();
            this.npcActionId = param1.readByte();
            if (this.npcActionId < 0) {
                throw new Error('Forbidden value (' + this.npcActionId + ') on element of NpcGenericActionRequestMessage.npcActionId.');
            }
            this.npcMapId = param1.readInt();

        }
    }
    export class ObjectGroundAddedMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 3017;

        cellId: number;
        objectGID: number;

        constructor() {
            this.cellId = 0;
            this.objectGID = 0;
            super();
        }

        public getMessageId(): number {
            return ObjectGroundAddedMessage.ID;
        }

        public reset(): void {
            this.cellId = 0;
            this.objectGID = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ObjectGroundAddedMessage(param1);
        }

        public serializeAs_ObjectGroundAddedMessage(param1: ICustomDataOutput): void {
            if (this.cellId < 0 || this.cellId > 559) {
                throw new Error('Forbidden value (' + this.cellId + ') on element cellId.');
            }
            param1.writeVarShort(this.cellId);
            if (this.objectGID < 0) {
                throw new Error('Forbidden value (' + this.objectGID + ') on element objectGID.');
            }
            param1.writeVarShort(this.objectGID);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ObjectGroundAddedMessage(param1);
        }

        public deserializeAs_ObjectGroundAddedMessage(param1: ICustomDataInput): void {
            this.cellId = param1.readVarUhShort();
            if (this.cellId < 0 || this.cellId > 559) {
                throw new Error('Forbidden value (' + this.cellId + ') on element of ObjectGroundAddedMessage.cellId.');
            }
            this.objectGID = param1.readVarUhShort();
            if (this.objectGID < 0) {
                throw new Error('Forbidden value (' + this.objectGID + ') on element of ObjectGroundAddedMessage.objectGID.');
            }

        }
    }
    export class ObjectGroundListAddedMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5925;

        cells: number[];
        referenceIds: number[];

        constructor() {
            this.cells = [];
            this.referenceIds = [];
            super();
        }

        public getMessageId(): number {
            return ObjectGroundListAddedMessage.ID;
        }

        public reset(): void {
            this.cells = [];
            this.referenceIds = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ObjectGroundListAddedMessage(param1);
        }

        public serializeAs_ObjectGroundListAddedMessage(param1: ICustomDataOutput): void {
            param1.writeShort(this.cells.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.cells.length) {
                if (this.cells[_loc2_] < 0 || this.cells[_loc2_] > 559) {
                    throw new Error('Forbidden value (' + this.cells[_loc2_] + ') on element 1 (starting at 1) of cells.');
                }
                param1.writeVarShort(this.cells[_loc2_]);
                _loc2_++;
            }
            param1.writeShort(this.referenceIds.length);
            var _loc3_: number = 0;
            while (_loc3_ < this.referenceIds.length) {
                if (this.referenceIds[_loc3_] < 0) {
                    throw new Error('Forbidden value (' + this.referenceIds[_loc3_] + ') on element 2 (starting at 1) of referenceIds.');
                }
                param1.writeVarShort(this.referenceIds[_loc3_]);
                _loc3_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ObjectGroundListAddedMessage(param1);
        }

        public deserializeAs_ObjectGroundListAddedMessage(param1: ICustomDataInput): void {
            var _loc6_: number = 0;
            var _loc7_: number = 0;
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc6_ = param1.readVarUhShort();
                if (_loc6_ < 0 || _loc6_ > 559) {
                    throw new Error('Forbidden value (' + _loc6_ + ') on elements of cells.');
                }
                this.cells.push(_loc6_);
                _loc3_++;
            }
            var _loc4_: number = param1.readUnsignedShort();
            var _loc5_: number = 0;
            while (_loc5_ < _loc4_) {
            _loc7_ = param1.readVarUhShort();
                if (_loc7_ < 0) {
                    throw new Error('Forbidden value (' + _loc7_ + ') on elements of referenceIds.');
                }
                this.referenceIds.push(_loc7_);
                _loc5_++;
            }

        }
    }
    export class ObjectGroundRemovedMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 3014;

        cell: number;

        constructor() {
            this.cell = 0;
            super();
        }

        public getMessageId(): number {
            return ObjectGroundRemovedMessage.ID;
        }

        public reset(): void {
            this.cell = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ObjectGroundRemovedMessage(param1);
        }

        public serializeAs_ObjectGroundRemovedMessage(param1: ICustomDataOutput): void {
            if (this.cell < 0 || this.cell > 559) {
                throw new Error('Forbidden value (' + this.cell + ') on element cell.');
            }
            param1.writeVarShort(this.cell);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ObjectGroundRemovedMessage(param1);
        }

        public deserializeAs_ObjectGroundRemovedMessage(param1: ICustomDataInput): void {
            this.cell = param1.readVarUhShort();
            if (this.cell < 0 || this.cell > 559) {
                throw new Error('Forbidden value (' + this.cell + ') on element of ObjectGroundRemovedMessage.cell.');
            }

        }
    }
    export class ObjectGroundRemovedMultipleMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5944;

        cells: number[];

        constructor() {
            this.cells = [];
            super();
        }

        public getMessageId(): number {
            return ObjectGroundRemovedMultipleMessage.ID;
        }

        public reset(): void {
            this.cells = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ObjectGroundRemovedMultipleMessage(param1);
        }

        public serializeAs_ObjectGroundRemovedMultipleMessage(param1: ICustomDataOutput): void {
            param1.writeShort(this.cells.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.cells.length) {
                if (this.cells[_loc2_] < 0 || this.cells[_loc2_] > 559) {
                    throw new Error('Forbidden value (' + this.cells[_loc2_] + ') on element 1 (starting at 1) of cells.');
                }
                param1.writeVarShort(this.cells[_loc2_]);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ObjectGroundRemovedMultipleMessage(param1);
        }

        public deserializeAs_ObjectGroundRemovedMultipleMessage(param1: ICustomDataInput): void {
            var _loc4_: number = 0;
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = param1.readVarUhShort();
                if (_loc4_ < 0 || _loc4_ > 559) {
                    throw new Error('Forbidden value (' + _loc4_ + ') on elements of cells.');
                }
                this.cells.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class GameDataPlayFarmObjectAnimationMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6026;

        cellId: number[];

        constructor() {
            this.cellId = [];
            super();
        }

        public getMessageId(): number {
            return GameDataPlayFarmObjectAnimationMessage.ID;
        }

        public reset(): void {
            this.cellId = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameDataPlayFarmObjectAnimationMessage(param1);
        }

        public serializeAs_GameDataPlayFarmObjectAnimationMessage(param1: ICustomDataOutput): void {
            param1.writeShort(this.cellId.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.cellId.length) {
                if (this.cellId[_loc2_] < 0 || this.cellId[_loc2_] > 559) {
                    throw new Error('Forbidden value (' + this.cellId[_loc2_] + ') on element 1 (starting at 1) of cellId.');
                }
                param1.writeVarShort(this.cellId[_loc2_]);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameDataPlayFarmObjectAnimationMessage(param1);
        }

        public deserializeAs_GameDataPlayFarmObjectAnimationMessage(param1: ICustomDataInput): void {
            var _loc4_: number = 0;
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = param1.readVarUhShort();
                if (_loc4_ < 0 || _loc4_ > 559) {
                    throw new Error('Forbidden value (' + _loc4_ + ') on elements of cellId.');
                }
                this.cellId.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class PaddockPropertiesMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5824;

        properties: PaddockInformations;

        constructor() {
            this.properties = new PaddockInformations();
            super();
        }

        public getMessageId(): number {
            return PaddockPropertiesMessage.ID;
        }

        public reset(): void {
            this.properties = new PaddockInformations();
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_PaddockPropertiesMessage(param1);
        }

        public serializeAs_PaddockPropertiesMessage(param1: ICustomDataOutput): void {
            param1.writeShort(this.properties.getTypeId());
            this.properties.serialize(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_PaddockPropertiesMessage(param1);
        }

        public deserializeAs_PaddockPropertiesMessage(param1: ICustomDataInput): void {
            var _loc2_: number = param1.readUnsignedShort();
            this.properties = <PaddockInformations>ProtocolTypeManager.getInstance(PaddockInformations, _loc2_);
            this.properties.deserialize(param1);

        }
    }
    export class PaddockSellBuyDialogMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6018;

        bsell: boolean;
        ownerId: number;
        price: number;

        constructor() {
            this.bsell = false;
            this.ownerId = 0;
            this.price = 0;
            super();
        }

        public getMessageId(): number {
            return PaddockSellBuyDialogMessage.ID;
        }

        public reset(): void {
            this.bsell = false;
            this.ownerId = 0;
            this.price = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_PaddockSellBuyDialogMessage(param1);
        }

        public serializeAs_PaddockSellBuyDialogMessage(param1: ICustomDataOutput): void {
            param1.writeBoolean(this.bsell);
            if (this.ownerId < 0) {
                throw new Error('Forbidden value (' + this.ownerId + ') on element ownerId.');
            }
            param1.writeVarInt(this.ownerId);
            if (this.price < 0) {
                throw new Error('Forbidden value (' + this.price + ') on element price.');
            }
            param1.writeVarInt(this.price);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_PaddockSellBuyDialogMessage(param1);
        }

        public deserializeAs_PaddockSellBuyDialogMessage(param1: ICustomDataInput): void {
            this.bsell = param1.readBoolean();
            this.ownerId = param1.readVarUhInt();
            if (this.ownerId < 0) {
                throw new Error('Forbidden value (' + this.ownerId + ') on element of PaddockSellBuyDialogMessage.ownerId.');
            }
            this.price = param1.readVarUhInt();
            if (this.price < 0) {
                throw new Error('Forbidden value (' + this.price + ') on element of PaddockSellBuyDialogMessage.price.');
            }

        }
    }
    export class PaddockToSellFilterMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6161;

        areaId: number;
        atLeastNbMount: number;
        atLeastNbMachine: number;
        maxPrice: number;

        constructor() {
            this.areaId = 0;
            this.atLeastNbMount = 0;
            this.atLeastNbMachine = 0;
            this.maxPrice = 0;
            super();
        }

        public getMessageId(): number {
            return PaddockToSellFilterMessage.ID;
        }

        public reset(): void {
            this.areaId = 0;
            this.atLeastNbMount = 0;
            this.atLeastNbMachine = 0;
            this.maxPrice = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_PaddockToSellFilterMessage(param1);
        }

        public serializeAs_PaddockToSellFilterMessage(param1: ICustomDataOutput): void {
            param1.writeInt(this.areaId);
            param1.writeByte(this.atLeastNbMount);
            param1.writeByte(this.atLeastNbMachine);
            if (this.maxPrice < 0) {
                throw new Error('Forbidden value (' + this.maxPrice + ') on element maxPrice.');
            }
            param1.writeVarInt(this.maxPrice);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_PaddockToSellFilterMessage(param1);
        }

        public deserializeAs_PaddockToSellFilterMessage(param1: ICustomDataInput): void {
            this.areaId = param1.readInt();
            this.atLeastNbMount = param1.readByte();
            this.atLeastNbMachine = param1.readByte();
            this.maxPrice = param1.readVarUhInt();
            if (this.maxPrice < 0) {
                throw new Error('Forbidden value (' + this.maxPrice + ') on element of PaddockToSellFilterMessage.maxPrice.');
            }

        }
    }
    export class PaddockToSellListMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6138;

        pageIndex: number;
        totalPage: number;
        paddockList: PaddockInformationsForSell[];

        constructor() {
            this.pageIndex = 0;
            this.totalPage = 0;
            this.paddockList = [];
            super();
        }

        public getMessageId(): number {
            return PaddockToSellListMessage.ID;
        }

        public reset(): void {
            this.pageIndex = 0;
            this.totalPage = 0;
            this.paddockList = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_PaddockToSellListMessage(param1);
        }

        public serializeAs_PaddockToSellListMessage(param1: ICustomDataOutput): void {
            if (this.pageIndex < 0) {
                throw new Error('Forbidden value (' + this.pageIndex + ') on element pageIndex.');
            }
            param1.writeVarShort(this.pageIndex);
            if (this.totalPage < 0) {
                throw new Error('Forbidden value (' + this.totalPage + ') on element totalPage.');
            }
            param1.writeVarShort(this.totalPage);
            param1.writeShort(this.paddockList.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.paddockList.length) {
                (this.paddockList[_loc2_]).serializeAs_PaddockInformationsForSell(param1);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_PaddockToSellListMessage(param1);
        }

        public deserializeAs_PaddockToSellListMessage(param1: ICustomDataInput): void {
            var _loc4_: PaddockInformationsForSell = null;
            this.pageIndex = param1.readVarUhShort();
            if (this.pageIndex < 0) {
                throw new Error('Forbidden value (' + this.pageIndex + ') on element of PaddockToSellListMessage.pageIndex.');
            }
            this.totalPage = param1.readVarUhShort();
            if (this.totalPage < 0) {
                throw new Error('Forbidden value (' + this.totalPage + ') on element of PaddockToSellListMessage.totalPage.');
            }
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = new PaddockInformationsForSell();
                _loc4_.deserialize(param1);
                this.paddockList.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class PaddockToSellListRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6141;

        pageIndex: number;

        constructor() {
            this.pageIndex = 0;
            super();
        }

        public getMessageId(): number {
            return PaddockToSellListRequestMessage.ID;
        }

        public reset(): void {
            this.pageIndex = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_PaddockToSellListRequestMessage(param1);
        }

        public serializeAs_PaddockToSellListRequestMessage(param1: ICustomDataOutput): void {
            if (this.pageIndex < 0) {
                throw new Error('Forbidden value (' + this.pageIndex + ') on element pageIndex.');
            }
            param1.writeVarShort(this.pageIndex);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_PaddockToSellListRequestMessage(param1);
        }

        public deserializeAs_PaddockToSellListRequestMessage(param1: ICustomDataInput): void {
            this.pageIndex = param1.readVarUhShort();
            if (this.pageIndex < 0) {
                throw new Error('Forbidden value (' + this.pageIndex + ') on element of PaddockToSellListRequestMessage.pageIndex.');
            }

        }
    }
    export class AbstractPartyMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6274;

        partyId: number;

        constructor() {
            this.partyId = 0;
            super();
        }

        public getMessageId(): number {
            return AbstractPartyMessage.ID;
        }

        public reset(): void {
            this.partyId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_AbstractPartyMessage(param1);
        }

        public serializeAs_AbstractPartyMessage(param1: ICustomDataOutput): void {
            if (this.partyId < 0) {
                throw new Error('Forbidden value (' + this.partyId + ') on element partyId.');
            }
            param1.writeVarInt(this.partyId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_AbstractPartyMessage(param1);
        }

        public deserializeAs_AbstractPartyMessage(param1: ICustomDataInput): void {
            this.partyId = param1.readVarUhInt();
            if (this.partyId < 0) {
                throw new Error('Forbidden value (' + this.partyId + ') on element of AbstractPartyMessage.partyId.');
            }

        }
    }
    export class AbstractPartyEventMessage extends AbstractPartyMessage {
        public static ID: number = 6273;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return AbstractPartyEventMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_AbstractPartyEventMessage(param1);
        }

        public serializeAs_AbstractPartyEventMessage(param1: ICustomDataOutput): void {
            super.serializeAs_AbstractPartyMessage(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_AbstractPartyEventMessage(param1);
        }

        public deserializeAs_AbstractPartyEventMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);

        }
    }
    export class DungeonPartyFinderAvailableDungeonsMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6242;

        dungeonIds: number[];

        constructor() {
            this.dungeonIds = [];
            super();
        }

        public getMessageId(): number {
            return DungeonPartyFinderAvailableDungeonsMessage.ID;
        }

        public reset(): void {
            this.dungeonIds = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_DungeonPartyFinderAvailableDungeonsMessage(param1);
        }

        public serializeAs_DungeonPartyFinderAvailableDungeonsMessage(param1: ICustomDataOutput): void {
            param1.writeShort(this.dungeonIds.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.dungeonIds.length) {
                if (this.dungeonIds[_loc2_] < 0) {
                    throw new Error('Forbidden value (' + this.dungeonIds[_loc2_] + ') on element 1 (starting at 1) of dungeonIds.');
                }
                param1.writeVarShort(this.dungeonIds[_loc2_]);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_DungeonPartyFinderAvailableDungeonsMessage(param1);
        }

        public deserializeAs_DungeonPartyFinderAvailableDungeonsMessage(param1: ICustomDataInput): void {
            var _loc4_: number = 0;
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = param1.readVarUhShort();
                if (_loc4_ < 0) {
                    throw new Error('Forbidden value (' + _loc4_ + ') on elements of dungeonIds.');
                }
                this.dungeonIds.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class DungeonPartyFinderAvailableDungeonsRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6240;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return DungeonPartyFinderAvailableDungeonsRequestMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_DungeonPartyFinderAvailableDungeonsRequestMessage(param1);
        }

        public serializeAs_DungeonPartyFinderAvailableDungeonsRequestMessage(param1: ICustomDataOutput): void {

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_DungeonPartyFinderAvailableDungeonsRequestMessage(param1);
        }

        public deserializeAs_DungeonPartyFinderAvailableDungeonsRequestMessage(param1: ICustomDataInput): void {

        }
    }
    export class DungeonPartyFinderListenErrorMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6248;

        dungeonId: number;

        constructor() {
            this.dungeonId = 0;
            super();
        }

        public getMessageId(): number {
            return DungeonPartyFinderListenErrorMessage.ID;
        }

        public reset(): void {
            this.dungeonId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_DungeonPartyFinderListenErrorMessage(param1);
        }

        public serializeAs_DungeonPartyFinderListenErrorMessage(param1: ICustomDataOutput): void {
            if (this.dungeonId < 0) {
                throw new Error('Forbidden value (' + this.dungeonId + ') on element dungeonId.');
            }
            param1.writeVarShort(this.dungeonId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_DungeonPartyFinderListenErrorMessage(param1);
        }

        public deserializeAs_DungeonPartyFinderListenErrorMessage(param1: ICustomDataInput): void {
            this.dungeonId = param1.readVarUhShort();
            if (this.dungeonId < 0) {
                throw new Error('Forbidden value (' + this.dungeonId + ') on element of DungeonPartyFinderListenErrorMessage.dungeonId.');
            }

        }
    }
    export class DungeonPartyFinderListenRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6246;

        dungeonId: number;

        constructor() {
            this.dungeonId = 0;
            super();
        }

        public getMessageId(): number {
            return DungeonPartyFinderListenRequestMessage.ID;
        }

        public reset(): void {
            this.dungeonId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_DungeonPartyFinderListenRequestMessage(param1);
        }

        public serializeAs_DungeonPartyFinderListenRequestMessage(param1: ICustomDataOutput): void {
            if (this.dungeonId < 0) {
                throw new Error('Forbidden value (' + this.dungeonId + ') on element dungeonId.');
            }
            param1.writeVarShort(this.dungeonId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_DungeonPartyFinderListenRequestMessage(param1);
        }

        public deserializeAs_DungeonPartyFinderListenRequestMessage(param1: ICustomDataInput): void {
            this.dungeonId = param1.readVarUhShort();
            if (this.dungeonId < 0) {
                throw new Error('Forbidden value (' + this.dungeonId + ') on element of DungeonPartyFinderListenRequestMessage.dungeonId.');
            }

        }
    }
    export class DungeonPartyFinderRegisterErrorMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6243;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return DungeonPartyFinderRegisterErrorMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_DungeonPartyFinderRegisterErrorMessage(param1);
        }

        public serializeAs_DungeonPartyFinderRegisterErrorMessage(param1: ICustomDataOutput): void {

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_DungeonPartyFinderRegisterErrorMessage(param1);
        }

        public deserializeAs_DungeonPartyFinderRegisterErrorMessage(param1: ICustomDataInput): void {

        }
    }
    export class DungeonPartyFinderRegisterRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6249;

        dungeonIds: number[];

        constructor() {
            this.dungeonIds = [];
            super();
        }

        public getMessageId(): number {
            return DungeonPartyFinderRegisterRequestMessage.ID;
        }

        public reset(): void {
            this.dungeonIds = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_DungeonPartyFinderRegisterRequestMessage(param1);
        }

        public serializeAs_DungeonPartyFinderRegisterRequestMessage(param1: ICustomDataOutput): void {
            param1.writeShort(this.dungeonIds.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.dungeonIds.length) {
                if (this.dungeonIds[_loc2_] < 0) {
                    throw new Error('Forbidden value (' + this.dungeonIds[_loc2_] + ') on element 1 (starting at 1) of dungeonIds.');
                }
                param1.writeVarShort(this.dungeonIds[_loc2_]);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_DungeonPartyFinderRegisterRequestMessage(param1);
        }

        public deserializeAs_DungeonPartyFinderRegisterRequestMessage(param1: ICustomDataInput): void {
            var _loc4_: number = 0;
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = param1.readVarUhShort();
                if (_loc4_ < 0) {
                    throw new Error('Forbidden value (' + _loc4_ + ') on elements of dungeonIds.');
                }
                this.dungeonIds.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class DungeonPartyFinderRegisterSuccessMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6241;

        dungeonIds: number[];

        constructor() {
            this.dungeonIds = [];
            super();
        }

        public getMessageId(): number {
            return DungeonPartyFinderRegisterSuccessMessage.ID;
        }

        public reset(): void {
            this.dungeonIds = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_DungeonPartyFinderRegisterSuccessMessage(param1);
        }

        public serializeAs_DungeonPartyFinderRegisterSuccessMessage(param1: ICustomDataOutput): void {
            param1.writeShort(this.dungeonIds.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.dungeonIds.length) {
                if (this.dungeonIds[_loc2_] < 0) {
                    throw new Error('Forbidden value (' + this.dungeonIds[_loc2_] + ') on element 1 (starting at 1) of dungeonIds.');
                }
                param1.writeVarShort(this.dungeonIds[_loc2_]);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_DungeonPartyFinderRegisterSuccessMessage(param1);
        }

        public deserializeAs_DungeonPartyFinderRegisterSuccessMessage(param1: ICustomDataInput): void {
            var _loc4_: number = 0;
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = param1.readVarUhShort();
                if (_loc4_ < 0) {
                    throw new Error('Forbidden value (' + _loc4_ + ') on elements of dungeonIds.');
                }
                this.dungeonIds.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class DungeonPartyFinderRoomContentMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6247;

        dungeonId: number;
        players: DungeonPartyFinderPlayer[];

        constructor() {
            this.dungeonId = 0;
            this.players = [];
            super();
        }

        public getMessageId(): number {
            return DungeonPartyFinderRoomContentMessage.ID;
        }

        public reset(): void {
            this.dungeonId = 0;
            this.players = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_DungeonPartyFinderRoomContentMessage(param1);
        }

        public serializeAs_DungeonPartyFinderRoomContentMessage(param1: ICustomDataOutput): void {
            if (this.dungeonId < 0) {
                throw new Error('Forbidden value (' + this.dungeonId + ') on element dungeonId.');
            }
            param1.writeVarShort(this.dungeonId);
            param1.writeShort(this.players.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.players.length) {
                (this.players[_loc2_]).serializeAs_DungeonPartyFinderPlayer(param1);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_DungeonPartyFinderRoomContentMessage(param1);
        }

        public deserializeAs_DungeonPartyFinderRoomContentMessage(param1: ICustomDataInput): void {
            var _loc4_: DungeonPartyFinderPlayer = null;
            this.dungeonId = param1.readVarUhShort();
            if (this.dungeonId < 0) {
                throw new Error('Forbidden value (' + this.dungeonId + ') on element of DungeonPartyFinderRoomContentMessage.dungeonId.');
            }
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = new DungeonPartyFinderPlayer();
                _loc4_.deserialize(param1);
                this.players.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class DungeonPartyFinderRoomContentUpdateMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6250;

        dungeonId: number;
        addedPlayers: DungeonPartyFinderPlayer[];
        removedPlayersIds: number[];

        constructor() {
            this.dungeonId = 0;
            this.addedPlayers = [];
            this.removedPlayersIds = [];
            super();
        }

        public getMessageId(): number {
            return DungeonPartyFinderRoomContentUpdateMessage.ID;
        }

        public reset(): void {
            this.dungeonId = 0;
            this.addedPlayers = [];
            this.removedPlayersIds = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_DungeonPartyFinderRoomContentUpdateMessage(param1);
        }

        public serializeAs_DungeonPartyFinderRoomContentUpdateMessage(param1: ICustomDataOutput): void {
            if (this.dungeonId < 0) {
                throw new Error('Forbidden value (' + this.dungeonId + ') on element dungeonId.');
            }
            param1.writeVarShort(this.dungeonId);
            param1.writeShort(this.addedPlayers.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.addedPlayers.length) {
                (this.addedPlayers[_loc2_]).serializeAs_DungeonPartyFinderPlayer(param1);
                _loc2_++;
            }
            param1.writeShort(this.removedPlayersIds.length);
            var _loc3_: number = 0;
            while (_loc3_ < this.removedPlayersIds.length) {
                if (this.removedPlayersIds[_loc3_] < 0) {
                    throw new Error('Forbidden value (' + this.removedPlayersIds[_loc3_] + ') on element 3 (starting at 1) of removedPlayersIds.');
                }
                param1.writeVarInt(this.removedPlayersIds[_loc3_]);
                _loc3_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_DungeonPartyFinderRoomContentUpdateMessage(param1);
        }

        public deserializeAs_DungeonPartyFinderRoomContentUpdateMessage(param1: ICustomDataInput): void {
            var _loc6_: DungeonPartyFinderPlayer = null;
            var _loc7_: number = 0;
            this.dungeonId = param1.readVarUhShort();
            if (this.dungeonId < 0) {
                throw new Error('Forbidden value (' + this.dungeonId + ') on element of DungeonPartyFinderRoomContentUpdateMessage.dungeonId.');
            }
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc6_ = new DungeonPartyFinderPlayer();
                _loc6_.deserialize(param1);
                this.addedPlayers.push(_loc6_);
                _loc3_++;
            }
            var _loc4_: number = param1.readUnsignedShort();
            var _loc5_: number = 0;
            while (_loc5_ < _loc4_) {
            _loc7_ = param1.readVarUhInt();
                if (_loc7_ < 0) {
                    throw new Error('Forbidden value (' + _loc7_ + ') on elements of removedPlayersIds.');
                }
                this.removedPlayersIds.push(_loc7_);
                _loc5_++;
            }

        }
    }
    export class PartyAbdicateThroneMessage extends AbstractPartyMessage {
        public static ID: number = 6080;

        playerId: number;

        constructor() {
            this.playerId = 0;
            super();
        }

        public getMessageId(): number {
            return PartyAbdicateThroneMessage.ID;
        }

        public reset(): void {
            this.playerId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_PartyAbdicateThroneMessage(param1);
        }

        public serializeAs_PartyAbdicateThroneMessage(param1: ICustomDataOutput): void {
            super.serializeAs_AbstractPartyMessage(param1);
            if (this.playerId < 0) {
                throw new Error('Forbidden value (' + this.playerId + ') on element playerId.');
            }
            param1.writeVarInt(this.playerId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_PartyAbdicateThroneMessage(param1);
        }

        public deserializeAs_PartyAbdicateThroneMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.playerId = param1.readVarUhInt();
            if (this.playerId < 0) {
                throw new Error('Forbidden value (' + this.playerId + ') on element of PartyAbdicateThroneMessage.playerId.');
            }

        }
    }
    export class PartyAcceptInvitationMessage extends AbstractPartyMessage {
        public static ID: number = 5580;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return PartyAcceptInvitationMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_PartyAcceptInvitationMessage(param1);
        }

        public serializeAs_PartyAcceptInvitationMessage(param1: ICustomDataOutput): void {
            super.serializeAs_AbstractPartyMessage(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_PartyAcceptInvitationMessage(param1);
        }

        public deserializeAs_PartyAcceptInvitationMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);

        }
    }
    export class PartyCancelInvitationMessage extends AbstractPartyMessage {
        public static ID: number = 6254;

        guestId: number;

        constructor() {
            this.guestId = 0;
            super();
        }

        public getMessageId(): number {
            return PartyCancelInvitationMessage.ID;
        }

        public reset(): void {
            this.guestId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_PartyCancelInvitationMessage(param1);
        }

        public serializeAs_PartyCancelInvitationMessage(param1: ICustomDataOutput): void {
            super.serializeAs_AbstractPartyMessage(param1);
            if (this.guestId < 0) {
                throw new Error('Forbidden value (' + this.guestId + ') on element guestId.');
            }
            param1.writeVarInt(this.guestId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_PartyCancelInvitationMessage(param1);
        }

        public deserializeAs_PartyCancelInvitationMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.guestId = param1.readVarUhInt();
            if (this.guestId < 0) {
                throw new Error('Forbidden value (' + this.guestId + ') on element of PartyCancelInvitationMessage.guestId.');
            }

        }
    }
    export class PartyCancelInvitationNotificationMessage extends AbstractPartyEventMessage {
        public static ID: number = 6251;

        cancelerId: number;
        guestId: number;

        constructor() {
            this.cancelerId = 0;
            this.guestId = 0;
            super();
        }

        public getMessageId(): number {
            return PartyCancelInvitationNotificationMessage.ID;
        }

        public reset(): void {
            this.cancelerId = 0;
            this.guestId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_PartyCancelInvitationNotificationMessage(param1);
        }

        public serializeAs_PartyCancelInvitationNotificationMessage(param1: ICustomDataOutput): void {
            super.serializeAs_AbstractPartyEventMessage(param1);
            if (this.cancelerId < 0) {
                throw new Error('Forbidden value (' + this.cancelerId + ') on element cancelerId.');
            }
            param1.writeVarInt(this.cancelerId);
            if (this.guestId < 0) {
                throw new Error('Forbidden value (' + this.guestId + ') on element guestId.');
            }
            param1.writeVarInt(this.guestId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_PartyCancelInvitationNotificationMessage(param1);
        }

        public deserializeAs_PartyCancelInvitationNotificationMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.cancelerId = param1.readVarUhInt();
            if (this.cancelerId < 0) {
                throw new Error('Forbidden value (' + this.cancelerId + ') on element of PartyCancelInvitationNotificationMessage.cancelerId.');
            }
            this.guestId = param1.readVarUhInt();
            if (this.guestId < 0) {
                throw new Error('Forbidden value (' + this.guestId + ') on element of PartyCancelInvitationNotificationMessage.guestId.');
            }

        }
    }
    export class PartyCannotJoinErrorMessage extends AbstractPartyMessage {
        public static ID: number = 5583;

        reason: number;

        constructor() {
            this.reason = 0;
            super();
        }

        public getMessageId(): number {
            return PartyCannotJoinErrorMessage.ID;
        }

        public reset(): void {
            this.reason = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_PartyCannotJoinErrorMessage(param1);
        }

        public serializeAs_PartyCannotJoinErrorMessage(param1: ICustomDataOutput): void {
            super.serializeAs_AbstractPartyMessage(param1);
            param1.writeByte(this.reason);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_PartyCannotJoinErrorMessage(param1);
        }

        public deserializeAs_PartyCannotJoinErrorMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.reason = param1.readByte();
            if (this.reason < 0) {
                throw new Error('Forbidden value (' + this.reason + ') on element of PartyCannotJoinErrorMessage.reason.');
            }

        }
    }
    export class PartyDeletedMessage extends AbstractPartyMessage {
        public static ID: number = 6261;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return PartyDeletedMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_PartyDeletedMessage(param1);
        }

        public serializeAs_PartyDeletedMessage(param1: ICustomDataOutput): void {
            super.serializeAs_AbstractPartyMessage(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_PartyDeletedMessage(param1);
        }

        public deserializeAs_PartyDeletedMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);

        }
    }
    export class PartyFollowMemberRequestMessage extends AbstractPartyMessage {
        public static ID: number = 5577;

        playerId: number;

        constructor() {
            this.playerId = 0;
            super();
        }

        public getMessageId(): number {
            return PartyFollowMemberRequestMessage.ID;
        }

        public reset(): void {
            this.playerId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_PartyFollowMemberRequestMessage(param1);
        }

        public serializeAs_PartyFollowMemberRequestMessage(param1: ICustomDataOutput): void {
            super.serializeAs_AbstractPartyMessage(param1);
            if (this.playerId < 0) {
                throw new Error('Forbidden value (' + this.playerId + ') on element playerId.');
            }
            param1.writeVarInt(this.playerId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_PartyFollowMemberRequestMessage(param1);
        }

        public deserializeAs_PartyFollowMemberRequestMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.playerId = param1.readVarUhInt();
            if (this.playerId < 0) {
                throw new Error('Forbidden value (' + this.playerId + ') on element of PartyFollowMemberRequestMessage.playerId.');
            }

        }
    }
    export class PartyFollowStatusUpdateMessage extends AbstractPartyMessage {
        public static ID: number = 5581;

        success: boolean;
        followedId: number;

        constructor() {
            this.success = false;
            this.followedId = 0;
            super();
        }

        public getMessageId(): number {
            return PartyFollowStatusUpdateMessage.ID;
        }

        public reset(): void {
            this.success = false;
            this.followedId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_PartyFollowStatusUpdateMessage(param1);
        }

        public serializeAs_PartyFollowStatusUpdateMessage(param1: ICustomDataOutput): void {
            super.serializeAs_AbstractPartyMessage(param1);
            param1.writeBoolean(this.success);
            if (this.followedId < 0) {
                throw new Error('Forbidden value (' + this.followedId + ') on element followedId.');
            }
            param1.writeVarInt(this.followedId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_PartyFollowStatusUpdateMessage(param1);
        }

        public deserializeAs_PartyFollowStatusUpdateMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.success = param1.readBoolean();
            this.followedId = param1.readVarUhInt();
            if (this.followedId < 0) {
                throw new Error('Forbidden value (' + this.followedId + ') on element of PartyFollowStatusUpdateMessage.followedId.');
            }

        }
    }
    export class PartyFollowThisMemberRequestMessage extends PartyFollowMemberRequestMessage {
        public static ID: number = 5588;

        enabled: boolean;

        constructor() {
            this.enabled = false;
            super();
        }

        public getMessageId(): number {
            return PartyFollowThisMemberRequestMessage.ID;
        }

        public reset(): void {
            this.enabled = false;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_PartyFollowThisMemberRequestMessage(param1);
        }

        public serializeAs_PartyFollowThisMemberRequestMessage(param1: ICustomDataOutput): void {
            super.serializeAs_PartyFollowMemberRequestMessage(param1);
            param1.writeBoolean(this.enabled);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_PartyFollowThisMemberRequestMessage(param1);
        }

        public deserializeAs_PartyFollowThisMemberRequestMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.enabled = param1.readBoolean();

        }
    }
    export class PartyInvitationRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5585;

        name: string;

        constructor() {
            this.name = '';
            super();
        }

        public getMessageId(): number {
            return PartyInvitationRequestMessage.ID;
        }

        public reset(): void {
            this.name = '';
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_PartyInvitationRequestMessage(param1);
        }

        public serializeAs_PartyInvitationRequestMessage(param1: ICustomDataOutput): void {
            param1.writeUTF(this.name);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_PartyInvitationRequestMessage(param1);
        }

        public deserializeAs_PartyInvitationRequestMessage(param1: ICustomDataInput): void {
            this.name = param1.readUTF();

        }
    }
    export class PartyInvitationArenaRequestMessage extends PartyInvitationRequestMessage {
        public static ID: number = 6283;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return PartyInvitationArenaRequestMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_PartyInvitationArenaRequestMessage(param1);
        }

        public serializeAs_PartyInvitationArenaRequestMessage(param1: ICustomDataOutput): void {
            super.serializeAs_PartyInvitationRequestMessage(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_PartyInvitationArenaRequestMessage(param1);
        }

        public deserializeAs_PartyInvitationArenaRequestMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);

        }
    }
    export class PartyInvitationCancelledForGuestMessage extends AbstractPartyMessage {
        public static ID: number = 6256;

        cancelerId: number;

        constructor() {
            this.cancelerId = 0;
            super();
        }

        public getMessageId(): number {
            return PartyInvitationCancelledForGuestMessage.ID;
        }

        public reset(): void {
            this.cancelerId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_PartyInvitationCancelledForGuestMessage(param1);
        }

        public serializeAs_PartyInvitationCancelledForGuestMessage(param1: ICustomDataOutput): void {
            super.serializeAs_AbstractPartyMessage(param1);
            if (this.cancelerId < 0) {
                throw new Error('Forbidden value (' + this.cancelerId + ') on element cancelerId.');
            }
            param1.writeVarInt(this.cancelerId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_PartyInvitationCancelledForGuestMessage(param1);
        }

        public deserializeAs_PartyInvitationCancelledForGuestMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.cancelerId = param1.readVarUhInt();
            if (this.cancelerId < 0) {
                throw new Error('Forbidden value (' + this.cancelerId + ') on element of PartyInvitationCancelledForGuestMessage.cancelerId.');
            }

        }
    }
    export class PartyInvitationDetailsMessage extends AbstractPartyMessage {
        public static ID: number = 6263;

        partyType: number;
        partyName: string;
        fromId: number;
        fromName: string;
        leaderId: number;
        members: PartyInvitationMemberInformations[];
        guests: PartyGuestInformations[];

        constructor() {
            this.partyType = 0;
            this.partyName = '';
            this.fromId = 0;
            this.fromName = '';
            this.leaderId = 0;
            this.members = [];
            this.guests = [];
            super();
        }

        public getMessageId(): number {
            return PartyInvitationDetailsMessage.ID;
        }

        public reset(): void {
            this.partyType = 0;
            this.partyName = '';
            this.fromId = 0;
            this.fromName = '';
            this.leaderId = 0;
            this.members = [];
            this.guests = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_PartyInvitationDetailsMessage(param1);
        }

        public serializeAs_PartyInvitationDetailsMessage(param1: ICustomDataOutput): void {
            super.serializeAs_AbstractPartyMessage(param1);
            param1.writeByte(this.partyType);
            param1.writeUTF(this.partyName);
            if (this.fromId < 0) {
                throw new Error('Forbidden value (' + this.fromId + ') on element fromId.');
            }
            param1.writeVarInt(this.fromId);
            param1.writeUTF(this.fromName);
            if (this.leaderId < 0) {
                throw new Error('Forbidden value (' + this.leaderId + ') on element leaderId.');
            }
            param1.writeVarInt(this.leaderId);
            param1.writeShort(this.members.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.members.length) {
                (this.members[_loc2_]).serializeAs_PartyInvitationMemberInformations(param1);
                _loc2_++;
            }
            param1.writeShort(this.guests.length);
            var _loc3_: number = 0;
            while (_loc3_ < this.guests.length) {
                (this.guests[_loc3_]).serializeAs_PartyGuestInformations(param1);
                _loc3_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_PartyInvitationDetailsMessage(param1);
        }

        public deserializeAs_PartyInvitationDetailsMessage(param1: ICustomDataInput): void {
            var _loc6_: PartyInvitationMemberInformations = null;
            var _loc7_: PartyGuestInformations = null;
            super.deserialize(param1);
            this.partyType = param1.readByte();
            if (this.partyType < 0) {
                throw new Error('Forbidden value (' + this.partyType + ') on element of PartyInvitationDetailsMessage.partyType.');
            }
            this.partyName = param1.readUTF();
            this.fromId = param1.readVarUhInt();
            if (this.fromId < 0) {
                throw new Error('Forbidden value (' + this.fromId + ') on element of PartyInvitationDetailsMessage.fromId.');
            }
            this.fromName = param1.readUTF();
            this.leaderId = param1.readVarUhInt();
            if (this.leaderId < 0) {
                throw new Error('Forbidden value (' + this.leaderId + ') on element of PartyInvitationDetailsMessage.leaderId.');
            }
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc6_ = new PartyInvitationMemberInformations();
                _loc6_.deserialize(param1);
                this.members.push(_loc6_);
                _loc3_++;
            }
            var _loc4_: number = param1.readUnsignedShort();
            var _loc5_: number = 0;
            while (_loc5_ < _loc4_) {
            _loc7_ = new PartyGuestInformations();
                _loc7_.deserialize(param1);
                this.guests.push(_loc7_);
                _loc5_++;
            }

        }
    }
    export class PartyInvitationDetailsRequestMessage extends AbstractPartyMessage {
        public static ID: number = 6264;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return PartyInvitationDetailsRequestMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_PartyInvitationDetailsRequestMessage(param1);
        }

        public serializeAs_PartyInvitationDetailsRequestMessage(param1: ICustomDataOutput): void {
            super.serializeAs_AbstractPartyMessage(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_PartyInvitationDetailsRequestMessage(param1);
        }

        public deserializeAs_PartyInvitationDetailsRequestMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);

        }
    }
    export class PartyInvitationDungeonDetailsMessage extends PartyInvitationDetailsMessage {
        public static ID: number = 6262;

        dungeonId: number;
        playersDungeonReady: boolean[];

        constructor() {
            this.dungeonId = 0;
            this.playersDungeonReady = [];
            super();
        }

        public getMessageId(): number {
            return PartyInvitationDungeonDetailsMessage.ID;
        }

        public reset(): void {
            this.dungeonId = 0;
            this.playersDungeonReady = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_PartyInvitationDungeonDetailsMessage(param1);
        }

        public serializeAs_PartyInvitationDungeonDetailsMessage(param1: ICustomDataOutput): void {
            super.serializeAs_PartyInvitationDetailsMessage(param1);
            if (this.dungeonId < 0) {
                throw new Error('Forbidden value (' + this.dungeonId + ') on element dungeonId.');
            }
            param1.writeVarShort(this.dungeonId);
            param1.writeShort(this.playersDungeonReady.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.playersDungeonReady.length) {
                param1.writeBoolean(this.playersDungeonReady[_loc2_]);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_PartyInvitationDungeonDetailsMessage(param1);
        }

        public deserializeAs_PartyInvitationDungeonDetailsMessage(param1: ICustomDataInput): void {
            var _loc4_: any = false;
            super.deserialize(param1);
            this.dungeonId = param1.readVarUhShort();
            if (this.dungeonId < 0) {
                throw new Error('Forbidden value (' + this.dungeonId + ') on element of PartyInvitationDungeonDetailsMessage.dungeonId.');
            }
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = param1.readBoolean();
                this.playersDungeonReady.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class PartyInvitationMessage extends AbstractPartyMessage {
        public static ID: number = 5586;

        partyType: number;
        partyName: string;
        maxParticipants: number;
        fromId: number;
        fromName: string;
        toId: number;

        constructor() {
            this.partyType = 0;
            this.partyName = '';
            this.maxParticipants = 0;
            this.fromId = 0;
            this.fromName = '';
            this.toId = 0;
            super();
        }

        public getMessageId(): number {
            return PartyInvitationMessage.ID;
        }

        public reset(): void {
            this.partyType = 0;
            this.partyName = '';
            this.maxParticipants = 0;
            this.fromId = 0;
            this.fromName = '';
            this.toId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_PartyInvitationMessage(param1);
        }

        public serializeAs_PartyInvitationMessage(param1: ICustomDataOutput): void {
            super.serializeAs_AbstractPartyMessage(param1);
            param1.writeByte(this.partyType);
            param1.writeUTF(this.partyName);
            if (this.maxParticipants < 0) {
                throw new Error('Forbidden value (' + this.maxParticipants + ') on element maxParticipants.');
            }
            param1.writeByte(this.maxParticipants);
            if (this.fromId < 0) {
                throw new Error('Forbidden value (' + this.fromId + ') on element fromId.');
            }
            param1.writeVarInt(this.fromId);
            param1.writeUTF(this.fromName);
            if (this.toId < 0) {
                throw new Error('Forbidden value (' + this.toId + ') on element toId.');
            }
            param1.writeVarInt(this.toId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_PartyInvitationMessage(param1);
        }

        public deserializeAs_PartyInvitationMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.partyType = param1.readByte();
            if (this.partyType < 0) {
                throw new Error('Forbidden value (' + this.partyType + ') on element of PartyInvitationMessage.partyType.');
            }
            this.partyName = param1.readUTF();
            this.maxParticipants = param1.readByte();
            if (this.maxParticipants < 0) {
                throw new Error('Forbidden value (' + this.maxParticipants + ') on element of PartyInvitationMessage.maxParticipants.');
            }
            this.fromId = param1.readVarUhInt();
            if (this.fromId < 0) {
                throw new Error('Forbidden value (' + this.fromId + ') on element of PartyInvitationMessage.fromId.');
            }
            this.fromName = param1.readUTF();
            this.toId = param1.readVarUhInt();
            if (this.toId < 0) {
                throw new Error('Forbidden value (' + this.toId + ') on element of PartyInvitationMessage.toId.');
            }

        }
    }
    export class PartyInvitationDungeonMessage extends PartyInvitationMessage {
        public static ID: number = 6244;

        dungeonId: number;

        constructor() {
            this.dungeonId = 0;
            super();
        }

        public getMessageId(): number {
            return PartyInvitationDungeonMessage.ID;
        }

        public reset(): void {
            this.dungeonId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_PartyInvitationDungeonMessage(param1);
        }

        public serializeAs_PartyInvitationDungeonMessage(param1: ICustomDataOutput): void {
            super.serializeAs_PartyInvitationMessage(param1);
            if (this.dungeonId < 0) {
                throw new Error('Forbidden value (' + this.dungeonId + ') on element dungeonId.');
            }
            param1.writeVarShort(this.dungeonId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_PartyInvitationDungeonMessage(param1);
        }

        public deserializeAs_PartyInvitationDungeonMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.dungeonId = param1.readVarUhShort();
            if (this.dungeonId < 0) {
                throw new Error('Forbidden value (' + this.dungeonId + ') on element of PartyInvitationDungeonMessage.dungeonId.');
            }

        }
    }
    export class PartyInvitationDungeonRequestMessage extends PartyInvitationRequestMessage {
        public static ID: number = 6245;

        dungeonId: number;

        constructor() {
            this.dungeonId = 0;
            super();
        }

        public getMessageId(): number {
            return PartyInvitationDungeonRequestMessage.ID;
        }

        public reset(): void {
            this.dungeonId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_PartyInvitationDungeonRequestMessage(param1);
        }

        public serializeAs_PartyInvitationDungeonRequestMessage(param1: ICustomDataOutput): void {
            super.serializeAs_PartyInvitationRequestMessage(param1);
            if (this.dungeonId < 0) {
                throw new Error('Forbidden value (' + this.dungeonId + ') on element dungeonId.');
            }
            param1.writeVarShort(this.dungeonId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_PartyInvitationDungeonRequestMessage(param1);
        }

        public deserializeAs_PartyInvitationDungeonRequestMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.dungeonId = param1.readVarUhShort();
            if (this.dungeonId < 0) {
                throw new Error('Forbidden value (' + this.dungeonId + ') on element of PartyInvitationDungeonRequestMessage.dungeonId.');
            }

        }
    }
    export class PartyJoinMessage extends AbstractPartyMessage {
        public static ID: number = 5576;

        partyType: number;
        partyLeaderId: number;
        maxParticipants: number;
        members: PartyMemberInformations[];
        guests: PartyGuestInformations[];
        restricted: boolean;
        partyName: string;

        constructor() {
            this.partyType = 0;
            this.partyLeaderId = 0;
            this.maxParticipants = 0;
            this.members = [];
            this.guests = [];
            this.restricted = false;
            this.partyName = '';
            super();
        }

        public getMessageId(): number {
            return PartyJoinMessage.ID;
        }

        public reset(): void {
            this.partyType = 0;
            this.partyLeaderId = 0;
            this.maxParticipants = 0;
            this.members = [];
            this.guests = [];
            this.restricted = false;
            this.partyName = '';
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_PartyJoinMessage(param1);
        }

        public serializeAs_PartyJoinMessage(param1: ICustomDataOutput): void {
            super.serializeAs_AbstractPartyMessage(param1);
            param1.writeByte(this.partyType);
            if (this.partyLeaderId < 0) {
                throw new Error('Forbidden value (' + this.partyLeaderId + ') on element partyLeaderId.');
            }
            param1.writeVarInt(this.partyLeaderId);
            if (this.maxParticipants < 0) {
                throw new Error('Forbidden value (' + this.maxParticipants + ') on element maxParticipants.');
            }
            param1.writeByte(this.maxParticipants);
            param1.writeShort(this.members.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.members.length) {
                param1.writeShort((this.members[_loc2_]).getTypeId());
                (this.members[_loc2_]).serialize(param1);
                _loc2_++;
            }
            param1.writeShort(this.guests.length);
            var _loc3_: number = 0;
            while (_loc3_ < this.guests.length) {
                (this.guests[_loc3_]).serializeAs_PartyGuestInformations(param1);
                _loc3_++;
            }
            param1.writeBoolean(this.restricted);
            param1.writeUTF(this.partyName);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_PartyJoinMessage(param1);
        }

        public deserializeAs_PartyJoinMessage(param1: ICustomDataInput): void {
            var _loc6_: number = 0;
            var _loc7_: PartyMemberInformations = null;
            var _loc8_: PartyGuestInformations = null;
            super.deserialize(param1);
            this.partyType = param1.readByte();
            if (this.partyType < 0) {
                throw new Error('Forbidden value (' + this.partyType + ') on element of PartyJoinMessage.partyType.');
            }
            this.partyLeaderId = param1.readVarUhInt();
            if (this.partyLeaderId < 0) {
                throw new Error('Forbidden value (' + this.partyLeaderId + ') on element of PartyJoinMessage.partyLeaderId.');
            }
            this.maxParticipants = param1.readByte();
            if (this.maxParticipants < 0) {
                throw new Error('Forbidden value (' + this.maxParticipants + ') on element of PartyJoinMessage.maxParticipants.');
            }
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc6_ = param1.readUnsignedShort();
                _loc7_ = <PartyMemberInformations>ProtocolTypeManager.getInstance(PartyMemberInformations, _loc6_);
                _loc7_.deserialize(param1);
                this.members.push(_loc7_);
                _loc3_++;
            }
            var _loc4_: number = param1.readUnsignedShort();
            var _loc5_: number = 0;
            while (_loc5_ < _loc4_) {
            _loc8_ = new PartyGuestInformations();
                _loc8_.deserialize(param1);
                this.guests.push(_loc8_);
                _loc5_++;
            }
            this.restricted = param1.readBoolean();
            this.partyName = param1.readUTF();

        }
    }
    export class PartyKickRequestMessage extends AbstractPartyMessage {
        public static ID: number = 5592;

        playerId: number;

        constructor() {
            this.playerId = 0;
            super();
        }

        public getMessageId(): number {
            return PartyKickRequestMessage.ID;
        }

        public reset(): void {
            this.playerId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_PartyKickRequestMessage(param1);
        }

        public serializeAs_PartyKickRequestMessage(param1: ICustomDataOutput): void {
            super.serializeAs_AbstractPartyMessage(param1);
            if (this.playerId < 0) {
                throw new Error('Forbidden value (' + this.playerId + ') on element playerId.');
            }
            param1.writeVarInt(this.playerId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_PartyKickRequestMessage(param1);
        }

        public deserializeAs_PartyKickRequestMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.playerId = param1.readVarUhInt();
            if (this.playerId < 0) {
                throw new Error('Forbidden value (' + this.playerId + ') on element of PartyKickRequestMessage.playerId.');
            }

        }
    }
    export class PartyKickedByMessage extends AbstractPartyMessage {
        public static ID: number = 5590;

        kickerId: number;

        constructor() {
            this.kickerId = 0;
            super();
        }

        public getMessageId(): number {
            return PartyKickedByMessage.ID;
        }

        public reset(): void {
            this.kickerId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_PartyKickedByMessage(param1);
        }

        public serializeAs_PartyKickedByMessage(param1: ICustomDataOutput): void {
            super.serializeAs_AbstractPartyMessage(param1);
            if (this.kickerId < 0) {
                throw new Error('Forbidden value (' + this.kickerId + ') on element kickerId.');
            }
            param1.writeVarInt(this.kickerId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_PartyKickedByMessage(param1);
        }

        public deserializeAs_PartyKickedByMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.kickerId = param1.readVarUhInt();
            if (this.kickerId < 0) {
                throw new Error('Forbidden value (' + this.kickerId + ') on element of PartyKickedByMessage.kickerId.');
            }

        }
    }
    export class PartyLeaderUpdateMessage extends AbstractPartyEventMessage {
        public static ID: number = 5578;

        partyLeaderId: number;

        constructor() {
            this.partyLeaderId = 0;
            super();
        }

        public getMessageId(): number {
            return PartyLeaderUpdateMessage.ID;
        }

        public reset(): void {
            this.partyLeaderId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_PartyLeaderUpdateMessage(param1);
        }

        public serializeAs_PartyLeaderUpdateMessage(param1: ICustomDataOutput): void {
            super.serializeAs_AbstractPartyEventMessage(param1);
            if (this.partyLeaderId < 0) {
                throw new Error('Forbidden value (' + this.partyLeaderId + ') on element partyLeaderId.');
            }
            param1.writeVarInt(this.partyLeaderId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_PartyLeaderUpdateMessage(param1);
        }

        public deserializeAs_PartyLeaderUpdateMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.partyLeaderId = param1.readVarUhInt();
            if (this.partyLeaderId < 0) {
                throw new Error('Forbidden value (' + this.partyLeaderId + ') on element of PartyLeaderUpdateMessage.partyLeaderId.');
            }

        }
    }
    export class PartyLeaveMessage extends AbstractPartyMessage {
        public static ID: number = 5594;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return PartyLeaveMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_PartyLeaveMessage(param1);
        }

        public serializeAs_PartyLeaveMessage(param1: ICustomDataOutput): void {
            super.serializeAs_AbstractPartyMessage(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_PartyLeaveMessage(param1);
        }

        public deserializeAs_PartyLeaveMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);

        }
    }
    export class PartyLeaveRequestMessage extends AbstractPartyMessage {
        public static ID: number = 5593;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return PartyLeaveRequestMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_PartyLeaveRequestMessage(param1);
        }

        public serializeAs_PartyLeaveRequestMessage(param1: ICustomDataOutput): void {
            super.serializeAs_AbstractPartyMessage(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_PartyLeaveRequestMessage(param1);
        }

        public deserializeAs_PartyLeaveRequestMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);

        }
    }
    export class PartyLocateMembersMessage extends AbstractPartyMessage {
        public static ID: number = 5595;

        geopositions: PartyMemberGeoPosition[];

        constructor() {
            this.geopositions = [];
            super();
        }

        public getMessageId(): number {
            return PartyLocateMembersMessage.ID;
        }

        public reset(): void {
            this.geopositions = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_PartyLocateMembersMessage(param1);
        }

        public serializeAs_PartyLocateMembersMessage(param1: ICustomDataOutput): void {
            super.serializeAs_AbstractPartyMessage(param1);
            param1.writeShort(this.geopositions.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.geopositions.length) {
                (this.geopositions[_loc2_]).serializeAs_PartyMemberGeoPosition(param1);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_PartyLocateMembersMessage(param1);
        }

        public deserializeAs_PartyLocateMembersMessage(param1: ICustomDataInput): void {
            var _loc4_: PartyMemberGeoPosition = null;
            super.deserialize(param1);
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = new PartyMemberGeoPosition();
                _loc4_.deserialize(param1);
                this.geopositions.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class PartyLoyaltyStatusMessage extends AbstractPartyMessage {
        public static ID: number = 6270;

        loyal: boolean;

        constructor() {
            this.loyal = false;
            super();
        }

        public getMessageId(): number {
            return PartyLoyaltyStatusMessage.ID;
        }

        public reset(): void {
            this.loyal = false;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_PartyLoyaltyStatusMessage(param1);
        }

        public serializeAs_PartyLoyaltyStatusMessage(param1: ICustomDataOutput): void {
            super.serializeAs_AbstractPartyMessage(param1);
            param1.writeBoolean(this.loyal);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_PartyLoyaltyStatusMessage(param1);
        }

        public deserializeAs_PartyLoyaltyStatusMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.loyal = param1.readBoolean();

        }
    }
    export class PartyMemberRemoveMessage extends AbstractPartyEventMessage {
        public static ID: number = 5579;

        leavingPlayerId: number;

        constructor() {
            this.leavingPlayerId = 0;
            super();
        }

        public getMessageId(): number {
            return PartyMemberRemoveMessage.ID;
        }

        public reset(): void {
            this.leavingPlayerId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_PartyMemberRemoveMessage(param1);
        }

        public serializeAs_PartyMemberRemoveMessage(param1: ICustomDataOutput): void {
            super.serializeAs_AbstractPartyEventMessage(param1);
            if (this.leavingPlayerId < 0) {
                throw new Error('Forbidden value (' + this.leavingPlayerId + ') on element leavingPlayerId.');
            }
            param1.writeVarInt(this.leavingPlayerId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_PartyMemberRemoveMessage(param1);
        }

        public deserializeAs_PartyMemberRemoveMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.leavingPlayerId = param1.readVarUhInt();
            if (this.leavingPlayerId < 0) {
                throw new Error('Forbidden value (' + this.leavingPlayerId + ') on element of PartyMemberRemoveMessage.leavingPlayerId.');
            }

        }
    }
    export class PartyMemberEjectedMessage extends PartyMemberRemoveMessage {
        public static ID: number = 6252;

        kickerId: number;

        constructor() {
            this.kickerId = 0;
            super();
        }

        public getMessageId(): number {
            return PartyMemberEjectedMessage.ID;
        }

        public reset(): void {
            this.kickerId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_PartyMemberEjectedMessage(param1);
        }

        public serializeAs_PartyMemberEjectedMessage(param1: ICustomDataOutput): void {
            super.serializeAs_PartyMemberRemoveMessage(param1);
            if (this.kickerId < 0) {
                throw new Error('Forbidden value (' + this.kickerId + ') on element kickerId.');
            }
            param1.writeVarInt(this.kickerId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_PartyMemberEjectedMessage(param1);
        }

        public deserializeAs_PartyMemberEjectedMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.kickerId = param1.readVarUhInt();
            if (this.kickerId < 0) {
                throw new Error('Forbidden value (' + this.kickerId + ') on element of PartyMemberEjectedMessage.kickerId.');
            }

        }
    }
    export class PartyMemberInFightMessage extends AbstractPartyMessage {
        public static ID: number = 6342;

        reason: number;
        memberId: number;
        memberAccountId: number;
        memberName: string;
        fightId: number;
        fightMap: MapCoordinatesExtended;
        timeBeforeFightStart: number;

        constructor() {
            this.reason = 0;
            this.memberId = 0;
            this.memberAccountId = 0;
            this.memberName = '';
            this.fightId = 0;
            this.fightMap = new MapCoordinatesExtended();
            this.timeBeforeFightStart = 0;
            super();
        }

        public getMessageId(): number {
            return PartyMemberInFightMessage.ID;
        }

        public reset(): void {
            this.reason = 0;
            this.memberId = 0;
            this.memberAccountId = 0;
            this.memberName = '';
            this.fightId = 0;
            this.fightMap = new MapCoordinatesExtended();
            this.timeBeforeFightStart = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_PartyMemberInFightMessage(param1);
        }

        public serializeAs_PartyMemberInFightMessage(param1: ICustomDataOutput): void {
            super.serializeAs_AbstractPartyMessage(param1);
            param1.writeByte(this.reason);
            if (this.memberId < 0) {
                throw new Error('Forbidden value (' + this.memberId + ') on element memberId.');
            }
            param1.writeVarInt(this.memberId);
            if (this.memberAccountId < 0) {
                throw new Error('Forbidden value (' + this.memberAccountId + ') on element memberAccountId.');
            }
            param1.writeInt(this.memberAccountId);
            param1.writeUTF(this.memberName);
            param1.writeInt(this.fightId);
            this.fightMap.serializeAs_MapCoordinatesExtended(param1);
            param1.writeVarShort(this.timeBeforeFightStart);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_PartyMemberInFightMessage(param1);
        }

        public deserializeAs_PartyMemberInFightMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.reason = param1.readByte();
            if (this.reason < 0) {
                throw new Error('Forbidden value (' + this.reason + ') on element of PartyMemberInFightMessage.reason.');
            }
            this.memberId = param1.readVarUhInt();
            if (this.memberId < 0) {
                throw new Error('Forbidden value (' + this.memberId + ') on element of PartyMemberInFightMessage.memberId.');
            }
            this.memberAccountId = param1.readInt();
            if (this.memberAccountId < 0) {
                throw new Error('Forbidden value (' + this.memberAccountId + ') on element of PartyMemberInFightMessage.memberAccountId.');
            }
            this.memberName = param1.readUTF();
            this.fightId = param1.readInt();
            this.fightMap = new MapCoordinatesExtended();
            this.fightMap.deserialize(param1);
            this.timeBeforeFightStart = param1.readVarShort();

        }
    }
    export class PartyModifiableStatusMessage extends AbstractPartyMessage {
        public static ID: number = 6277;

        enabled: boolean;

        constructor() {
            this.enabled = false;
            super();
        }

        public getMessageId(): number {
            return PartyModifiableStatusMessage.ID;
        }

        public reset(): void {
            this.enabled = false;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_PartyModifiableStatusMessage(param1);
        }

        public serializeAs_PartyModifiableStatusMessage(param1: ICustomDataOutput): void {
            super.serializeAs_AbstractPartyMessage(param1);
            param1.writeBoolean(this.enabled);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_PartyModifiableStatusMessage(param1);
        }

        public deserializeAs_PartyModifiableStatusMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.enabled = param1.readBoolean();

        }
    }
    export class PartyNameSetErrorMessage extends AbstractPartyMessage {
        public static ID: number = 6501;

        result: number;

        constructor() {
            this.result = 0;
            super();
        }

        public getMessageId(): number {
            return PartyNameSetErrorMessage.ID;
        }

        public reset(): void {
            this.result = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_PartyNameSetErrorMessage(param1);
        }

        public serializeAs_PartyNameSetErrorMessage(param1: ICustomDataOutput): void {
            super.serializeAs_AbstractPartyMessage(param1);
            param1.writeByte(this.result);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_PartyNameSetErrorMessage(param1);
        }

        public deserializeAs_PartyNameSetErrorMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.result = param1.readByte();
            if (this.result < 0) {
                throw new Error('Forbidden value (' + this.result + ') on element of PartyNameSetErrorMessage.result.');
            }

        }
    }
    export class PartyNameSetRequestMessage extends AbstractPartyMessage {
        public static ID: number = 6503;

        partyName: string;

        constructor() {
            this.partyName = '';
            super();
        }

        public getMessageId(): number {
            return PartyNameSetRequestMessage.ID;
        }

        public reset(): void {
            this.partyName = '';
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_PartyNameSetRequestMessage(param1);
        }

        public serializeAs_PartyNameSetRequestMessage(param1: ICustomDataOutput): void {
            super.serializeAs_AbstractPartyMessage(param1);
            param1.writeUTF(this.partyName);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_PartyNameSetRequestMessage(param1);
        }

        public deserializeAs_PartyNameSetRequestMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.partyName = param1.readUTF();

        }
    }
    export class PartyNameUpdateMessage extends AbstractPartyMessage {
        public static ID: number = 6502;

        partyName: string;

        constructor() {
            this.partyName = '';
            super();
        }

        public getMessageId(): number {
            return PartyNameUpdateMessage.ID;
        }

        public reset(): void {
            this.partyName = '';
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_PartyNameUpdateMessage(param1);
        }

        public serializeAs_PartyNameUpdateMessage(param1: ICustomDataOutput): void {
            super.serializeAs_AbstractPartyMessage(param1);
            param1.writeUTF(this.partyName);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_PartyNameUpdateMessage(param1);
        }

        public deserializeAs_PartyNameUpdateMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.partyName = param1.readUTF();

        }
    }
    export class PartyNewGuestMessage extends AbstractPartyEventMessage {
        public static ID: number = 6260;

        guest: PartyGuestInformations;

        constructor() {
            this.guest = new PartyGuestInformations();
            super();
        }

        public getMessageId(): number {
            return PartyNewGuestMessage.ID;
        }

        public reset(): void {
            this.guest = new PartyGuestInformations();
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_PartyNewGuestMessage(param1);
        }

        public serializeAs_PartyNewGuestMessage(param1: ICustomDataOutput): void {
            super.serializeAs_AbstractPartyEventMessage(param1);
            this.guest.serializeAs_PartyGuestInformations(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_PartyNewGuestMessage(param1);
        }

        public deserializeAs_PartyNewGuestMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.guest = new PartyGuestInformations();
            this.guest.deserialize(param1);

        }
    }
    export class PartyUpdateMessage extends AbstractPartyEventMessage {
        public static ID: number = 5575;

        memberInformations: PartyMemberInformations;

        constructor() {
            this.memberInformations = new PartyMemberInformations();
            super();
        }

        public getMessageId(): number {
            return PartyUpdateMessage.ID;
        }

        public reset(): void {
            this.memberInformations = new PartyMemberInformations();
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_PartyUpdateMessage(param1);
        }

        public serializeAs_PartyUpdateMessage(param1: ICustomDataOutput): void {
            super.serializeAs_AbstractPartyEventMessage(param1);
            param1.writeShort(this.memberInformations.getTypeId());
            this.memberInformations.serialize(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_PartyUpdateMessage(param1);
        }

        public deserializeAs_PartyUpdateMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            var _loc2_: number = param1.readUnsignedShort();
            this.memberInformations = <PartyMemberInformations>ProtocolTypeManager.getInstance(PartyMemberInformations, _loc2_);
            this.memberInformations.deserialize(param1);

        }
    }
    export class PartyNewMemberMessage extends PartyUpdateMessage {
        public static ID: number = 6306;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return PartyNewMemberMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_PartyNewMemberMessage(param1);
        }

        public serializeAs_PartyNewMemberMessage(param1: ICustomDataOutput): void {
            super.serializeAs_PartyUpdateMessage(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_PartyNewMemberMessage(param1);
        }

        public deserializeAs_PartyNewMemberMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);

        }
    }
    export class PartyPledgeLoyaltyRequestMessage extends AbstractPartyMessage {
        public static ID: number = 6269;

        loyal: boolean;

        constructor() {
            this.loyal = false;
            super();
        }

        public getMessageId(): number {
            return PartyPledgeLoyaltyRequestMessage.ID;
        }

        public reset(): void {
            this.loyal = false;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_PartyPledgeLoyaltyRequestMessage(param1);
        }

        public serializeAs_PartyPledgeLoyaltyRequestMessage(param1: ICustomDataOutput): void {
            super.serializeAs_AbstractPartyMessage(param1);
            param1.writeBoolean(this.loyal);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_PartyPledgeLoyaltyRequestMessage(param1);
        }

        public deserializeAs_PartyPledgeLoyaltyRequestMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.loyal = param1.readBoolean();

        }
    }
    export class PartyRefuseInvitationMessage extends AbstractPartyMessage {
        public static ID: number = 5582;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return PartyRefuseInvitationMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_PartyRefuseInvitationMessage(param1);
        }

        public serializeAs_PartyRefuseInvitationMessage(param1: ICustomDataOutput): void {
            super.serializeAs_AbstractPartyMessage(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_PartyRefuseInvitationMessage(param1);
        }

        public deserializeAs_PartyRefuseInvitationMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);

        }
    }
    export class PartyRefuseInvitationNotificationMessage extends AbstractPartyEventMessage {
        public static ID: number = 5596;

        guestId: number;

        constructor() {
            this.guestId = 0;
            super();
        }

        public getMessageId(): number {
            return PartyRefuseInvitationNotificationMessage.ID;
        }

        public reset(): void {
            this.guestId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_PartyRefuseInvitationNotificationMessage(param1);
        }

        public serializeAs_PartyRefuseInvitationNotificationMessage(param1: ICustomDataOutput): void {
            super.serializeAs_AbstractPartyEventMessage(param1);
            if (this.guestId < 0) {
                throw new Error('Forbidden value (' + this.guestId + ') on element guestId.');
            }
            param1.writeVarInt(this.guestId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_PartyRefuseInvitationNotificationMessage(param1);
        }

        public deserializeAs_PartyRefuseInvitationNotificationMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.guestId = param1.readVarUhInt();
            if (this.guestId < 0) {
                throw new Error('Forbidden value (' + this.guestId + ') on element of PartyRefuseInvitationNotificationMessage.guestId.');
            }

        }
    }
    export class PartyRestrictedMessage extends AbstractPartyMessage {
        public static ID: number = 6175;

        restricted: boolean;

        constructor() {
            this.restricted = false;
            super();
        }

        public getMessageId(): number {
            return PartyRestrictedMessage.ID;
        }

        public reset(): void {
            this.restricted = false;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_PartyRestrictedMessage(param1);
        }

        public serializeAs_PartyRestrictedMessage(param1: ICustomDataOutput): void {
            super.serializeAs_AbstractPartyMessage(param1);
            param1.writeBoolean(this.restricted);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_PartyRestrictedMessage(param1);
        }

        public deserializeAs_PartyRestrictedMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.restricted = param1.readBoolean();

        }
    }
    export class PartyStopFollowRequestMessage extends AbstractPartyMessage {
        public static ID: number = 5574;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return PartyStopFollowRequestMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_PartyStopFollowRequestMessage(param1);
        }

        public serializeAs_PartyStopFollowRequestMessage(param1: ICustomDataOutput): void {
            super.serializeAs_AbstractPartyMessage(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_PartyStopFollowRequestMessage(param1);
        }

        public deserializeAs_PartyStopFollowRequestMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);

        }
    }
    export class PartyUpdateLightMessage extends AbstractPartyEventMessage {
        public static ID: number = 6054;

        id: number;
        lifePoints: number;
        maxLifePoints: number;
        prospecting: number;
        regenRate: number;

        constructor() {
            this.id = 0;
            this.lifePoints = 0;
            this.maxLifePoints = 0;
            this.prospecting = 0;
            this.regenRate = 0;
            super();
        }

        public getMessageId(): number {
            return PartyUpdateLightMessage.ID;
        }

        public reset(): void {
            this.id = 0;
            this.lifePoints = 0;
            this.maxLifePoints = 0;
            this.prospecting = 0;
            this.regenRate = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_PartyUpdateLightMessage(param1);
        }

        public serializeAs_PartyUpdateLightMessage(param1: ICustomDataOutput): void {
            super.serializeAs_AbstractPartyEventMessage(param1);
            if (this.id < 0) {
                throw new Error('Forbidden value (' + this.id + ') on element id.');
            }
            param1.writeVarInt(this.id);
            if (this.lifePoints < 0) {
                throw new Error('Forbidden value (' + this.lifePoints + ') on element lifePoints.');
            }
            param1.writeVarInt(this.lifePoints);
            if (this.maxLifePoints < 0) {
                throw new Error('Forbidden value (' + this.maxLifePoints + ') on element maxLifePoints.');
            }
            param1.writeVarInt(this.maxLifePoints);
            if (this.prospecting < 0) {
                throw new Error('Forbidden value (' + this.prospecting + ') on element prospecting.');
            }
            param1.writeVarShort(this.prospecting);
            if (this.regenRate < 0 || this.regenRate > 255) {
                throw new Error('Forbidden value (' + this.regenRate + ') on element regenRate.');
            }
            param1.writeByte(this.regenRate);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_PartyUpdateLightMessage(param1);
        }

        public deserializeAs_PartyUpdateLightMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.id = param1.readVarUhInt();
            if (this.id < 0) {
                throw new Error('Forbidden value (' + this.id + ') on element of PartyUpdateLightMessage.id.');
            }
            this.lifePoints = param1.readVarUhInt();
            if (this.lifePoints < 0) {
                throw new Error('Forbidden value (' + this.lifePoints + ') on element of PartyUpdateLightMessage.lifePoints.');
            }
            this.maxLifePoints = param1.readVarUhInt();
            if (this.maxLifePoints < 0) {
                throw new Error('Forbidden value (' + this.maxLifePoints + ') on element of PartyUpdateLightMessage.maxLifePoints.');
            }
            this.prospecting = param1.readVarUhShort();
            if (this.prospecting < 0) {
                throw new Error('Forbidden value (' + this.prospecting + ') on element of PartyUpdateLightMessage.prospecting.');
            }
            this.regenRate = param1.readUnsignedByte();
            if (this.regenRate < 0 || this.regenRate > 255) {
                throw new Error('Forbidden value (' + this.regenRate + ') on element of PartyUpdateLightMessage.regenRate.');
            }

        }
    }
    export class PartyCompanionUpdateLightMessage extends PartyUpdateLightMessage {
        public static ID: number = 6472;

        indexId: number;

        constructor() {
            this.indexId = 0;
            super();
        }

        public getMessageId(): number {
            return PartyCompanionUpdateLightMessage.ID;
        }

        public reset(): void {
            this.indexId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_PartyCompanionUpdateLightMessage(param1);
        }

        public serializeAs_PartyCompanionUpdateLightMessage(param1: ICustomDataOutput): void {
            super.serializeAs_PartyUpdateLightMessage(param1);
            if (this.indexId < 0) {
                throw new Error('Forbidden value (' + this.indexId + ') on element indexId.');
            }
            param1.writeByte(this.indexId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_PartyCompanionUpdateLightMessage(param1);
        }

        public deserializeAs_PartyCompanionUpdateLightMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.indexId = param1.readByte();
            if (this.indexId < 0) {
                throw new Error('Forbidden value (' + this.indexId + ') on element of PartyCompanionUpdateLightMessage.indexId.');
            }

        }
    }
    export class PurchasableDialogMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5739;

        buyOrSell: boolean;
        purchasableId: number;
        price: number;

        constructor() {
            this.buyOrSell = false;
            this.purchasableId = 0;
            this.price = 0;
            super();
        }

        public getMessageId(): number {
            return PurchasableDialogMessage.ID;
        }

        public reset(): void {
            this.buyOrSell = false;
            this.purchasableId = 0;
            this.price = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_PurchasableDialogMessage(param1);
        }

        public serializeAs_PurchasableDialogMessage(param1: ICustomDataOutput): void {
            param1.writeBoolean(this.buyOrSell);
            if (this.purchasableId < 0) {
                throw new Error('Forbidden value (' + this.purchasableId + ') on element purchasableId.');
            }
            param1.writeVarInt(this.purchasableId);
            if (this.price < 0) {
                throw new Error('Forbidden value (' + this.price + ') on element price.');
            }
            param1.writeVarInt(this.price);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_PurchasableDialogMessage(param1);
        }

        public deserializeAs_PurchasableDialogMessage(param1: ICustomDataInput): void {
            this.buyOrSell = param1.readBoolean();
            this.purchasableId = param1.readVarUhInt();
            if (this.purchasableId < 0) {
                throw new Error('Forbidden value (' + this.purchasableId + ') on element of PurchasableDialogMessage.purchasableId.');
            }
            this.price = param1.readVarUhInt();
            if (this.price < 0) {
                throw new Error('Forbidden value (' + this.price + ') on element of PurchasableDialogMessage.price.');
            }

        }
    }
    export class GuidedModeQuitRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6092;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return GuidedModeQuitRequestMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GuidedModeQuitRequestMessage(param1);
        }

        public serializeAs_GuidedModeQuitRequestMessage(param1: ICustomDataOutput): void {

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GuidedModeQuitRequestMessage(param1);
        }

        public deserializeAs_GuidedModeQuitRequestMessage(param1: ICustomDataInput): void {

        }
    }
    export class GuidedModeReturnRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6088;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return GuidedModeReturnRequestMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GuidedModeReturnRequestMessage(param1);
        }

        public serializeAs_GuidedModeReturnRequestMessage(param1: ICustomDataOutput): void {

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GuidedModeReturnRequestMessage(param1);
        }

        public deserializeAs_GuidedModeReturnRequestMessage(param1: ICustomDataInput): void {

        }
    }
    export class QuestListMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5626;

        finishedQuestsIds: number[];
        finishedQuestsCounts: number[];
        activeQuests: QuestActiveInformations[];
        reinitDoneQuestsIds: number[];

        constructor() {
            this.finishedQuestsIds = [];
            this.finishedQuestsCounts = [];
            this.activeQuests = [];
            this.reinitDoneQuestsIds = [];
            super();
        }

        public getMessageId(): number {
            return QuestListMessage.ID;
        }

        public reset(): void {
            this.finishedQuestsIds = [];
            this.finishedQuestsCounts = [];
            this.activeQuests = [];
            this.reinitDoneQuestsIds = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_QuestListMessage(param1);
        }

        public serializeAs_QuestListMessage(param1: ICustomDataOutput): void {
            param1.writeShort(this.finishedQuestsIds.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.finishedQuestsIds.length) {
                if (this.finishedQuestsIds[_loc2_] < 0) {
                    throw new Error('Forbidden value (' + this.finishedQuestsIds[_loc2_] + ') on element 1 (starting at 1) of finishedQuestsIds.');
                }
                param1.writeVarShort(this.finishedQuestsIds[_loc2_]);
                _loc2_++;
            }
            param1.writeShort(this.finishedQuestsCounts.length);
            var _loc3_: number = 0;
            while (_loc3_ < this.finishedQuestsCounts.length) {
                if (this.finishedQuestsCounts[_loc3_] < 0) {
                    throw new Error('Forbidden value (' + this.finishedQuestsCounts[_loc3_] + ') on element 2 (starting at 1) of finishedQuestsCounts.');
                }
                param1.writeVarShort(this.finishedQuestsCounts[_loc3_]);
                _loc3_++;
            }
            param1.writeShort(this.activeQuests.length);
            var _loc4_: number = 0;
            while (_loc4_ < this.activeQuests.length) {
                param1.writeShort((this.activeQuests[_loc4_]).getTypeId());
                (this.activeQuests[_loc4_]).serialize(param1);
                _loc4_++;
            }
            param1.writeShort(this.reinitDoneQuestsIds.length);
            var _loc5_: number = 0;
            while (_loc5_ < this.reinitDoneQuestsIds.length) {
                if (this.reinitDoneQuestsIds[_loc5_] < 0) {
                    throw new Error('Forbidden value (' + this.reinitDoneQuestsIds[_loc5_] + ') on element 4 (starting at 1) of reinitDoneQuestsIds.');
                }
                param1.writeVarShort(this.reinitDoneQuestsIds[_loc5_]);
                _loc5_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_QuestListMessage(param1);
        }

        public deserializeAs_QuestListMessage(param1: ICustomDataInput): void {
            var _loc10_: number = 0;
            var _loc11_: number = 0;
            var _loc12_: number = 0;
            var _loc13_: QuestActiveInformations = null;
            var _loc14_: number = 0;
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc10_ = param1.readVarUhShort();
                if (_loc10_ < 0) {
                    throw new Error('Forbidden value (' + _loc10_ + ') on elements of finishedQuestsIds.');
                }
                this.finishedQuestsIds.push(_loc10_);
                _loc3_++;
            }
            var _loc4_: number = param1.readUnsignedShort();
            var _loc5_: number = 0;
            while (_loc5_ < _loc4_) {
            _loc11_ = param1.readVarUhShort();
                if (_loc11_ < 0) {
                    throw new Error('Forbidden value (' + _loc11_ + ') on elements of finishedQuestsCounts.');
                }
                this.finishedQuestsCounts.push(_loc11_);
                _loc5_++;
            }
            var _loc6_: number = param1.readUnsignedShort();
            var _loc7_: number = 0;
            while (_loc7_ < _loc6_) {
            _loc12_ = param1.readUnsignedShort();
                _loc13_ = <QuestActiveInformations>ProtocolTypeManager.getInstance(QuestActiveInformations, _loc12_);
                _loc13_.deserialize(param1);
                this.activeQuests.push(_loc13_);
                _loc7_++;
            }
            var _loc8_: number = param1.readUnsignedShort();
            var _loc9_: number = 0;
            while (_loc9_ < _loc8_) {
            _loc14_ = param1.readVarUhShort();
                if (_loc14_ < 0) {
                    throw new Error('Forbidden value (' + _loc14_ + ') on elements of reinitDoneQuestsIds.');
                }
                this.reinitDoneQuestsIds.push(_loc14_);
                _loc9_++;
            }

        }
    }
    export class QuestListRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5623;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return QuestListRequestMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_QuestListRequestMessage(param1);
        }

        public serializeAs_QuestListRequestMessage(param1: ICustomDataOutput): void {

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_QuestListRequestMessage(param1);
        }

        public deserializeAs_QuestListRequestMessage(param1: ICustomDataInput): void {

        }
    }
    export class QuestObjectiveValidatedMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6098;

        questId: number;
        objectiveId: number;

        constructor() {
            this.questId = 0;
            this.objectiveId = 0;
            super();
        }

        public getMessageId(): number {
            return QuestObjectiveValidatedMessage.ID;
        }

        public reset(): void {
            this.questId = 0;
            this.objectiveId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_QuestObjectiveValidatedMessage(param1);
        }

        public serializeAs_QuestObjectiveValidatedMessage(param1: ICustomDataOutput): void {
            if (this.questId < 0) {
                throw new Error('Forbidden value (' + this.questId + ') on element questId.');
            }
            param1.writeVarShort(this.questId);
            if (this.objectiveId < 0) {
                throw new Error('Forbidden value (' + this.objectiveId + ') on element objectiveId.');
            }
            param1.writeVarShort(this.objectiveId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_QuestObjectiveValidatedMessage(param1);
        }

        public deserializeAs_QuestObjectiveValidatedMessage(param1: ICustomDataInput): void {
            this.questId = param1.readVarUhShort();
            if (this.questId < 0) {
                throw new Error('Forbidden value (' + this.questId + ') on element of QuestObjectiveValidatedMessage.questId.');
            }
            this.objectiveId = param1.readVarUhShort();
            if (this.objectiveId < 0) {
                throw new Error('Forbidden value (' + this.objectiveId + ') on element of QuestObjectiveValidatedMessage.objectiveId.');
            }

        }
    }
    export class QuestObjectiveValidationMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6085;

        questId: number;
        objectiveId: number;

        constructor() {
            this.questId = 0;
            this.objectiveId = 0;
            super();
        }

        public getMessageId(): number {
            return QuestObjectiveValidationMessage.ID;
        }

        public reset(): void {
            this.questId = 0;
            this.objectiveId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_QuestObjectiveValidationMessage(param1);
        }

        public serializeAs_QuestObjectiveValidationMessage(param1: ICustomDataOutput): void {
            if (this.questId < 0) {
                throw new Error('Forbidden value (' + this.questId + ') on element questId.');
            }
            param1.writeVarShort(this.questId);
            if (this.objectiveId < 0) {
                throw new Error('Forbidden value (' + this.objectiveId + ') on element objectiveId.');
            }
            param1.writeVarShort(this.objectiveId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_QuestObjectiveValidationMessage(param1);
        }

        public deserializeAs_QuestObjectiveValidationMessage(param1: ICustomDataInput): void {
            this.questId = param1.readVarUhShort();
            if (this.questId < 0) {
                throw new Error('Forbidden value (' + this.questId + ') on element of QuestObjectiveValidationMessage.questId.');
            }
            this.objectiveId = param1.readVarUhShort();
            if (this.objectiveId < 0) {
                throw new Error('Forbidden value (' + this.objectiveId + ') on element of QuestObjectiveValidationMessage.objectiveId.');
            }

        }
    }
    export class QuestStartRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5643;

        questId: number;

        constructor() {
            this.questId = 0;
            super();
        }

        public getMessageId(): number {
            return QuestStartRequestMessage.ID;
        }

        public reset(): void {
            this.questId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_QuestStartRequestMessage(param1);
        }

        public serializeAs_QuestStartRequestMessage(param1: ICustomDataOutput): void {
            if (this.questId < 0) {
                throw new Error('Forbidden value (' + this.questId + ') on element questId.');
            }
            param1.writeVarShort(this.questId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_QuestStartRequestMessage(param1);
        }

        public deserializeAs_QuestStartRequestMessage(param1: ICustomDataInput): void {
            this.questId = param1.readVarUhShort();
            if (this.questId < 0) {
                throw new Error('Forbidden value (' + this.questId + ') on element of QuestStartRequestMessage.questId.');
            }

        }
    }
    export class QuestStartedMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6091;

        questId: number;

        constructor() {
            this.questId = 0;
            super();
        }

        public getMessageId(): number {
            return QuestStartedMessage.ID;
        }

        public reset(): void {
            this.questId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_QuestStartedMessage(param1);
        }

        public serializeAs_QuestStartedMessage(param1: ICustomDataOutput): void {
            if (this.questId < 0) {
                throw new Error('Forbidden value (' + this.questId + ') on element questId.');
            }
            param1.writeVarShort(this.questId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_QuestStartedMessage(param1);
        }

        public deserializeAs_QuestStartedMessage(param1: ICustomDataInput): void {
            this.questId = param1.readVarUhShort();
            if (this.questId < 0) {
                throw new Error('Forbidden value (' + this.questId + ') on element of QuestStartedMessage.questId.');
            }

        }
    }
    export class QuestStepInfoMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5625;

        infos: QuestActiveInformations;

        constructor() {
            this.infos = new QuestActiveInformations();
            super();
        }

        public getMessageId(): number {
            return QuestStepInfoMessage.ID;
        }

        public reset(): void {
            this.infos = new QuestActiveInformations();
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_QuestStepInfoMessage(param1);
        }

        public serializeAs_QuestStepInfoMessage(param1: ICustomDataOutput): void {
            param1.writeShort(this.infos.getTypeId());
            this.infos.serialize(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_QuestStepInfoMessage(param1);
        }

        public deserializeAs_QuestStepInfoMessage(param1: ICustomDataInput): void {
            var _loc2_: number = param1.readUnsignedShort();
            this.infos = <QuestActiveInformations>ProtocolTypeManager.getInstance(QuestActiveInformations, _loc2_);
            this.infos.deserialize(param1);

        }
    }
    export class QuestStepInfoRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5622;

        questId: number;

        constructor() {
            this.questId = 0;
            super();
        }

        public getMessageId(): number {
            return QuestStepInfoRequestMessage.ID;
        }

        public reset(): void {
            this.questId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_QuestStepInfoRequestMessage(param1);
        }

        public serializeAs_QuestStepInfoRequestMessage(param1: ICustomDataOutput): void {
            if (this.questId < 0) {
                throw new Error('Forbidden value (' + this.questId + ') on element questId.');
            }
            param1.writeVarShort(this.questId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_QuestStepInfoRequestMessage(param1);
        }

        public deserializeAs_QuestStepInfoRequestMessage(param1: ICustomDataInput): void {
            this.questId = param1.readVarUhShort();
            if (this.questId < 0) {
                throw new Error('Forbidden value (' + this.questId + ') on element of QuestStepInfoRequestMessage.questId.');
            }

        }
    }
    export class QuestStepStartedMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6096;

        questId: number;
        stepId: number;

        constructor() {
            this.questId = 0;
            this.stepId = 0;
            super();
        }

        public getMessageId(): number {
            return QuestStepStartedMessage.ID;
        }

        public reset(): void {
            this.questId = 0;
            this.stepId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_QuestStepStartedMessage(param1);
        }

        public serializeAs_QuestStepStartedMessage(param1: ICustomDataOutput): void {
            if (this.questId < 0) {
                throw new Error('Forbidden value (' + this.questId + ') on element questId.');
            }
            param1.writeVarShort(this.questId);
            if (this.stepId < 0) {
                throw new Error('Forbidden value (' + this.stepId + ') on element stepId.');
            }
            param1.writeVarShort(this.stepId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_QuestStepStartedMessage(param1);
        }

        public deserializeAs_QuestStepStartedMessage(param1: ICustomDataInput): void {
            this.questId = param1.readVarUhShort();
            if (this.questId < 0) {
                throw new Error('Forbidden value (' + this.questId + ') on element of QuestStepStartedMessage.questId.');
            }
            this.stepId = param1.readVarUhShort();
            if (this.stepId < 0) {
                throw new Error('Forbidden value (' + this.stepId + ') on element of QuestStepStartedMessage.stepId.');
            }

        }
    }
    export class QuestStepValidatedMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6099;

        questId: number;
        stepId: number;

        constructor() {
            this.questId = 0;
            this.stepId = 0;
            super();
        }

        public getMessageId(): number {
            return QuestStepValidatedMessage.ID;
        }

        public reset(): void {
            this.questId = 0;
            this.stepId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_QuestStepValidatedMessage(param1);
        }

        public serializeAs_QuestStepValidatedMessage(param1: ICustomDataOutput): void {
            if (this.questId < 0) {
                throw new Error('Forbidden value (' + this.questId + ') on element questId.');
            }
            param1.writeVarShort(this.questId);
            if (this.stepId < 0) {
                throw new Error('Forbidden value (' + this.stepId + ') on element stepId.');
            }
            param1.writeVarShort(this.stepId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_QuestStepValidatedMessage(param1);
        }

        public deserializeAs_QuestStepValidatedMessage(param1: ICustomDataInput): void {
            this.questId = param1.readVarUhShort();
            if (this.questId < 0) {
                throw new Error('Forbidden value (' + this.questId + ') on element of QuestStepValidatedMessage.questId.');
            }
            this.stepId = param1.readVarUhShort();
            if (this.stepId < 0) {
                throw new Error('Forbidden value (' + this.stepId + ') on element of QuestStepValidatedMessage.stepId.');
            }

        }
    }
    export class QuestValidatedMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6097;

        questId: number;

        constructor() {
            this.questId = 0;
            super();
        }

        public getMessageId(): number {
            return QuestValidatedMessage.ID;
        }

        public reset(): void {
            this.questId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_QuestValidatedMessage(param1);
        }

        public serializeAs_QuestValidatedMessage(param1: ICustomDataOutput): void {
            if (this.questId < 0) {
                throw new Error('Forbidden value (' + this.questId + ') on element questId.');
            }
            param1.writeVarShort(this.questId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_QuestValidatedMessage(param1);
        }

        public deserializeAs_QuestValidatedMessage(param1: ICustomDataInput): void {
            this.questId = param1.readVarUhShort();
            if (this.questId < 0) {
                throw new Error('Forbidden value (' + this.questId + ') on element of QuestValidatedMessage.questId.');
            }

        }
    }
    export class SpellForgetUIMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5565;

        open: boolean;

        constructor() {
            this.open = false;
            super();
        }

        public getMessageId(): number {
            return SpellForgetUIMessage.ID;
        }

        public reset(): void {
            this.open = false;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_SpellForgetUIMessage(param1);
        }

        public serializeAs_SpellForgetUIMessage(param1: ICustomDataOutput): void {
            param1.writeBoolean(this.open);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_SpellForgetUIMessage(param1);
        }

        public deserializeAs_SpellForgetUIMessage(param1: ICustomDataInput): void {
            this.open = param1.readBoolean();

        }
    }
    export class SpellForgottenMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5834;

        spellsId: number[];
        boostPoint: number;

        constructor() {
            this.spellsId = [];
            this.boostPoint = 0;
            super();
        }

        public getMessageId(): number {
            return SpellForgottenMessage.ID;
        }

        public reset(): void {
            this.spellsId = [];
            this.boostPoint = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_SpellForgottenMessage(param1);
        }

        public serializeAs_SpellForgottenMessage(param1: ICustomDataOutput): void {
            param1.writeShort(this.spellsId.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.spellsId.length) {
                if (this.spellsId[_loc2_] < 0) {
                    throw new Error('Forbidden value (' + this.spellsId[_loc2_] + ') on element 1 (starting at 1) of spellsId.');
                }
                param1.writeVarShort(this.spellsId[_loc2_]);
                _loc2_++;
            }
            if (this.boostPoint < 0) {
                throw new Error('Forbidden value (' + this.boostPoint + ') on element boostPoint.');
            }
            param1.writeVarShort(this.boostPoint);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_SpellForgottenMessage(param1);
        }

        public deserializeAs_SpellForgottenMessage(param1: ICustomDataInput): void {
            var _loc4_: number = 0;
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = param1.readVarUhShort();
                if (_loc4_ < 0) {
                    throw new Error('Forbidden value (' + _loc4_ + ') on elements of spellsId.');
                }
                this.spellsId.push(_loc4_);
                _loc3_++;
            }
            this.boostPoint = param1.readVarUhShort();
            if (this.boostPoint < 0) {
                throw new Error('Forbidden value (' + this.boostPoint + ') on element of SpellForgottenMessage.boostPoint.');
            }

        }
    }
    export class SpellItemBoostMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6011;

        statId: number;
        spellId: number;
        value: number;

        constructor() {
            this.statId = 0;
            this.spellId = 0;
            this.value = 0;
            super();
        }

        public getMessageId(): number {
            return SpellItemBoostMessage.ID;
        }

        public reset(): void {
            this.statId = 0;
            this.spellId = 0;
            this.value = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_SpellItemBoostMessage(param1);
        }

        public serializeAs_SpellItemBoostMessage(param1: ICustomDataOutput): void {
            if (this.statId < 0) {
                throw new Error('Forbidden value (' + this.statId + ') on element statId.');
            }
            param1.writeVarInt(this.statId);
            if (this.spellId < 0) {
                throw new Error('Forbidden value (' + this.spellId + ') on element spellId.');
            }
            param1.writeVarShort(this.spellId);
            param1.writeVarShort(this.value);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_SpellItemBoostMessage(param1);
        }

        public deserializeAs_SpellItemBoostMessage(param1: ICustomDataInput): void {
            this.statId = param1.readVarUhInt();
            if (this.statId < 0) {
                throw new Error('Forbidden value (' + this.statId + ') on element of SpellItemBoostMessage.statId.');
            }
            this.spellId = param1.readVarUhShort();
            if (this.spellId < 0) {
                throw new Error('Forbidden value (' + this.spellId + ') on element of SpellItemBoostMessage.spellId.');
            }
            this.value = param1.readVarShort();

        }
    }
    export class SpellUpgradeFailureMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 1202;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return SpellUpgradeFailureMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_SpellUpgradeFailureMessage(param1);
        }

        public serializeAs_SpellUpgradeFailureMessage(param1: ICustomDataOutput): void {

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_SpellUpgradeFailureMessage(param1);
        }

        public deserializeAs_SpellUpgradeFailureMessage(param1: ICustomDataInput): void {

        }
    }
    export class SpellUpgradeRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5608;

        spellId: number;
        spellLevel: number;

        constructor() {
            this.spellId = 0;
            this.spellLevel = 0;
            super();
        }

        public getMessageId(): number {
            return SpellUpgradeRequestMessage.ID;
        }

        public reset(): void {
            this.spellId = 0;
            this.spellLevel = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_SpellUpgradeRequestMessage(param1);
        }

        public serializeAs_SpellUpgradeRequestMessage(param1: ICustomDataOutput): void {
            if (this.spellId < 0) {
                throw new Error('Forbidden value (' + this.spellId + ') on element spellId.');
            }
            param1.writeVarShort(this.spellId);
            if (this.spellLevel < 1 || this.spellLevel > 6) {
                throw new Error('Forbidden value (' + this.spellLevel + ') on element spellLevel.');
            }
            param1.writeByte(this.spellLevel);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_SpellUpgradeRequestMessage(param1);
        }

        public deserializeAs_SpellUpgradeRequestMessage(param1: ICustomDataInput): void {
            this.spellId = param1.readVarUhShort();
            if (this.spellId < 0) {
                throw new Error('Forbidden value (' + this.spellId + ') on element of SpellUpgradeRequestMessage.spellId.');
            }
            this.spellLevel = param1.readByte();
            if (this.spellLevel < 1 || this.spellLevel > 6) {
                throw new Error('Forbidden value (' + this.spellLevel + ') on element of SpellUpgradeRequestMessage.spellLevel.');
            }

        }
    }
    export class SpellUpgradeSuccessMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 1201;

        spellId: number;
        spellLevel: number;

        constructor() {
            this.spellId = 0;
            this.spellLevel = 0;
            super();
        }

        public getMessageId(): number {
            return SpellUpgradeSuccessMessage.ID;
        }

        public reset(): void {
            this.spellId = 0;
            this.spellLevel = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_SpellUpgradeSuccessMessage(param1);
        }

        public serializeAs_SpellUpgradeSuccessMessage(param1: ICustomDataOutput): void {
            param1.writeInt(this.spellId);
            if (this.spellLevel < 1 || this.spellLevel > 6) {
                throw new Error('Forbidden value (' + this.spellLevel + ') on element spellLevel.');
            }
            param1.writeByte(this.spellLevel);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_SpellUpgradeSuccessMessage(param1);
        }

        public deserializeAs_SpellUpgradeSuccessMessage(param1: ICustomDataInput): void {
            this.spellId = param1.readInt();
            this.spellLevel = param1.readByte();
            if (this.spellLevel < 1 || this.spellLevel > 6) {
                throw new Error('Forbidden value (' + this.spellLevel + ') on element of SpellUpgradeSuccessMessage.spellLevel.');
            }

        }
    }
    export class ValidateSpellForgetMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 1700;

        spellId: number;

        constructor() {
            this.spellId = 0;
            super();
        }

        public getMessageId(): number {
            return ValidateSpellForgetMessage.ID;
        }

        public reset(): void {
            this.spellId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ValidateSpellForgetMessage(param1);
        }

        public serializeAs_ValidateSpellForgetMessage(param1: ICustomDataOutput): void {
            if (this.spellId < 0) {
                throw new Error('Forbidden value (' + this.spellId + ') on element spellId.');
            }
            param1.writeVarShort(this.spellId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ValidateSpellForgetMessage(param1);
        }

        public deserializeAs_ValidateSpellForgetMessage(param1: ICustomDataInput): void {
            this.spellId = param1.readVarUhShort();
            if (this.spellId < 0) {
                throw new Error('Forbidden value (' + this.spellId + ') on element of ValidateSpellForgetMessage.spellId.');
            }

        }
    }
    export class StatsUpgradeRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5610;

        useAdditionnal: boolean;
        statId: number;
        boostPoint: number;

        constructor() {
            this.useAdditionnal = false;
            this.statId = 11;
            this.boostPoint = 0;
            super();
        }

        public getMessageId(): number {
            return StatsUpgradeRequestMessage.ID;
        }

        public reset(): void {
            this.useAdditionnal = false;
            this.statId = 11;
            this.boostPoint = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_StatsUpgradeRequestMessage(param1);
        }

        public serializeAs_StatsUpgradeRequestMessage(param1: ICustomDataOutput): void {
            param1.writeBoolean(this.useAdditionnal);
            param1.writeByte(this.statId);
            if (this.boostPoint < 0) {
                throw new Error('Forbidden value (' + this.boostPoint + ') on element boostPoint.');
            }
            param1.writeVarShort(this.boostPoint);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_StatsUpgradeRequestMessage(param1);
        }

        public deserializeAs_StatsUpgradeRequestMessage(param1: ICustomDataInput): void {
            this.useAdditionnal = param1.readBoolean();
            this.statId = param1.readByte();
            if (this.statId < 0) {
                throw new Error('Forbidden value (' + this.statId + ') on element of StatsUpgradeRequestMessage.statId.');
            }
            this.boostPoint = param1.readVarUhShort();
            if (this.boostPoint < 0) {
                throw new Error('Forbidden value (' + this.boostPoint + ') on element of StatsUpgradeRequestMessage.boostPoint.');
            }

        }
    }
    export class StatsUpgradeResultMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5609;

        result: number;
        nbCharacBoost: number;

        constructor() {
            this.result = 0;
            this.nbCharacBoost = 0;
            super();
        }

        public getMessageId(): number {
            return StatsUpgradeResultMessage.ID;
        }

        public reset(): void {
            this.result = 0;
            this.nbCharacBoost = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_StatsUpgradeResultMessage(param1);
        }

        public serializeAs_StatsUpgradeResultMessage(param1: ICustomDataOutput): void {
            param1.writeByte(this.result);
            if (this.nbCharacBoost < 0) {
                throw new Error('Forbidden value (' + this.nbCharacBoost + ') on element nbCharacBoost.');
            }
            param1.writeVarShort(this.nbCharacBoost);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_StatsUpgradeResultMessage(param1);
        }

        public deserializeAs_StatsUpgradeResultMessage(param1: ICustomDataInput): void {
            this.result = param1.readByte();
            this.nbCharacBoost = param1.readVarUhShort();
            if (this.nbCharacBoost < 0) {
                throw new Error('Forbidden value (' + this.nbCharacBoost + ') on element of StatsUpgradeResultMessage.nbCharacBoost.');
            }

        }
    }
    export class PortalUseRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6492;

        portalId: number;

        constructor() {
            this.portalId = 0;
            super();
        }

        public getMessageId(): number {
            return PortalUseRequestMessage.ID;
        }

        public reset(): void {
            this.portalId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_PortalUseRequestMessage(param1);
        }

        public serializeAs_PortalUseRequestMessage(param1: ICustomDataOutput): void {
            if (this.portalId < 0) {
                throw new Error('Forbidden value (' + this.portalId + ') on element portalId.');
            }
            param1.writeVarInt(this.portalId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_PortalUseRequestMessage(param1);
        }

        public deserializeAs_PortalUseRequestMessage(param1: ICustomDataInput): void {
            this.portalId = param1.readVarUhInt();
            if (this.portalId < 0) {
                throw new Error('Forbidden value (' + this.portalId + ') on element of PortalUseRequestMessage.portalId.');
            }

        }
    }
    export class TreasureHuntAvailableRetryCountUpdateMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6491;

        questType: number;
        availableRetryCount: number;

        constructor() {
            this.questType = 0;
            this.availableRetryCount = 0;
            super();
        }

        public getMessageId(): number {
            return TreasureHuntAvailableRetryCountUpdateMessage.ID;
        }

        public reset(): void {
            this.questType = 0;
            this.availableRetryCount = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_TreasureHuntAvailableRetryCountUpdateMessage(param1);
        }

        public serializeAs_TreasureHuntAvailableRetryCountUpdateMessage(param1: ICustomDataOutput): void {
            param1.writeByte(this.questType);
            param1.writeInt(this.availableRetryCount);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_TreasureHuntAvailableRetryCountUpdateMessage(param1);
        }

        public deserializeAs_TreasureHuntAvailableRetryCountUpdateMessage(param1: ICustomDataInput): void {
            this.questType = param1.readByte();
            if (this.questType < 0) {
                throw new Error('Forbidden value (' + this.questType + ') on element of TreasureHuntAvailableRetryCountUpdateMessage.questType.');
            }
            this.availableRetryCount = param1.readInt();

        }
    }
    export class TreasureHuntDigRequestAnswerMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6484;

        questType: number;
        result: number;

        constructor() {
            this.questType = 0;
            this.result = 0;
            super();
        }

        public getMessageId(): number {
            return TreasureHuntDigRequestAnswerMessage.ID;
        }

        public reset(): void {
            this.questType = 0;
            this.result = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_TreasureHuntDigRequestAnswerMessage(param1);
        }

        public serializeAs_TreasureHuntDigRequestAnswerMessage(param1: ICustomDataOutput): void {
            param1.writeByte(this.questType);
            param1.writeByte(this.result);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_TreasureHuntDigRequestAnswerMessage(param1);
        }

        public deserializeAs_TreasureHuntDigRequestAnswerMessage(param1: ICustomDataInput): void {
            this.questType = param1.readByte();
            if (this.questType < 0) {
                throw new Error('Forbidden value (' + this.questType + ') on element of TreasureHuntDigRequestAnswerMessage.questType.');
            }
            this.result = param1.readByte();
            if (this.result < 0) {
                throw new Error('Forbidden value (' + this.result + ') on element of TreasureHuntDigRequestAnswerMessage.result.');
            }

        }
    }
    export class TreasureHuntDigRequestAnswerFailedMessage extends TreasureHuntDigRequestAnswerMessage {
        public static ID: number = 6509;

        wrongFlagCount: number;

        constructor() {
            this.wrongFlagCount = 0;
            super();
        }

        public getMessageId(): number {
            return TreasureHuntDigRequestAnswerFailedMessage.ID;
        }

        public reset(): void {
            this.wrongFlagCount = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_TreasureHuntDigRequestAnswerFailedMessage(param1);
        }

        public serializeAs_TreasureHuntDigRequestAnswerFailedMessage(param1: ICustomDataOutput): void {
            super.serializeAs_TreasureHuntDigRequestAnswerMessage(param1);
            if (this.wrongFlagCount < 0) {
                throw new Error('Forbidden value (' + this.wrongFlagCount + ') on element wrongFlagCount.');
            }
            param1.writeByte(this.wrongFlagCount);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_TreasureHuntDigRequestAnswerFailedMessage(param1);
        }

        public deserializeAs_TreasureHuntDigRequestAnswerFailedMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.wrongFlagCount = param1.readByte();
            if (this.wrongFlagCount < 0) {
                throw new Error('Forbidden value (' + this.wrongFlagCount + ') on element of TreasureHuntDigRequestAnswerFailedMessage.wrongFlagCount.');
            }

        }
    }
    export class TreasureHuntDigRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6485;

        questType: number;

        constructor() {
            this.questType = 0;
            super();
        }

        public getMessageId(): number {
            return TreasureHuntDigRequestMessage.ID;
        }

        public reset(): void {
            this.questType = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_TreasureHuntDigRequestMessage(param1);
        }

        public serializeAs_TreasureHuntDigRequestMessage(param1: ICustomDataOutput): void {
            param1.writeByte(this.questType);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_TreasureHuntDigRequestMessage(param1);
        }

        public deserializeAs_TreasureHuntDigRequestMessage(param1: ICustomDataInput): void {
            this.questType = param1.readByte();
            if (this.questType < 0) {
                throw new Error('Forbidden value (' + this.questType + ') on element of TreasureHuntDigRequestMessage.questType.');
            }

        }
    }
    export class TreasureHuntFinishedMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6483;

        questType: number;

        constructor() {
            this.questType = 0;
            super();
        }

        public getMessageId(): number {
            return TreasureHuntFinishedMessage.ID;
        }

        public reset(): void {
            this.questType = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_TreasureHuntFinishedMessage(param1);
        }

        public serializeAs_TreasureHuntFinishedMessage(param1: ICustomDataOutput): void {
            param1.writeByte(this.questType);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_TreasureHuntFinishedMessage(param1);
        }

        public deserializeAs_TreasureHuntFinishedMessage(param1: ICustomDataInput): void {
            this.questType = param1.readByte();
            if (this.questType < 0) {
                throw new Error('Forbidden value (' + this.questType + ') on element of TreasureHuntFinishedMessage.questType.');
            }

        }
    }
    export class TreasureHuntFlagRemoveRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6510;

        questType: number;
        index: number;

        constructor() {
            this.questType = 0;
            this.index = 0;
            super();
        }

        public getMessageId(): number {
            return TreasureHuntFlagRemoveRequestMessage.ID;
        }

        public reset(): void {
            this.questType = 0;
            this.index = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_TreasureHuntFlagRemoveRequestMessage(param1);
        }

        public serializeAs_TreasureHuntFlagRemoveRequestMessage(param1: ICustomDataOutput): void {
            param1.writeByte(this.questType);
            if (this.index < 0) {
                throw new Error('Forbidden value (' + this.index + ') on element index.');
            }
            param1.writeByte(this.index);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_TreasureHuntFlagRemoveRequestMessage(param1);
        }

        public deserializeAs_TreasureHuntFlagRemoveRequestMessage(param1: ICustomDataInput): void {
            this.questType = param1.readByte();
            if (this.questType < 0) {
                throw new Error('Forbidden value (' + this.questType + ') on element of TreasureHuntFlagRemoveRequestMessage.questType.');
            }
            this.index = param1.readByte();
            if (this.index < 0) {
                throw new Error('Forbidden value (' + this.index + ') on element of TreasureHuntFlagRemoveRequestMessage.index.');
            }

        }
    }
    export class TreasureHuntFlagRequestAnswerMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6507;

        questType: number;
        result: number;
        index: number;

        constructor() {
            this.questType = 0;
            this.result = 0;
            this.index = 0;
            super();
        }

        public getMessageId(): number {
            return TreasureHuntFlagRequestAnswerMessage.ID;
        }

        public reset(): void {
            this.questType = 0;
            this.result = 0;
            this.index = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_TreasureHuntFlagRequestAnswerMessage(param1);
        }

        public serializeAs_TreasureHuntFlagRequestAnswerMessage(param1: ICustomDataOutput): void {
            param1.writeByte(this.questType);
            param1.writeByte(this.result);
            if (this.index < 0) {
                throw new Error('Forbidden value (' + this.index + ') on element index.');
            }
            param1.writeByte(this.index);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_TreasureHuntFlagRequestAnswerMessage(param1);
        }

        public deserializeAs_TreasureHuntFlagRequestAnswerMessage(param1: ICustomDataInput): void {
            this.questType = param1.readByte();
            if (this.questType < 0) {
                throw new Error('Forbidden value (' + this.questType + ') on element of TreasureHuntFlagRequestAnswerMessage.questType.');
            }
            this.result = param1.readByte();
            if (this.result < 0) {
                throw new Error('Forbidden value (' + this.result + ') on element of TreasureHuntFlagRequestAnswerMessage.result.');
            }
            this.index = param1.readByte();
            if (this.index < 0) {
                throw new Error('Forbidden value (' + this.index + ') on element of TreasureHuntFlagRequestAnswerMessage.index.');
            }

        }
    }
    export class TreasureHuntFlagRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6508;

        questType: number;
        index: number;

        constructor() {
            this.questType = 0;
            this.index = 0;
            super();
        }

        public getMessageId(): number {
            return TreasureHuntFlagRequestMessage.ID;
        }

        public reset(): void {
            this.questType = 0;
            this.index = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_TreasureHuntFlagRequestMessage(param1);
        }

        public serializeAs_TreasureHuntFlagRequestMessage(param1: ICustomDataOutput): void {
            param1.writeByte(this.questType);
            if (this.index < 0) {
                throw new Error('Forbidden value (' + this.index + ') on element index.');
            }
            param1.writeByte(this.index);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_TreasureHuntFlagRequestMessage(param1);
        }

        public deserializeAs_TreasureHuntFlagRequestMessage(param1: ICustomDataInput): void {
            this.questType = param1.readByte();
            if (this.questType < 0) {
                throw new Error('Forbidden value (' + this.questType + ') on element of TreasureHuntFlagRequestMessage.questType.');
            }
            this.index = param1.readByte();
            if (this.index < 0) {
                throw new Error('Forbidden value (' + this.index + ') on element of TreasureHuntFlagRequestMessage.index.');
            }

        }
    }
    export class TreasureHuntGiveUpRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6487;

        questType: number;

        constructor() {
            this.questType = 0;
            super();
        }

        public getMessageId(): number {
            return TreasureHuntGiveUpRequestMessage.ID;
        }

        public reset(): void {
            this.questType = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_TreasureHuntGiveUpRequestMessage(param1);
        }

        public serializeAs_TreasureHuntGiveUpRequestMessage(param1: ICustomDataOutput): void {
            param1.writeByte(this.questType);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_TreasureHuntGiveUpRequestMessage(param1);
        }

        public deserializeAs_TreasureHuntGiveUpRequestMessage(param1: ICustomDataInput): void {
            this.questType = param1.readByte();
            if (this.questType < 0) {
                throw new Error('Forbidden value (' + this.questType + ') on element of TreasureHuntGiveUpRequestMessage.questType.');
            }

        }
    }
    export class TreasureHuntLegendaryRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6499;

        legendaryId: number;

        constructor() {
            this.legendaryId = 0;
            super();
        }

        public getMessageId(): number {
            return TreasureHuntLegendaryRequestMessage.ID;
        }

        public reset(): void {
            this.legendaryId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_TreasureHuntLegendaryRequestMessage(param1);
        }

        public serializeAs_TreasureHuntLegendaryRequestMessage(param1: ICustomDataOutput): void {
            if (this.legendaryId < 0) {
                throw new Error('Forbidden value (' + this.legendaryId + ') on element legendaryId.');
            }
            param1.writeVarShort(this.legendaryId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_TreasureHuntLegendaryRequestMessage(param1);
        }

        public deserializeAs_TreasureHuntLegendaryRequestMessage(param1: ICustomDataInput): void {
            this.legendaryId = param1.readVarUhShort();
            if (this.legendaryId < 0) {
                throw new Error('Forbidden value (' + this.legendaryId + ') on element of TreasureHuntLegendaryRequestMessage.legendaryId.');
            }

        }
    }
    export class TreasureHuntMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6486;

        questType: number;
        startMapId: number;
        knownStepsList: TreasureHuntStep[];
        totalStepCount: number;
        checkPointCurrent: number;
        checkPointTotal: number;
        availableRetryCount: number;
        flags: TreasureHuntFlag[];

        constructor() {
            this.questType = 0;
            this.startMapId = 0;
            this.knownStepsList = [];
            this.totalStepCount = 0;
            this.checkPointCurrent = 0;
            this.checkPointTotal = 0;
            this.availableRetryCount = 0;
            this.flags = [];
            super();
        }

        public getMessageId(): number {
            return TreasureHuntMessage.ID;
        }

        public reset(): void {
            this.questType = 0;
            this.startMapId = 0;
            this.knownStepsList = [];
            this.totalStepCount = 0;
            this.checkPointCurrent = 0;
            this.checkPointTotal = 0;
            this.availableRetryCount = 0;
            this.flags = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_TreasureHuntMessage(param1);
        }

        public serializeAs_TreasureHuntMessage(param1: ICustomDataOutput): void {
            param1.writeByte(this.questType);
            param1.writeInt(this.startMapId);
            param1.writeShort(this.knownStepsList.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.knownStepsList.length) {
                param1.writeShort((this.knownStepsList[_loc2_]).getTypeId());
                (this.knownStepsList[_loc2_]).serialize(param1);
                _loc2_++;
            }
            if (this.totalStepCount < 0) {
                throw new Error('Forbidden value (' + this.totalStepCount + ') on element totalStepCount.');
            }
            param1.writeByte(this.totalStepCount);
            if (this.checkPointCurrent < 0) {
                throw new Error('Forbidden value (' + this.checkPointCurrent + ') on element checkPointCurrent.');
            }
            param1.writeVarInt(this.checkPointCurrent);
            if (this.checkPointTotal < 0) {
                throw new Error('Forbidden value (' + this.checkPointTotal + ') on element checkPointTotal.');
            }
            param1.writeVarInt(this.checkPointTotal);
            param1.writeInt(this.availableRetryCount);
            param1.writeShort(this.flags.length);
            var _loc3_: number = 0;
            while (_loc3_ < this.flags.length) {
                (this.flags[_loc3_]).serializeAs_TreasureHuntFlag(param1);
                _loc3_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_TreasureHuntMessage(param1);
        }

        public deserializeAs_TreasureHuntMessage(param1: ICustomDataInput): void {
            var _loc6_: number = 0;
            var _loc7_: TreasureHuntStep = null;
            var _loc8_: TreasureHuntFlag = null;
            this.questType = param1.readByte();
            if (this.questType < 0) {
                throw new Error('Forbidden value (' + this.questType + ') on element of TreasureHuntMessage.questType.');
            }
            this.startMapId = param1.readInt();
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc6_ = param1.readUnsignedShort();
                _loc7_ = <TreasureHuntStep>ProtocolTypeManager.getInstance(TreasureHuntStep, _loc6_);
                _loc7_.deserialize(param1);
                this.knownStepsList.push(_loc7_);
                _loc3_++;
            }
            this.totalStepCount = param1.readByte();
            if (this.totalStepCount < 0) {
                throw new Error('Forbidden value (' + this.totalStepCount + ') on element of TreasureHuntMessage.totalStepCount.');
            }
            this.checkPointCurrent = param1.readVarUhInt();
            if (this.checkPointCurrent < 0) {
                throw new Error('Forbidden value (' + this.checkPointCurrent + ') on element of TreasureHuntMessage.checkPointCurrent.');
            }
            this.checkPointTotal = param1.readVarUhInt();
            if (this.checkPointTotal < 0) {
                throw new Error('Forbidden value (' + this.checkPointTotal + ') on element of TreasureHuntMessage.checkPointTotal.');
            }
            this.availableRetryCount = param1.readInt();
            var _loc4_: number = param1.readUnsignedShort();
            var _loc5_: number = 0;
            while (_loc5_ < _loc4_) {
            _loc8_ = new TreasureHuntFlag();
                _loc8_.deserialize(param1);
                this.flags.push(_loc8_);
                _loc5_++;
            }

        }
    }
    export class TreasureHuntRequestAnswerMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6489;

        questType: number;
        result: number;

        constructor() {
            this.questType = 0;
            this.result = 0;
            super();
        }

        public getMessageId(): number {
            return TreasureHuntRequestAnswerMessage.ID;
        }

        public reset(): void {
            this.questType = 0;
            this.result = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_TreasureHuntRequestAnswerMessage(param1);
        }

        public serializeAs_TreasureHuntRequestAnswerMessage(param1: ICustomDataOutput): void {
            param1.writeByte(this.questType);
            param1.writeByte(this.result);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_TreasureHuntRequestAnswerMessage(param1);
        }

        public deserializeAs_TreasureHuntRequestAnswerMessage(param1: ICustomDataInput): void {
            this.questType = param1.readByte();
            if (this.questType < 0) {
                throw new Error('Forbidden value (' + this.questType + ') on element of TreasureHuntRequestAnswerMessage.questType.');
            }
            this.result = param1.readByte();
            if (this.result < 0) {
                throw new Error('Forbidden value (' + this.result + ') on element of TreasureHuntRequestAnswerMessage.result.');
            }

        }
    }
    export class TreasureHuntRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6488;

        questLevel: number;
        questType: number;

        constructor() {
            this.questLevel = 0;
            this.questType = 0;
            super();
        }

        public getMessageId(): number {
            return TreasureHuntRequestMessage.ID;
        }

        public reset(): void {
            this.questLevel = 0;
            this.questType = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_TreasureHuntRequestMessage(param1);
        }

        public serializeAs_TreasureHuntRequestMessage(param1: ICustomDataOutput): void {
            if (this.questLevel < 1 || this.questLevel > 200) {
                throw new Error('Forbidden value (' + this.questLevel + ') on element questLevel.');
            }
            param1.writeByte(this.questLevel);
            param1.writeByte(this.questType);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_TreasureHuntRequestMessage(param1);
        }

        public deserializeAs_TreasureHuntRequestMessage(param1: ICustomDataInput): void {
            this.questLevel = param1.readUnsignedByte();
            if (this.questLevel < 1 || this.questLevel > 200) {
                throw new Error('Forbidden value (' + this.questLevel + ') on element of TreasureHuntRequestMessage.questLevel.');
            }
            this.questType = param1.readByte();
            if (this.questType < 0) {
                throw new Error('Forbidden value (' + this.questType + ') on element of TreasureHuntRequestMessage.questType.');
            }

        }
    }
    export class TreasureHuntShowLegendaryUIMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6498;

        availableLegendaryIds: number[];

        constructor() {
            this.availableLegendaryIds = [];
            super();
        }

        public getMessageId(): number {
            return TreasureHuntShowLegendaryUIMessage.ID;
        }

        public reset(): void {
            this.availableLegendaryIds = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_TreasureHuntShowLegendaryUIMessage(param1);
        }

        public serializeAs_TreasureHuntShowLegendaryUIMessage(param1: ICustomDataOutput): void {
            param1.writeShort(this.availableLegendaryIds.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.availableLegendaryIds.length) {
                if (this.availableLegendaryIds[_loc2_] < 0) {
                    throw new Error('Forbidden value (' + this.availableLegendaryIds[_loc2_] + ') on element 1 (starting at 1) of availableLegendaryIds.');
                }
                param1.writeVarShort(this.availableLegendaryIds[_loc2_]);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_TreasureHuntShowLegendaryUIMessage(param1);
        }

        public deserializeAs_TreasureHuntShowLegendaryUIMessage(param1: ICustomDataInput): void {
            var _loc4_: number = 0;
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = param1.readVarUhShort();
                if (_loc4_ < 0) {
                    throw new Error('Forbidden value (' + _loc4_ + ') on elements of availableLegendaryIds.');
                }
                this.availableLegendaryIds.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class GameRolePlaySpellAnimMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6114;

        casterId: number;
        targetCellId: number;
        spellId: number;
        spellLevel: number;

        constructor() {
            this.casterId = 0;
            this.targetCellId = 0;
            this.spellId = 0;
            this.spellLevel = 0;
            super();
        }

        public getMessageId(): number {
            return GameRolePlaySpellAnimMessage.ID;
        }

        public reset(): void {
            this.casterId = 0;
            this.targetCellId = 0;
            this.spellId = 0;
            this.spellLevel = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameRolePlaySpellAnimMessage(param1);
        }

        public serializeAs_GameRolePlaySpellAnimMessage(param1: ICustomDataOutput): void {
            param1.writeInt(this.casterId);
            if (this.targetCellId < 0 || this.targetCellId > 559) {
                throw new Error('Forbidden value (' + this.targetCellId + ') on element targetCellId.');
            }
            param1.writeVarShort(this.targetCellId);
            if (this.spellId < 0) {
                throw new Error('Forbidden value (' + this.spellId + ') on element spellId.');
            }
            param1.writeVarShort(this.spellId);
            if (this.spellLevel < 1 || this.spellLevel > 6) {
                throw new Error('Forbidden value (' + this.spellLevel + ') on element spellLevel.');
            }
            param1.writeByte(this.spellLevel);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameRolePlaySpellAnimMessage(param1);
        }

        public deserializeAs_GameRolePlaySpellAnimMessage(param1: ICustomDataInput): void {
            this.casterId = param1.readInt();
            this.targetCellId = param1.readVarUhShort();
            if (this.targetCellId < 0 || this.targetCellId > 559) {
                throw new Error('Forbidden value (' + this.targetCellId + ') on element of GameRolePlaySpellAnimMessage.targetCellId.');
            }
            this.spellId = param1.readVarUhShort();
            if (this.spellId < 0) {
                throw new Error('Forbidden value (' + this.spellId + ') on element of GameRolePlaySpellAnimMessage.spellId.');
            }
            this.spellLevel = param1.readByte();
            if (this.spellLevel < 1 || this.spellLevel > 6) {
                throw new Error('Forbidden value (' + this.spellLevel + ') on element of GameRolePlaySpellAnimMessage.spellLevel.');
            }

        }
    }
    export class LeaveDialogMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5502;

        dialogType: number;

        constructor() {
            this.dialogType = 0;
            super();
        }

        public getMessageId(): number {
            return LeaveDialogMessage.ID;
        }

        public reset(): void {
            this.dialogType = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_LeaveDialogMessage(param1);
        }

        public serializeAs_LeaveDialogMessage(param1: ICustomDataOutput): void {
            param1.writeByte(this.dialogType);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_LeaveDialogMessage(param1);
        }

        public deserializeAs_LeaveDialogMessage(param1: ICustomDataInput): void {
            this.dialogType = param1.readByte();
            if (this.dialogType < 0) {
                throw new Error('Forbidden value (' + this.dialogType + ') on element of LeaveDialogMessage.dialogType.');
            }

        }
    }
    export class LeaveDialogRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5501;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return LeaveDialogRequestMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_LeaveDialogRequestMessage(param1);
        }

        public serializeAs_LeaveDialogRequestMessage(param1: ICustomDataOutput): void {

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_LeaveDialogRequestMessage(param1);
        }

        public deserializeAs_LeaveDialogRequestMessage(param1: ICustomDataInput): void {

        }
    }
    export class PauseDialogMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6012;

        dialogType: number;

        constructor() {
            this.dialogType = 0;
            super();
        }

        public getMessageId(): number {
            return PauseDialogMessage.ID;
        }

        public reset(): void {
            this.dialogType = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_PauseDialogMessage(param1);
        }

        public serializeAs_PauseDialogMessage(param1: ICustomDataOutput): void {
            param1.writeByte(this.dialogType);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_PauseDialogMessage(param1);
        }

        public deserializeAs_PauseDialogMessage(param1: ICustomDataInput): void {
            this.dialogType = param1.readByte();
            if (this.dialogType < 0) {
                throw new Error('Forbidden value (' + this.dialogType + ') on element of PauseDialogMessage.dialogType.');
            }

        }
    }
    export class FriendAddFailureMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5600;

        reason: number;

        constructor() {
            this.reason = 0;
            super();
        }

        public getMessageId(): number {
            return FriendAddFailureMessage.ID;
        }

        public reset(): void {
            this.reason = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_FriendAddFailureMessage(param1);
        }

        public serializeAs_FriendAddFailureMessage(param1: ICustomDataOutput): void {
            param1.writeByte(this.reason);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_FriendAddFailureMessage(param1);
        }

        public deserializeAs_FriendAddFailureMessage(param1: ICustomDataInput): void {
            this.reason = param1.readByte();
            if (this.reason < 0) {
                throw new Error('Forbidden value (' + this.reason + ') on element of FriendAddFailureMessage.reason.');
            }

        }
    }
    export class FriendAddRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 4004;

        name: string;

        constructor() {
            this.name = '';
            super();
        }

        public getMessageId(): number {
            return FriendAddRequestMessage.ID;
        }

        public reset(): void {
            this.name = '';
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_FriendAddRequestMessage(param1);
        }

        public serializeAs_FriendAddRequestMessage(param1: ICustomDataOutput): void {
            param1.writeUTF(this.name);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_FriendAddRequestMessage(param1);
        }

        public deserializeAs_FriendAddRequestMessage(param1: ICustomDataInput): void {
            this.name = param1.readUTF();

        }
    }
    export class FriendAddedMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5599;

        friendAdded: FriendInformations;

        constructor() {
            this.friendAdded = new FriendInformations();
            super();
        }

        public getMessageId(): number {
            return FriendAddedMessage.ID;
        }

        public reset(): void {
            this.friendAdded = new FriendInformations();
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_FriendAddedMessage(param1);
        }

        public serializeAs_FriendAddedMessage(param1: ICustomDataOutput): void {
            param1.writeShort(this.friendAdded.getTypeId());
            this.friendAdded.serialize(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_FriendAddedMessage(param1);
        }

        public deserializeAs_FriendAddedMessage(param1: ICustomDataInput): void {
            var _loc2_: number = param1.readUnsignedShort();
            this.friendAdded = <FriendInformations>ProtocolTypeManager.getInstance(FriendInformations, _loc2_);
            this.friendAdded.deserialize(param1);

        }
    }
    export class FriendDeleteRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5603;

        accountId: number;

        constructor() {
            this.accountId = 0;
            super();
        }

        public getMessageId(): number {
            return FriendDeleteRequestMessage.ID;
        }

        public reset(): void {
            this.accountId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_FriendDeleteRequestMessage(param1);
        }

        public serializeAs_FriendDeleteRequestMessage(param1: ICustomDataOutput): void {
            if (this.accountId < 0) {
                throw new Error('Forbidden value (' + this.accountId + ') on element accountId.');
            }
            param1.writeInt(this.accountId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_FriendDeleteRequestMessage(param1);
        }

        public deserializeAs_FriendDeleteRequestMessage(param1: ICustomDataInput): void {
            this.accountId = param1.readInt();
            if (this.accountId < 0) {
                throw new Error('Forbidden value (' + this.accountId + ') on element of FriendDeleteRequestMessage.accountId.');
            }

        }
    }
    export class FriendDeleteResultMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5601;

        success: boolean;
        name: string;

        constructor() {
            this.success = false;
            this.name = '';
            super();
        }

        public getMessageId(): number {
            return FriendDeleteResultMessage.ID;
        }

        public reset(): void {
            this.success = false;
            this.name = '';
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_FriendDeleteResultMessage(param1);
        }

        public serializeAs_FriendDeleteResultMessage(param1: ICustomDataOutput): void {
            param1.writeBoolean(this.success);
            param1.writeUTF(this.name);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_FriendDeleteResultMessage(param1);
        }

        public deserializeAs_FriendDeleteResultMessage(param1: ICustomDataInput): void {
            this.success = param1.readBoolean();
            this.name = param1.readUTF();

        }
    }
    export class FriendJoinRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5605;

        name: string;

        constructor() {
            this.name = '';
            super();
        }

        public getMessageId(): number {
            return FriendJoinRequestMessage.ID;
        }

        public reset(): void {
            this.name = '';
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_FriendJoinRequestMessage(param1);
        }

        public serializeAs_FriendJoinRequestMessage(param1: ICustomDataOutput): void {
            param1.writeUTF(this.name);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_FriendJoinRequestMessage(param1);
        }

        public deserializeAs_FriendJoinRequestMessage(param1: ICustomDataInput): void {
            this.name = param1.readUTF();

        }
    }
    export class FriendSetWarnOnConnectionMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5602;

        enable: boolean;

        constructor() {
            this.enable = false;
            super();
        }

        public getMessageId(): number {
            return FriendSetWarnOnConnectionMessage.ID;
        }

        public reset(): void {
            this.enable = false;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_FriendSetWarnOnConnectionMessage(param1);
        }

        public serializeAs_FriendSetWarnOnConnectionMessage(param1: ICustomDataOutput): void {
            param1.writeBoolean(this.enable);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_FriendSetWarnOnConnectionMessage(param1);
        }

        public deserializeAs_FriendSetWarnOnConnectionMessage(param1: ICustomDataInput): void {
            this.enable = param1.readBoolean();

        }
    }
    export class FriendSetWarnOnLevelGainMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6077;

        enable: boolean;

        constructor() {
            this.enable = false;
            super();
        }

        public getMessageId(): number {
            return FriendSetWarnOnLevelGainMessage.ID;
        }

        public reset(): void {
            this.enable = false;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_FriendSetWarnOnLevelGainMessage(param1);
        }

        public serializeAs_FriendSetWarnOnLevelGainMessage(param1: ICustomDataOutput): void {
            param1.writeBoolean(this.enable);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_FriendSetWarnOnLevelGainMessage(param1);
        }

        public deserializeAs_FriendSetWarnOnLevelGainMessage(param1: ICustomDataInput): void {
            this.enable = param1.readBoolean();

        }
    }
    export class FriendSpouseFollowWithCompassRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5606;

        enable: boolean;

        constructor() {
            this.enable = false;
            super();
        }

        public getMessageId(): number {
            return FriendSpouseFollowWithCompassRequestMessage.ID;
        }

        public reset(): void {
            this.enable = false;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_FriendSpouseFollowWithCompassRequestMessage(param1);
        }

        public serializeAs_FriendSpouseFollowWithCompassRequestMessage(param1: ICustomDataOutput): void {
            param1.writeBoolean(this.enable);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_FriendSpouseFollowWithCompassRequestMessage(param1);
        }

        public deserializeAs_FriendSpouseFollowWithCompassRequestMessage(param1: ICustomDataInput): void {
            this.enable = param1.readBoolean();

        }
    }
    export class FriendSpouseJoinRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5604;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return FriendSpouseJoinRequestMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_FriendSpouseJoinRequestMessage(param1);
        }

        public serializeAs_FriendSpouseJoinRequestMessage(param1: ICustomDataOutput): void {

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_FriendSpouseJoinRequestMessage(param1);
        }

        public deserializeAs_FriendSpouseJoinRequestMessage(param1: ICustomDataInput): void {

        }
    }
    export class FriendUpdateMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5924;

        friendUpdated: FriendInformations;

        constructor() {
            this.friendUpdated = new FriendInformations();
            super();
        }

        public getMessageId(): number {
            return FriendUpdateMessage.ID;
        }

        public reset(): void {
            this.friendUpdated = new FriendInformations();
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_FriendUpdateMessage(param1);
        }

        public serializeAs_FriendUpdateMessage(param1: ICustomDataOutput): void {
            param1.writeShort(this.friendUpdated.getTypeId());
            this.friendUpdated.serialize(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_FriendUpdateMessage(param1);
        }

        public deserializeAs_FriendUpdateMessage(param1: ICustomDataInput): void {
            var _loc2_: number = param1.readUnsignedShort();
            this.friendUpdated = <FriendInformations>ProtocolTypeManager.getInstance(FriendInformations, _loc2_);
            this.friendUpdated.deserialize(param1);

        }
    }
    export class FriendWarnOnConnectionStateMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5630;

        enable: boolean;

        constructor() {
            this.enable = false;
            super();
        }

        public getMessageId(): number {
            return FriendWarnOnConnectionStateMessage.ID;
        }

        public reset(): void {
            this.enable = false;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_FriendWarnOnConnectionStateMessage(param1);
        }

        public serializeAs_FriendWarnOnConnectionStateMessage(param1: ICustomDataOutput): void {
            param1.writeBoolean(this.enable);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_FriendWarnOnConnectionStateMessage(param1);
        }

        public deserializeAs_FriendWarnOnConnectionStateMessage(param1: ICustomDataInput): void {
            this.enable = param1.readBoolean();

        }
    }
    export class FriendWarnOnLevelGainStateMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6078;

        enable: boolean;

        constructor() {
            this.enable = false;
            super();
        }

        public getMessageId(): number {
            return FriendWarnOnLevelGainStateMessage.ID;
        }

        public reset(): void {
            this.enable = false;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_FriendWarnOnLevelGainStateMessage(param1);
        }

        public serializeAs_FriendWarnOnLevelGainStateMessage(param1: ICustomDataOutput): void {
            param1.writeBoolean(this.enable);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_FriendWarnOnLevelGainStateMessage(param1);
        }

        public deserializeAs_FriendWarnOnLevelGainStateMessage(param1: ICustomDataInput): void {
            this.enable = param1.readBoolean();

        }
    }
    export class FriendsGetListMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 4001;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return FriendsGetListMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_FriendsGetListMessage(param1);
        }

        public serializeAs_FriendsGetListMessage(param1: ICustomDataOutput): void {

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_FriendsGetListMessage(param1);
        }

        public deserializeAs_FriendsGetListMessage(param1: ICustomDataInput): void {

        }
    }
    export class FriendsListMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 4002;

        friendsList: FriendInformations[];

        constructor() {
            this.friendsList = [];
            super();
        }

        public getMessageId(): number {
            return FriendsListMessage.ID;
        }

        public reset(): void {
            this.friendsList = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_FriendsListMessage(param1);
        }

        public serializeAs_FriendsListMessage(param1: ICustomDataOutput): void {
            param1.writeShort(this.friendsList.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.friendsList.length) {
                param1.writeShort((this.friendsList[_loc2_]).getTypeId());
                (this.friendsList[_loc2_]).serialize(param1);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_FriendsListMessage(param1);
        }

        public deserializeAs_FriendsListMessage(param1: ICustomDataInput): void {
            var _loc4_: number = 0;
            var _loc5_: FriendInformations = null;
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = param1.readUnsignedShort();
                _loc5_ = <FriendInformations>ProtocolTypeManager.getInstance(FriendInformations, _loc4_);
                _loc5_.deserialize(param1);
                this.friendsList.push(_loc5_);
                _loc3_++;
            }

        }
    }
    export class GuildMemberSetWarnOnConnectionMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6159;

        enable: boolean;

        constructor() {
            this.enable = false;
            super();
        }

        public getMessageId(): number {
            return GuildMemberSetWarnOnConnectionMessage.ID;
        }

        public reset(): void {
            this.enable = false;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GuildMemberSetWarnOnConnectionMessage(param1);
        }

        public serializeAs_GuildMemberSetWarnOnConnectionMessage(param1: ICustomDataOutput): void {
            param1.writeBoolean(this.enable);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GuildMemberSetWarnOnConnectionMessage(param1);
        }

        public deserializeAs_GuildMemberSetWarnOnConnectionMessage(param1: ICustomDataInput): void {
            this.enable = param1.readBoolean();

        }
    }
    export class GuildMemberWarnOnConnectionStateMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6160;

        enable: boolean;

        constructor() {
            this.enable = false;
            super();
        }

        public getMessageId(): number {
            return GuildMemberWarnOnConnectionStateMessage.ID;
        }

        public reset(): void {
            this.enable = false;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GuildMemberWarnOnConnectionStateMessage(param1);
        }

        public serializeAs_GuildMemberWarnOnConnectionStateMessage(param1: ICustomDataOutput): void {
            param1.writeBoolean(this.enable);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GuildMemberWarnOnConnectionStateMessage(param1);
        }

        public deserializeAs_GuildMemberWarnOnConnectionStateMessage(param1: ICustomDataInput): void {
            this.enable = param1.readBoolean();

        }
    }
    export class IgnoredAddFailureMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5679;

        reason: number;

        constructor() {
            this.reason = 0;
            super();
        }

        public getMessageId(): number {
            return IgnoredAddFailureMessage.ID;
        }

        public reset(): void {
            this.reason = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_IgnoredAddFailureMessage(param1);
        }

        public serializeAs_IgnoredAddFailureMessage(param1: ICustomDataOutput): void {
            param1.writeByte(this.reason);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_IgnoredAddFailureMessage(param1);
        }

        public deserializeAs_IgnoredAddFailureMessage(param1: ICustomDataInput): void {
            this.reason = param1.readByte();
            if (this.reason < 0) {
                throw new Error('Forbidden value (' + this.reason + ') on element of IgnoredAddFailureMessage.reason.');
            }

        }
    }
    export class IgnoredAddRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5673;

        name: string;
        session: boolean;

        constructor() {
            this.name = '';
            this.session = false;
            super();
        }

        public getMessageId(): number {
            return IgnoredAddRequestMessage.ID;
        }

        public reset(): void {
            this.name = '';
            this.session = false;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_IgnoredAddRequestMessage(param1);
        }

        public serializeAs_IgnoredAddRequestMessage(param1: ICustomDataOutput): void {
            param1.writeUTF(this.name);
            param1.writeBoolean(this.session);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_IgnoredAddRequestMessage(param1);
        }

        public deserializeAs_IgnoredAddRequestMessage(param1: ICustomDataInput): void {
            this.name = param1.readUTF();
            this.session = param1.readBoolean();

        }
    }
    export class IgnoredAddedMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5678;

        ignoreAdded: IgnoredInformations;
        session: boolean;

        constructor() {
            this.ignoreAdded = new IgnoredInformations();
            this.session = false;
            super();
        }

        public getMessageId(): number {
            return IgnoredAddedMessage.ID;
        }

        public reset(): void {
            this.ignoreAdded = new IgnoredInformations();
            this.session = false;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_IgnoredAddedMessage(param1);
        }

        public serializeAs_IgnoredAddedMessage(param1: ICustomDataOutput): void {
            param1.writeShort(this.ignoreAdded.getTypeId());
            this.ignoreAdded.serialize(param1);
            param1.writeBoolean(this.session);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_IgnoredAddedMessage(param1);
        }

        public deserializeAs_IgnoredAddedMessage(param1: ICustomDataInput): void {
            var _loc2_: number = param1.readUnsignedShort();
            this.ignoreAdded = <IgnoredInformations>ProtocolTypeManager.getInstance(IgnoredInformations, _loc2_);
            this.ignoreAdded.deserialize(param1);
            this.session = param1.readBoolean();

        }
    }
    export class IgnoredDeleteRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5680;

        accountId: number;
        session: boolean;

        constructor() {
            this.accountId = 0;
            this.session = false;
            super();
        }

        public getMessageId(): number {
            return IgnoredDeleteRequestMessage.ID;
        }

        public reset(): void {
            this.accountId = 0;
            this.session = false;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_IgnoredDeleteRequestMessage(param1);
        }

        public serializeAs_IgnoredDeleteRequestMessage(param1: ICustomDataOutput): void {
            if (this.accountId < 0) {
                throw new Error('Forbidden value (' + this.accountId + ') on element accountId.');
            }
            param1.writeInt(this.accountId);
            param1.writeBoolean(this.session);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_IgnoredDeleteRequestMessage(param1);
        }

        public deserializeAs_IgnoredDeleteRequestMessage(param1: ICustomDataInput): void {
            this.accountId = param1.readInt();
            if (this.accountId < 0) {
                throw new Error('Forbidden value (' + this.accountId + ') on element of IgnoredDeleteRequestMessage.accountId.');
            }
            this.session = param1.readBoolean();

        }
    }
    export class IgnoredDeleteResultMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5677;

        success: boolean;
        name: string;
        session: boolean;

        constructor() {
            this.success = false;
            this.name = '';
            this.session = false;
            super();
        }

        public getMessageId(): number {
            return IgnoredDeleteResultMessage.ID;
        }

        public reset(): void {
            this.success = false;
            this.name = '';
            this.session = false;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_IgnoredDeleteResultMessage(param1);
        }

        public serializeAs_IgnoredDeleteResultMessage(param1: ICustomDataOutput): void {
            var _loc2_: number = 0;
            _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 0, this.success);
            _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 1, this.session);
            param1.writeByte(_loc2_);
            param1.writeUTF(this.name);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_IgnoredDeleteResultMessage(param1);
        }

        public deserializeAs_IgnoredDeleteResultMessage(param1: ICustomDataInput): void {
            var _loc2_: number = param1.readByte();
            this.success = BooleanByteWrapper.getFlag(_loc2_, 0);
            this.session = BooleanByteWrapper.getFlag(_loc2_, 1);
            this.name = param1.readUTF();

        }
    }
    export class IgnoredGetListMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5676;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return IgnoredGetListMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_IgnoredGetListMessage(param1);
        }

        public serializeAs_IgnoredGetListMessage(param1: ICustomDataOutput): void {

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_IgnoredGetListMessage(param1);
        }

        public deserializeAs_IgnoredGetListMessage(param1: ICustomDataInput): void {

        }
    }
    export class IgnoredListMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5674;

        ignoredList: IgnoredInformations[];

        constructor() {
            this.ignoredList = [];
            super();
        }

        public getMessageId(): number {
            return IgnoredListMessage.ID;
        }

        public reset(): void {
            this.ignoredList = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_IgnoredListMessage(param1);
        }

        public serializeAs_IgnoredListMessage(param1: ICustomDataOutput): void {
            param1.writeShort(this.ignoredList.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.ignoredList.length) {
                param1.writeShort((this.ignoredList[_loc2_]).getTypeId());
                (this.ignoredList[_loc2_]).serialize(param1);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_IgnoredListMessage(param1);
        }

        public deserializeAs_IgnoredListMessage(param1: ICustomDataInput): void {
            var _loc4_: number = 0;
            var _loc5_: IgnoredInformations = null;
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = param1.readUnsignedShort();
                _loc5_ = <IgnoredInformations>ProtocolTypeManager.getInstance(IgnoredInformations, _loc4_);
                _loc5_.deserialize(param1);
                this.ignoredList.push(_loc5_);
                _loc3_++;
            }

        }
    }
    export class SpouseGetInformationsMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6355;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return SpouseGetInformationsMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_SpouseGetInformationsMessage(param1);
        }

        public serializeAs_SpouseGetInformationsMessage(param1: ICustomDataOutput): void {

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_SpouseGetInformationsMessage(param1);
        }

        public deserializeAs_SpouseGetInformationsMessage(param1: ICustomDataInput): void {

        }
    }
    export class SpouseInformationsMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6356;

        spouse: FriendSpouseInformations;

        constructor() {
            this.spouse = new FriendSpouseInformations();
            super();
        }

        public getMessageId(): number {
            return SpouseInformationsMessage.ID;
        }

        public reset(): void {
            this.spouse = new FriendSpouseInformations();
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_SpouseInformationsMessage(param1);
        }

        public serializeAs_SpouseInformationsMessage(param1: ICustomDataOutput): void {
            param1.writeShort(this.spouse.getTypeId());
            this.spouse.serialize(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_SpouseInformationsMessage(param1);
        }

        public deserializeAs_SpouseInformationsMessage(param1: ICustomDataInput): void {
            var _loc2_: number = param1.readUnsignedShort();
            this.spouse = <FriendSpouseInformations>ProtocolTypeManager.getInstance(FriendSpouseInformations, _loc2_);
            this.spouse.deserialize(param1);

        }
    }
    export class SpouseStatusMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6265;

        hasSpouse: boolean;

        constructor() {
            this.hasSpouse = false;
            super();
        }

        public getMessageId(): number {
            return SpouseStatusMessage.ID;
        }

        public reset(): void {
            this.hasSpouse = false;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_SpouseStatusMessage(param1);
        }

        public serializeAs_SpouseStatusMessage(param1: ICustomDataOutput): void {
            param1.writeBoolean(this.hasSpouse);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_SpouseStatusMessage(param1);
        }

        public deserializeAs_SpouseStatusMessage(param1: ICustomDataInput): void {
            this.hasSpouse = param1.readBoolean();

        }
    }
    export class WarnOnPermaDeathStateMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6513;

        enable: boolean;

        constructor() {
            this.enable = false;
            super();
        }

        public getMessageId(): number {
            return WarnOnPermaDeathStateMessage.ID;
        }

        public reset(): void {
            this.enable = false;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_WarnOnPermaDeathStateMessage(param1);
        }

        public serializeAs_WarnOnPermaDeathStateMessage(param1: ICustomDataOutput): void {
            param1.writeBoolean(this.enable);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_WarnOnPermaDeathStateMessage(param1);
        }

        public deserializeAs_WarnOnPermaDeathStateMessage(param1: ICustomDataInput): void {
            this.enable = param1.readBoolean();

        }
    }
    export class GuestLimitationMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6506;

        reason: number;

        constructor() {
            this.reason = 0;
            super();
        }

        public getMessageId(): number {
            return GuestLimitationMessage.ID;
        }

        public reset(): void {
            this.reason = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GuestLimitationMessage(param1);
        }

        public serializeAs_GuestLimitationMessage(param1: ICustomDataOutput): void {
            param1.writeByte(this.reason);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GuestLimitationMessage(param1);
        }

        public deserializeAs_GuestLimitationMessage(param1: ICustomDataInput): void {
            this.reason = param1.readByte();
            if (this.reason < 0) {
                throw new Error('Forbidden value (' + this.reason + ') on element of GuestLimitationMessage.reason.');
            }

        }
    }
    export class GuestModeMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6505;

        active: boolean;

        constructor() {
            this.active = false;
            super();
        }

        public getMessageId(): number {
            return GuestModeMessage.ID;
        }

        public reset(): void {
            this.active = false;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GuestModeMessage(param1);
        }

        public serializeAs_GuestModeMessage(param1: ICustomDataOutput): void {
            param1.writeBoolean(this.active);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GuestModeMessage(param1);
        }

        public deserializeAs_GuestModeMessage(param1: ICustomDataInput): void {
            this.active = param1.readBoolean();

        }
    }
    export class ChallengeFightJoinRefusedMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5908;

        playerId: number;
        reason: number;

        constructor() {
            this.playerId = 0;
            this.reason = 0;
            super();
        }

        public getMessageId(): number {
            return ChallengeFightJoinRefusedMessage.ID;
        }

        public reset(): void {
            this.playerId = 0;
            this.reason = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ChallengeFightJoinRefusedMessage(param1);
        }

        public serializeAs_ChallengeFightJoinRefusedMessage(param1: ICustomDataOutput): void {
            if (this.playerId < 0) {
                throw new Error('Forbidden value (' + this.playerId + ') on element playerId.');
            }
            param1.writeVarInt(this.playerId);
            param1.writeByte(this.reason);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ChallengeFightJoinRefusedMessage(param1);
        }

        public deserializeAs_ChallengeFightJoinRefusedMessage(param1: ICustomDataInput): void {
            this.playerId = param1.readVarUhInt();
            if (this.playerId < 0) {
                throw new Error('Forbidden value (' + this.playerId + ') on element of ChallengeFightJoinRefusedMessage.playerId.');
            }
            this.reason = param1.readByte();

        }
    }
    export class GuildChangeMemberParametersMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5549;

        memberId: number;
        rank: number;
        experienceGivenPercent: number;
        rights: number;

        constructor() {
            this.memberId = 0;
            this.rank = 0;
            this.experienceGivenPercent = 0;
            this.rights = 0;
            super();
        }

        public getMessageId(): number {
            return GuildChangeMemberParametersMessage.ID;
        }

        public reset(): void {
            this.memberId = 0;
            this.rank = 0;
            this.experienceGivenPercent = 0;
            this.rights = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GuildChangeMemberParametersMessage(param1);
        }

        public serializeAs_GuildChangeMemberParametersMessage(param1: ICustomDataOutput): void {
            if (this.memberId < 0) {
                throw new Error('Forbidden value (' + this.memberId + ') on element memberId.');
            }
            param1.writeVarInt(this.memberId);
            if (this.rank < 0) {
                throw new Error('Forbidden value (' + this.rank + ') on element rank.');
            }
            param1.writeVarShort(this.rank);
            if (this.experienceGivenPercent < 0 || this.experienceGivenPercent > 100) {
                throw new Error('Forbidden value (' + this.experienceGivenPercent + ') on element experienceGivenPercent.');
            }
            param1.writeByte(this.experienceGivenPercent);
            if (this.rights < 0) {
                throw new Error('Forbidden value (' + this.rights + ') on element rights.');
            }
            param1.writeVarInt(this.rights);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GuildChangeMemberParametersMessage(param1);
        }

        public deserializeAs_GuildChangeMemberParametersMessage(param1: ICustomDataInput): void {
            this.memberId = param1.readVarUhInt();
            if (this.memberId < 0) {
                throw new Error('Forbidden value (' + this.memberId + ') on element of GuildChangeMemberParametersMessage.memberId.');
            }
            this.rank = param1.readVarUhShort();
            if (this.rank < 0) {
                throw new Error('Forbidden value (' + this.rank + ') on element of GuildChangeMemberParametersMessage.rank.');
            }
            this.experienceGivenPercent = param1.readByte();
            if (this.experienceGivenPercent < 0 || this.experienceGivenPercent > 100) {
                throw new Error('Forbidden value (' + this.experienceGivenPercent + ') on element of GuildChangeMemberParametersMessage.experienceGivenPercent.');
            }
            this.rights = param1.readVarUhInt();
            if (this.rights < 0) {
                throw new Error('Forbidden value (' + this.rights + ') on element of GuildChangeMemberParametersMessage.rights.');
            }

        }
    }
    export class GuildCharacsUpgradeRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5706;

        charaTypeTarget: number;

        constructor() {
            this.charaTypeTarget = 0;
            super();
        }

        public getMessageId(): number {
            return GuildCharacsUpgradeRequestMessage.ID;
        }

        public reset(): void {
            this.charaTypeTarget = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GuildCharacsUpgradeRequestMessage(param1);
        }

        public serializeAs_GuildCharacsUpgradeRequestMessage(param1: ICustomDataOutput): void {
            param1.writeByte(this.charaTypeTarget);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GuildCharacsUpgradeRequestMessage(param1);
        }

        public deserializeAs_GuildCharacsUpgradeRequestMessage(param1: ICustomDataInput): void {
            this.charaTypeTarget = param1.readByte();
            if (this.charaTypeTarget < 0) {
                throw new Error('Forbidden value (' + this.charaTypeTarget + ') on element of GuildCharacsUpgradeRequestMessage.charaTypeTarget.');
            }

        }
    }
    export class GuildCreationResultMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5554;

        result: number;

        constructor() {
            this.result = 0;
            super();
        }

        public getMessageId(): number {
            return GuildCreationResultMessage.ID;
        }

        public reset(): void {
            this.result = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GuildCreationResultMessage(param1);
        }

        public serializeAs_GuildCreationResultMessage(param1: ICustomDataOutput): void {
            param1.writeByte(this.result);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GuildCreationResultMessage(param1);
        }

        public deserializeAs_GuildCreationResultMessage(param1: ICustomDataInput): void {
            this.result = param1.readByte();
            if (this.result < 0) {
                throw new Error('Forbidden value (' + this.result + ') on element of GuildCreationResultMessage.result.');
            }

        }
    }
    export class GuildCreationStartedMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5920;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return GuildCreationStartedMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GuildCreationStartedMessage(param1);
        }

        public serializeAs_GuildCreationStartedMessage(param1: ICustomDataOutput): void {

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GuildCreationStartedMessage(param1);
        }

        public deserializeAs_GuildCreationStartedMessage(param1: ICustomDataInput): void {

        }
    }
    export class GuildCreationValidMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5546;

        guildName: string;
        guildEmblem: GuildEmblem;

        constructor() {
            this.guildName = '';
            this.guildEmblem = new GuildEmblem();
            super();
        }

        public getMessageId(): number {
            return GuildCreationValidMessage.ID;
        }

        public reset(): void {
            this.guildName = '';
            this.guildEmblem = new GuildEmblem();
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GuildCreationValidMessage(param1);
        }

        public serializeAs_GuildCreationValidMessage(param1: ICustomDataOutput): void {
            param1.writeUTF(this.guildName);
            this.guildEmblem.serializeAs_GuildEmblem(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GuildCreationValidMessage(param1);
        }

        public deserializeAs_GuildCreationValidMessage(param1: ICustomDataInput): void {
            this.guildName = param1.readUTF();
            this.guildEmblem = new GuildEmblem();
            this.guildEmblem.deserialize(param1);

        }
    }
    export class GuildFactsErrorMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6424;

        guildId: number;

        constructor() {
            this.guildId = 0;
            super();
        }

        public getMessageId(): number {
            return GuildFactsErrorMessage.ID;
        }

        public reset(): void {
            this.guildId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GuildFactsErrorMessage(param1);
        }

        public serializeAs_GuildFactsErrorMessage(param1: ICustomDataOutput): void {
            if (this.guildId < 0) {
                throw new Error('Forbidden value (' + this.guildId + ') on element guildId.');
            }
            param1.writeVarInt(this.guildId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GuildFactsErrorMessage(param1);
        }

        public deserializeAs_GuildFactsErrorMessage(param1: ICustomDataInput): void {
            this.guildId = param1.readVarUhInt();
            if (this.guildId < 0) {
                throw new Error('Forbidden value (' + this.guildId + ') on element of GuildFactsErrorMessage.guildId.');
            }

        }
    }
    export class GuildFactsMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6415;

        infos: GuildFactSheetInformations;
        creationDate: number;
        nbTaxCollectors: number;
        enabled: boolean;
        members: CharacterMinimalInformations[];

        constructor() {
            this.infos = new GuildFactSheetInformations();
            this.creationDate = 0;
            this.nbTaxCollectors = 0;
            this.enabled = false;
            this.members = [];
            super();
        }

        public getMessageId(): number {
            return GuildFactsMessage.ID;
        }

        public reset(): void {
            this.infos = new GuildFactSheetInformations();
            this.creationDate = 0;
            this.nbTaxCollectors = 0;
            this.enabled = false;
            this.members = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GuildFactsMessage(param1);
        }

        public serializeAs_GuildFactsMessage(param1: ICustomDataOutput): void {
            param1.writeShort(this.infos.getTypeId());
            this.infos.serialize(param1);
            if (this.creationDate < 0) {
                throw new Error('Forbidden value (' + this.creationDate + ') on element creationDate.');
            }
            param1.writeInt(this.creationDate);
            if (this.nbTaxCollectors < 0) {
                throw new Error('Forbidden value (' + this.nbTaxCollectors + ') on element nbTaxCollectors.');
            }
            param1.writeVarShort(this.nbTaxCollectors);
            param1.writeBoolean(this.enabled);
            param1.writeShort(this.members.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.members.length) {
                (this.members[_loc2_]).serializeAs_CharacterMinimalInformations(param1);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GuildFactsMessage(param1);
        }

        public deserializeAs_GuildFactsMessage(param1: ICustomDataInput): void {
            var _loc5_: CharacterMinimalInformations = null;
            var _loc2_: number = param1.readUnsignedShort();
            this.infos = <GuildFactSheetInformations>ProtocolTypeManager.getInstance(GuildFactSheetInformations, _loc2_);
            this.infos.deserialize(param1);
            this.creationDate = param1.readInt();
            if (this.creationDate < 0) {
                throw new Error('Forbidden value (' + this.creationDate + ') on element of GuildFactsMessage.creationDate.');
            }
            this.nbTaxCollectors = param1.readVarUhShort();
            if (this.nbTaxCollectors < 0) {
                throw new Error('Forbidden value (' + this.nbTaxCollectors + ') on element of GuildFactsMessage.nbTaxCollectors.');
            }
            this.enabled = param1.readBoolean();
            var _loc3_: number = param1.readUnsignedShort();
            var _loc4_: number = 0;
            while (_loc4_ < _loc3_) {
            _loc5_ = new CharacterMinimalInformations();
                _loc5_.deserialize(param1);
                this.members.push(_loc5_);
                _loc4_++;
            }

        }
    }
    export class GuildFactsRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6404;

        guildId: number;

        constructor() {
            this.guildId = 0;
            super();
        }

        public getMessageId(): number {
            return GuildFactsRequestMessage.ID;
        }

        public reset(): void {
            this.guildId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GuildFactsRequestMessage(param1);
        }

        public serializeAs_GuildFactsRequestMessage(param1: ICustomDataOutput): void {
            if (this.guildId < 0) {
                throw new Error('Forbidden value (' + this.guildId + ') on element guildId.');
            }
            param1.writeVarInt(this.guildId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GuildFactsRequestMessage(param1);
        }

        public deserializeAs_GuildFactsRequestMessage(param1: ICustomDataInput): void {
            this.guildId = param1.readVarUhInt();
            if (this.guildId < 0) {
                throw new Error('Forbidden value (' + this.guildId + ') on element of GuildFactsRequestMessage.guildId.');
            }

        }
    }
    export class GuildGetInformationsMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5550;

        infoType: number;

        constructor() {
            this.infoType = 0;
            super();
        }

        public getMessageId(): number {
            return GuildGetInformationsMessage.ID;
        }

        public reset(): void {
            this.infoType = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GuildGetInformationsMessage(param1);
        }

        public serializeAs_GuildGetInformationsMessage(param1: ICustomDataOutput): void {
            param1.writeByte(this.infoType);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GuildGetInformationsMessage(param1);
        }

        public deserializeAs_GuildGetInformationsMessage(param1: ICustomDataInput): void {
            this.infoType = param1.readByte();
            if (this.infoType < 0) {
                throw new Error('Forbidden value (' + this.infoType + ') on element of GuildGetInformationsMessage.infoType.');
            }

        }
    }
    export class GuildHouseRemoveMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6180;

        houseId: number;

        constructor() {
            this.houseId = 0;
            super();
        }

        public getMessageId(): number {
            return GuildHouseRemoveMessage.ID;
        }

        public reset(): void {
            this.houseId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GuildHouseRemoveMessage(param1);
        }

        public serializeAs_GuildHouseRemoveMessage(param1: ICustomDataOutput): void {
            if (this.houseId < 0) {
                throw new Error('Forbidden value (' + this.houseId + ') on element houseId.');
            }
            param1.writeVarInt(this.houseId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GuildHouseRemoveMessage(param1);
        }

        public deserializeAs_GuildHouseRemoveMessage(param1: ICustomDataInput): void {
            this.houseId = param1.readVarUhInt();
            if (this.houseId < 0) {
                throw new Error('Forbidden value (' + this.houseId + ') on element of GuildHouseRemoveMessage.houseId.');
            }

        }
    }
    export class GuildHouseTeleportRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5712;

        houseId: number;

        constructor() {
            this.houseId = 0;
            super();
        }

        public getMessageId(): number {
            return GuildHouseTeleportRequestMessage.ID;
        }

        public reset(): void {
            this.houseId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GuildHouseTeleportRequestMessage(param1);
        }

        public serializeAs_GuildHouseTeleportRequestMessage(param1: ICustomDataOutput): void {
            if (this.houseId < 0) {
                throw new Error('Forbidden value (' + this.houseId + ') on element houseId.');
            }
            param1.writeVarInt(this.houseId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GuildHouseTeleportRequestMessage(param1);
        }

        public deserializeAs_GuildHouseTeleportRequestMessage(param1: ICustomDataInput): void {
            this.houseId = param1.readVarUhInt();
            if (this.houseId < 0) {
                throw new Error('Forbidden value (' + this.houseId + ') on element of GuildHouseTeleportRequestMessage.houseId.');
            }

        }
    }
    export class GuildHouseUpdateInformationMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6181;

        housesInformations: HouseInformationsForGuild;

        constructor() {
            this.housesInformations = new HouseInformationsForGuild();
            super();
        }

        public getMessageId(): number {
            return GuildHouseUpdateInformationMessage.ID;
        }

        public reset(): void {
            this.housesInformations = new HouseInformationsForGuild();
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GuildHouseUpdateInformationMessage(param1);
        }

        public serializeAs_GuildHouseUpdateInformationMessage(param1: ICustomDataOutput): void {
            this.housesInformations.serializeAs_HouseInformationsForGuild(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GuildHouseUpdateInformationMessage(param1);
        }

        public deserializeAs_GuildHouseUpdateInformationMessage(param1: ICustomDataInput): void {
            this.housesInformations = new HouseInformationsForGuild();
            this.housesInformations.deserialize(param1);

        }
    }
    export class GuildHousesInformationMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5919;

        housesInformations: HouseInformationsForGuild[];

        constructor() {
            this.housesInformations = [];
            super();
        }

        public getMessageId(): number {
            return GuildHousesInformationMessage.ID;
        }

        public reset(): void {
            this.housesInformations = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GuildHousesInformationMessage(param1);
        }

        public serializeAs_GuildHousesInformationMessage(param1: ICustomDataOutput): void {
            param1.writeShort(this.housesInformations.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.housesInformations.length) {
                (this.housesInformations[_loc2_]).serializeAs_HouseInformationsForGuild(param1);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GuildHousesInformationMessage(param1);
        }

        public deserializeAs_GuildHousesInformationMessage(param1: ICustomDataInput): void {
            var _loc4_: HouseInformationsForGuild = null;
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = new HouseInformationsForGuild();
                _loc4_.deserialize(param1);
                this.housesInformations.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class GuildInAllianceFactsMessage extends GuildFactsMessage {
        public static ID: number = 6422;

        allianceInfos: BasicNamedAllianceInformations;

        constructor() {
            this.allianceInfos = new BasicNamedAllianceInformations();
            super();
        }

        public getMessageId(): number {
            return GuildInAllianceFactsMessage.ID;
        }

        public reset(): void {
            this.allianceInfos = new BasicNamedAllianceInformations();
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GuildInAllianceFactsMessage(param1);
        }

        public serializeAs_GuildInAllianceFactsMessage(param1: ICustomDataOutput): void {
            super.serializeAs_GuildFactsMessage(param1);
            this.allianceInfos.serializeAs_BasicNamedAllianceInformations(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GuildInAllianceFactsMessage(param1);
        }

        public deserializeAs_GuildInAllianceFactsMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.allianceInfos = new BasicNamedAllianceInformations();
            this.allianceInfos.deserialize(param1);

        }
    }
    export class GuildInformationsGeneralMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5557;

        enabled: boolean;
        abandonnedPaddock: boolean;
        level: number;
        expLevelFloor: number;
        experience: number;
        expNextLevelFloor: number;
        creationDate: number;
        nbTotalMembers: number;
        nbConnectedMembers: number;

        constructor() {
            this.enabled = false;
            this.abandonnedPaddock = false;
            this.level = 0;
            this.expLevelFloor = 0;
            this.experience = 0;
            this.expNextLevelFloor = 0;
            this.creationDate = 0;
            this.nbTotalMembers = 0;
            this.nbConnectedMembers = 0;
            super();
        }

        public getMessageId(): number {
            return GuildInformationsGeneralMessage.ID;
        }

        public reset(): void {
            this.enabled = false;
            this.abandonnedPaddock = false;
            this.level = 0;
            this.expLevelFloor = 0;
            this.experience = 0;
            this.expNextLevelFloor = 0;
            this.creationDate = 0;
            this.nbTotalMembers = 0;
            this.nbConnectedMembers = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GuildInformationsGeneralMessage(param1);
        }

        public serializeAs_GuildInformationsGeneralMessage(param1: ICustomDataOutput): void {
            var _loc2_: number = 0;
            _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 0, this.enabled);
            _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 1, this.abandonnedPaddock);
            param1.writeByte(_loc2_);
            if (this.level < 0 || this.level > 255) {
                throw new Error('Forbidden value (' + this.level + ') on element level.');
            }
            param1.writeByte(this.level);
            if (this.expLevelFloor < 0 || this.expLevelFloor > 9.007199254740992E15) {
                throw new Error('Forbidden value (' + this.expLevelFloor + ') on element expLevelFloor.');
            }
            param1.writeVarLong(this.expLevelFloor);
            if (this.experience < 0 || this.experience > 9.007199254740992E15) {
                throw new Error('Forbidden value (' + this.experience + ') on element experience.');
            }
            param1.writeVarLong(this.experience);
            if (this.expNextLevelFloor < 0 || this.expNextLevelFloor > 9.007199254740992E15) {
                throw new Error('Forbidden value (' + this.expNextLevelFloor + ') on element expNextLevelFloor.');
            }
            param1.writeVarLong(this.expNextLevelFloor);
            if (this.creationDate < 0) {
                throw new Error('Forbidden value (' + this.creationDate + ') on element creationDate.');
            }
            param1.writeInt(this.creationDate);
            if (this.nbTotalMembers < 0) {
                throw new Error('Forbidden value (' + this.nbTotalMembers + ') on element nbTotalMembers.');
            }
            param1.writeVarShort(this.nbTotalMembers);
            if (this.nbConnectedMembers < 0) {
                throw new Error('Forbidden value (' + this.nbConnectedMembers + ') on element nbConnectedMembers.');
            }
            param1.writeVarShort(this.nbConnectedMembers);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GuildInformationsGeneralMessage(param1);
        }

        public deserializeAs_GuildInformationsGeneralMessage(param1: ICustomDataInput): void {
            var _loc2_: number = param1.readByte();
            this.enabled = BooleanByteWrapper.getFlag(_loc2_, 0);
            this.abandonnedPaddock = BooleanByteWrapper.getFlag(_loc2_, 1);
            this.level = param1.readUnsignedByte();
            if (this.level < 0 || this.level > 255) {
                throw new Error('Forbidden value (' + this.level + ') on element of GuildInformationsGeneralMessage.level.');
            }
            this.expLevelFloor = param1.readVarUhLong();
            if (this.expLevelFloor < 0 || this.expLevelFloor > 9.007199254740992E15) {
                throw new Error('Forbidden value (' + this.expLevelFloor + ') on element of GuildInformationsGeneralMessage.expLevelFloor.');
            }
            this.experience = param1.readVarUhLong();
            if (this.experience < 0 || this.experience > 9.007199254740992E15) {
                throw new Error('Forbidden value (' + this.experience + ') on element of GuildInformationsGeneralMessage.experience.');
            }
            this.expNextLevelFloor = param1.readVarUhLong();
            if (this.expNextLevelFloor < 0 || this.expNextLevelFloor > 9.007199254740992E15) {
                throw new Error('Forbidden value (' + this.expNextLevelFloor + ') on element of GuildInformationsGeneralMessage.expNextLevelFloor.');
            }
            this.creationDate = param1.readInt();
            if (this.creationDate < 0) {
                throw new Error('Forbidden value (' + this.creationDate + ') on element of GuildInformationsGeneralMessage.creationDate.');
            }
            this.nbTotalMembers = param1.readVarUhShort();
            if (this.nbTotalMembers < 0) {
                throw new Error('Forbidden value (' + this.nbTotalMembers + ') on element of GuildInformationsGeneralMessage.nbTotalMembers.');
            }
            this.nbConnectedMembers = param1.readVarUhShort();
            if (this.nbConnectedMembers < 0) {
                throw new Error('Forbidden value (' + this.nbConnectedMembers + ') on element of GuildInformationsGeneralMessage.nbConnectedMembers.');
            }

        }
    }
    export class GuildInformationsMemberUpdateMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5597;

        member: GuildMember;

        constructor() {
            this.member = new GuildMember();
            super();
        }

        public getMessageId(): number {
            return GuildInformationsMemberUpdateMessage.ID;
        }

        public reset(): void {
            this.member = new GuildMember();
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GuildInformationsMemberUpdateMessage(param1);
        }

        public serializeAs_GuildInformationsMemberUpdateMessage(param1: ICustomDataOutput): void {
            this.member.serializeAs_GuildMember(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GuildInformationsMemberUpdateMessage(param1);
        }

        public deserializeAs_GuildInformationsMemberUpdateMessage(param1: ICustomDataInput): void {
            this.member = new GuildMember();
            this.member.deserialize(param1);

        }
    }
    export class GuildInformationsMembersMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5558;

        members: GuildMember[];

        constructor() {
            this.members = [];
            super();
        }

        public getMessageId(): number {
            return GuildInformationsMembersMessage.ID;
        }

        public reset(): void {
            this.members = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GuildInformationsMembersMessage(param1);
        }

        public serializeAs_GuildInformationsMembersMessage(param1: ICustomDataOutput): void {
            param1.writeShort(this.members.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.members.length) {
                (this.members[_loc2_]).serializeAs_GuildMember(param1);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GuildInformationsMembersMessage(param1);
        }

        public deserializeAs_GuildInformationsMembersMessage(param1: ICustomDataInput): void {
            var _loc4_: GuildMember = null;
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = new GuildMember();
                _loc4_.deserialize(param1);
                this.members.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class GuildInformationsPaddocksMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5959;

        nbPaddockMax: number;
        paddocksInformations: PaddockContentInformations[];

        constructor() {
            this.nbPaddockMax = 0;
            this.paddocksInformations = [];
            super();
        }

        public getMessageId(): number {
            return GuildInformationsPaddocksMessage.ID;
        }

        public reset(): void {
            this.nbPaddockMax = 0;
            this.paddocksInformations = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GuildInformationsPaddocksMessage(param1);
        }

        public serializeAs_GuildInformationsPaddocksMessage(param1: ICustomDataOutput): void {
            if (this.nbPaddockMax < 0) {
                throw new Error('Forbidden value (' + this.nbPaddockMax + ') on element nbPaddockMax.');
            }
            param1.writeByte(this.nbPaddockMax);
            param1.writeShort(this.paddocksInformations.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.paddocksInformations.length) {
                (this.paddocksInformations[_loc2_]).serializeAs_PaddockContentInformations(param1);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GuildInformationsPaddocksMessage(param1);
        }

        public deserializeAs_GuildInformationsPaddocksMessage(param1: ICustomDataInput): void {
            var _loc4_: PaddockContentInformations = null;
            this.nbPaddockMax = param1.readByte();
            if (this.nbPaddockMax < 0) {
                throw new Error('Forbidden value (' + this.nbPaddockMax + ') on element of GuildInformationsPaddocksMessage.nbPaddockMax.');
            }
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = new PaddockContentInformations();
                _loc4_.deserialize(param1);
                this.paddocksInformations.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class GuildInfosUpgradeMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5636;

        maxTaxCollectorsCount: number;
        taxCollectorsCount: number;
        taxCollectorLifePoints: number;
        taxCollectorDamagesBonuses: number;
        taxCollectorPods: number;
        taxCollectorProspecting: number;
        taxCollectorWisdom: number;
        boostPoints: number;
        spellId: number[];
        spellLevel: number[];

        constructor() {
            this.maxTaxCollectorsCount = 0;
            this.taxCollectorsCount = 0;
            this.taxCollectorLifePoints = 0;
            this.taxCollectorDamagesBonuses = 0;
            this.taxCollectorPods = 0;
            this.taxCollectorProspecting = 0;
            this.taxCollectorWisdom = 0;
            this.boostPoints = 0;
            this.spellId = [];
            this.spellLevel = [];
            super();
        }

        public getMessageId(): number {
            return GuildInfosUpgradeMessage.ID;
        }

        public reset(): void {
            this.maxTaxCollectorsCount = 0;
            this.taxCollectorsCount = 0;
            this.taxCollectorLifePoints = 0;
            this.taxCollectorDamagesBonuses = 0;
            this.taxCollectorPods = 0;
            this.taxCollectorProspecting = 0;
            this.taxCollectorWisdom = 0;
            this.boostPoints = 0;
            this.spellId = [];
            this.spellLevel = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GuildInfosUpgradeMessage(param1);
        }

        public serializeAs_GuildInfosUpgradeMessage(param1: ICustomDataOutput): void {
            if (this.maxTaxCollectorsCount < 0) {
                throw new Error('Forbidden value (' + this.maxTaxCollectorsCount + ') on element maxTaxCollectorsCount.');
            }
            param1.writeByte(this.maxTaxCollectorsCount);
            if (this.taxCollectorsCount < 0) {
                throw new Error('Forbidden value (' + this.taxCollectorsCount + ') on element taxCollectorsCount.');
            }
            param1.writeByte(this.taxCollectorsCount);
            if (this.taxCollectorLifePoints < 0) {
                throw new Error('Forbidden value (' + this.taxCollectorLifePoints + ') on element taxCollectorLifePoints.');
            }
            param1.writeVarShort(this.taxCollectorLifePoints);
            if (this.taxCollectorDamagesBonuses < 0) {
                throw new Error('Forbidden value (' + this.taxCollectorDamagesBonuses + ') on element taxCollectorDamagesBonuses.');
            }
            param1.writeVarShort(this.taxCollectorDamagesBonuses);
            if (this.taxCollectorPods < 0) {
                throw new Error('Forbidden value (' + this.taxCollectorPods + ') on element taxCollectorPods.');
            }
            param1.writeVarShort(this.taxCollectorPods);
            if (this.taxCollectorProspecting < 0) {
                throw new Error('Forbidden value (' + this.taxCollectorProspecting + ') on element taxCollectorProspecting.');
            }
            param1.writeVarShort(this.taxCollectorProspecting);
            if (this.taxCollectorWisdom < 0) {
                throw new Error('Forbidden value (' + this.taxCollectorWisdom + ') on element taxCollectorWisdom.');
            }
            param1.writeVarShort(this.taxCollectorWisdom);
            if (this.boostPoints < 0) {
                throw new Error('Forbidden value (' + this.boostPoints + ') on element boostPoints.');
            }
            param1.writeVarShort(this.boostPoints);
            param1.writeShort(this.spellId.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.spellId.length) {
                if (this.spellId[_loc2_] < 0) {
                    throw new Error('Forbidden value (' + this.spellId[_loc2_] + ') on element 9 (starting at 1) of spellId.');
                }
                param1.writeVarShort(this.spellId[_loc2_]);
                _loc2_++;
            }
            param1.writeShort(this.spellLevel.length);
            var _loc3_: number = 0;
            while (_loc3_ < this.spellLevel.length) {
                if (this.spellLevel[_loc3_] < 0) {
                    throw new Error('Forbidden value (' + this.spellLevel[_loc3_] + ') on element 10 (starting at 1) of spellLevel.');
                }
                param1.writeByte(this.spellLevel[_loc3_]);
                _loc3_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GuildInfosUpgradeMessage(param1);
        }

        public deserializeAs_GuildInfosUpgradeMessage(param1: ICustomDataInput): void {
            var _loc6_: number = 0;
            var _loc7_: number = 0;
            this.maxTaxCollectorsCount = param1.readByte();
            if (this.maxTaxCollectorsCount < 0) {
                throw new Error('Forbidden value (' + this.maxTaxCollectorsCount + ') on element of GuildInfosUpgradeMessage.maxTaxCollectorsCount.');
            }
            this.taxCollectorsCount = param1.readByte();
            if (this.taxCollectorsCount < 0) {
                throw new Error('Forbidden value (' + this.taxCollectorsCount + ') on element of GuildInfosUpgradeMessage.taxCollectorsCount.');
            }
            this.taxCollectorLifePoints = param1.readVarUhShort();
            if (this.taxCollectorLifePoints < 0) {
                throw new Error('Forbidden value (' + this.taxCollectorLifePoints + ') on element of GuildInfosUpgradeMessage.taxCollectorLifePoints.');
            }
            this.taxCollectorDamagesBonuses = param1.readVarUhShort();
            if (this.taxCollectorDamagesBonuses < 0) {
                throw new Error('Forbidden value (' + this.taxCollectorDamagesBonuses + ') on element of GuildInfosUpgradeMessage.taxCollectorDamagesBonuses.');
            }
            this.taxCollectorPods = param1.readVarUhShort();
            if (this.taxCollectorPods < 0) {
                throw new Error('Forbidden value (' + this.taxCollectorPods + ') on element of GuildInfosUpgradeMessage.taxCollectorPods.');
            }
            this.taxCollectorProspecting = param1.readVarUhShort();
            if (this.taxCollectorProspecting < 0) {
                throw new Error('Forbidden value (' + this.taxCollectorProspecting + ') on element of GuildInfosUpgradeMessage.taxCollectorProspecting.');
            }
            this.taxCollectorWisdom = param1.readVarUhShort();
            if (this.taxCollectorWisdom < 0) {
                throw new Error('Forbidden value (' + this.taxCollectorWisdom + ') on element of GuildInfosUpgradeMessage.taxCollectorWisdom.');
            }
            this.boostPoints = param1.readVarUhShort();
            if (this.boostPoints < 0) {
                throw new Error('Forbidden value (' + this.boostPoints + ') on element of GuildInfosUpgradeMessage.boostPoints.');
            }
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc6_ = param1.readVarUhShort();
                if (_loc6_ < 0) {
                    throw new Error('Forbidden value (' + _loc6_ + ') on elements of spellId.');
                }
                this.spellId.push(_loc6_);
                _loc3_++;
            }
            var _loc4_: number = param1.readUnsignedShort();
            var _loc5_: number = 0;
            while (_loc5_ < _loc4_) {
            _loc7_ = param1.readByte();
                if (_loc7_ < 0) {
                    throw new Error('Forbidden value (' + _loc7_ + ') on elements of spellLevel.');
                }
                this.spellLevel.push(_loc7_);
                _loc5_++;
            }

        }
    }
    export class GuildInvitationAnswerMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5556;

        accept: boolean;

        constructor() {
            this.accept = false;
            super();
        }

        public getMessageId(): number {
            return GuildInvitationAnswerMessage.ID;
        }

        public reset(): void {
            this.accept = false;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GuildInvitationAnswerMessage(param1);
        }

        public serializeAs_GuildInvitationAnswerMessage(param1: ICustomDataOutput): void {
            param1.writeBoolean(this.accept);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GuildInvitationAnswerMessage(param1);
        }

        public deserializeAs_GuildInvitationAnswerMessage(param1: ICustomDataInput): void {
            this.accept = param1.readBoolean();

        }
    }
    export class GuildInvitationByNameMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6115;

        name: string;

        constructor() {
            this.name = '';
            super();
        }

        public getMessageId(): number {
            return GuildInvitationByNameMessage.ID;
        }

        public reset(): void {
            this.name = '';
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GuildInvitationByNameMessage(param1);
        }

        public serializeAs_GuildInvitationByNameMessage(param1: ICustomDataOutput): void {
            param1.writeUTF(this.name);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GuildInvitationByNameMessage(param1);
        }

        public deserializeAs_GuildInvitationByNameMessage(param1: ICustomDataInput): void {
            this.name = param1.readUTF();

        }
    }
    export class GuildInvitationMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5551;

        targetId: number;

        constructor() {
            this.targetId = 0;
            super();
        }

        public getMessageId(): number {
            return GuildInvitationMessage.ID;
        }

        public reset(): void {
            this.targetId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GuildInvitationMessage(param1);
        }

        public serializeAs_GuildInvitationMessage(param1: ICustomDataOutput): void {
            if (this.targetId < 0) {
                throw new Error('Forbidden value (' + this.targetId + ') on element targetId.');
            }
            param1.writeVarInt(this.targetId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GuildInvitationMessage(param1);
        }

        public deserializeAs_GuildInvitationMessage(param1: ICustomDataInput): void {
            this.targetId = param1.readVarUhInt();
            if (this.targetId < 0) {
                throw new Error('Forbidden value (' + this.targetId + ') on element of GuildInvitationMessage.targetId.');
            }

        }
    }
    export class GuildInvitationStateRecrutedMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5548;

        invitationState: number;

        constructor() {
            this.invitationState = 0;
            super();
        }

        public getMessageId(): number {
            return GuildInvitationStateRecrutedMessage.ID;
        }

        public reset(): void {
            this.invitationState = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GuildInvitationStateRecrutedMessage(param1);
        }

        public serializeAs_GuildInvitationStateRecrutedMessage(param1: ICustomDataOutput): void {
            param1.writeByte(this.invitationState);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GuildInvitationStateRecrutedMessage(param1);
        }

        public deserializeAs_GuildInvitationStateRecrutedMessage(param1: ICustomDataInput): void {
            this.invitationState = param1.readByte();
            if (this.invitationState < 0) {
                throw new Error('Forbidden value (' + this.invitationState + ') on element of GuildInvitationStateRecrutedMessage.invitationState.');
            }

        }
    }
    export class GuildInvitationStateRecruterMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5563;

        recrutedName: string;
        invitationState: number;

        constructor() {
            this.recrutedName = '';
            this.invitationState = 0;
            super();
        }

        public getMessageId(): number {
            return GuildInvitationStateRecruterMessage.ID;
        }

        public reset(): void {
            this.recrutedName = '';
            this.invitationState = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GuildInvitationStateRecruterMessage(param1);
        }

        public serializeAs_GuildInvitationStateRecruterMessage(param1: ICustomDataOutput): void {
            param1.writeUTF(this.recrutedName);
            param1.writeByte(this.invitationState);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GuildInvitationStateRecruterMessage(param1);
        }

        public deserializeAs_GuildInvitationStateRecruterMessage(param1: ICustomDataInput): void {
            this.recrutedName = param1.readUTF();
            this.invitationState = param1.readByte();
            if (this.invitationState < 0) {
                throw new Error('Forbidden value (' + this.invitationState + ') on element of GuildInvitationStateRecruterMessage.invitationState.');
            }

        }
    }
    export class GuildInvitedMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5552;

        recruterId: number;
        recruterName: string;
        guildInfo: BasicGuildInformations;

        constructor() {
            this.recruterId = 0;
            this.recruterName = '';
            this.guildInfo = new BasicGuildInformations();
            super();
        }

        public getMessageId(): number {
            return GuildInvitedMessage.ID;
        }

        public reset(): void {
            this.recruterId = 0;
            this.recruterName = '';
            this.guildInfo = new BasicGuildInformations();
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GuildInvitedMessage(param1);
        }

        public serializeAs_GuildInvitedMessage(param1: ICustomDataOutput): void {
            if (this.recruterId < 0) {
                throw new Error('Forbidden value (' + this.recruterId + ') on element recruterId.');
            }
            param1.writeVarInt(this.recruterId);
            param1.writeUTF(this.recruterName);
            this.guildInfo.serializeAs_BasicGuildInformations(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GuildInvitedMessage(param1);
        }

        public deserializeAs_GuildInvitedMessage(param1: ICustomDataInput): void {
            this.recruterId = param1.readVarUhInt();
            if (this.recruterId < 0) {
                throw new Error('Forbidden value (' + this.recruterId + ') on element of GuildInvitedMessage.recruterId.');
            }
            this.recruterName = param1.readUTF();
            this.guildInfo = new BasicGuildInformations();
            this.guildInfo.deserialize(param1);

        }
    }
    export class GuildJoinedMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5564;

        guildInfo: GuildInformations;
        memberRights: number;
        enabled: boolean;

        constructor() {
            this.guildInfo = new GuildInformations();
            this.memberRights = 0;
            this.enabled = false;
            super();
        }

        public getMessageId(): number {
            return GuildJoinedMessage.ID;
        }

        public reset(): void {
            this.guildInfo = new GuildInformations();
            this.memberRights = 0;
            this.enabled = false;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GuildJoinedMessage(param1);
        }

        public serializeAs_GuildJoinedMessage(param1: ICustomDataOutput): void {
            this.guildInfo.serializeAs_GuildInformations(param1);
            if (this.memberRights < 0) {
                throw new Error('Forbidden value (' + this.memberRights + ') on element memberRights.');
            }
            param1.writeVarInt(this.memberRights);
            param1.writeBoolean(this.enabled);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GuildJoinedMessage(param1);
        }

        public deserializeAs_GuildJoinedMessage(param1: ICustomDataInput): void {
            this.guildInfo = new GuildInformations();
            this.guildInfo.deserialize(param1);
            this.memberRights = param1.readVarUhInt();
            if (this.memberRights < 0) {
                throw new Error('Forbidden value (' + this.memberRights + ') on element of GuildJoinedMessage.memberRights.');
            }
            this.enabled = param1.readBoolean();

        }
    }
    export class GuildKickRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5887;

        kickedId: number;

        constructor() {
            this.kickedId = 0;
            super();
        }

        public getMessageId(): number {
            return GuildKickRequestMessage.ID;
        }

        public reset(): void {
            this.kickedId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GuildKickRequestMessage(param1);
        }

        public serializeAs_GuildKickRequestMessage(param1: ICustomDataOutput): void {
            if (this.kickedId < 0) {
                throw new Error('Forbidden value (' + this.kickedId + ') on element kickedId.');
            }
            param1.writeVarInt(this.kickedId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GuildKickRequestMessage(param1);
        }

        public deserializeAs_GuildKickRequestMessage(param1: ICustomDataInput): void {
            this.kickedId = param1.readVarUhInt();
            if (this.kickedId < 0) {
                throw new Error('Forbidden value (' + this.kickedId + ') on element of GuildKickRequestMessage.kickedId.');
            }

        }
    }
    export class GuildLeftMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5562;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return GuildLeftMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GuildLeftMessage(param1);
        }

        public serializeAs_GuildLeftMessage(param1: ICustomDataOutput): void {

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GuildLeftMessage(param1);
        }

        public deserializeAs_GuildLeftMessage(param1: ICustomDataInput): void {

        }
    }
    export class GuildLevelUpMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6062;

        newLevel: number;

        constructor() {
            this.newLevel = 0;
            super();
        }

        public getMessageId(): number {
            return GuildLevelUpMessage.ID;
        }

        public reset(): void {
            this.newLevel = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GuildLevelUpMessage(param1);
        }

        public serializeAs_GuildLevelUpMessage(param1: ICustomDataOutput): void {
            if (this.newLevel < 2 || this.newLevel > 200) {
                throw new Error('Forbidden value (' + this.newLevel + ') on element newLevel.');
            }
            param1.writeByte(this.newLevel);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GuildLevelUpMessage(param1);
        }

        public deserializeAs_GuildLevelUpMessage(param1: ICustomDataInput): void {
            this.newLevel = param1.readUnsignedByte();
            if (this.newLevel < 2 || this.newLevel > 200) {
                throw new Error('Forbidden value (' + this.newLevel + ') on element of GuildLevelUpMessage.newLevel.');
            }

        }
    }
    export class GuildListMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6413;

        guilds: GuildInformations[];

        constructor() {
            this.guilds = [];
            super();
        }

        public getMessageId(): number {
            return GuildListMessage.ID;
        }

        public reset(): void {
            this.guilds = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GuildListMessage(param1);
        }

        public serializeAs_GuildListMessage(param1: ICustomDataOutput): void {
            param1.writeShort(this.guilds.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.guilds.length) {
                (this.guilds[_loc2_]).serializeAs_GuildInformations(param1);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GuildListMessage(param1);
        }

        public deserializeAs_GuildListMessage(param1: ICustomDataInput): void {
            var _loc4_: GuildInformations = null;
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = new GuildInformations();
                _loc4_.deserialize(param1);
                this.guilds.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class GuildMemberLeavingMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5923;

        kicked: boolean;
        memberId: number;

        constructor() {
            this.kicked = false;
            this.memberId = 0;
            super();
        }

        public getMessageId(): number {
            return GuildMemberLeavingMessage.ID;
        }

        public reset(): void {
            this.kicked = false;
            this.memberId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GuildMemberLeavingMessage(param1);
        }

        public serializeAs_GuildMemberLeavingMessage(param1: ICustomDataOutput): void {
            param1.writeBoolean(this.kicked);
            param1.writeInt(this.memberId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GuildMemberLeavingMessage(param1);
        }

        public deserializeAs_GuildMemberLeavingMessage(param1: ICustomDataInput): void {
            this.kicked = param1.readBoolean();
            this.memberId = param1.readInt();

        }
    }
    export class GuildMemberOnlineStatusMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6061;

        memberId: number;
        online: boolean;

        constructor() {
            this.memberId = 0;
            this.online = false;
            super();
        }

        public getMessageId(): number {
            return GuildMemberOnlineStatusMessage.ID;
        }

        public reset(): void {
            this.memberId = 0;
            this.online = false;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GuildMemberOnlineStatusMessage(param1);
        }

        public serializeAs_GuildMemberOnlineStatusMessage(param1: ICustomDataOutput): void {
            if (this.memberId < 0) {
                throw new Error('Forbidden value (' + this.memberId + ') on element memberId.');
            }
            param1.writeVarInt(this.memberId);
            param1.writeBoolean(this.online);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GuildMemberOnlineStatusMessage(param1);
        }

        public deserializeAs_GuildMemberOnlineStatusMessage(param1: ICustomDataInput): void {
            this.memberId = param1.readVarUhInt();
            if (this.memberId < 0) {
                throw new Error('Forbidden value (' + this.memberId + ') on element of GuildMemberOnlineStatusMessage.memberId.');
            }
            this.online = param1.readBoolean();

        }
    }
    export class GuildMembershipMessage extends GuildJoinedMessage {
        public static ID: number = 5835;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return GuildMembershipMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GuildMembershipMessage(param1);
        }

        public serializeAs_GuildMembershipMessage(param1: ICustomDataOutput): void {
            super.serializeAs_GuildJoinedMessage(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GuildMembershipMessage(param1);
        }

        public deserializeAs_GuildMembershipMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);

        }
    }
    export class GuildModificationEmblemValidMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6328;

        guildEmblem: GuildEmblem;

        constructor() {
            this.guildEmblem = new GuildEmblem();
            super();
        }

        public getMessageId(): number {
            return GuildModificationEmblemValidMessage.ID;
        }

        public reset(): void {
            this.guildEmblem = new GuildEmblem();
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GuildModificationEmblemValidMessage(param1);
        }

        public serializeAs_GuildModificationEmblemValidMessage(param1: ICustomDataOutput): void {
            this.guildEmblem.serializeAs_GuildEmblem(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GuildModificationEmblemValidMessage(param1);
        }

        public deserializeAs_GuildModificationEmblemValidMessage(param1: ICustomDataInput): void {
            this.guildEmblem = new GuildEmblem();
            this.guildEmblem.deserialize(param1);

        }
    }
    export class GuildModificationNameValidMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6327;

        guildName: string;

        constructor() {
            this.guildName = '';
            super();
        }

        public getMessageId(): number {
            return GuildModificationNameValidMessage.ID;
        }

        public reset(): void {
            this.guildName = '';
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GuildModificationNameValidMessage(param1);
        }

        public serializeAs_GuildModificationNameValidMessage(param1: ICustomDataOutput): void {
            param1.writeUTF(this.guildName);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GuildModificationNameValidMessage(param1);
        }

        public deserializeAs_GuildModificationNameValidMessage(param1: ICustomDataInput): void {
            this.guildName = param1.readUTF();

        }
    }
    export class GuildModificationStartedMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6324;

        canChangeName: boolean;
        canChangeEmblem: boolean;

        constructor() {
            this.canChangeName = false;
            this.canChangeEmblem = false;
            super();
        }

        public getMessageId(): number {
            return GuildModificationStartedMessage.ID;
        }

        public reset(): void {
            this.canChangeName = false;
            this.canChangeEmblem = false;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GuildModificationStartedMessage(param1);
        }

        public serializeAs_GuildModificationStartedMessage(param1: ICustomDataOutput): void {
            var _loc2_: number = 0;
            _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 0, this.canChangeName);
            _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 1, this.canChangeEmblem);
            param1.writeByte(_loc2_);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GuildModificationStartedMessage(param1);
        }

        public deserializeAs_GuildModificationStartedMessage(param1: ICustomDataInput): void {
            var _loc2_: number = param1.readByte();
            this.canChangeName = BooleanByteWrapper.getFlag(_loc2_, 0);
            this.canChangeEmblem = BooleanByteWrapper.getFlag(_loc2_, 1);

        }
    }
    export class GuildModificationValidMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6323;

        guildName: string;
        guildEmblem: GuildEmblem;

        constructor() {
            this.guildName = '';
            this.guildEmblem = new GuildEmblem();
            super();
        }

        public getMessageId(): number {
            return GuildModificationValidMessage.ID;
        }

        public reset(): void {
            this.guildName = '';
            this.guildEmblem = new GuildEmblem();
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GuildModificationValidMessage(param1);
        }

        public serializeAs_GuildModificationValidMessage(param1: ICustomDataOutput): void {
            param1.writeUTF(this.guildName);
            this.guildEmblem.serializeAs_GuildEmblem(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GuildModificationValidMessage(param1);
        }

        public deserializeAs_GuildModificationValidMessage(param1: ICustomDataInput): void {
            this.guildName = param1.readUTF();
            this.guildEmblem = new GuildEmblem();
            this.guildEmblem.deserialize(param1);

        }
    }
    export class GuildMotdMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6590;

        content: string;
        timestamp: number;

        constructor() {
            this.content = '';
            this.timestamp = 0;
            super();
        }

        public getMessageId(): number {
            return GuildMotdMessage.ID;
        }

        public reset(): void {
            this.content = '';
            this.timestamp = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GuildMotdMessage(param1);
        }

        public serializeAs_GuildMotdMessage(param1: ICustomDataOutput): void {
            param1.writeUTF(this.content);
            if (this.timestamp < 0) {
                throw new Error('Forbidden value (' + this.timestamp + ') on element timestamp.');
            }
            param1.writeInt(this.timestamp);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GuildMotdMessage(param1);
        }

        public deserializeAs_GuildMotdMessage(param1: ICustomDataInput): void {
            this.content = param1.readUTF();
            this.timestamp = param1.readInt();
            if (this.timestamp < 0) {
                throw new Error('Forbidden value (' + this.timestamp + ') on element of GuildMotdMessage.timestamp.');
            }

        }
    }
    export class GuildMotdSetErrorMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6591;

        reason: number;

        constructor() {
            this.reason = 0;
            super();
        }

        public getMessageId(): number {
            return GuildMotdSetErrorMessage.ID;
        }

        public reset(): void {
            this.reason = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GuildMotdSetErrorMessage(param1);
        }

        public serializeAs_GuildMotdSetErrorMessage(param1: ICustomDataOutput): void {
            param1.writeByte(this.reason);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GuildMotdSetErrorMessage(param1);
        }

        public deserializeAs_GuildMotdSetErrorMessage(param1: ICustomDataInput): void {
            this.reason = param1.readByte();
            if (this.reason < 0) {
                throw new Error('Forbidden value (' + this.reason + ') on element of GuildMotdSetErrorMessage.reason.');
            }

        }
    }
    export class GuildPaddockBoughtMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5952;

        paddockInfo: PaddockContentInformations;

        constructor() {
            this.paddockInfo = new PaddockContentInformations();
            super();
        }

        public getMessageId(): number {
            return GuildPaddockBoughtMessage.ID;
        }

        public reset(): void {
            this.paddockInfo = new PaddockContentInformations();
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GuildPaddockBoughtMessage(param1);
        }

        public serializeAs_GuildPaddockBoughtMessage(param1: ICustomDataOutput): void {
            this.paddockInfo.serializeAs_PaddockContentInformations(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GuildPaddockBoughtMessage(param1);
        }

        public deserializeAs_GuildPaddockBoughtMessage(param1: ICustomDataInput): void {
            this.paddockInfo = new PaddockContentInformations();
            this.paddockInfo.deserialize(param1);

        }
    }
    export class GuildPaddockRemovedMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5955;

        paddockId: number;

        constructor() {
            this.paddockId = 0;
            super();
        }

        public getMessageId(): number {
            return GuildPaddockRemovedMessage.ID;
        }

        public reset(): void {
            this.paddockId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GuildPaddockRemovedMessage(param1);
        }

        public serializeAs_GuildPaddockRemovedMessage(param1: ICustomDataOutput): void {
            param1.writeInt(this.paddockId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GuildPaddockRemovedMessage(param1);
        }

        public deserializeAs_GuildPaddockRemovedMessage(param1: ICustomDataInput): void {
            this.paddockId = param1.readInt();

        }
    }
    export class GuildPaddockTeleportRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5957;

        paddockId: number;

        constructor() {
            this.paddockId = 0;
            super();
        }

        public getMessageId(): number {
            return GuildPaddockTeleportRequestMessage.ID;
        }

        public reset(): void {
            this.paddockId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GuildPaddockTeleportRequestMessage(param1);
        }

        public serializeAs_GuildPaddockTeleportRequestMessage(param1: ICustomDataOutput): void {
            param1.writeInt(this.paddockId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GuildPaddockTeleportRequestMessage(param1);
        }

        public deserializeAs_GuildPaddockTeleportRequestMessage(param1: ICustomDataInput): void {
            this.paddockId = param1.readInt();

        }
    }
    export class GuildSpellUpgradeRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5699;

        spellId: number;

        constructor() {
            this.spellId = 0;
            super();
        }

        public getMessageId(): number {
            return GuildSpellUpgradeRequestMessage.ID;
        }

        public reset(): void {
            this.spellId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GuildSpellUpgradeRequestMessage(param1);
        }

        public serializeAs_GuildSpellUpgradeRequestMessage(param1: ICustomDataOutput): void {
            if (this.spellId < 0) {
                throw new Error('Forbidden value (' + this.spellId + ') on element spellId.');
            }
            param1.writeInt(this.spellId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GuildSpellUpgradeRequestMessage(param1);
        }

        public deserializeAs_GuildSpellUpgradeRequestMessage(param1: ICustomDataInput): void {
            this.spellId = param1.readInt();
            if (this.spellId < 0) {
                throw new Error('Forbidden value (' + this.spellId + ') on element of GuildSpellUpgradeRequestMessage.spellId.');
            }

        }
    }
    export class GuildVersatileInfoListMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6435;

        guilds: GuildVersatileInformations[];

        constructor() {
            this.guilds = [];
            super();
        }

        public getMessageId(): number {
            return GuildVersatileInfoListMessage.ID;
        }

        public reset(): void {
            this.guilds = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GuildVersatileInfoListMessage(param1);
        }

        public serializeAs_GuildVersatileInfoListMessage(param1: ICustomDataOutput): void {
            param1.writeShort(this.guilds.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.guilds.length) {
                param1.writeShort((this.guilds[_loc2_]).getTypeId());
                (this.guilds[_loc2_]).serialize(param1);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GuildVersatileInfoListMessage(param1);
        }

        public deserializeAs_GuildVersatileInfoListMessage(param1: ICustomDataInput): void {
            var _loc4_: number = 0;
            var _loc5_: GuildVersatileInformations = null;
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = param1.readUnsignedShort();
                _loc5_ = <GuildVersatileInformations>ProtocolTypeManager.getInstance(GuildVersatileInformations, _loc4_);
                _loc5_.deserialize(param1);
                this.guilds.push(_loc5_);
                _loc3_++;
            }

        }
    }
    export class AbstractTaxCollectorListMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6568;

        informations: TaxCollectorInformations[];

        constructor() {
            this.informations = [];
            super();
        }

        public getMessageId(): number {
            return AbstractTaxCollectorListMessage.ID;
        }

        public reset(): void {
            this.informations = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_AbstractTaxCollectorListMessage(param1);
        }

        public serializeAs_AbstractTaxCollectorListMessage(param1: ICustomDataOutput): void {
            param1.writeShort(this.informations.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.informations.length) {
                param1.writeShort((this.informations[_loc2_]).getTypeId());
                (this.informations[_loc2_]).serialize(param1);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_AbstractTaxCollectorListMessage(param1);
        }

        public deserializeAs_AbstractTaxCollectorListMessage(param1: ICustomDataInput): void {
            var _loc4_: number = 0;
            var _loc5_: TaxCollectorInformations = null;
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = param1.readUnsignedShort();
                _loc5_ = <TaxCollectorInformations>ProtocolTypeManager.getInstance(TaxCollectorInformations, _loc4_);
                _loc5_.deserialize(param1);
                this.informations.push(_loc5_);
                _loc3_++;
            }

        }
    }
    export class GameRolePlayTaxCollectorFightRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5954;

        taxCollectorId: number;

        constructor() {
            this.taxCollectorId = 0;
            super();
        }

        public getMessageId(): number {
            return GameRolePlayTaxCollectorFightRequestMessage.ID;
        }

        public reset(): void {
            this.taxCollectorId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameRolePlayTaxCollectorFightRequestMessage(param1);
        }

        public serializeAs_GameRolePlayTaxCollectorFightRequestMessage(param1: ICustomDataOutput): void {
            param1.writeInt(this.taxCollectorId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameRolePlayTaxCollectorFightRequestMessage(param1);
        }

        public deserializeAs_GameRolePlayTaxCollectorFightRequestMessage(param1: ICustomDataInput): void {
            this.taxCollectorId = param1.readInt();

        }
    }
    export class GuildFightJoinRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5717;

        taxCollectorId: number;

        constructor() {
            this.taxCollectorId = 0;
            super();
        }

        public getMessageId(): number {
            return GuildFightJoinRequestMessage.ID;
        }

        public reset(): void {
            this.taxCollectorId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GuildFightJoinRequestMessage(param1);
        }

        public serializeAs_GuildFightJoinRequestMessage(param1: ICustomDataOutput): void {
            param1.writeInt(this.taxCollectorId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GuildFightJoinRequestMessage(param1);
        }

        public deserializeAs_GuildFightJoinRequestMessage(param1: ICustomDataInput): void {
            this.taxCollectorId = param1.readInt();

        }
    }
    export class GuildFightLeaveRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5715;

        taxCollectorId: number;
        characterId: number;

        constructor() {
            this.taxCollectorId = 0;
            this.characterId = 0;
            super();
        }

        public getMessageId(): number {
            return GuildFightLeaveRequestMessage.ID;
        }

        public reset(): void {
            this.taxCollectorId = 0;
            this.characterId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GuildFightLeaveRequestMessage(param1);
        }

        public serializeAs_GuildFightLeaveRequestMessage(param1: ICustomDataOutput): void {
            if (this.taxCollectorId < 0) {
                throw new Error('Forbidden value (' + this.taxCollectorId + ') on element taxCollectorId.');
            }
            param1.writeInt(this.taxCollectorId);
            if (this.characterId < 0) {
                throw new Error('Forbidden value (' + this.characterId + ') on element characterId.');
            }
            param1.writeVarInt(this.characterId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GuildFightLeaveRequestMessage(param1);
        }

        public deserializeAs_GuildFightLeaveRequestMessage(param1: ICustomDataInput): void {
            this.taxCollectorId = param1.readInt();
            if (this.taxCollectorId < 0) {
                throw new Error('Forbidden value (' + this.taxCollectorId + ') on element of GuildFightLeaveRequestMessage.taxCollectorId.');
            }
            this.characterId = param1.readVarUhInt();
            if (this.characterId < 0) {
                throw new Error('Forbidden value (' + this.characterId + ') on element of GuildFightLeaveRequestMessage.characterId.');
            }

        }
    }
    export class GuildFightPlayersEnemiesListMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5928;

        fightId: number;
        playerInfo: CharacterMinimalPlusLookInformations[];

        constructor() {
            this.fightId = 0;
            this.playerInfo = [];
            super();
        }

        public getMessageId(): number {
            return GuildFightPlayersEnemiesListMessage.ID;
        }

        public reset(): void {
            this.fightId = 0;
            this.playerInfo = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GuildFightPlayersEnemiesListMessage(param1);
        }

        public serializeAs_GuildFightPlayersEnemiesListMessage(param1: ICustomDataOutput): void {
            if (this.fightId < 0) {
                throw new Error('Forbidden value (' + this.fightId + ') on element fightId.');
            }
            param1.writeInt(this.fightId);
            param1.writeShort(this.playerInfo.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.playerInfo.length) {
                (this.playerInfo[_loc2_]).serializeAs_CharacterMinimalPlusLookInformations(param1);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GuildFightPlayersEnemiesListMessage(param1);
        }

        public deserializeAs_GuildFightPlayersEnemiesListMessage(param1: ICustomDataInput): void {
            var _loc4_: CharacterMinimalPlusLookInformations = null;
            this.fightId = param1.readInt();
            if (this.fightId < 0) {
                throw new Error('Forbidden value (' + this.fightId + ') on element of GuildFightPlayersEnemiesListMessage.fightId.');
            }
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = new CharacterMinimalPlusLookInformations();
                _loc4_.deserialize(param1);
                this.playerInfo.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class GuildFightPlayersEnemyRemoveMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5929;

        fightId: number;
        playerId: number;

        constructor() {
            this.fightId = 0;
            this.playerId = 0;
            super();
        }

        public getMessageId(): number {
            return GuildFightPlayersEnemyRemoveMessage.ID;
        }

        public reset(): void {
            this.fightId = 0;
            this.playerId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GuildFightPlayersEnemyRemoveMessage(param1);
        }

        public serializeAs_GuildFightPlayersEnemyRemoveMessage(param1: ICustomDataOutput): void {
            if (this.fightId < 0) {
                throw new Error('Forbidden value (' + this.fightId + ') on element fightId.');
            }
            param1.writeInt(this.fightId);
            if (this.playerId < 0) {
                throw new Error('Forbidden value (' + this.playerId + ') on element playerId.');
            }
            param1.writeVarInt(this.playerId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GuildFightPlayersEnemyRemoveMessage(param1);
        }

        public deserializeAs_GuildFightPlayersEnemyRemoveMessage(param1: ICustomDataInput): void {
            this.fightId = param1.readInt();
            if (this.fightId < 0) {
                throw new Error('Forbidden value (' + this.fightId + ') on element of GuildFightPlayersEnemyRemoveMessage.fightId.');
            }
            this.playerId = param1.readVarUhInt();
            if (this.playerId < 0) {
                throw new Error('Forbidden value (' + this.playerId + ') on element of GuildFightPlayersEnemyRemoveMessage.playerId.');
            }

        }
    }
    export class GuildFightPlayersHelpersJoinMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5720;

        fightId: number;
        playerInfo: CharacterMinimalPlusLookInformations;

        constructor() {
            this.fightId = 0;
            this.playerInfo = new CharacterMinimalPlusLookInformations();
            super();
        }

        public getMessageId(): number {
            return GuildFightPlayersHelpersJoinMessage.ID;
        }

        public reset(): void {
            this.fightId = 0;
            this.playerInfo = new CharacterMinimalPlusLookInformations();
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GuildFightPlayersHelpersJoinMessage(param1);
        }

        public serializeAs_GuildFightPlayersHelpersJoinMessage(param1: ICustomDataOutput): void {
            if (this.fightId < 0) {
                throw new Error('Forbidden value (' + this.fightId + ') on element fightId.');
            }
            param1.writeInt(this.fightId);
            this.playerInfo.serializeAs_CharacterMinimalPlusLookInformations(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GuildFightPlayersHelpersJoinMessage(param1);
        }

        public deserializeAs_GuildFightPlayersHelpersJoinMessage(param1: ICustomDataInput): void {
            this.fightId = param1.readInt();
            if (this.fightId < 0) {
                throw new Error('Forbidden value (' + this.fightId + ') on element of GuildFightPlayersHelpersJoinMessage.fightId.');
            }
            this.playerInfo = new CharacterMinimalPlusLookInformations();
            this.playerInfo.deserialize(param1);

        }
    }
    export class GuildFightPlayersHelpersLeaveMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5719;

        fightId: number;
        playerId: number;

        constructor() {
            this.fightId = 0;
            this.playerId = 0;
            super();
        }

        public getMessageId(): number {
            return GuildFightPlayersHelpersLeaveMessage.ID;
        }

        public reset(): void {
            this.fightId = 0;
            this.playerId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GuildFightPlayersHelpersLeaveMessage(param1);
        }

        public serializeAs_GuildFightPlayersHelpersLeaveMessage(param1: ICustomDataOutput): void {
            if (this.fightId < 0) {
                throw new Error('Forbidden value (' + this.fightId + ') on element fightId.');
            }
            param1.writeInt(this.fightId);
            if (this.playerId < 0) {
                throw new Error('Forbidden value (' + this.playerId + ') on element playerId.');
            }
            param1.writeVarInt(this.playerId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GuildFightPlayersHelpersLeaveMessage(param1);
        }

        public deserializeAs_GuildFightPlayersHelpersLeaveMessage(param1: ICustomDataInput): void {
            this.fightId = param1.readInt();
            if (this.fightId < 0) {
                throw new Error('Forbidden value (' + this.fightId + ') on element of GuildFightPlayersHelpersLeaveMessage.fightId.');
            }
            this.playerId = param1.readVarUhInt();
            if (this.playerId < 0) {
                throw new Error('Forbidden value (' + this.playerId + ') on element of GuildFightPlayersHelpersLeaveMessage.playerId.');
            }

        }
    }
    export class GuildFightTakePlaceRequestMessage extends GuildFightJoinRequestMessage {
        public static ID: number = 6235;

        replacedCharacterId: number;

        constructor() {
            this.replacedCharacterId = 0;
            super();
        }

        public getMessageId(): number {
            return GuildFightTakePlaceRequestMessage.ID;
        }

        public reset(): void {
            this.replacedCharacterId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GuildFightTakePlaceRequestMessage(param1);
        }

        public serializeAs_GuildFightTakePlaceRequestMessage(param1: ICustomDataOutput): void {
            super.serializeAs_GuildFightJoinRequestMessage(param1);
            param1.writeInt(this.replacedCharacterId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GuildFightTakePlaceRequestMessage(param1);
        }

        public deserializeAs_GuildFightTakePlaceRequestMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.replacedCharacterId = param1.readInt();

        }
    }
    export class TaxCollectorAttackedMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5918;

        firstNameId: number;
        lastNameId: number;
        worldX: number;
        worldY: number;
        mapId: number;
        subAreaId: number;
        guild: BasicGuildInformations;

        constructor() {
            this.firstNameId = 0;
            this.lastNameId = 0;
            this.worldX = 0;
            this.worldY = 0;
            this.mapId = 0;
            this.subAreaId = 0;
            this.guild = new BasicGuildInformations();
            super();
        }

        public getMessageId(): number {
            return TaxCollectorAttackedMessage.ID;
        }

        public reset(): void {
            this.firstNameId = 0;
            this.lastNameId = 0;
            this.worldX = 0;
            this.worldY = 0;
            this.mapId = 0;
            this.subAreaId = 0;
            this.guild = new BasicGuildInformations();
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_TaxCollectorAttackedMessage(param1);
        }

        public serializeAs_TaxCollectorAttackedMessage(param1: ICustomDataOutput): void {
            if (this.firstNameId < 0) {
                throw new Error('Forbidden value (' + this.firstNameId + ') on element firstNameId.');
            }
            param1.writeVarShort(this.firstNameId);
            if (this.lastNameId < 0) {
                throw new Error('Forbidden value (' + this.lastNameId + ') on element lastNameId.');
            }
            param1.writeVarShort(this.lastNameId);
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error('Forbidden value (' + this.worldX + ') on element worldX.');
            }
            param1.writeShort(this.worldX);
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error('Forbidden value (' + this.worldY + ') on element worldY.');
            }
            param1.writeShort(this.worldY);
            param1.writeInt(this.mapId);
            if (this.subAreaId < 0) {
                throw new Error('Forbidden value (' + this.subAreaId + ') on element subAreaId.');
            }
            param1.writeVarShort(this.subAreaId);
            this.guild.serializeAs_BasicGuildInformations(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_TaxCollectorAttackedMessage(param1);
        }

        public deserializeAs_TaxCollectorAttackedMessage(param1: ICustomDataInput): void {
            this.firstNameId = param1.readVarUhShort();
            if (this.firstNameId < 0) {
                throw new Error('Forbidden value (' + this.firstNameId + ') on element of TaxCollectorAttackedMessage.firstNameId.');
            }
            this.lastNameId = param1.readVarUhShort();
            if (this.lastNameId < 0) {
                throw new Error('Forbidden value (' + this.lastNameId + ') on element of TaxCollectorAttackedMessage.lastNameId.');
            }
            this.worldX = param1.readShort();
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error('Forbidden value (' + this.worldX + ') on element of TaxCollectorAttackedMessage.worldX.');
            }
            this.worldY = param1.readShort();
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error('Forbidden value (' + this.worldY + ') on element of TaxCollectorAttackedMessage.worldY.');
            }
            this.mapId = param1.readInt();
            this.subAreaId = param1.readVarUhShort();
            if (this.subAreaId < 0) {
                throw new Error('Forbidden value (' + this.subAreaId + ') on element of TaxCollectorAttackedMessage.subAreaId.');
            }
            this.guild = new BasicGuildInformations();
            this.guild.deserialize(param1);

        }
    }
    export class TaxCollectorAttackedResultMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5635;

        deadOrAlive: boolean;
        basicInfos: TaxCollectorBasicInformations;
        guild: BasicGuildInformations;

        constructor() {
            this.deadOrAlive = false;
            this.basicInfos = new TaxCollectorBasicInformations();
            this.guild = new BasicGuildInformations();
            super();
        }

        public getMessageId(): number {
            return TaxCollectorAttackedResultMessage.ID;
        }

        public reset(): void {
            this.deadOrAlive = false;
            this.basicInfos = new TaxCollectorBasicInformations();
            this.guild = new BasicGuildInformations();
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_TaxCollectorAttackedResultMessage(param1);
        }

        public serializeAs_TaxCollectorAttackedResultMessage(param1: ICustomDataOutput): void {
            param1.writeBoolean(this.deadOrAlive);
            this.basicInfos.serializeAs_TaxCollectorBasicInformations(param1);
            this.guild.serializeAs_BasicGuildInformations(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_TaxCollectorAttackedResultMessage(param1);
        }

        public deserializeAs_TaxCollectorAttackedResultMessage(param1: ICustomDataInput): void {
            this.deadOrAlive = param1.readBoolean();
            this.basicInfos = new TaxCollectorBasicInformations();
            this.basicInfos.deserialize(param1);
            this.guild = new BasicGuildInformations();
            this.guild.deserialize(param1);

        }
    }
    export class TaxCollectorErrorMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5634;

        reason: number;

        constructor() {
            this.reason = 0;
            super();
        }

        public getMessageId(): number {
            return TaxCollectorErrorMessage.ID;
        }

        public reset(): void {
            this.reason = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_TaxCollectorErrorMessage(param1);
        }

        public serializeAs_TaxCollectorErrorMessage(param1: ICustomDataOutput): void {
            param1.writeByte(this.reason);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_TaxCollectorErrorMessage(param1);
        }

        public deserializeAs_TaxCollectorErrorMessage(param1: ICustomDataInput): void {
            this.reason = param1.readByte();

        }
    }
    export class TaxCollectorListMessage extends AbstractTaxCollectorListMessage {
        public static ID: number = 5930;

        nbcollectorMax: number;
        fightersInformations: TaxCollectorFightersInformation[];

        constructor() {
            this.nbcollectorMax = 0;
            this.fightersInformations = [];
            super();
        }

        public getMessageId(): number {
            return TaxCollectorListMessage.ID;
        }

        public reset(): void {
            this.nbcollectorMax = 0;
            this.fightersInformations = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_TaxCollectorListMessage(param1);
        }

        public serializeAs_TaxCollectorListMessage(param1: ICustomDataOutput): void {
            super.serializeAs_AbstractTaxCollectorListMessage(param1);
            if (this.nbcollectorMax < 0) {
                throw new Error('Forbidden value (' + this.nbcollectorMax + ') on element nbcollectorMax.');
            }
            param1.writeByte(this.nbcollectorMax);
            param1.writeShort(this.fightersInformations.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.fightersInformations.length) {
                (this.fightersInformations[_loc2_]).serializeAs_TaxCollectorFightersInformation(param1);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_TaxCollectorListMessage(param1);
        }

        public deserializeAs_TaxCollectorListMessage(param1: ICustomDataInput): void {
            var _loc4_: TaxCollectorFightersInformation = null;
            super.deserialize(param1);
            this.nbcollectorMax = param1.readByte();
            if (this.nbcollectorMax < 0) {
                throw new Error('Forbidden value (' + this.nbcollectorMax + ') on element of TaxCollectorListMessage.nbcollectorMax.');
            }
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = new TaxCollectorFightersInformation();
                _loc4_.deserialize(param1);
                this.fightersInformations.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class TaxCollectorMovementAddMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5917;

        informations: TaxCollectorInformations;

        constructor() {
            this.informations = new TaxCollectorInformations();
            super();
        }

        public getMessageId(): number {
            return TaxCollectorMovementAddMessage.ID;
        }

        public reset(): void {
            this.informations = new TaxCollectorInformations();
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_TaxCollectorMovementAddMessage(param1);
        }

        public serializeAs_TaxCollectorMovementAddMessage(param1: ICustomDataOutput): void {
            param1.writeShort(this.informations.getTypeId());
            this.informations.serialize(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_TaxCollectorMovementAddMessage(param1);
        }

        public deserializeAs_TaxCollectorMovementAddMessage(param1: ICustomDataInput): void {
            var _loc2_: number = param1.readUnsignedShort();
            this.informations = <TaxCollectorInformations>ProtocolTypeManager.getInstance(TaxCollectorInformations, _loc2_);
            this.informations.deserialize(param1);

        }
    }
    export class TaxCollectorMovementMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5633;

        hireOrFire: boolean;
        basicInfos: TaxCollectorBasicInformations;
        playerId: number;
        playerName: string;

        constructor() {
            this.hireOrFire = false;
            this.basicInfos = new TaxCollectorBasicInformations();
            this.playerId = 0;
            this.playerName = '';
            super();
        }

        public getMessageId(): number {
            return TaxCollectorMovementMessage.ID;
        }

        public reset(): void {
            this.hireOrFire = false;
            this.basicInfos = new TaxCollectorBasicInformations();
            this.playerId = 0;
            this.playerName = '';
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_TaxCollectorMovementMessage(param1);
        }

        public serializeAs_TaxCollectorMovementMessage(param1: ICustomDataOutput): void {
            param1.writeBoolean(this.hireOrFire);
            this.basicInfos.serializeAs_TaxCollectorBasicInformations(param1);
            if (this.playerId < 0) {
                throw new Error('Forbidden value (' + this.playerId + ') on element playerId.');
            }
            param1.writeVarInt(this.playerId);
            param1.writeUTF(this.playerName);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_TaxCollectorMovementMessage(param1);
        }

        public deserializeAs_TaxCollectorMovementMessage(param1: ICustomDataInput): void {
            this.hireOrFire = param1.readBoolean();
            this.basicInfos = new TaxCollectorBasicInformations();
            this.basicInfos.deserialize(param1);
            this.playerId = param1.readVarUhInt();
            if (this.playerId < 0) {
                throw new Error('Forbidden value (' + this.playerId + ') on element of TaxCollectorMovementMessage.playerId.');
            }
            this.playerName = param1.readUTF();

        }
    }
    export class TaxCollectorMovementRemoveMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5915;

        collectorId: number;

        constructor() {
            this.collectorId = 0;
            super();
        }

        public getMessageId(): number {
            return TaxCollectorMovementRemoveMessage.ID;
        }

        public reset(): void {
            this.collectorId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_TaxCollectorMovementRemoveMessage(param1);
        }

        public serializeAs_TaxCollectorMovementRemoveMessage(param1: ICustomDataOutput): void {
            param1.writeInt(this.collectorId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_TaxCollectorMovementRemoveMessage(param1);
        }

        public deserializeAs_TaxCollectorMovementRemoveMessage(param1: ICustomDataInput): void {
            this.collectorId = param1.readInt();

        }
    }
    export class TaxCollectorStateUpdateMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6455;

        uniqueId: number;
        state: number;

        constructor() {
            this.uniqueId = 0;
            this.state = 0;
            super();
        }

        public getMessageId(): number {
            return TaxCollectorStateUpdateMessage.ID;
        }

        public reset(): void {
            this.uniqueId = 0;
            this.state = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_TaxCollectorStateUpdateMessage(param1);
        }

        public serializeAs_TaxCollectorStateUpdateMessage(param1: ICustomDataOutput): void {
            param1.writeInt(this.uniqueId);
            param1.writeByte(this.state);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_TaxCollectorStateUpdateMessage(param1);
        }

        public deserializeAs_TaxCollectorStateUpdateMessage(param1: ICustomDataInput): void {
            this.uniqueId = param1.readInt();
            this.state = param1.readByte();

        }
    }
    export class TopTaxCollectorListMessage extends AbstractTaxCollectorListMessage {
        public static ID: number = 6565;

        isDungeon: boolean;

        constructor() {
            this.isDungeon = false;
            super();
        }

        public getMessageId(): number {
            return TopTaxCollectorListMessage.ID;
        }

        public reset(): void {
            this.isDungeon = false;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_TopTaxCollectorListMessage(param1);
        }

        public serializeAs_TopTaxCollectorListMessage(param1: ICustomDataOutput): void {
            super.serializeAs_AbstractTaxCollectorListMessage(param1);
            param1.writeBoolean(this.isDungeon);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_TopTaxCollectorListMessage(param1);
        }

        public deserializeAs_TopTaxCollectorListMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.isDungeon = param1.readBoolean();

        }
    }
    export class IdolFightPreparationUpdateMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6586;

        idolSource: number;
        idols: Idol[];

        constructor() {
            this.idolSource = 0;
            this.idols = [];
            super();
        }

        public getMessageId(): number {
            return IdolFightPreparationUpdateMessage.ID;
        }

        public reset(): void {
            this.idolSource = 0;
            this.idols = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_IdolFightPreparationUpdateMessage(param1);
        }

        public serializeAs_IdolFightPreparationUpdateMessage(param1: ICustomDataOutput): void {
            param1.writeByte(this.idolSource);
            param1.writeShort(this.idols.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.idols.length) {
                param1.writeShort((this.idols[_loc2_]).getTypeId());
                (this.idols[_loc2_]).serialize(param1);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_IdolFightPreparationUpdateMessage(param1);
        }

        public deserializeAs_IdolFightPreparationUpdateMessage(param1: ICustomDataInput): void {
            var _loc4_: number = 0;
            var _loc5_: Idol = null;
            this.idolSource = param1.readByte();
            if (this.idolSource < 0) {
                throw new Error('Forbidden value (' + this.idolSource + ') on element of IdolFightPreparationUpdateMessage.idolSource.');
            }
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = param1.readUnsignedShort();
                _loc5_ = <Idol>ProtocolTypeManager.getInstance(Idol, _loc4_);
                _loc5_.deserialize(param1);
                this.idols.push(_loc5_);
                _loc3_++;
            }

        }
    }
    export class IdolListMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6585;

        chosenIdols: number[];
        partyChosenIdols: number[];
        partyIdols: PartyIdol[];

        constructor() {
            this.chosenIdols = [];
            this.partyChosenIdols = [];
            this.partyIdols = [];
            super();
        }

        public getMessageId(): number {
            return IdolListMessage.ID;
        }

        public reset(): void {
            this.chosenIdols = [];
            this.partyChosenIdols = [];
            this.partyIdols = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_IdolListMessage(param1);
        }

        public serializeAs_IdolListMessage(param1: ICustomDataOutput): void {
            param1.writeShort(this.chosenIdols.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.chosenIdols.length) {
                if (this.chosenIdols[_loc2_] < 0) {
                    throw new Error('Forbidden value (' + this.chosenIdols[_loc2_] + ') on element 1 (starting at 1) of chosenIdols.');
                }
                param1.writeVarShort(this.chosenIdols[_loc2_]);
                _loc2_++;
            }
            param1.writeShort(this.partyChosenIdols.length);
            var _loc3_: number = 0;
            while (_loc3_ < this.partyChosenIdols.length) {
                if (this.partyChosenIdols[_loc3_] < 0) {
                    throw new Error('Forbidden value (' + this.partyChosenIdols[_loc3_] + ') on element 2 (starting at 1) of partyChosenIdols.');
                }
                param1.writeVarShort(this.partyChosenIdols[_loc3_]);
                _loc3_++;
            }
            param1.writeShort(this.partyIdols.length);
            var _loc4_: number = 0;
            while (_loc4_ < this.partyIdols.length) {
                param1.writeShort((this.partyIdols[_loc4_]).getTypeId());
                (this.partyIdols[_loc4_]).serialize(param1);
                _loc4_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_IdolListMessage(param1);
        }

        public deserializeAs_IdolListMessage(param1: ICustomDataInput): void {
            var _loc8_: number = 0;
            var _loc9_: number = 0;
            var _loc10_: number = 0;
            var _loc11_: PartyIdol = null;
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc8_ = param1.readVarUhShort();
                if (_loc8_ < 0) {
                    throw new Error('Forbidden value (' + _loc8_ + ') on elements of chosenIdols.');
                }
                this.chosenIdols.push(_loc8_);
                _loc3_++;
            }
            var _loc4_: number = param1.readUnsignedShort();
            var _loc5_: number = 0;
            while (_loc5_ < _loc4_) {
            _loc9_ = param1.readVarUhShort();
                if (_loc9_ < 0) {
                    throw new Error('Forbidden value (' + _loc9_ + ') on elements of partyChosenIdols.');
                }
                this.partyChosenIdols.push(_loc9_);
                _loc5_++;
            }
            var _loc6_: number = param1.readUnsignedShort();
            var _loc7_: number = 0;
            while (_loc7_ < _loc6_) {
            _loc10_ = param1.readUnsignedShort();
                _loc11_ = <PartyIdol>ProtocolTypeManager.getInstance(PartyIdol, _loc10_);
                _loc11_.deserialize(param1);
                this.partyIdols.push(_loc11_);
                _loc7_++;
            }

        }
    }
    export class IdolPartyLostMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6580;

        idolId: number;

        constructor() {
            this.idolId = 0;
            super();
        }

        public getMessageId(): number {
            return IdolPartyLostMessage.ID;
        }

        public reset(): void {
            this.idolId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_IdolPartyLostMessage(param1);
        }

        public serializeAs_IdolPartyLostMessage(param1: ICustomDataOutput): void {
            if (this.idolId < 0) {
                throw new Error('Forbidden value (' + this.idolId + ') on element idolId.');
            }
            param1.writeVarShort(this.idolId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_IdolPartyLostMessage(param1);
        }

        public deserializeAs_IdolPartyLostMessage(param1: ICustomDataInput): void {
            this.idolId = param1.readVarUhShort();
            if (this.idolId < 0) {
                throw new Error('Forbidden value (' + this.idolId + ') on element of IdolPartyLostMessage.idolId.');
            }

        }
    }
    export class IdolPartyRefreshMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6583;

        partyIdol: PartyIdol;

        constructor() {
            this.partyIdol = new PartyIdol();
            super();
        }

        public getMessageId(): number {
            return IdolPartyRefreshMessage.ID;
        }

        public reset(): void {
            this.partyIdol = new PartyIdol();
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_IdolPartyRefreshMessage(param1);
        }

        public serializeAs_IdolPartyRefreshMessage(param1: ICustomDataOutput): void {
            this.partyIdol.serializeAs_PartyIdol(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_IdolPartyRefreshMessage(param1);
        }

        public deserializeAs_IdolPartyRefreshMessage(param1: ICustomDataInput): void {
            this.partyIdol = new PartyIdol();
            this.partyIdol.deserialize(param1);

        }
    }
    export class IdolPartyRegisterRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6582;

        register: boolean;

        constructor() {
            this.register = false;
            super();
        }

        public getMessageId(): number {
            return IdolPartyRegisterRequestMessage.ID;
        }

        public reset(): void {
            this.register = false;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_IdolPartyRegisterRequestMessage(param1);
        }

        public serializeAs_IdolPartyRegisterRequestMessage(param1: ICustomDataOutput): void {
            param1.writeBoolean(this.register);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_IdolPartyRegisterRequestMessage(param1);
        }

        public deserializeAs_IdolPartyRegisterRequestMessage(param1: ICustomDataInput): void {
            this.register = param1.readBoolean();

        }
    }
    export class IdolSelectErrorMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6584;

        reason: number;
        idolId: number;
        activate: boolean;
        party: boolean;

        constructor() {
            this.reason = 0;
            this.idolId = 0;
            this.activate = false;
            this.party = false;
            super();
        }

        public getMessageId(): number {
            return IdolSelectErrorMessage.ID;
        }

        public reset(): void {
            this.reason = 0;
            this.idolId = 0;
            this.activate = false;
            this.party = false;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_IdolSelectErrorMessage(param1);
        }

        public serializeAs_IdolSelectErrorMessage(param1: ICustomDataOutput): void {
            var _loc2_: number = 0;
            _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 0, this.activate);
            _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 1, this.party);
            param1.writeByte(_loc2_);
            param1.writeByte(this.reason);
            if (this.idolId < 0) {
                throw new Error('Forbidden value (' + this.idolId + ') on element idolId.');
            }
            param1.writeVarShort(this.idolId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_IdolSelectErrorMessage(param1);
        }

        public deserializeAs_IdolSelectErrorMessage(param1: ICustomDataInput): void {
            var _loc2_: number = param1.readByte();
            this.activate = BooleanByteWrapper.getFlag(_loc2_, 0);
            this.party = BooleanByteWrapper.getFlag(_loc2_, 1);
            this.reason = param1.readByte();
            if (this.reason < 0) {
                throw new Error('Forbidden value (' + this.reason + ') on element of IdolSelectErrorMessage.reason.');
            }
            this.idolId = param1.readVarUhShort();
            if (this.idolId < 0) {
                throw new Error('Forbidden value (' + this.idolId + ') on element of IdolSelectErrorMessage.idolId.');
            }

        }
    }
    export class IdolSelectRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6587;

        idolId: number;
        activate: boolean;
        party: boolean;

        constructor() {
            this.idolId = 0;
            this.activate = false;
            this.party = false;
            super();
        }

        public getMessageId(): number {
            return IdolSelectRequestMessage.ID;
        }

        public reset(): void {
            this.idolId = 0;
            this.activate = false;
            this.party = false;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_IdolSelectRequestMessage(param1);
        }

        public serializeAs_IdolSelectRequestMessage(param1: ICustomDataOutput): void {
            var _loc2_: number = 0;
            _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 0, this.activate);
            _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 1, this.party);
            param1.writeByte(_loc2_);
            if (this.idolId < 0) {
                throw new Error('Forbidden value (' + this.idolId + ') on element idolId.');
            }
            param1.writeVarShort(this.idolId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_IdolSelectRequestMessage(param1);
        }

        public deserializeAs_IdolSelectRequestMessage(param1: ICustomDataInput): void {
            var _loc2_: number = param1.readByte();
            this.activate = BooleanByteWrapper.getFlag(_loc2_, 0);
            this.party = BooleanByteWrapper.getFlag(_loc2_, 1);
            this.idolId = param1.readVarUhShort();
            if (this.idolId < 0) {
                throw new Error('Forbidden value (' + this.idolId + ') on element of IdolSelectRequestMessage.idolId.');
            }

        }
    }
    export class IdolSelectedMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6581;

        idolId: number;
        activate: boolean;
        party: boolean;

        constructor() {
            this.idolId = 0;
            this.activate = false;
            this.party = false;
            super();
        }

        public getMessageId(): number {
            return IdolSelectedMessage.ID;
        }

        public reset(): void {
            this.idolId = 0;
            this.activate = false;
            this.party = false;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_IdolSelectedMessage(param1);
        }

        public serializeAs_IdolSelectedMessage(param1: ICustomDataOutput): void {
            var _loc2_: number = 0;
            _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 0, this.activate);
            _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 1, this.party);
            param1.writeByte(_loc2_);
            if (this.idolId < 0) {
                throw new Error('Forbidden value (' + this.idolId + ') on element idolId.');
            }
            param1.writeVarShort(this.idolId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_IdolSelectedMessage(param1);
        }

        public deserializeAs_IdolSelectedMessage(param1: ICustomDataInput): void {
            var _loc2_: number = param1.readByte();
            this.activate = BooleanByteWrapper.getFlag(_loc2_, 0);
            this.party = BooleanByteWrapper.getFlag(_loc2_, 1);
            this.idolId = param1.readVarUhShort();
            if (this.idolId < 0) {
                throw new Error('Forbidden value (' + this.idolId + ') on element of IdolSelectedMessage.idolId.');
            }

        }
    }
    export class CharacterCapabilitiesMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6339;

        guildEmblemSymbolCategories: number;

        constructor() {
            this.guildEmblemSymbolCategories = 0;
            super();
        }

        public getMessageId(): number {
            return CharacterCapabilitiesMessage.ID;
        }

        public reset(): void {
            this.guildEmblemSymbolCategories = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_CharacterCapabilitiesMessage(param1);
        }

        public serializeAs_CharacterCapabilitiesMessage(param1: ICustomDataOutput): void {
            if (this.guildEmblemSymbolCategories < 0) {
                throw new Error('Forbidden value (' + this.guildEmblemSymbolCategories + ') on element guildEmblemSymbolCategories.');
            }
            param1.writeVarInt(this.guildEmblemSymbolCategories);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_CharacterCapabilitiesMessage(param1);
        }

        public deserializeAs_CharacterCapabilitiesMessage(param1: ICustomDataInput): void {
            this.guildEmblemSymbolCategories = param1.readVarUhInt();
            if (this.guildEmblemSymbolCategories < 0) {
                throw new Error('Forbidden value (' + this.guildEmblemSymbolCategories + ') on element of CharacterCapabilitiesMessage.guildEmblemSymbolCategories.');
            }

        }
    }
    export class CharacterLoadingCompleteMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6471;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return CharacterLoadingCompleteMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_CharacterLoadingCompleteMessage(param1);
        }

        public serializeAs_CharacterLoadingCompleteMessage(param1: ICustomDataOutput): void {

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_CharacterLoadingCompleteMessage(param1);
        }

        public deserializeAs_CharacterLoadingCompleteMessage(param1: ICustomDataInput): void {

        }
    }
    export class OnConnectionEventMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5726;

        eventType: number;

        constructor() {
            this.eventType = 0;
            super();
        }

        public getMessageId(): number {
            return OnConnectionEventMessage.ID;
        }

        public reset(): void {
            this.eventType = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_OnConnectionEventMessage(param1);
        }

        public serializeAs_OnConnectionEventMessage(param1: ICustomDataOutput): void {
            param1.writeByte(this.eventType);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_OnConnectionEventMessage(param1);
        }

        public deserializeAs_OnConnectionEventMessage(param1: ICustomDataInput): void {
            this.eventType = param1.readByte();
            if (this.eventType < 0) {
                throw new Error('Forbidden value (' + this.eventType + ') on element of OnConnectionEventMessage.eventType.');
            }

        }
    }
    export class ServerExperienceModificatorMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6237;

        experiencePercent: number;

        constructor() {
            this.experiencePercent = 0;
            super();
        }

        public getMessageId(): number {
            return ServerExperienceModificatorMessage.ID;
        }

        public reset(): void {
            this.experiencePercent = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ServerExperienceModificatorMessage(param1);
        }

        public serializeAs_ServerExperienceModificatorMessage(param1: ICustomDataOutput): void {
            if (this.experiencePercent < 0) {
                throw new Error('Forbidden value (' + this.experiencePercent + ') on element experiencePercent.');
            }
            param1.writeVarShort(this.experiencePercent);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ServerExperienceModificatorMessage(param1);
        }

        public deserializeAs_ServerExperienceModificatorMessage(param1: ICustomDataInput): void {
            this.experiencePercent = param1.readVarUhShort();
            if (this.experiencePercent < 0) {
                throw new Error('Forbidden value (' + this.experiencePercent + ') on element of ServerExperienceModificatorMessage.experiencePercent.');
            }

        }
    }
    export class SetCharacterRestrictionsMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 170;

        actorId: number;
        restrictions: ActorRestrictionsInformations;

        constructor() {
            this.actorId = 0;
            this.restrictions = new ActorRestrictionsInformations();
            super();
        }

        public getMessageId(): number {
            return SetCharacterRestrictionsMessage.ID;
        }

        public reset(): void {
            this.actorId = 0;
            this.restrictions = new ActorRestrictionsInformations();
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_SetCharacterRestrictionsMessage(param1);
        }

        public serializeAs_SetCharacterRestrictionsMessage(param1: ICustomDataOutput): void {
            param1.writeInt(this.actorId);
            this.restrictions.serializeAs_ActorRestrictionsInformations(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_SetCharacterRestrictionsMessage(param1);
        }

        public deserializeAs_SetCharacterRestrictionsMessage(param1: ICustomDataInput): void {
            this.actorId = param1.readInt();
            this.restrictions = new ActorRestrictionsInformations();
            this.restrictions.deserialize(param1);

        }
    }
    export class InteractiveElementUpdatedMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5708;

        interactiveElement: InteractiveElement;

        constructor() {
            this.interactiveElement = new InteractiveElement();
            super();
        }

        public getMessageId(): number {
            return InteractiveElementUpdatedMessage.ID;
        }

        public reset(): void {
            this.interactiveElement = new InteractiveElement();
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_InteractiveElementUpdatedMessage(param1);
        }

        public serializeAs_InteractiveElementUpdatedMessage(param1: ICustomDataOutput): void {
            this.interactiveElement.serializeAs_InteractiveElement(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_InteractiveElementUpdatedMessage(param1);
        }

        public deserializeAs_InteractiveElementUpdatedMessage(param1: ICustomDataInput): void {
            this.interactiveElement = new InteractiveElement();
            this.interactiveElement.deserialize(param1);

        }
    }
    export class InteractiveMapUpdateMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5002;

        interactiveElements: InteractiveElement[];

        constructor() {
            this.interactiveElements = [];
            super();
        }

        public getMessageId(): number {
            return InteractiveMapUpdateMessage.ID;
        }

        public reset(): void {
            this.interactiveElements = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_InteractiveMapUpdateMessage(param1);
        }

        public serializeAs_InteractiveMapUpdateMessage(param1: ICustomDataOutput): void {
            param1.writeShort(this.interactiveElements.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.interactiveElements.length) {
                param1.writeShort((this.interactiveElements[_loc2_]).getTypeId());
                (this.interactiveElements[_loc2_]).serialize(param1);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_InteractiveMapUpdateMessage(param1);
        }

        public deserializeAs_InteractiveMapUpdateMessage(param1: ICustomDataInput): void {
            var _loc4_: number = 0;
            var _loc5_: InteractiveElement = null;
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = param1.readUnsignedShort();
                _loc5_ = <InteractiveElement>ProtocolTypeManager.getInstance(InteractiveElement, _loc4_);
                _loc5_.deserialize(param1);
                this.interactiveElements.push(_loc5_);
                _loc3_++;
            }

        }
    }
    export class InteractiveUseEndedMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6112;

        elemId: number;
        skillId: number;

        constructor() {
            this.elemId = 0;
            this.skillId = 0;
            super();
        }

        public getMessageId(): number {
            return InteractiveUseEndedMessage.ID;
        }

        public reset(): void {
            this.elemId = 0;
            this.skillId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_InteractiveUseEndedMessage(param1);
        }

        public serializeAs_InteractiveUseEndedMessage(param1: ICustomDataOutput): void {
            if (this.elemId < 0) {
                throw new Error('Forbidden value (' + this.elemId + ') on element elemId.');
            }
            param1.writeVarInt(this.elemId);
            if (this.skillId < 0) {
                throw new Error('Forbidden value (' + this.skillId + ') on element skillId.');
            }
            param1.writeVarShort(this.skillId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_InteractiveUseEndedMessage(param1);
        }

        public deserializeAs_InteractiveUseEndedMessage(param1: ICustomDataInput): void {
            this.elemId = param1.readVarUhInt();
            if (this.elemId < 0) {
                throw new Error('Forbidden value (' + this.elemId + ') on element of InteractiveUseEndedMessage.elemId.');
            }
            this.skillId = param1.readVarUhShort();
            if (this.skillId < 0) {
                throw new Error('Forbidden value (' + this.skillId + ') on element of InteractiveUseEndedMessage.skillId.');
            }

        }
    }
    export class InteractiveUseErrorMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6384;

        elemId: number;
        skillInstanceUid: number;

        constructor() {
            this.elemId = 0;
            this.skillInstanceUid = 0;
            super();
        }

        public getMessageId(): number {
            return InteractiveUseErrorMessage.ID;
        }

        public reset(): void {
            this.elemId = 0;
            this.skillInstanceUid = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_InteractiveUseErrorMessage(param1);
        }

        public serializeAs_InteractiveUseErrorMessage(param1: ICustomDataOutput): void {
            if (this.elemId < 0) {
                throw new Error('Forbidden value (' + this.elemId + ') on element elemId.');
            }
            param1.writeVarInt(this.elemId);
            if (this.skillInstanceUid < 0) {
                throw new Error('Forbidden value (' + this.skillInstanceUid + ') on element skillInstanceUid.');
            }
            param1.writeVarInt(this.skillInstanceUid);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_InteractiveUseErrorMessage(param1);
        }

        public deserializeAs_InteractiveUseErrorMessage(param1: ICustomDataInput): void {
            this.elemId = param1.readVarUhInt();
            if (this.elemId < 0) {
                throw new Error('Forbidden value (' + this.elemId + ') on element of InteractiveUseErrorMessage.elemId.');
            }
            this.skillInstanceUid = param1.readVarUhInt();
            if (this.skillInstanceUid < 0) {
                throw new Error('Forbidden value (' + this.skillInstanceUid + ') on element of InteractiveUseErrorMessage.skillInstanceUid.');
            }

        }
    }
    export class InteractiveUseRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5001;

        elemId: number;
        skillInstanceUid: number;

        constructor() {
            this.elemId = 0;
            this.skillInstanceUid = 0;
            super();
        }

        public getMessageId(): number {
            return InteractiveUseRequestMessage.ID;
        }

        public reset(): void {
            this.elemId = 0;
            this.skillInstanceUid = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_InteractiveUseRequestMessage(param1);
        }

        public serializeAs_InteractiveUseRequestMessage(param1: ICustomDataOutput): void {
            if (this.elemId < 0) {
                throw new Error('Forbidden value (' + this.elemId + ') on element elemId.');
            }
            param1.writeVarInt(this.elemId);
            if (this.skillInstanceUid < 0) {
                throw new Error('Forbidden value (' + this.skillInstanceUid + ') on element skillInstanceUid.');
            }
            param1.writeVarInt(this.skillInstanceUid);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_InteractiveUseRequestMessage(param1);
        }

        public deserializeAs_InteractiveUseRequestMessage(param1: ICustomDataInput): void {
            this.elemId = param1.readVarUhInt();
            if (this.elemId < 0) {
                throw new Error('Forbidden value (' + this.elemId + ') on element of InteractiveUseRequestMessage.elemId.');
            }
            this.skillInstanceUid = param1.readVarUhInt();
            if (this.skillInstanceUid < 0) {
                throw new Error('Forbidden value (' + this.skillInstanceUid + ') on element of InteractiveUseRequestMessage.skillInstanceUid.');
            }

        }
    }
    export class InteractiveUsedMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5745;

        entityId: number;
        elemId: number;
        skillId: number;
        duration: number;

        constructor() {
            this.entityId = 0;
            this.elemId = 0;
            this.skillId = 0;
            this.duration = 0;
            super();
        }

        public getMessageId(): number {
            return InteractiveUsedMessage.ID;
        }

        public reset(): void {
            this.entityId = 0;
            this.elemId = 0;
            this.skillId = 0;
            this.duration = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_InteractiveUsedMessage(param1);
        }

        public serializeAs_InteractiveUsedMessage(param1: ICustomDataOutput): void {
            if (this.entityId < 0) {
                throw new Error('Forbidden value (' + this.entityId + ') on element entityId.');
            }
            param1.writeVarInt(this.entityId);
            if (this.elemId < 0) {
                throw new Error('Forbidden value (' + this.elemId + ') on element elemId.');
            }
            param1.writeVarInt(this.elemId);
            if (this.skillId < 0) {
                throw new Error('Forbidden value (' + this.skillId + ') on element skillId.');
            }
            param1.writeVarShort(this.skillId);
            if (this.duration < 0) {
                throw new Error('Forbidden value (' + this.duration + ') on element duration.');
            }
            param1.writeVarShort(this.duration);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_InteractiveUsedMessage(param1);
        }

        public deserializeAs_InteractiveUsedMessage(param1: ICustomDataInput): void {
            this.entityId = param1.readVarUhInt();
            if (this.entityId < 0) {
                throw new Error('Forbidden value (' + this.entityId + ') on element of InteractiveUsedMessage.entityId.');
            }
            this.elemId = param1.readVarUhInt();
            if (this.elemId < 0) {
                throw new Error('Forbidden value (' + this.elemId + ') on element of InteractiveUsedMessage.elemId.');
            }
            this.skillId = param1.readVarUhShort();
            if (this.skillId < 0) {
                throw new Error('Forbidden value (' + this.skillId + ') on element of InteractiveUsedMessage.skillId.');
            }
            this.duration = param1.readVarUhShort();
            if (this.duration < 0) {
                throw new Error('Forbidden value (' + this.duration + ') on element of InteractiveUsedMessage.duration.');
            }

        }
    }
    export class StatedElementUpdatedMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5709;

        statedElement: StatedElement;

        constructor() {
            this.statedElement = new StatedElement();
            super();
        }

        public getMessageId(): number {
            return StatedElementUpdatedMessage.ID;
        }

        public reset(): void {
            this.statedElement = new StatedElement();
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_StatedElementUpdatedMessage(param1);
        }

        public serializeAs_StatedElementUpdatedMessage(param1: ICustomDataOutput): void {
            this.statedElement.serializeAs_StatedElement(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_StatedElementUpdatedMessage(param1);
        }

        public deserializeAs_StatedElementUpdatedMessage(param1: ICustomDataInput): void {
            this.statedElement = new StatedElement();
            this.statedElement.deserialize(param1);

        }
    }
    export class StatedMapUpdateMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5716;

        statedElements: StatedElement[];

        constructor() {
            this.statedElements = [];
            super();
        }

        public getMessageId(): number {
            return StatedMapUpdateMessage.ID;
        }

        public reset(): void {
            this.statedElements = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_StatedMapUpdateMessage(param1);
        }

        public serializeAs_StatedMapUpdateMessage(param1: ICustomDataOutput): void {
            param1.writeShort(this.statedElements.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.statedElements.length) {
                (this.statedElements[_loc2_]).serializeAs_StatedElement(param1);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_StatedMapUpdateMessage(param1);
        }

        public deserializeAs_StatedMapUpdateMessage(param1: ICustomDataInput): void {
            var _loc4_: StatedElement = null;
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = new StatedElement();
                _loc4_.deserialize(param1);
                this.statedElements.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class TeleportBuddiesAnswerMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6294;

        accept: boolean;

        constructor() {
            this.accept = false;
            super();
        }

        public getMessageId(): number {
            return TeleportBuddiesAnswerMessage.ID;
        }

        public reset(): void {
            this.accept = false;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_TeleportBuddiesAnswerMessage(param1);
        }

        public serializeAs_TeleportBuddiesAnswerMessage(param1: ICustomDataOutput): void {
            param1.writeBoolean(this.accept);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_TeleportBuddiesAnswerMessage(param1);
        }

        public deserializeAs_TeleportBuddiesAnswerMessage(param1: ICustomDataInput): void {
            this.accept = param1.readBoolean();

        }
    }
    export class TeleportBuddiesMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6289;

        dungeonId: number;

        constructor() {
            this.dungeonId = 0;
            super();
        }

        public getMessageId(): number {
            return TeleportBuddiesMessage.ID;
        }

        public reset(): void {
            this.dungeonId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_TeleportBuddiesMessage(param1);
        }

        public serializeAs_TeleportBuddiesMessage(param1: ICustomDataOutput): void {
            if (this.dungeonId < 0) {
                throw new Error('Forbidden value (' + this.dungeonId + ') on element dungeonId.');
            }
            param1.writeVarShort(this.dungeonId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_TeleportBuddiesMessage(param1);
        }

        public deserializeAs_TeleportBuddiesMessage(param1: ICustomDataInput): void {
            this.dungeonId = param1.readVarUhShort();
            if (this.dungeonId < 0) {
                throw new Error('Forbidden value (' + this.dungeonId + ') on element of TeleportBuddiesMessage.dungeonId.');
            }

        }
    }
    export class TeleportBuddiesRequestedMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6302;

        dungeonId: number;
        inviterId: number;
        invalidBuddiesIds: number[];

        constructor() {
            this.dungeonId = 0;
            this.inviterId = 0;
            this.invalidBuddiesIds = [];
            super();
        }

        public getMessageId(): number {
            return TeleportBuddiesRequestedMessage.ID;
        }

        public reset(): void {
            this.dungeonId = 0;
            this.inviterId = 0;
            this.invalidBuddiesIds = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_TeleportBuddiesRequestedMessage(param1);
        }

        public serializeAs_TeleportBuddiesRequestedMessage(param1: ICustomDataOutput): void {
            if (this.dungeonId < 0) {
                throw new Error('Forbidden value (' + this.dungeonId + ') on element dungeonId.');
            }
            param1.writeVarShort(this.dungeonId);
            if (this.inviterId < 0) {
                throw new Error('Forbidden value (' + this.inviterId + ') on element inviterId.');
            }
            param1.writeVarInt(this.inviterId);
            param1.writeShort(this.invalidBuddiesIds.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.invalidBuddiesIds.length) {
                if (this.invalidBuddiesIds[_loc2_] < 0) {
                    throw new Error('Forbidden value (' + this.invalidBuddiesIds[_loc2_] + ') on element 3 (starting at 1) of invalidBuddiesIds.');
                }
                param1.writeVarInt(this.invalidBuddiesIds[_loc2_]);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_TeleportBuddiesRequestedMessage(param1);
        }

        public deserializeAs_TeleportBuddiesRequestedMessage(param1: ICustomDataInput): void {
            var _loc4_: number = 0;
            this.dungeonId = param1.readVarUhShort();
            if (this.dungeonId < 0) {
                throw new Error('Forbidden value (' + this.dungeonId + ') on element of TeleportBuddiesRequestedMessage.dungeonId.');
            }
            this.inviterId = param1.readVarUhInt();
            if (this.inviterId < 0) {
                throw new Error('Forbidden value (' + this.inviterId + ') on element of TeleportBuddiesRequestedMessage.inviterId.');
            }
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = param1.readVarUhInt();
                if (_loc4_ < 0) {
                    throw new Error('Forbidden value (' + _loc4_ + ') on elements of invalidBuddiesIds.');
                }
                this.invalidBuddiesIds.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class TeleportToBuddyAnswerMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6293;

        dungeonId: number;
        buddyId: number;
        accept: boolean;

        constructor() {
            this.dungeonId = 0;
            this.buddyId = 0;
            this.accept = false;
            super();
        }

        public getMessageId(): number {
            return TeleportToBuddyAnswerMessage.ID;
        }

        public reset(): void {
            this.dungeonId = 0;
            this.buddyId = 0;
            this.accept = false;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_TeleportToBuddyAnswerMessage(param1);
        }

        public serializeAs_TeleportToBuddyAnswerMessage(param1: ICustomDataOutput): void {
            if (this.dungeonId < 0) {
                throw new Error('Forbidden value (' + this.dungeonId + ') on element dungeonId.');
            }
            param1.writeVarShort(this.dungeonId);
            if (this.buddyId < 0) {
                throw new Error('Forbidden value (' + this.buddyId + ') on element buddyId.');
            }
            param1.writeVarInt(this.buddyId);
            param1.writeBoolean(this.accept);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_TeleportToBuddyAnswerMessage(param1);
        }

        public deserializeAs_TeleportToBuddyAnswerMessage(param1: ICustomDataInput): void {
            this.dungeonId = param1.readVarUhShort();
            if (this.dungeonId < 0) {
                throw new Error('Forbidden value (' + this.dungeonId + ') on element of TeleportToBuddyAnswerMessage.dungeonId.');
            }
            this.buddyId = param1.readVarUhInt();
            if (this.buddyId < 0) {
                throw new Error('Forbidden value (' + this.buddyId + ') on element of TeleportToBuddyAnswerMessage.buddyId.');
            }
            this.accept = param1.readBoolean();

        }
    }
    export class TeleportToBuddyCloseMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6303;

        dungeonId: number;
        buddyId: number;

        constructor() {
            this.dungeonId = 0;
            this.buddyId = 0;
            super();
        }

        public getMessageId(): number {
            return TeleportToBuddyCloseMessage.ID;
        }

        public reset(): void {
            this.dungeonId = 0;
            this.buddyId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_TeleportToBuddyCloseMessage(param1);
        }

        public serializeAs_TeleportToBuddyCloseMessage(param1: ICustomDataOutput): void {
            if (this.dungeonId < 0) {
                throw new Error('Forbidden value (' + this.dungeonId + ') on element dungeonId.');
            }
            param1.writeVarShort(this.dungeonId);
            if (this.buddyId < 0) {
                throw new Error('Forbidden value (' + this.buddyId + ') on element buddyId.');
            }
            param1.writeVarInt(this.buddyId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_TeleportToBuddyCloseMessage(param1);
        }

        public deserializeAs_TeleportToBuddyCloseMessage(param1: ICustomDataInput): void {
            this.dungeonId = param1.readVarUhShort();
            if (this.dungeonId < 0) {
                throw new Error('Forbidden value (' + this.dungeonId + ') on element of TeleportToBuddyCloseMessage.dungeonId.');
            }
            this.buddyId = param1.readVarUhInt();
            if (this.buddyId < 0) {
                throw new Error('Forbidden value (' + this.buddyId + ') on element of TeleportToBuddyCloseMessage.buddyId.');
            }

        }
    }
    export class TeleportToBuddyOfferMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6287;

        dungeonId: number;
        buddyId: number;
        timeLeft: number;

        constructor() {
            this.dungeonId = 0;
            this.buddyId = 0;
            this.timeLeft = 0;
            super();
        }

        public getMessageId(): number {
            return TeleportToBuddyOfferMessage.ID;
        }

        public reset(): void {
            this.dungeonId = 0;
            this.buddyId = 0;
            this.timeLeft = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_TeleportToBuddyOfferMessage(param1);
        }

        public serializeAs_TeleportToBuddyOfferMessage(param1: ICustomDataOutput): void {
            if (this.dungeonId < 0) {
                throw new Error('Forbidden value (' + this.dungeonId + ') on element dungeonId.');
            }
            param1.writeVarShort(this.dungeonId);
            if (this.buddyId < 0) {
                throw new Error('Forbidden value (' + this.buddyId + ') on element buddyId.');
            }
            param1.writeVarInt(this.buddyId);
            if (this.timeLeft < 0) {
                throw new Error('Forbidden value (' + this.timeLeft + ') on element timeLeft.');
            }
            param1.writeVarInt(this.timeLeft);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_TeleportToBuddyOfferMessage(param1);
        }

        public deserializeAs_TeleportToBuddyOfferMessage(param1: ICustomDataInput): void {
            this.dungeonId = param1.readVarUhShort();
            if (this.dungeonId < 0) {
                throw new Error('Forbidden value (' + this.dungeonId + ') on element of TeleportToBuddyOfferMessage.dungeonId.');
            }
            this.buddyId = param1.readVarUhInt();
            if (this.buddyId < 0) {
                throw new Error('Forbidden value (' + this.buddyId + ') on element of TeleportToBuddyOfferMessage.buddyId.');
            }
            this.timeLeft = param1.readVarUhInt();
            if (this.timeLeft < 0) {
                throw new Error('Forbidden value (' + this.timeLeft + ') on element of TeleportToBuddyOfferMessage.timeLeft.');
            }

        }
    }
    export class TeleportDestinationsListMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5960;

        teleporterType: number;
        mapIds: number[];
        subAreaIds: number[];
        costs: number[];
        destTeleporterType: number[];

        constructor() {
            this.teleporterType = 0;
            this.mapIds = [];
            this.subAreaIds = [];
            this.costs = [];
            this.destTeleporterType = [];
            super();
        }

        public getMessageId(): number {
            return TeleportDestinationsListMessage.ID;
        }

        public reset(): void {
            this.teleporterType = 0;
            this.mapIds = [];
            this.subAreaIds = [];
            this.costs = [];
            this.destTeleporterType = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_TeleportDestinationsListMessage(param1);
        }

        public serializeAs_TeleportDestinationsListMessage(param1: ICustomDataOutput): void {
            param1.writeByte(this.teleporterType);
            param1.writeShort(this.mapIds.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.mapIds.length) {
                if (this.mapIds[_loc2_] < 0) {
                    throw new Error('Forbidden value (' + this.mapIds[_loc2_] + ') on element 2 (starting at 1) of mapIds.');
                }
                param1.writeInt(this.mapIds[_loc2_]);
                _loc2_++;
            }
            param1.writeShort(this.subAreaIds.length);
            var _loc3_: number = 0;
            while (_loc3_ < this.subAreaIds.length) {
                if (this.subAreaIds[_loc3_] < 0) {
                    throw new Error('Forbidden value (' + this.subAreaIds[_loc3_] + ') on element 3 (starting at 1) of subAreaIds.');
                }
                param1.writeVarShort(this.subAreaIds[_loc3_]);
                _loc3_++;
            }
            param1.writeShort(this.costs.length);
            var _loc4_: number = 0;
            while (_loc4_ < this.costs.length) {
                if (this.costs[_loc4_] < 0) {
                    throw new Error('Forbidden value (' + this.costs[_loc4_] + ') on element 4 (starting at 1) of costs.');
                }
                param1.writeVarShort(this.costs[_loc4_]);
                _loc4_++;
            }
            param1.writeShort(this.destTeleporterType.length);
            var _loc5_: number = 0;
            while (_loc5_ < this.destTeleporterType.length) {
                param1.writeByte(this.destTeleporterType[_loc5_]);
                _loc5_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_TeleportDestinationsListMessage(param1);
        }

        public deserializeAs_TeleportDestinationsListMessage(param1: ICustomDataInput): void {
            var _loc10_: number = 0;
            var _loc11_: number = 0;
            var _loc12_: number = 0;
            var _loc13_: number = 0;
            this.teleporterType = param1.readByte();
            if (this.teleporterType < 0) {
                throw new Error('Forbidden value (' + this.teleporterType + ') on element of TeleportDestinationsListMessage.teleporterType.');
            }
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc10_ = param1.readInt();
                if (_loc10_ < 0) {
                    throw new Error('Forbidden value (' + _loc10_ + ') on elements of mapIds.');
                }
                this.mapIds.push(_loc10_);
                _loc3_++;
            }
            var _loc4_: number = param1.readUnsignedShort();
            var _loc5_: number = 0;
            while (_loc5_ < _loc4_) {
            _loc11_ = param1.readVarUhShort();
                if (_loc11_ < 0) {
                    throw new Error('Forbidden value (' + _loc11_ + ') on elements of subAreaIds.');
                }
                this.subAreaIds.push(_loc11_);
                _loc5_++;
            }
            var _loc6_: number = param1.readUnsignedShort();
            var _loc7_: number = 0;
            while (_loc7_ < _loc6_) {
            _loc12_ = param1.readVarUhShort();
                if (_loc12_ < 0) {
                    throw new Error('Forbidden value (' + _loc12_ + ') on elements of costs.');
                }
                this.costs.push(_loc12_);
                _loc7_++;
            }
            var _loc8_: number = param1.readUnsignedShort();
            var _loc9_: number = 0;
            while (_loc9_ < _loc8_) {
            _loc13_ = param1.readByte();
                if (_loc13_ < 0) {
                    throw new Error('Forbidden value (' + _loc13_ + ') on elements of destTeleporterType.');
                }
                this.destTeleporterType.push(_loc13_);
                _loc9_++;
            }

        }
    }
    export class TeleportRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5961;

        teleporterType: number;
        mapId: number;

        constructor() {
            this.teleporterType = 0;
            this.mapId = 0;
            super();
        }

        public getMessageId(): number {
            return TeleportRequestMessage.ID;
        }

        public reset(): void {
            this.teleporterType = 0;
            this.mapId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_TeleportRequestMessage(param1);
        }

        public serializeAs_TeleportRequestMessage(param1: ICustomDataOutput): void {
            param1.writeByte(this.teleporterType);
            if (this.mapId < 0) {
                throw new Error('Forbidden value (' + this.mapId + ') on element mapId.');
            }
            param1.writeInt(this.mapId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_TeleportRequestMessage(param1);
        }

        public deserializeAs_TeleportRequestMessage(param1: ICustomDataInput): void {
            this.teleporterType = param1.readByte();
            if (this.teleporterType < 0) {
                throw new Error('Forbidden value (' + this.teleporterType + ') on element of TeleportRequestMessage.teleporterType.');
            }
            this.mapId = param1.readInt();
            if (this.mapId < 0) {
                throw new Error('Forbidden value (' + this.mapId + ') on element of TeleportRequestMessage.mapId.');
            }

        }
    }
    export class ZaapListMessage extends TeleportDestinationsListMessage {
        public static ID: number = 1604;

        spawnMapId: number;

        constructor() {
            this.spawnMapId = 0;
            super();
        }

        public getMessageId(): number {
            return ZaapListMessage.ID;
        }

        public reset(): void {
            this.spawnMapId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ZaapListMessage(param1);
        }

        public serializeAs_ZaapListMessage(param1: ICustomDataOutput): void {
            super.serializeAs_TeleportDestinationsListMessage(param1);
            if (this.spawnMapId < 0) {
                throw new Error('Forbidden value (' + this.spawnMapId + ') on element spawnMapId.');
            }
            param1.writeInt(this.spawnMapId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ZaapListMessage(param1);
        }

        public deserializeAs_ZaapListMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.spawnMapId = param1.readInt();
            if (this.spawnMapId < 0) {
                throw new Error('Forbidden value (' + this.spawnMapId + ') on element of ZaapListMessage.spawnMapId.');
            }

        }
    }
    export class ZaapRespawnSaveRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6572;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return ZaapRespawnSaveRequestMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ZaapRespawnSaveRequestMessage(param1);
        }

        public serializeAs_ZaapRespawnSaveRequestMessage(param1: ICustomDataOutput): void {

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ZaapRespawnSaveRequestMessage(param1);
        }

        public deserializeAs_ZaapRespawnSaveRequestMessage(param1: ICustomDataInput): void {

        }
    }
    export class ZaapRespawnUpdatedMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6571;

        mapId: number;

        constructor() {
            this.mapId = 0;
            super();
        }

        public getMessageId(): number {
            return ZaapRespawnUpdatedMessage.ID;
        }

        public reset(): void {
            this.mapId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ZaapRespawnUpdatedMessage(param1);
        }

        public serializeAs_ZaapRespawnUpdatedMessage(param1: ICustomDataOutput): void {
            if (this.mapId < 0) {
                throw new Error('Forbidden value (' + this.mapId + ') on element mapId.');
            }
            param1.writeInt(this.mapId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ZaapRespawnUpdatedMessage(param1);
        }

        public deserializeAs_ZaapRespawnUpdatedMessage(param1: ICustomDataInput): void {
            this.mapId = param1.readInt();
            if (this.mapId < 0) {
                throw new Error('Forbidden value (' + this.mapId + ') on element of ZaapRespawnUpdatedMessage.mapId.');
            }

        }
    }
    export class KamasUpdateMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5537;

        kamasTotal: number;

        constructor() {
            this.kamasTotal = 0;
            super();
        }

        public getMessageId(): number {
            return KamasUpdateMessage.ID;
        }

        public reset(): void {
            this.kamasTotal = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_KamasUpdateMessage(param1);
        }

        public serializeAs_KamasUpdateMessage(param1: ICustomDataOutput): void {
            param1.writeVarInt(this.kamasTotal);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_KamasUpdateMessage(param1);
        }

        public deserializeAs_KamasUpdateMessage(param1: ICustomDataInput): void {
            this.kamasTotal = param1.readVarInt();

        }
    }
    export class ObjectAveragePricesErrorMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6336;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return ObjectAveragePricesErrorMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ObjectAveragePricesErrorMessage(param1);
        }

        public serializeAs_ObjectAveragePricesErrorMessage(param1: ICustomDataOutput): void {

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ObjectAveragePricesErrorMessage(param1);
        }

        public deserializeAs_ObjectAveragePricesErrorMessage(param1: ICustomDataInput): void {

        }
    }
    export class ObjectAveragePricesGetMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6334;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return ObjectAveragePricesGetMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ObjectAveragePricesGetMessage(param1);
        }

        public serializeAs_ObjectAveragePricesGetMessage(param1: ICustomDataOutput): void {

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ObjectAveragePricesGetMessage(param1);
        }

        public deserializeAs_ObjectAveragePricesGetMessage(param1: ICustomDataInput): void {

        }
    }
    export class ObjectAveragePricesMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6335;

        ids: number[];
        avgPrices: number[];

        constructor() {
            this.ids = [];
            this.avgPrices = [];
            super();
        }

        public getMessageId(): number {
            return ObjectAveragePricesMessage.ID;
        }

        public reset(): void {
            this.ids = [];
            this.avgPrices = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ObjectAveragePricesMessage(param1);
        }

        public serializeAs_ObjectAveragePricesMessage(param1: ICustomDataOutput): void {
            param1.writeShort(this.ids.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.ids.length) {
                if (this.ids[_loc2_] < 0) {
                    throw new Error('Forbidden value (' + this.ids[_loc2_] + ') on element 1 (starting at 1) of ids.');
                }
                param1.writeVarShort(this.ids[_loc2_]);
                _loc2_++;
            }
            param1.writeShort(this.avgPrices.length);
            var _loc3_: number = 0;
            while (_loc3_ < this.avgPrices.length) {
                if (this.avgPrices[_loc3_] < 0) {
                    throw new Error('Forbidden value (' + this.avgPrices[_loc3_] + ') on element 2 (starting at 1) of avgPrices.');
                }
                param1.writeVarInt(this.avgPrices[_loc3_]);
                _loc3_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ObjectAveragePricesMessage(param1);
        }

        public deserializeAs_ObjectAveragePricesMessage(param1: ICustomDataInput): void {
            var _loc6_: number = 0;
            var _loc7_: number = 0;
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc6_ = param1.readVarUhShort();
                if (_loc6_ < 0) {
                    throw new Error('Forbidden value (' + _loc6_ + ') on elements of ids.');
                }
                this.ids.push(_loc6_);
                _loc3_++;
            }
            var _loc4_: number = param1.readUnsignedShort();
            var _loc5_: number = 0;
            while (_loc5_ < _loc4_) {
            _loc7_ = param1.readVarUhInt();
                if (_loc7_ < 0) {
                    throw new Error('Forbidden value (' + _loc7_ + ') on elements of avgPrices.');
                }
                this.avgPrices.push(_loc7_);
                _loc5_++;
            }

        }
    }
    export class DecraftResultMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6569;

        results: DecraftedItemStackInfo[];

        constructor() {
            this.results = [];
            super();
        }

        public getMessageId(): number {
            return DecraftResultMessage.ID;
        }

        public reset(): void {
            this.results = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_DecraftResultMessage(param1);
        }

        public serializeAs_DecraftResultMessage(param1: ICustomDataOutput): void {
            param1.writeShort(this.results.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.results.length) {
                (this.results[_loc2_]).serializeAs_DecraftedItemStackInfo(param1);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_DecraftResultMessage(param1);
        }

        public deserializeAs_DecraftResultMessage(param1: ICustomDataInput): void {
            var _loc4_: DecraftedItemStackInfo = null;
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = new DecraftedItemStackInfo();
                _loc4_.deserialize(param1);
                this.results.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class ExchangeAcceptMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5508;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return ExchangeAcceptMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeAcceptMessage(param1);
        }

        public serializeAs_ExchangeAcceptMessage(param1: ICustomDataOutput): void {

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeAcceptMessage(param1);
        }

        public deserializeAs_ExchangeAcceptMessage(param1: ICustomDataInput): void {

        }
    }
    export class ExchangeBidHouseBuyMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5804;

        uid: number;
        qty: number;
        price: number;

        constructor() {
            this.uid = 0;
            this.qty = 0;
            this.price = 0;
            super();
        }

        public getMessageId(): number {
            return ExchangeBidHouseBuyMessage.ID;
        }

        public reset(): void {
            this.uid = 0;
            this.qty = 0;
            this.price = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeBidHouseBuyMessage(param1);
        }

        public serializeAs_ExchangeBidHouseBuyMessage(param1: ICustomDataOutput): void {
            if (this.uid < 0) {
                throw new Error('Forbidden value (' + this.uid + ') on element uid.');
            }
            param1.writeVarInt(this.uid);
            if (this.qty < 0) {
                throw new Error('Forbidden value (' + this.qty + ') on element qty.');
            }
            param1.writeVarInt(this.qty);
            if (this.price < 0) {
                throw new Error('Forbidden value (' + this.price + ') on element price.');
            }
            param1.writeVarInt(this.price);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeBidHouseBuyMessage(param1);
        }

        public deserializeAs_ExchangeBidHouseBuyMessage(param1: ICustomDataInput): void {
            this.uid = param1.readVarUhInt();
            if (this.uid < 0) {
                throw new Error('Forbidden value (' + this.uid + ') on element of ExchangeBidHouseBuyMessage.uid.');
            }
            this.qty = param1.readVarUhInt();
            if (this.qty < 0) {
                throw new Error('Forbidden value (' + this.qty + ') on element of ExchangeBidHouseBuyMessage.qty.');
            }
            this.price = param1.readVarUhInt();
            if (this.price < 0) {
                throw new Error('Forbidden value (' + this.price + ') on element of ExchangeBidHouseBuyMessage.price.');
            }

        }
    }
    export class ExchangeBidHouseBuyResultMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6272;

        uid: number;
        bought: boolean;

        constructor() {
            this.uid = 0;
            this.bought = false;
            super();
        }

        public getMessageId(): number {
            return ExchangeBidHouseBuyResultMessage.ID;
        }

        public reset(): void {
            this.uid = 0;
            this.bought = false;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeBidHouseBuyResultMessage(param1);
        }

        public serializeAs_ExchangeBidHouseBuyResultMessage(param1: ICustomDataOutput): void {
            if (this.uid < 0) {
                throw new Error('Forbidden value (' + this.uid + ') on element uid.');
            }
            param1.writeVarInt(this.uid);
            param1.writeBoolean(this.bought);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeBidHouseBuyResultMessage(param1);
        }

        public deserializeAs_ExchangeBidHouseBuyResultMessage(param1: ICustomDataInput): void {
            this.uid = param1.readVarUhInt();
            if (this.uid < 0) {
                throw new Error('Forbidden value (' + this.uid + ') on element of ExchangeBidHouseBuyResultMessage.uid.');
            }
            this.bought = param1.readBoolean();

        }
    }
    export class ExchangeBidHouseGenericItemAddedMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5947;

        objGenericId: number;

        constructor() {
            this.objGenericId = 0;
            super();
        }

        public getMessageId(): number {
            return ExchangeBidHouseGenericItemAddedMessage.ID;
        }

        public reset(): void {
            this.objGenericId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeBidHouseGenericItemAddedMessage(param1);
        }

        public serializeAs_ExchangeBidHouseGenericItemAddedMessage(param1: ICustomDataOutput): void {
            if (this.objGenericId < 0) {
                throw new Error('Forbidden value (' + this.objGenericId + ') on element objGenericId.');
            }
            param1.writeVarShort(this.objGenericId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeBidHouseGenericItemAddedMessage(param1);
        }

        public deserializeAs_ExchangeBidHouseGenericItemAddedMessage(param1: ICustomDataInput): void {
            this.objGenericId = param1.readVarUhShort();
            if (this.objGenericId < 0) {
                throw new Error('Forbidden value (' + this.objGenericId + ') on element of ExchangeBidHouseGenericItemAddedMessage.objGenericId.');
            }

        }
    }
    export class ExchangeBidHouseGenericItemRemovedMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5948;

        objGenericId: number;

        constructor() {
            this.objGenericId = 0;
            super();
        }

        public getMessageId(): number {
            return ExchangeBidHouseGenericItemRemovedMessage.ID;
        }

        public reset(): void {
            this.objGenericId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeBidHouseGenericItemRemovedMessage(param1);
        }

        public serializeAs_ExchangeBidHouseGenericItemRemovedMessage(param1: ICustomDataOutput): void {
            if (this.objGenericId < 0) {
                throw new Error('Forbidden value (' + this.objGenericId + ') on element objGenericId.');
            }
            param1.writeVarShort(this.objGenericId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeBidHouseGenericItemRemovedMessage(param1);
        }

        public deserializeAs_ExchangeBidHouseGenericItemRemovedMessage(param1: ICustomDataInput): void {
            this.objGenericId = param1.readVarUhShort();
            if (this.objGenericId < 0) {
                throw new Error('Forbidden value (' + this.objGenericId + ') on element of ExchangeBidHouseGenericItemRemovedMessage.objGenericId.');
            }

        }
    }
    export class ExchangeBidHouseInListAddedMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5949;

        itemUID: number;
        objGenericId: number;
        effects: ObjectEffect[];
        prices: number[];

        constructor() {
            this.itemUID = 0;
            this.objGenericId = 0;
            this.effects = [];
            this.prices = [];
            super();
        }

        public getMessageId(): number {
            return ExchangeBidHouseInListAddedMessage.ID;
        }

        public reset(): void {
            this.itemUID = 0;
            this.objGenericId = 0;
            this.effects = [];
            this.prices = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeBidHouseInListAddedMessage(param1);
        }

        public serializeAs_ExchangeBidHouseInListAddedMessage(param1: ICustomDataOutput): void {
            param1.writeInt(this.itemUID);
            param1.writeInt(this.objGenericId);
            param1.writeShort(this.effects.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.effects.length) {
                param1.writeShort((this.effects[_loc2_]).getTypeId());
                (this.effects[_loc2_]).serialize(param1);
                _loc2_++;
            }
            param1.writeShort(this.prices.length);
            var _loc3_: number = 0;
            while (_loc3_ < this.prices.length) {
                if (this.prices[_loc3_] < 0) {
                    throw new Error('Forbidden value (' + this.prices[_loc3_] + ') on element 4 (starting at 1) of prices.');
                }
                param1.writeVarInt(this.prices[_loc3_]);
                _loc3_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeBidHouseInListAddedMessage(param1);
        }

        public deserializeAs_ExchangeBidHouseInListAddedMessage(param1: ICustomDataInput): void {
            var _loc6_: number = 0;
            var _loc7_: ObjectEffect = null;
            var _loc8_: number = 0;
            this.itemUID = param1.readInt();
            this.objGenericId = param1.readInt();
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc6_ = param1.readUnsignedShort();
                _loc7_ = <ObjectEffect>ProtocolTypeManager.getInstance(ObjectEffect, _loc6_);
                _loc7_.deserialize(param1);
                this.effects.push(_loc7_);
                _loc3_++;
            }
            var _loc4_: number = param1.readUnsignedShort();
            var _loc5_: number = 0;
            while (_loc5_ < _loc4_) {
            _loc8_ = param1.readVarUhInt();
                if (_loc8_ < 0) {
                    throw new Error('Forbidden value (' + _loc8_ + ') on elements of prices.');
                }
                this.prices.push(_loc8_);
                _loc5_++;
            }

        }
    }
    export class ExchangeBidHouseInListRemovedMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5950;

        itemUID: number;

        constructor() {
            this.itemUID = 0;
            super();
        }

        public getMessageId(): number {
            return ExchangeBidHouseInListRemovedMessage.ID;
        }

        public reset(): void {
            this.itemUID = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeBidHouseInListRemovedMessage(param1);
        }

        public serializeAs_ExchangeBidHouseInListRemovedMessage(param1: ICustomDataOutput): void {
            param1.writeInt(this.itemUID);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeBidHouseInListRemovedMessage(param1);
        }

        public deserializeAs_ExchangeBidHouseInListRemovedMessage(param1: ICustomDataInput): void {
            this.itemUID = param1.readInt();

        }
    }
    export class ExchangeBidHouseInListUpdatedMessage extends ExchangeBidHouseInListAddedMessage {
        public static ID: number = 6337;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return ExchangeBidHouseInListUpdatedMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeBidHouseInListUpdatedMessage(param1);
        }

        public serializeAs_ExchangeBidHouseInListUpdatedMessage(param1: ICustomDataOutput): void {
            super.serializeAs_ExchangeBidHouseInListAddedMessage(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeBidHouseInListUpdatedMessage(param1);
        }

        public deserializeAs_ExchangeBidHouseInListUpdatedMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);

        }
    }
    export class ExchangeBidHouseItemAddOkMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5945;

        itemInfo: ObjectItemToSellInBid;

        constructor() {
            this.itemInfo = new ObjectItemToSellInBid();
            super();
        }

        public getMessageId(): number {
            return ExchangeBidHouseItemAddOkMessage.ID;
        }

        public reset(): void {
            this.itemInfo = new ObjectItemToSellInBid();
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeBidHouseItemAddOkMessage(param1);
        }

        public serializeAs_ExchangeBidHouseItemAddOkMessage(param1: ICustomDataOutput): void {
            this.itemInfo.serializeAs_ObjectItemToSellInBid(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeBidHouseItemAddOkMessage(param1);
        }

        public deserializeAs_ExchangeBidHouseItemAddOkMessage(param1: ICustomDataInput): void {
            this.itemInfo = new ObjectItemToSellInBid();
            this.itemInfo.deserialize(param1);

        }
    }
    export class ExchangeBidHouseItemRemoveOkMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5946;

        sellerId: number;

        constructor() {
            this.sellerId = 0;
            super();
        }

        public getMessageId(): number {
            return ExchangeBidHouseItemRemoveOkMessage.ID;
        }

        public reset(): void {
            this.sellerId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeBidHouseItemRemoveOkMessage(param1);
        }

        public serializeAs_ExchangeBidHouseItemRemoveOkMessage(param1: ICustomDataOutput): void {
            param1.writeInt(this.sellerId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeBidHouseItemRemoveOkMessage(param1);
        }

        public deserializeAs_ExchangeBidHouseItemRemoveOkMessage(param1: ICustomDataInput): void {
            this.sellerId = param1.readInt();

        }
    }
    export class ExchangeBidHouseListMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5807;

        id: number;

        constructor() {
            this.id = 0;
            super();
        }

        public getMessageId(): number {
            return ExchangeBidHouseListMessage.ID;
        }

        public reset(): void {
            this.id = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeBidHouseListMessage(param1);
        }

        public serializeAs_ExchangeBidHouseListMessage(param1: ICustomDataOutput): void {
            if (this.id < 0) {
                throw new Error('Forbidden value (' + this.id + ') on element id.');
            }
            param1.writeVarShort(this.id);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeBidHouseListMessage(param1);
        }

        public deserializeAs_ExchangeBidHouseListMessage(param1: ICustomDataInput): void {
            this.id = param1.readVarUhShort();
            if (this.id < 0) {
                throw new Error('Forbidden value (' + this.id + ') on element of ExchangeBidHouseListMessage.id.');
            }

        }
    }
    export class ExchangeBidHousePriceMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5805;

        genId: number;

        constructor() {
            this.genId = 0;
            super();
        }

        public getMessageId(): number {
            return ExchangeBidHousePriceMessage.ID;
        }

        public reset(): void {
            this.genId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeBidHousePriceMessage(param1);
        }

        public serializeAs_ExchangeBidHousePriceMessage(param1: ICustomDataOutput): void {
            if (this.genId < 0) {
                throw new Error('Forbidden value (' + this.genId + ') on element genId.');
            }
            param1.writeVarShort(this.genId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeBidHousePriceMessage(param1);
        }

        public deserializeAs_ExchangeBidHousePriceMessage(param1: ICustomDataInput): void {
            this.genId = param1.readVarUhShort();
            if (this.genId < 0) {
                throw new Error('Forbidden value (' + this.genId + ') on element of ExchangeBidHousePriceMessage.genId.');
            }

        }
    }
    export class ExchangeBidHouseSearchMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5806;

        type: number;
        genId: number;

        constructor() {
            this.type = 0;
            this.genId = 0;
            super();
        }

        public getMessageId(): number {
            return ExchangeBidHouseSearchMessage.ID;
        }

        public reset(): void {
            this.type = 0;
            this.genId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeBidHouseSearchMessage(param1);
        }

        public serializeAs_ExchangeBidHouseSearchMessage(param1: ICustomDataOutput): void {
            if (this.type < 0) {
                throw new Error('Forbidden value (' + this.type + ') on element type.');
            }
            param1.writeVarInt(this.type);
            if (this.genId < 0) {
                throw new Error('Forbidden value (' + this.genId + ') on element genId.');
            }
            param1.writeVarShort(this.genId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeBidHouseSearchMessage(param1);
        }

        public deserializeAs_ExchangeBidHouseSearchMessage(param1: ICustomDataInput): void {
            this.type = param1.readVarUhInt();
            if (this.type < 0) {
                throw new Error('Forbidden value (' + this.type + ') on element of ExchangeBidHouseSearchMessage.type.');
            }
            this.genId = param1.readVarUhShort();
            if (this.genId < 0) {
                throw new Error('Forbidden value (' + this.genId + ') on element of ExchangeBidHouseSearchMessage.genId.');
            }

        }
    }
    export class ExchangeBidHouseTypeMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5803;

        type: number;

        constructor() {
            this.type = 0;
            super();
        }

        public getMessageId(): number {
            return ExchangeBidHouseTypeMessage.ID;
        }

        public reset(): void {
            this.type = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeBidHouseTypeMessage(param1);
        }

        public serializeAs_ExchangeBidHouseTypeMessage(param1: ICustomDataOutput): void {
            if (this.type < 0) {
                throw new Error('Forbidden value (' + this.type + ') on element type.');
            }
            param1.writeVarInt(this.type);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeBidHouseTypeMessage(param1);
        }

        public deserializeAs_ExchangeBidHouseTypeMessage(param1: ICustomDataInput): void {
            this.type = param1.readVarUhInt();
            if (this.type < 0) {
                throw new Error('Forbidden value (' + this.type + ') on element of ExchangeBidHouseTypeMessage.type.');
            }

        }
    }
    export class ExchangeBidPriceMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5755;

        genericId: number;
        averagePrice: number;

        constructor() {
            this.genericId = 0;
            this.averagePrice = 0;
            super();
        }

        public getMessageId(): number {
            return ExchangeBidPriceMessage.ID;
        }

        public reset(): void {
            this.genericId = 0;
            this.averagePrice = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeBidPriceMessage(param1);
        }

        public serializeAs_ExchangeBidPriceMessage(param1: ICustomDataOutput): void {
            if (this.genericId < 0) {
                throw new Error('Forbidden value (' + this.genericId + ') on element genericId.');
            }
            param1.writeVarShort(this.genericId);
            param1.writeVarInt(this.averagePrice);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeBidPriceMessage(param1);
        }

        public deserializeAs_ExchangeBidPriceMessage(param1: ICustomDataInput): void {
            this.genericId = param1.readVarUhShort();
            if (this.genericId < 0) {
                throw new Error('Forbidden value (' + this.genericId + ') on element of ExchangeBidPriceMessage.genericId.');
            }
            this.averagePrice = param1.readVarInt();

        }
    }
    export class ExchangeBidPriceForSellerMessage extends ExchangeBidPriceMessage {
        public static ID: number = 6464;

        allIdentical: boolean;
        minimalPrices: number[];

        constructor() {
            this.allIdentical = false;
            this.minimalPrices = [];
            super();
        }

        public getMessageId(): number {
            return ExchangeBidPriceForSellerMessage.ID;
        }

        public reset(): void {
            this.allIdentical = false;
            this.minimalPrices = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeBidPriceForSellerMessage(param1);
        }

        public serializeAs_ExchangeBidPriceForSellerMessage(param1: ICustomDataOutput): void {
            super.serializeAs_ExchangeBidPriceMessage(param1);
            param1.writeBoolean(this.allIdentical);
            param1.writeShort(this.minimalPrices.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.minimalPrices.length) {
                if (this.minimalPrices[_loc2_] < 0) {
                    throw new Error('Forbidden value (' + this.minimalPrices[_loc2_] + ') on element 2 (starting at 1) of minimalPrices.');
                }
                param1.writeVarInt(this.minimalPrices[_loc2_]);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeBidPriceForSellerMessage(param1);
        }

        public deserializeAs_ExchangeBidPriceForSellerMessage(param1: ICustomDataInput): void {
            var _loc4_: number = 0;
            super.deserialize(param1);
            this.allIdentical = param1.readBoolean();
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = param1.readVarUhInt();
                if (_loc4_ < 0) {
                    throw new Error('Forbidden value (' + _loc4_ + ') on elements of minimalPrices.');
                }
                this.minimalPrices.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class ExchangeBidSearchOkMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5802;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return ExchangeBidSearchOkMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeBidSearchOkMessage(param1);
        }

        public serializeAs_ExchangeBidSearchOkMessage(param1: ICustomDataOutput): void {

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeBidSearchOkMessage(param1);
        }

        public deserializeAs_ExchangeBidSearchOkMessage(param1: ICustomDataInput): void {

        }
    }
    export class ExchangeBuyMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5774;

        objectToBuyId: number;
        quantity: number;

        constructor() {
            this.objectToBuyId = 0;
            this.quantity = 0;
            super();
        }

        public getMessageId(): number {
            return ExchangeBuyMessage.ID;
        }

        public reset(): void {
            this.objectToBuyId = 0;
            this.quantity = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeBuyMessage(param1);
        }

        public serializeAs_ExchangeBuyMessage(param1: ICustomDataOutput): void {
            if (this.objectToBuyId < 0) {
                throw new Error('Forbidden value (' + this.objectToBuyId + ') on element objectToBuyId.');
            }
            param1.writeVarInt(this.objectToBuyId);
            if (this.quantity < 0) {
                throw new Error('Forbidden value (' + this.quantity + ') on element quantity.');
            }
            param1.writeVarInt(this.quantity);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeBuyMessage(param1);
        }

        public deserializeAs_ExchangeBuyMessage(param1: ICustomDataInput): void {
            this.objectToBuyId = param1.readVarUhInt();
            if (this.objectToBuyId < 0) {
                throw new Error('Forbidden value (' + this.objectToBuyId + ') on element of ExchangeBuyMessage.objectToBuyId.');
            }
            this.quantity = param1.readVarUhInt();
            if (this.quantity < 0) {
                throw new Error('Forbidden value (' + this.quantity + ') on element of ExchangeBuyMessage.quantity.');
            }

        }
    }
    export class ExchangeBuyOkMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5759;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return ExchangeBuyOkMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeBuyOkMessage(param1);
        }

        public serializeAs_ExchangeBuyOkMessage(param1: ICustomDataOutput): void {

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeBuyOkMessage(param1);
        }

        public deserializeAs_ExchangeBuyOkMessage(param1: ICustomDataInput): void {

        }
    }
    export class ExchangeCraftCountModifiedMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6595;

        count: number;

        constructor() {
            this.count = 0;
            super();
        }

        public getMessageId(): number {
            return ExchangeCraftCountModifiedMessage.ID;
        }

        public reset(): void {
            this.count = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeCraftCountModifiedMessage(param1);
        }

        public serializeAs_ExchangeCraftCountModifiedMessage(param1: ICustomDataOutput): void {
            param1.writeVarInt(this.count);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeCraftCountModifiedMessage(param1);
        }

        public deserializeAs_ExchangeCraftCountModifiedMessage(param1: ICustomDataInput): void {
            this.count = param1.readVarInt();

        }
    }
    export class ExchangeCraftCountRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6597;

        count: number;

        constructor() {
            this.count = 0;
            super();
        }

        public getMessageId(): number {
            return ExchangeCraftCountRequestMessage.ID;
        }

        public reset(): void {
            this.count = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeCraftCountRequestMessage(param1);
        }

        public serializeAs_ExchangeCraftCountRequestMessage(param1: ICustomDataOutput): void {
            param1.writeVarInt(this.count);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeCraftCountRequestMessage(param1);
        }

        public deserializeAs_ExchangeCraftCountRequestMessage(param1: ICustomDataInput): void {
            this.count = param1.readVarInt();

        }
    }
    export class ExchangeCraftResultMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5790;

        craftResult: number;

        constructor() {
            this.craftResult = 0;
            super();
        }

        public getMessageId(): number {
            return ExchangeCraftResultMessage.ID;
        }

        public reset(): void {
            this.craftResult = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeCraftResultMessage(param1);
        }

        public serializeAs_ExchangeCraftResultMessage(param1: ICustomDataOutput): void {
            param1.writeByte(this.craftResult);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeCraftResultMessage(param1);
        }

        public deserializeAs_ExchangeCraftResultMessage(param1: ICustomDataInput): void {
            this.craftResult = param1.readByte();
            if (this.craftResult < 0) {
                throw new Error('Forbidden value (' + this.craftResult + ') on element of ExchangeCraftResultMessage.craftResult.');
            }

        }
    }
    export class ExchangeCraftResultWithObjectIdMessage extends ExchangeCraftResultMessage {
        public static ID: number = 6000;

        objectGenericId: number;

        constructor() {
            this.objectGenericId = 0;
            super();
        }

        public getMessageId(): number {
            return ExchangeCraftResultWithObjectIdMessage.ID;
        }

        public reset(): void {
            this.objectGenericId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeCraftResultWithObjectIdMessage(param1);
        }

        public serializeAs_ExchangeCraftResultWithObjectIdMessage(param1: ICustomDataOutput): void {
            super.serializeAs_ExchangeCraftResultMessage(param1);
            if (this.objectGenericId < 0) {
                throw new Error('Forbidden value (' + this.objectGenericId + ') on element objectGenericId.');
            }
            param1.writeVarShort(this.objectGenericId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeCraftResultWithObjectIdMessage(param1);
        }

        public deserializeAs_ExchangeCraftResultWithObjectIdMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.objectGenericId = param1.readVarUhShort();
            if (this.objectGenericId < 0) {
                throw new Error('Forbidden value (' + this.objectGenericId + ') on element of ExchangeCraftResultWithObjectIdMessage.objectGenericId.');
            }

        }
    }
    export class ExchangeCraftInformationObjectMessage extends ExchangeCraftResultWithObjectIdMessage {
        public static ID: number = 5794;

        playerId: number;

        constructor() {
            this.playerId = 0;
            super();
        }

        public getMessageId(): number {
            return ExchangeCraftInformationObjectMessage.ID;
        }

        public reset(): void {
            this.playerId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeCraftInformationObjectMessage(param1);
        }

        public serializeAs_ExchangeCraftInformationObjectMessage(param1: ICustomDataOutput): void {
            super.serializeAs_ExchangeCraftResultWithObjectIdMessage(param1);
            if (this.playerId < 0) {
                throw new Error('Forbidden value (' + this.playerId + ') on element playerId.');
            }
            param1.writeVarInt(this.playerId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeCraftInformationObjectMessage(param1);
        }

        public deserializeAs_ExchangeCraftInformationObjectMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.playerId = param1.readVarUhInt();
            if (this.playerId < 0) {
                throw new Error('Forbidden value (' + this.playerId + ') on element of ExchangeCraftInformationObjectMessage.playerId.');
            }

        }
    }
    export class ExchangeCraftPaymentModificationRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6579;

        quantity: number;

        constructor() {
            this.quantity = 0;
            super();
        }

        public getMessageId(): number {
            return ExchangeCraftPaymentModificationRequestMessage.ID;
        }

        public reset(): void {
            this.quantity = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeCraftPaymentModificationRequestMessage(param1);
        }

        public serializeAs_ExchangeCraftPaymentModificationRequestMessage(param1: ICustomDataOutput): void {
            if (this.quantity < 0) {
                throw new Error('Forbidden value (' + this.quantity + ') on element quantity.');
            }
            param1.writeVarInt(this.quantity);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeCraftPaymentModificationRequestMessage(param1);
        }

        public deserializeAs_ExchangeCraftPaymentModificationRequestMessage(param1: ICustomDataInput): void {
            this.quantity = param1.readVarUhInt();
            if (this.quantity < 0) {
                throw new Error('Forbidden value (' + this.quantity + ') on element of ExchangeCraftPaymentModificationRequestMessage.quantity.');
            }

        }
    }
    export class ExchangeCraftPaymentModifiedMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6578;

        goldSum: number;

        constructor() {
            this.goldSum = 0;
            super();
        }

        public getMessageId(): number {
            return ExchangeCraftPaymentModifiedMessage.ID;
        }

        public reset(): void {
            this.goldSum = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeCraftPaymentModifiedMessage(param1);
        }

        public serializeAs_ExchangeCraftPaymentModifiedMessage(param1: ICustomDataOutput): void {
            if (this.goldSum < 0) {
                throw new Error('Forbidden value (' + this.goldSum + ') on element goldSum.');
            }
            param1.writeVarInt(this.goldSum);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeCraftPaymentModifiedMessage(param1);
        }

        public deserializeAs_ExchangeCraftPaymentModifiedMessage(param1: ICustomDataInput): void {
            this.goldSum = param1.readVarUhInt();
            if (this.goldSum < 0) {
                throw new Error('Forbidden value (' + this.goldSum + ') on element of ExchangeCraftPaymentModifiedMessage.goldSum.');
            }

        }
    }
    export class ExchangeCraftResultWithObjectDescMessage extends ExchangeCraftResultMessage {
        public static ID: number = 5999;

        objectInfo: ObjectItemNotInContainer;

        constructor() {
            this.objectInfo = new ObjectItemNotInContainer();
            super();
        }

        public getMessageId(): number {
            return ExchangeCraftResultWithObjectDescMessage.ID;
        }

        public reset(): void {
            this.objectInfo = new ObjectItemNotInContainer();
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeCraftResultWithObjectDescMessage(param1);
        }

        public serializeAs_ExchangeCraftResultWithObjectDescMessage(param1: ICustomDataOutput): void {
            super.serializeAs_ExchangeCraftResultMessage(param1);
            this.objectInfo.serializeAs_ObjectItemNotInContainer(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeCraftResultWithObjectDescMessage(param1);
        }

        public deserializeAs_ExchangeCraftResultWithObjectDescMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.objectInfo = new ObjectItemNotInContainer();
            this.objectInfo.deserialize(param1);

        }
    }
    export class ExchangeCraftResultMagicWithObjectDescMessage extends ExchangeCraftResultWithObjectDescMessage {
        public static ID: number = 6188;

        magicPoolStatus: number;

        constructor() {
            this.magicPoolStatus = 0;
            super();
        }

        public getMessageId(): number {
            return ExchangeCraftResultMagicWithObjectDescMessage.ID;
        }

        public reset(): void {
            this.magicPoolStatus = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeCraftResultMagicWithObjectDescMessage(param1);
        }

        public serializeAs_ExchangeCraftResultMagicWithObjectDescMessage(param1: ICustomDataOutput): void {
            super.serializeAs_ExchangeCraftResultWithObjectDescMessage(param1);
            param1.writeByte(this.magicPoolStatus);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeCraftResultMagicWithObjectDescMessage(param1);
        }

        public deserializeAs_ExchangeCraftResultMagicWithObjectDescMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.magicPoolStatus = param1.readByte();

        }
    }
    export class ExchangeCrafterJobLevelupMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6598;

        crafterJobLevel: number;

        constructor() {
            this.crafterJobLevel = 0;
            super();
        }

        public getMessageId(): number {
            return ExchangeCrafterJobLevelupMessage.ID;
        }

        public reset(): void {
            this.crafterJobLevel = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeCrafterJobLevelupMessage(param1);
        }

        public serializeAs_ExchangeCrafterJobLevelupMessage(param1: ICustomDataOutput): void {
            if (this.crafterJobLevel < 0 || this.crafterJobLevel > 255) {
                throw new Error('Forbidden value (' + this.crafterJobLevel + ') on element crafterJobLevel.');
            }
            param1.writeByte(this.crafterJobLevel);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeCrafterJobLevelupMessage(param1);
        }

        public deserializeAs_ExchangeCrafterJobLevelupMessage(param1: ICustomDataInput): void {
            this.crafterJobLevel = param1.readUnsignedByte();
            if (this.crafterJobLevel < 0 || this.crafterJobLevel > 255) {
                throw new Error('Forbidden value (' + this.crafterJobLevel + ') on element of ExchangeCrafterJobLevelupMessage.crafterJobLevel.');
            }

        }
    }
    export class ExchangeErrorMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5513;

        errorType: number;

        constructor() {
            this.errorType = 0;
            super();
        }

        public getMessageId(): number {
            return ExchangeErrorMessage.ID;
        }

        public reset(): void {
            this.errorType = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeErrorMessage(param1);
        }

        public serializeAs_ExchangeErrorMessage(param1: ICustomDataOutput): void {
            param1.writeByte(this.errorType);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeErrorMessage(param1);
        }

        public deserializeAs_ExchangeErrorMessage(param1: ICustomDataInput): void {
            this.errorType = param1.readByte();

        }
    }
    export class ExchangeGuildTaxCollectorGetMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5762;

        collectorName: string;
        worldX: number;
        worldY: number;
        mapId: number;
        subAreaId: number;
        userName: string;
        experience: number;
        objectsInfos: ObjectItemGenericQuantity[];

        constructor() {
            this.collectorName = '';
            this.worldX = 0;
            this.worldY = 0;
            this.mapId = 0;
            this.subAreaId = 0;
            this.userName = '';
            this.experience = 0;
            this.objectsInfos = [];
            super();
        }

        public getMessageId(): number {
            return ExchangeGuildTaxCollectorGetMessage.ID;
        }

        public reset(): void {
            this.collectorName = '';
            this.worldX = 0;
            this.worldY = 0;
            this.mapId = 0;
            this.subAreaId = 0;
            this.userName = '';
            this.experience = 0;
            this.objectsInfos = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeGuildTaxCollectorGetMessage(param1);
        }

        public serializeAs_ExchangeGuildTaxCollectorGetMessage(param1: ICustomDataOutput): void {
            param1.writeUTF(this.collectorName);
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error('Forbidden value (' + this.worldX + ') on element worldX.');
            }
            param1.writeShort(this.worldX);
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error('Forbidden value (' + this.worldY + ') on element worldY.');
            }
            param1.writeShort(this.worldY);
            param1.writeInt(this.mapId);
            if (this.subAreaId < 0) {
                throw new Error('Forbidden value (' + this.subAreaId + ') on element subAreaId.');
            }
            param1.writeVarShort(this.subAreaId);
            param1.writeUTF(this.userName);
            if (this.experience < -9.007199254740992E15 || this.experience > 9.007199254740992E15) {
                throw new Error('Forbidden value (' + this.experience + ') on element experience.');
            }
            param1.writeDouble(this.experience);
            param1.writeShort(this.objectsInfos.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.objectsInfos.length) {
                (this.objectsInfos[_loc2_]).serializeAs_ObjectItemGenericQuantity(param1);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeGuildTaxCollectorGetMessage(param1);
        }

        public deserializeAs_ExchangeGuildTaxCollectorGetMessage(param1: ICustomDataInput): void {
            var _loc4_: ObjectItemGenericQuantity = null;
            this.collectorName = param1.readUTF();
            this.worldX = param1.readShort();
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error('Forbidden value (' + this.worldX + ') on element of ExchangeGuildTaxCollectorGetMessage.worldX.');
            }
            this.worldY = param1.readShort();
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error('Forbidden value (' + this.worldY + ') on element of ExchangeGuildTaxCollectorGetMessage.worldY.');
            }
            this.mapId = param1.readInt();
            this.subAreaId = param1.readVarUhShort();
            if (this.subAreaId < 0) {
                throw new Error('Forbidden value (' + this.subAreaId + ') on element of ExchangeGuildTaxCollectorGetMessage.subAreaId.');
            }
            this.userName = param1.readUTF();
            this.experience = param1.readDouble();
            if (this.experience < -9.007199254740992E15 || this.experience > 9.007199254740992E15) {
                throw new Error('Forbidden value (' + this.experience + ') on element of ExchangeGuildTaxCollectorGetMessage.experience.');
            }
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = new ObjectItemGenericQuantity();
                _loc4_.deserialize(param1);
                this.objectsInfos.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class ExchangeHandleMountsStableMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6562;

        actionType: number;
        ridesId: number[];

        constructor() {
            this.actionType = 0;
            this.ridesId = [];
            super();
        }

        public getMessageId(): number {
            return ExchangeHandleMountsStableMessage.ID;
        }

        public reset(): void {
            this.actionType = 0;
            this.ridesId = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeHandleMountsStableMessage(param1);
        }

        public serializeAs_ExchangeHandleMountsStableMessage(param1: ICustomDataOutput): void {
            param1.writeByte(this.actionType);
            param1.writeShort(this.ridesId.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.ridesId.length) {
                if (this.ridesId[_loc2_] < 0) {
                    throw new Error('Forbidden value (' + this.ridesId[_loc2_] + ') on element 2 (starting at 1) of ridesId.');
                }
                param1.writeVarInt(this.ridesId[_loc2_]);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeHandleMountsStableMessage(param1);
        }

        public deserializeAs_ExchangeHandleMountsStableMessage(param1: ICustomDataInput): void {
            var _loc4_: number = 0;
            this.actionType = param1.readByte();
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = param1.readVarUhInt();
                if (_loc4_ < 0) {
                    throw new Error('Forbidden value (' + _loc4_ + ') on elements of ridesId.');
                }
                this.ridesId.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class ExchangeIsReadyMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5509;

        id: number;
        ready: boolean;

        constructor() {
            this.id = 0;
            this.ready = false;
            super();
        }

        public getMessageId(): number {
            return ExchangeIsReadyMessage.ID;
        }

        public reset(): void {
            this.id = 0;
            this.ready = false;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeIsReadyMessage(param1);
        }

        public serializeAs_ExchangeIsReadyMessage(param1: ICustomDataOutput): void {
            if (this.id < 0) {
                throw new Error('Forbidden value (' + this.id + ') on element id.');
            }
            param1.writeVarInt(this.id);
            param1.writeBoolean(this.ready);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeIsReadyMessage(param1);
        }

        public deserializeAs_ExchangeIsReadyMessage(param1: ICustomDataInput): void {
            this.id = param1.readVarUhInt();
            if (this.id < 0) {
                throw new Error('Forbidden value (' + this.id + ') on element of ExchangeIsReadyMessage.id.');
            }
            this.ready = param1.readBoolean();

        }
    }
    export class ExchangeItemAutoCraftStopedMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5810;

        reason: number;

        constructor() {
            this.reason = 0;
            super();
        }

        public getMessageId(): number {
            return ExchangeItemAutoCraftStopedMessage.ID;
        }

        public reset(): void {
            this.reason = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeItemAutoCraftStopedMessage(param1);
        }

        public serializeAs_ExchangeItemAutoCraftStopedMessage(param1: ICustomDataOutput): void {
            param1.writeByte(this.reason);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeItemAutoCraftStopedMessage(param1);
        }

        public deserializeAs_ExchangeItemAutoCraftStopedMessage(param1: ICustomDataInput): void {
            this.reason = param1.readByte();

        }
    }
    export class ExchangeLeaveMessage extends LeaveDialogMessage {
        public static ID: number = 5628;

        success: boolean;

        constructor() {
            this.success = false;
            super();
        }

        public getMessageId(): number {
            return ExchangeLeaveMessage.ID;
        }

        public reset(): void {
            this.success = false;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeLeaveMessage(param1);
        }

        public serializeAs_ExchangeLeaveMessage(param1: ICustomDataOutput): void {
            super.serializeAs_LeaveDialogMessage(param1);
            param1.writeBoolean(this.success);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeLeaveMessage(param1);
        }

        public deserializeAs_ExchangeLeaveMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.success = param1.readBoolean();

        }
    }
    export class ExchangeMountFreeFromPaddockMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6055;

        name: string;
        worldX: number;
        worldY: number;
        liberator: string;

        constructor() {
            this.name = '';
            this.worldX = 0;
            this.worldY = 0;
            this.liberator = '';
            super();
        }

        public getMessageId(): number {
            return ExchangeMountFreeFromPaddockMessage.ID;
        }

        public reset(): void {
            this.name = '';
            this.worldX = 0;
            this.worldY = 0;
            this.liberator = '';
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeMountFreeFromPaddockMessage(param1);
        }

        public serializeAs_ExchangeMountFreeFromPaddockMessage(param1: ICustomDataOutput): void {
            param1.writeUTF(this.name);
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error('Forbidden value (' + this.worldX + ') on element worldX.');
            }
            param1.writeShort(this.worldX);
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error('Forbidden value (' + this.worldY + ') on element worldY.');
            }
            param1.writeShort(this.worldY);
            param1.writeUTF(this.liberator);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeMountFreeFromPaddockMessage(param1);
        }

        public deserializeAs_ExchangeMountFreeFromPaddockMessage(param1: ICustomDataInput): void {
            this.name = param1.readUTF();
            this.worldX = param1.readShort();
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error('Forbidden value (' + this.worldX + ') on element of ExchangeMountFreeFromPaddockMessage.worldX.');
            }
            this.worldY = param1.readShort();
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error('Forbidden value (' + this.worldY + ') on element of ExchangeMountFreeFromPaddockMessage.worldY.');
            }
            this.liberator = param1.readUTF();

        }
    }
    export class ExchangeMountStableErrorMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5981;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return ExchangeMountStableErrorMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeMountStableErrorMessage(param1);
        }

        public serializeAs_ExchangeMountStableErrorMessage(param1: ICustomDataOutput): void {

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeMountStableErrorMessage(param1);
        }

        public deserializeAs_ExchangeMountStableErrorMessage(param1: ICustomDataInput): void {

        }
    }
    export class ExchangeMountSterilizeFromPaddockMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6056;

        name: string;
        worldX: number;
        worldY: number;
        sterilizator: string;

        constructor() {
            this.name = '';
            this.worldX = 0;
            this.worldY = 0;
            this.sterilizator = '';
            super();
        }

        public getMessageId(): number {
            return ExchangeMountSterilizeFromPaddockMessage.ID;
        }

        public reset(): void {
            this.name = '';
            this.worldX = 0;
            this.worldY = 0;
            this.sterilizator = '';
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeMountSterilizeFromPaddockMessage(param1);
        }

        public serializeAs_ExchangeMountSterilizeFromPaddockMessage(param1: ICustomDataOutput): void {
            param1.writeUTF(this.name);
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error('Forbidden value (' + this.worldX + ') on element worldX.');
            }
            param1.writeShort(this.worldX);
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error('Forbidden value (' + this.worldY + ') on element worldY.');
            }
            param1.writeShort(this.worldY);
            param1.writeUTF(this.sterilizator);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeMountSterilizeFromPaddockMessage(param1);
        }

        public deserializeAs_ExchangeMountSterilizeFromPaddockMessage(param1: ICustomDataInput): void {
            this.name = param1.readUTF();
            this.worldX = param1.readShort();
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error('Forbidden value (' + this.worldX + ') on element of ExchangeMountSterilizeFromPaddockMessage.worldX.');
            }
            this.worldY = param1.readShort();
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error('Forbidden value (' + this.worldY + ') on element of ExchangeMountSterilizeFromPaddockMessage.worldY.');
            }
            this.sterilizator = param1.readUTF();

        }
    }
    export class ExchangeMountsPaddockAddMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6561;

        mountDescription: MountClientData[];

        constructor() {
            this.mountDescription = [];
            super();
        }

        public getMessageId(): number {
            return ExchangeMountsPaddockAddMessage.ID;
        }

        public reset(): void {
            this.mountDescription = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeMountsPaddockAddMessage(param1);
        }

        public serializeAs_ExchangeMountsPaddockAddMessage(param1: ICustomDataOutput): void {
            param1.writeShort(this.mountDescription.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.mountDescription.length) {
                (this.mountDescription[_loc2_]).serializeAs_MountClientData(param1);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeMountsPaddockAddMessage(param1);
        }

        public deserializeAs_ExchangeMountsPaddockAddMessage(param1: ICustomDataInput): void {
            var _loc4_: MountClientData = null;
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = new MountClientData();
                _loc4_.deserialize(param1);
                this.mountDescription.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class ExchangeMountsPaddockRemoveMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6559;

        mountsId: number[];

        constructor() {
            this.mountsId = [];
            super();
        }

        public getMessageId(): number {
            return ExchangeMountsPaddockRemoveMessage.ID;
        }

        public reset(): void {
            this.mountsId = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeMountsPaddockRemoveMessage(param1);
        }

        public serializeAs_ExchangeMountsPaddockRemoveMessage(param1: ICustomDataOutput): void {
            param1.writeShort(this.mountsId.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.mountsId.length) {
                param1.writeVarInt(this.mountsId[_loc2_]);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeMountsPaddockRemoveMessage(param1);
        }

        public deserializeAs_ExchangeMountsPaddockRemoveMessage(param1: ICustomDataInput): void {
            var _loc4_: any = 0;
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = param1.readVarInt();
                this.mountsId.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class ExchangeMountsStableAddMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6555;

        mountDescription: MountClientData[];

        constructor() {
            this.mountDescription = [];
            super();
        }

        public getMessageId(): number {
            return ExchangeMountsStableAddMessage.ID;
        }

        public reset(): void {
            this.mountDescription = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeMountsStableAddMessage(param1);
        }

        public serializeAs_ExchangeMountsStableAddMessage(param1: ICustomDataOutput): void {
            param1.writeShort(this.mountDescription.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.mountDescription.length) {
                (this.mountDescription[_loc2_]).serializeAs_MountClientData(param1);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeMountsStableAddMessage(param1);
        }

        public deserializeAs_ExchangeMountsStableAddMessage(param1: ICustomDataInput): void {
            var _loc4_: MountClientData = null;
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = new MountClientData();
                _loc4_.deserialize(param1);
                this.mountDescription.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class ExchangeMountsStableBornAddMessage extends ExchangeMountsStableAddMessage {
        public static ID: number = 6557;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return ExchangeMountsStableBornAddMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeMountsStableBornAddMessage(param1);
        }

        public serializeAs_ExchangeMountsStableBornAddMessage(param1: ICustomDataOutput): void {
            super.serializeAs_ExchangeMountsStableAddMessage(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeMountsStableBornAddMessage(param1);
        }

        public deserializeAs_ExchangeMountsStableBornAddMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);

        }
    }
    export class ExchangeMountsStableRemoveMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6556;

        mountsId: number[];

        constructor() {
            this.mountsId = [];
            super();
        }

        public getMessageId(): number {
            return ExchangeMountsStableRemoveMessage.ID;
        }

        public reset(): void {
            this.mountsId = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeMountsStableRemoveMessage(param1);
        }

        public serializeAs_ExchangeMountsStableRemoveMessage(param1: ICustomDataOutput): void {
            param1.writeShort(this.mountsId.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.mountsId.length) {
                param1.writeVarInt(this.mountsId[_loc2_]);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeMountsStableRemoveMessage(param1);
        }

        public deserializeAs_ExchangeMountsStableRemoveMessage(param1: ICustomDataInput): void {
            var _loc4_: any = 0;
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = param1.readVarInt();
                this.mountsId.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class ExchangeMountsTakenFromPaddockMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6554;

        name: string;
        worldX: number;
        worldY: number;
        ownername: string;

        constructor() {
            this.name = '';
            this.worldX = 0;
            this.worldY = 0;
            this.ownername = '';
            super();
        }

        public getMessageId(): number {
            return ExchangeMountsTakenFromPaddockMessage.ID;
        }

        public reset(): void {
            this.name = '';
            this.worldX = 0;
            this.worldY = 0;
            this.ownername = '';
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeMountsTakenFromPaddockMessage(param1);
        }

        public serializeAs_ExchangeMountsTakenFromPaddockMessage(param1: ICustomDataOutput): void {
            param1.writeUTF(this.name);
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error('Forbidden value (' + this.worldX + ') on element worldX.');
            }
            param1.writeShort(this.worldX);
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error('Forbidden value (' + this.worldY + ') on element worldY.');
            }
            param1.writeShort(this.worldY);
            param1.writeUTF(this.ownername);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeMountsTakenFromPaddockMessage(param1);
        }

        public deserializeAs_ExchangeMountsTakenFromPaddockMessage(param1: ICustomDataInput): void {
            this.name = param1.readUTF();
            this.worldX = param1.readShort();
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error('Forbidden value (' + this.worldX + ') on element of ExchangeMountsTakenFromPaddockMessage.worldX.');
            }
            this.worldY = param1.readShort();
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error('Forbidden value (' + this.worldY + ') on element of ExchangeMountsTakenFromPaddockMessage.worldY.');
            }
            this.ownername = param1.readUTF();

        }
    }
    export class ExchangeObjectMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5515;

        remote: boolean;

        constructor() {
            this.remote = false;
            super();
        }

        public getMessageId(): number {
            return ExchangeObjectMessage.ID;
        }

        public reset(): void {
            this.remote = false;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeObjectMessage(param1);
        }

        public serializeAs_ExchangeObjectMessage(param1: ICustomDataOutput): void {
            param1.writeBoolean(this.remote);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeObjectMessage(param1);
        }

        public deserializeAs_ExchangeObjectMessage(param1: ICustomDataInput): void {
            this.remote = param1.readBoolean();

        }
    }
    export class ExchangeObjectAddedMessage extends ExchangeObjectMessage {
        public static ID: number = 5516;

        object: ObjectItem;

        constructor() {
            this.object = new ObjectItem();
            super();
        }

        public getMessageId(): number {
            return ExchangeObjectAddedMessage.ID;
        }

        public reset(): void {
            this.object = new ObjectItem();
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeObjectAddedMessage(param1);
        }

        public serializeAs_ExchangeObjectAddedMessage(param1: ICustomDataOutput): void {
            super.serializeAs_ExchangeObjectMessage(param1);
            this.object.serializeAs_ObjectItem(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeObjectAddedMessage(param1);
        }

        public deserializeAs_ExchangeObjectAddedMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.object = new ObjectItem();
            this.object.deserialize(param1);

        }
    }
    export class ExchangeObjectMoveMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5518;

        objectUID: number;
        quantity: number;

        constructor() {
            this.objectUID = 0;
            this.quantity = 0;
            super();
        }

        public getMessageId(): number {
            return ExchangeObjectMoveMessage.ID;
        }

        public reset(): void {
            this.objectUID = 0;
            this.quantity = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeObjectMoveMessage(param1);
        }

        public serializeAs_ExchangeObjectMoveMessage(param1: ICustomDataOutput): void {
            if (this.objectUID < 0) {
                throw new Error('Forbidden value (' + this.objectUID + ') on element objectUID.');
            }
            param1.writeVarInt(this.objectUID);
            param1.writeVarInt(this.quantity);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeObjectMoveMessage(param1);
        }

        public deserializeAs_ExchangeObjectMoveMessage(param1: ICustomDataInput): void {
            this.objectUID = param1.readVarUhInt();
            if (this.objectUID < 0) {
                throw new Error('Forbidden value (' + this.objectUID + ') on element of ExchangeObjectMoveMessage.objectUID.');
            }
            this.quantity = param1.readVarInt();

        }
    }
    export class ExchangeObjectMovePricedMessage extends ExchangeObjectMoveMessage {
        public static ID: number = 5514;

        price: number;

        constructor() {
            this.price = 0;
            super();
        }

        public getMessageId(): number {
            return ExchangeObjectMovePricedMessage.ID;
        }

        public reset(): void {
            this.price = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeObjectMovePricedMessage(param1);
        }

        public serializeAs_ExchangeObjectMovePricedMessage(param1: ICustomDataOutput): void {
            super.serializeAs_ExchangeObjectMoveMessage(param1);
            if (this.price < 0) {
                throw new Error('Forbidden value (' + this.price + ') on element price.');
            }
            param1.writeVarInt(this.price);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeObjectMovePricedMessage(param1);
        }

        public deserializeAs_ExchangeObjectMovePricedMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.price = param1.readVarUhInt();
            if (this.price < 0) {
                throw new Error('Forbidden value (' + this.price + ') on element of ExchangeObjectMovePricedMessage.price.');
            }

        }
    }
    export class ExchangeObjectModifyPricedMessage extends ExchangeObjectMovePricedMessage {
        public static ID: number = 6238;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return ExchangeObjectModifyPricedMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeObjectModifyPricedMessage(param1);
        }

        public serializeAs_ExchangeObjectModifyPricedMessage(param1: ICustomDataOutput): void {
            super.serializeAs_ExchangeObjectMovePricedMessage(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeObjectModifyPricedMessage(param1);
        }

        public deserializeAs_ExchangeObjectModifyPricedMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);

        }
    }
    export class ExchangeObjectMoveKamaMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5520;

        quantity: number;

        constructor() {
            this.quantity = 0;
            super();
        }

        public getMessageId(): number {
            return ExchangeObjectMoveKamaMessage.ID;
        }

        public reset(): void {
            this.quantity = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeObjectMoveKamaMessage(param1);
        }

        public serializeAs_ExchangeObjectMoveKamaMessage(param1: ICustomDataOutput): void {
            param1.writeVarInt(this.quantity);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeObjectMoveKamaMessage(param1);
        }

        public deserializeAs_ExchangeObjectMoveKamaMessage(param1: ICustomDataInput): void {
            this.quantity = param1.readVarInt();

        }
    }
    export class ExchangeObjectTransfertAllFromInvMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6184;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return ExchangeObjectTransfertAllFromInvMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeObjectTransfertAllFromInvMessage(param1);
        }

        public serializeAs_ExchangeObjectTransfertAllFromInvMessage(param1: ICustomDataOutput): void {

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeObjectTransfertAllFromInvMessage(param1);
        }

        public deserializeAs_ExchangeObjectTransfertAllFromInvMessage(param1: ICustomDataInput): void {

        }
    }
    export class ExchangeObjectTransfertAllToInvMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6032;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return ExchangeObjectTransfertAllToInvMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeObjectTransfertAllToInvMessage(param1);
        }

        public serializeAs_ExchangeObjectTransfertAllToInvMessage(param1: ICustomDataOutput): void {

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeObjectTransfertAllToInvMessage(param1);
        }

        public deserializeAs_ExchangeObjectTransfertAllToInvMessage(param1: ICustomDataInput): void {

        }
    }
    export class ExchangeObjectTransfertExistingFromInvMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6325;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return ExchangeObjectTransfertExistingFromInvMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeObjectTransfertExistingFromInvMessage(param1);
        }

        public serializeAs_ExchangeObjectTransfertExistingFromInvMessage(param1: ICustomDataOutput): void {

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeObjectTransfertExistingFromInvMessage(param1);
        }

        public deserializeAs_ExchangeObjectTransfertExistingFromInvMessage(param1: ICustomDataInput): void {

        }
    }
    export class ExchangeObjectTransfertExistingToInvMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6326;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return ExchangeObjectTransfertExistingToInvMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeObjectTransfertExistingToInvMessage(param1);
        }

        public serializeAs_ExchangeObjectTransfertExistingToInvMessage(param1: ICustomDataOutput): void {

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeObjectTransfertExistingToInvMessage(param1);
        }

        public deserializeAs_ExchangeObjectTransfertExistingToInvMessage(param1: ICustomDataInput): void {

        }
    }
    export class ExchangeObjectTransfertListFromInvMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6183;

        ids: number[];

        constructor() {
            this.ids = [];
            super();
        }

        public getMessageId(): number {
            return ExchangeObjectTransfertListFromInvMessage.ID;
        }

        public reset(): void {
            this.ids = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeObjectTransfertListFromInvMessage(param1);
        }

        public serializeAs_ExchangeObjectTransfertListFromInvMessage(param1: ICustomDataOutput): void {
            param1.writeShort(this.ids.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.ids.length) {
                if (this.ids[_loc2_] < 0) {
                    throw new Error('Forbidden value (' + this.ids[_loc2_] + ') on element 1 (starting at 1) of ids.');
                }
                param1.writeVarInt(this.ids[_loc2_]);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeObjectTransfertListFromInvMessage(param1);
        }

        public deserializeAs_ExchangeObjectTransfertListFromInvMessage(param1: ICustomDataInput): void {
            var _loc4_: number = 0;
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = param1.readVarUhInt();
                if (_loc4_ < 0) {
                    throw new Error('Forbidden value (' + _loc4_ + ') on elements of ids.');
                }
                this.ids.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class ExchangeObjectTransfertListToInvMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6039;

        ids: number[];

        constructor() {
            this.ids = [];
            super();
        }

        public getMessageId(): number {
            return ExchangeObjectTransfertListToInvMessage.ID;
        }

        public reset(): void {
            this.ids = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeObjectTransfertListToInvMessage(param1);
        }

        public serializeAs_ExchangeObjectTransfertListToInvMessage(param1: ICustomDataOutput): void {
            param1.writeShort(this.ids.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.ids.length) {
                if (this.ids[_loc2_] < 0) {
                    throw new Error('Forbidden value (' + this.ids[_loc2_] + ') on element 1 (starting at 1) of ids.');
                }
                param1.writeVarInt(this.ids[_loc2_]);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeObjectTransfertListToInvMessage(param1);
        }

        public deserializeAs_ExchangeObjectTransfertListToInvMessage(param1: ICustomDataInput): void {
            var _loc4_: number = 0;
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = param1.readVarUhInt();
                if (_loc4_ < 0) {
                    throw new Error('Forbidden value (' + _loc4_ + ') on elements of ids.');
                }
                this.ids.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class ExchangeObjectTransfertListWithQuantityToInvMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6470;

        ids: number[];
        qtys: number[];

        constructor() {
            this.ids = [];
            this.qtys = [];
            super();
        }

        public getMessageId(): number {
            return ExchangeObjectTransfertListWithQuantityToInvMessage.ID;
        }

        public reset(): void {
            this.ids = [];
            this.qtys = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeObjectTransfertListWithQuantityToInvMessage(param1);
        }

        public serializeAs_ExchangeObjectTransfertListWithQuantityToInvMessage(param1: ICustomDataOutput): void {
            param1.writeShort(this.ids.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.ids.length) {
                if (this.ids[_loc2_] < 0) {
                    throw new Error('Forbidden value (' + this.ids[_loc2_] + ') on element 1 (starting at 1) of ids.');
                }
                param1.writeVarInt(this.ids[_loc2_]);
                _loc2_++;
            }
            param1.writeShort(this.qtys.length);
            var _loc3_: number = 0;
            while (_loc3_ < this.qtys.length) {
                if (this.qtys[_loc3_] < 0) {
                    throw new Error('Forbidden value (' + this.qtys[_loc3_] + ') on element 2 (starting at 1) of qtys.');
                }
                param1.writeVarInt(this.qtys[_loc3_]);
                _loc3_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeObjectTransfertListWithQuantityToInvMessage(param1);
        }

        public deserializeAs_ExchangeObjectTransfertListWithQuantityToInvMessage(param1: ICustomDataInput): void {
            var _loc6_: number = 0;
            var _loc7_: number = 0;
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc6_ = param1.readVarUhInt();
                if (_loc6_ < 0) {
                    throw new Error('Forbidden value (' + _loc6_ + ') on elements of ids.');
                }
                this.ids.push(_loc6_);
                _loc3_++;
            }
            var _loc4_: number = param1.readUnsignedShort();
            var _loc5_: number = 0;
            while (_loc5_ < _loc4_) {
            _loc7_ = param1.readVarUhInt();
                if (_loc7_ < 0) {
                    throw new Error('Forbidden value (' + _loc7_ + ') on elements of qtys.');
                }
                this.qtys.push(_loc7_);
                _loc5_++;
            }

        }
    }
    export class ExchangeObjectUseInWorkshopMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6004;

        objectUID: number;
        quantity: number;

        constructor() {
            this.objectUID = 0;
            this.quantity = 0;
            super();
        }

        public getMessageId(): number {
            return ExchangeObjectUseInWorkshopMessage.ID;
        }

        public reset(): void {
            this.objectUID = 0;
            this.quantity = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeObjectUseInWorkshopMessage(param1);
        }

        public serializeAs_ExchangeObjectUseInWorkshopMessage(param1: ICustomDataOutput): void {
            if (this.objectUID < 0) {
                throw new Error('Forbidden value (' + this.objectUID + ') on element objectUID.');
            }
            param1.writeVarInt(this.objectUID);
            param1.writeVarInt(this.quantity);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeObjectUseInWorkshopMessage(param1);
        }

        public deserializeAs_ExchangeObjectUseInWorkshopMessage(param1: ICustomDataInput): void {
            this.objectUID = param1.readVarUhInt();
            if (this.objectUID < 0) {
                throw new Error('Forbidden value (' + this.objectUID + ') on element of ExchangeObjectUseInWorkshopMessage.objectUID.');
            }
            this.quantity = param1.readVarInt();

        }
    }
    export class ExchangeObjectsAddedMessage extends ExchangeObjectMessage {
        public static ID: number = 6535;

        object: ObjectItem[];

        constructor() {
            this.object = [];
            super();
        }

        public getMessageId(): number {
            return ExchangeObjectsAddedMessage.ID;
        }

        public reset(): void {
            this.object = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeObjectsAddedMessage(param1);
        }

        public serializeAs_ExchangeObjectsAddedMessage(param1: ICustomDataOutput): void {
            super.serializeAs_ExchangeObjectMessage(param1);
            param1.writeShort(this.object.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.object.length) {
                (this.object[_loc2_]).serializeAs_ObjectItem(param1);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeObjectsAddedMessage(param1);
        }

        public deserializeAs_ExchangeObjectsAddedMessage(param1: ICustomDataInput): void {
            var _loc4_: ObjectItem = null;
            super.deserialize(param1);
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = new ObjectItem();
                _loc4_.deserialize(param1);
                this.object.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class ExchangeOkMultiCraftMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5768;

        initiatorId: number;
        otherId: number;
        role: number;

        constructor() {
            this.initiatorId = 0;
            this.otherId = 0;
            this.role = 0;
            super();
        }

        public getMessageId(): number {
            return ExchangeOkMultiCraftMessage.ID;
        }

        public reset(): void {
            this.initiatorId = 0;
            this.otherId = 0;
            this.role = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeOkMultiCraftMessage(param1);
        }

        public serializeAs_ExchangeOkMultiCraftMessage(param1: ICustomDataOutput): void {
            if (this.initiatorId < 0) {
                throw new Error('Forbidden value (' + this.initiatorId + ') on element initiatorId.');
            }
            param1.writeVarInt(this.initiatorId);
            if (this.otherId < 0) {
                throw new Error('Forbidden value (' + this.otherId + ') on element otherId.');
            }
            param1.writeVarInt(this.otherId);
            param1.writeByte(this.role);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeOkMultiCraftMessage(param1);
        }

        public deserializeAs_ExchangeOkMultiCraftMessage(param1: ICustomDataInput): void {
            this.initiatorId = param1.readVarUhInt();
            if (this.initiatorId < 0) {
                throw new Error('Forbidden value (' + this.initiatorId + ') on element of ExchangeOkMultiCraftMessage.initiatorId.');
            }
            this.otherId = param1.readVarUhInt();
            if (this.otherId < 0) {
                throw new Error('Forbidden value (' + this.otherId + ') on element of ExchangeOkMultiCraftMessage.otherId.');
            }
            this.role = param1.readByte();

        }
    }
    export class ExchangeOnHumanVendorRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5772;

        humanVendorId: number;
        humanVendorCell: number;

        constructor() {
            this.humanVendorId = 0;
            this.humanVendorCell = 0;
            super();
        }

        public getMessageId(): number {
            return ExchangeOnHumanVendorRequestMessage.ID;
        }

        public reset(): void {
            this.humanVendorId = 0;
            this.humanVendorCell = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeOnHumanVendorRequestMessage(param1);
        }

        public serializeAs_ExchangeOnHumanVendorRequestMessage(param1: ICustomDataOutput): void {
            if (this.humanVendorId < 0) {
                throw new Error('Forbidden value (' + this.humanVendorId + ') on element humanVendorId.');
            }
            param1.writeVarInt(this.humanVendorId);
            if (this.humanVendorCell < 0 || this.humanVendorCell > 559) {
                throw new Error('Forbidden value (' + this.humanVendorCell + ') on element humanVendorCell.');
            }
            param1.writeVarShort(this.humanVendorCell);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeOnHumanVendorRequestMessage(param1);
        }

        public deserializeAs_ExchangeOnHumanVendorRequestMessage(param1: ICustomDataInput): void {
            this.humanVendorId = param1.readVarUhInt();
            if (this.humanVendorId < 0) {
                throw new Error('Forbidden value (' + this.humanVendorId + ') on element of ExchangeOnHumanVendorRequestMessage.humanVendorId.');
            }
            this.humanVendorCell = param1.readVarUhShort();
            if (this.humanVendorCell < 0 || this.humanVendorCell > 559) {
                throw new Error('Forbidden value (' + this.humanVendorCell + ') on element of ExchangeOnHumanVendorRequestMessage.humanVendorCell.');
            }

        }
    }
    export class ExchangeRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5505;

        exchangeType: number;

        constructor() {
            this.exchangeType = 0;
            super();
        }

        public getMessageId(): number {
            return ExchangeRequestMessage.ID;
        }

        public reset(): void {
            this.exchangeType = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeRequestMessage(param1);
        }

        public serializeAs_ExchangeRequestMessage(param1: ICustomDataOutput): void {
            param1.writeByte(this.exchangeType);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeRequestMessage(param1);
        }

        public deserializeAs_ExchangeRequestMessage(param1: ICustomDataInput): void {
            this.exchangeType = param1.readByte();

        }
    }
    export class ExchangePlayerMultiCraftRequestMessage extends ExchangeRequestMessage {
        public static ID: number = 5784;

        target: number;
        skillId: number;

        constructor() {
            this.target = 0;
            this.skillId = 0;
            super();
        }

        public getMessageId(): number {
            return ExchangePlayerMultiCraftRequestMessage.ID;
        }

        public reset(): void {
            this.target = 0;
            this.skillId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangePlayerMultiCraftRequestMessage(param1);
        }

        public serializeAs_ExchangePlayerMultiCraftRequestMessage(param1: ICustomDataOutput): void {
            super.serializeAs_ExchangeRequestMessage(param1);
            if (this.target < 0) {
                throw new Error('Forbidden value (' + this.target + ') on element target.');
            }
            param1.writeVarInt(this.target);
            if (this.skillId < 0) {
                throw new Error('Forbidden value (' + this.skillId + ') on element skillId.');
            }
            param1.writeVarInt(this.skillId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangePlayerMultiCraftRequestMessage(param1);
        }

        public deserializeAs_ExchangePlayerMultiCraftRequestMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.target = param1.readVarUhInt();
            if (this.target < 0) {
                throw new Error('Forbidden value (' + this.target + ') on element of ExchangePlayerMultiCraftRequestMessage.target.');
            }
            this.skillId = param1.readVarUhInt();
            if (this.skillId < 0) {
                throw new Error('Forbidden value (' + this.skillId + ') on element of ExchangePlayerMultiCraftRequestMessage.skillId.');
            }

        }
    }
    export class ExchangePlayerRequestMessage extends ExchangeRequestMessage {
        public static ID: number = 5773;

        target: number;

        constructor() {
            this.target = 0;
            super();
        }

        public getMessageId(): number {
            return ExchangePlayerRequestMessage.ID;
        }

        public reset(): void {
            this.target = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangePlayerRequestMessage(param1);
        }

        public serializeAs_ExchangePlayerRequestMessage(param1: ICustomDataOutput): void {
            super.serializeAs_ExchangeRequestMessage(param1);
            if (this.target < 0) {
                throw new Error('Forbidden value (' + this.target + ') on element target.');
            }
            param1.writeVarInt(this.target);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangePlayerRequestMessage(param1);
        }

        public deserializeAs_ExchangePlayerRequestMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.target = param1.readVarUhInt();
            if (this.target < 0) {
                throw new Error('Forbidden value (' + this.target + ') on element of ExchangePlayerRequestMessage.target.');
            }

        }
    }
    export class ExchangeReadyMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5511;

        ready: boolean;
        step: number;

        constructor() {
            this.ready = false;
            this.step = 0;
            super();
        }

        public getMessageId(): number {
            return ExchangeReadyMessage.ID;
        }

        public reset(): void {
            this.ready = false;
            this.step = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeReadyMessage(param1);
        }

        public serializeAs_ExchangeReadyMessage(param1: ICustomDataOutput): void {
            param1.writeBoolean(this.ready);
            if (this.step < 0) {
                throw new Error('Forbidden value (' + this.step + ') on element step.');
            }
            param1.writeVarShort(this.step);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeReadyMessage(param1);
        }

        public deserializeAs_ExchangeReadyMessage(param1: ICustomDataInput): void {
            this.ready = param1.readBoolean();
            this.step = param1.readVarUhShort();
            if (this.step < 0) {
                throw new Error('Forbidden value (' + this.step + ') on element of ExchangeReadyMessage.step.');
            }

        }
    }
    export class ExchangeReplayStopMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6001;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return ExchangeReplayStopMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeReplayStopMessage(param1);
        }

        public serializeAs_ExchangeReplayStopMessage(param1: ICustomDataOutput): void {

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeReplayStopMessage(param1);
        }

        public deserializeAs_ExchangeReplayStopMessage(param1: ICustomDataInput): void {

        }
    }
    export class ExchangeReplyTaxVendorMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5787;

        objectValue: number;
        totalTaxValue: number;

        constructor() {
            this.objectValue = 0;
            this.totalTaxValue = 0;
            super();
        }

        public getMessageId(): number {
            return ExchangeReplyTaxVendorMessage.ID;
        }

        public reset(): void {
            this.objectValue = 0;
            this.totalTaxValue = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeReplyTaxVendorMessage(param1);
        }

        public serializeAs_ExchangeReplyTaxVendorMessage(param1: ICustomDataOutput): void {
            if (this.objectValue < 0) {
                throw new Error('Forbidden value (' + this.objectValue + ') on element objectValue.');
            }
            param1.writeVarInt(this.objectValue);
            if (this.totalTaxValue < 0) {
                throw new Error('Forbidden value (' + this.totalTaxValue + ') on element totalTaxValue.');
            }
            param1.writeVarInt(this.totalTaxValue);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeReplyTaxVendorMessage(param1);
        }

        public deserializeAs_ExchangeReplyTaxVendorMessage(param1: ICustomDataInput): void {
            this.objectValue = param1.readVarUhInt();
            if (this.objectValue < 0) {
                throw new Error('Forbidden value (' + this.objectValue + ') on element of ExchangeReplyTaxVendorMessage.objectValue.');
            }
            this.totalTaxValue = param1.readVarUhInt();
            if (this.totalTaxValue < 0) {
                throw new Error('Forbidden value (' + this.totalTaxValue + ') on element of ExchangeReplyTaxVendorMessage.totalTaxValue.');
            }

        }
    }
    export class ExchangeRequestOnMountStockMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5986;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return ExchangeRequestOnMountStockMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeRequestOnMountStockMessage(param1);
        }

        public serializeAs_ExchangeRequestOnMountStockMessage(param1: ICustomDataOutput): void {

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeRequestOnMountStockMessage(param1);
        }

        public deserializeAs_ExchangeRequestOnMountStockMessage(param1: ICustomDataInput): void {

        }
    }
    export class ExchangeRequestOnShopStockMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5753;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return ExchangeRequestOnShopStockMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeRequestOnShopStockMessage(param1);
        }

        public serializeAs_ExchangeRequestOnShopStockMessage(param1: ICustomDataOutput): void {

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeRequestOnShopStockMessage(param1);
        }

        public deserializeAs_ExchangeRequestOnShopStockMessage(param1: ICustomDataInput): void {

        }
    }
    export class ExchangeRequestOnTaxCollectorMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5779;

        taxCollectorId: number;

        constructor() {
            this.taxCollectorId = 0;
            super();
        }

        public getMessageId(): number {
            return ExchangeRequestOnTaxCollectorMessage.ID;
        }

        public reset(): void {
            this.taxCollectorId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeRequestOnTaxCollectorMessage(param1);
        }

        public serializeAs_ExchangeRequestOnTaxCollectorMessage(param1: ICustomDataOutput): void {
            param1.writeInt(this.taxCollectorId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeRequestOnTaxCollectorMessage(param1);
        }

        public deserializeAs_ExchangeRequestOnTaxCollectorMessage(param1: ICustomDataInput): void {
            this.taxCollectorId = param1.readInt();

        }
    }
    export class ExchangeRequestedMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5522;

        exchangeType: number;

        constructor() {
            this.exchangeType = 0;
            super();
        }

        public getMessageId(): number {
            return ExchangeRequestedMessage.ID;
        }

        public reset(): void {
            this.exchangeType = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeRequestedMessage(param1);
        }

        public serializeAs_ExchangeRequestedMessage(param1: ICustomDataOutput): void {
            param1.writeByte(this.exchangeType);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeRequestedMessage(param1);
        }

        public deserializeAs_ExchangeRequestedMessage(param1: ICustomDataInput): void {
            this.exchangeType = param1.readByte();

        }
    }
    export class ExchangeRequestedTradeMessage extends ExchangeRequestedMessage {
        public static ID: number = 5523;

        source: number;
        target: number;

        constructor() {
            this.source = 0;
            this.target = 0;
            super();
        }

        public getMessageId(): number {
            return ExchangeRequestedTradeMessage.ID;
        }

        public reset(): void {
            this.source = 0;
            this.target = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeRequestedTradeMessage(param1);
        }

        public serializeAs_ExchangeRequestedTradeMessage(param1: ICustomDataOutput): void {
            super.serializeAs_ExchangeRequestedMessage(param1);
            if (this.source < 0) {
                throw new Error('Forbidden value (' + this.source + ') on element source.');
            }
            param1.writeVarInt(this.source);
            if (this.target < 0) {
                throw new Error('Forbidden value (' + this.target + ') on element target.');
            }
            param1.writeVarInt(this.target);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeRequestedTradeMessage(param1);
        }

        public deserializeAs_ExchangeRequestedTradeMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.source = param1.readVarUhInt();
            if (this.source < 0) {
                throw new Error('Forbidden value (' + this.source + ') on element of ExchangeRequestedTradeMessage.source.');
            }
            this.target = param1.readVarUhInt();
            if (this.target < 0) {
                throw new Error('Forbidden value (' + this.target + ') on element of ExchangeRequestedTradeMessage.target.');
            }

        }
    }
    export class ExchangeSellMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5778;

        objectToSellId: number;
        quantity: number;

        constructor() {
            this.objectToSellId = 0;
            this.quantity = 0;
            super();
        }

        public getMessageId(): number {
            return ExchangeSellMessage.ID;
        }

        public reset(): void {
            this.objectToSellId = 0;
            this.quantity = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeSellMessage(param1);
        }

        public serializeAs_ExchangeSellMessage(param1: ICustomDataOutput): void {
            if (this.objectToSellId < 0) {
                throw new Error('Forbidden value (' + this.objectToSellId + ') on element objectToSellId.');
            }
            param1.writeVarInt(this.objectToSellId);
            if (this.quantity < 0) {
                throw new Error('Forbidden value (' + this.quantity + ') on element quantity.');
            }
            param1.writeVarInt(this.quantity);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeSellMessage(param1);
        }

        public deserializeAs_ExchangeSellMessage(param1: ICustomDataInput): void {
            this.objectToSellId = param1.readVarUhInt();
            if (this.objectToSellId < 0) {
                throw new Error('Forbidden value (' + this.objectToSellId + ') on element of ExchangeSellMessage.objectToSellId.');
            }
            this.quantity = param1.readVarUhInt();
            if (this.quantity < 0) {
                throw new Error('Forbidden value (' + this.quantity + ') on element of ExchangeSellMessage.quantity.');
            }

        }
    }
    export class ExchangeSellOkMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5792;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return ExchangeSellOkMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeSellOkMessage(param1);
        }

        public serializeAs_ExchangeSellOkMessage(param1: ICustomDataOutput): void {

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeSellOkMessage(param1);
        }

        public deserializeAs_ExchangeSellOkMessage(param1: ICustomDataInput): void {

        }
    }
    export class ExchangeSetCraftRecipeMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6389;

        objectGID: number;

        constructor() {
            this.objectGID = 0;
            super();
        }

        public getMessageId(): number {
            return ExchangeSetCraftRecipeMessage.ID;
        }

        public reset(): void {
            this.objectGID = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeSetCraftRecipeMessage(param1);
        }

        public serializeAs_ExchangeSetCraftRecipeMessage(param1: ICustomDataOutput): void {
            if (this.objectGID < 0) {
                throw new Error('Forbidden value (' + this.objectGID + ') on element objectGID.');
            }
            param1.writeVarShort(this.objectGID);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeSetCraftRecipeMessage(param1);
        }

        public deserializeAs_ExchangeSetCraftRecipeMessage(param1: ICustomDataInput): void {
            this.objectGID = param1.readVarUhShort();
            if (this.objectGID < 0) {
                throw new Error('Forbidden value (' + this.objectGID + ') on element of ExchangeSetCraftRecipeMessage.objectGID.');
            }

        }
    }
    export class ExchangeShopStockMovementRemovedMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5907;

        objectId: number;

        constructor() {
            this.objectId = 0;
            super();
        }

        public getMessageId(): number {
            return ExchangeShopStockMovementRemovedMessage.ID;
        }

        public reset(): void {
            this.objectId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeShopStockMovementRemovedMessage(param1);
        }

        public serializeAs_ExchangeShopStockMovementRemovedMessage(param1: ICustomDataOutput): void {
            if (this.objectId < 0) {
                throw new Error('Forbidden value (' + this.objectId + ') on element objectId.');
            }
            param1.writeVarInt(this.objectId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeShopStockMovementRemovedMessage(param1);
        }

        public deserializeAs_ExchangeShopStockMovementRemovedMessage(param1: ICustomDataInput): void {
            this.objectId = param1.readVarUhInt();
            if (this.objectId < 0) {
                throw new Error('Forbidden value (' + this.objectId + ') on element of ExchangeShopStockMovementRemovedMessage.objectId.');
            }

        }
    }
    export class ExchangeShopStockMovementUpdatedMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5909;

        objectInfo: ObjectItemToSell;

        constructor() {
            this.objectInfo = new ObjectItemToSell();
            super();
        }

        public getMessageId(): number {
            return ExchangeShopStockMovementUpdatedMessage.ID;
        }

        public reset(): void {
            this.objectInfo = new ObjectItemToSell();
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeShopStockMovementUpdatedMessage(param1);
        }

        public serializeAs_ExchangeShopStockMovementUpdatedMessage(param1: ICustomDataOutput): void {
            this.objectInfo.serializeAs_ObjectItemToSell(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeShopStockMovementUpdatedMessage(param1);
        }

        public deserializeAs_ExchangeShopStockMovementUpdatedMessage(param1: ICustomDataInput): void {
            this.objectInfo = new ObjectItemToSell();
            this.objectInfo.deserialize(param1);

        }
    }
    export class ExchangeShopStockMultiMovementRemovedMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6037;

        objectIdList: number[];

        constructor() {
            this.objectIdList = [];
            super();
        }

        public getMessageId(): number {
            return ExchangeShopStockMultiMovementRemovedMessage.ID;
        }

        public reset(): void {
            this.objectIdList = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeShopStockMultiMovementRemovedMessage(param1);
        }

        public serializeAs_ExchangeShopStockMultiMovementRemovedMessage(param1: ICustomDataOutput): void {
            param1.writeShort(this.objectIdList.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.objectIdList.length) {
                if (this.objectIdList[_loc2_] < 0) {
                    throw new Error('Forbidden value (' + this.objectIdList[_loc2_] + ') on element 1 (starting at 1) of objectIdList.');
                }
                param1.writeVarInt(this.objectIdList[_loc2_]);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeShopStockMultiMovementRemovedMessage(param1);
        }

        public deserializeAs_ExchangeShopStockMultiMovementRemovedMessage(param1: ICustomDataInput): void {
            var _loc4_: number = 0;
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = param1.readVarUhInt();
                if (_loc4_ < 0) {
                    throw new Error('Forbidden value (' + _loc4_ + ') on elements of objectIdList.');
                }
                this.objectIdList.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class ExchangeShopStockMultiMovementUpdatedMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6038;

        objectInfoList: ObjectItemToSell[];

        constructor() {
            this.objectInfoList = [];
            super();
        }

        public getMessageId(): number {
            return ExchangeShopStockMultiMovementUpdatedMessage.ID;
        }

        public reset(): void {
            this.objectInfoList = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeShopStockMultiMovementUpdatedMessage(param1);
        }

        public serializeAs_ExchangeShopStockMultiMovementUpdatedMessage(param1: ICustomDataOutput): void {
            param1.writeShort(this.objectInfoList.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.objectInfoList.length) {
                (this.objectInfoList[_loc2_]).serializeAs_ObjectItemToSell(param1);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeShopStockMultiMovementUpdatedMessage(param1);
        }

        public deserializeAs_ExchangeShopStockMultiMovementUpdatedMessage(param1: ICustomDataInput): void {
            var _loc4_: ObjectItemToSell = null;
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = new ObjectItemToSell();
                _loc4_.deserialize(param1);
                this.objectInfoList.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class ExchangeShopStockStartedMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5910;

        objectsInfos: ObjectItemToSell[];

        constructor() {
            this.objectsInfos = [];
            super();
        }

        public getMessageId(): number {
            return ExchangeShopStockStartedMessage.ID;
        }

        public reset(): void {
            this.objectsInfos = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeShopStockStartedMessage(param1);
        }

        public serializeAs_ExchangeShopStockStartedMessage(param1: ICustomDataOutput): void {
            param1.writeShort(this.objectsInfos.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.objectsInfos.length) {
                (this.objectsInfos[_loc2_]).serializeAs_ObjectItemToSell(param1);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeShopStockStartedMessage(param1);
        }

        public deserializeAs_ExchangeShopStockStartedMessage(param1: ICustomDataInput): void {
            var _loc4_: ObjectItemToSell = null;
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = new ObjectItemToSell();
                _loc4_.deserialize(param1);
                this.objectsInfos.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class ExchangeShowVendorTaxMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5783;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return ExchangeShowVendorTaxMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeShowVendorTaxMessage(param1);
        }

        public serializeAs_ExchangeShowVendorTaxMessage(param1: ICustomDataOutput): void {

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeShowVendorTaxMessage(param1);
        }

        public deserializeAs_ExchangeShowVendorTaxMessage(param1: ICustomDataInput): void {

        }
    }
    export class ExchangeStartAsVendorMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5775;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return ExchangeStartAsVendorMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeStartAsVendorMessage(param1);
        }

        public serializeAs_ExchangeStartAsVendorMessage(param1: ICustomDataOutput): void {

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeStartAsVendorMessage(param1);
        }

        public deserializeAs_ExchangeStartAsVendorMessage(param1: ICustomDataInput): void {

        }
    }
    export class ExchangeStartOkCraftMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5813;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return ExchangeStartOkCraftMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeStartOkCraftMessage(param1);
        }

        public serializeAs_ExchangeStartOkCraftMessage(param1: ICustomDataOutput): void {

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeStartOkCraftMessage(param1);
        }

        public deserializeAs_ExchangeStartOkCraftMessage(param1: ICustomDataInput): void {

        }
    }
    export class ExchangeStartOkCraftWithInformationMessage extends ExchangeStartOkCraftMessage {
        public static ID: number = 5941;

        skillId: number;

        constructor() {
            this.skillId = 0;
            super();
        }

        public getMessageId(): number {
            return ExchangeStartOkCraftWithInformationMessage.ID;
        }

        public reset(): void {
            this.skillId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeStartOkCraftWithInformationMessage(param1);
        }

        public serializeAs_ExchangeStartOkCraftWithInformationMessage(param1: ICustomDataOutput): void {
            super.serializeAs_ExchangeStartOkCraftMessage(param1);
            if (this.skillId < 0) {
                throw new Error('Forbidden value (' + this.skillId + ') on element skillId.');
            }
            param1.writeVarInt(this.skillId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeStartOkCraftWithInformationMessage(param1);
        }

        public deserializeAs_ExchangeStartOkCraftWithInformationMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.skillId = param1.readVarUhInt();
            if (this.skillId < 0) {
                throw new Error('Forbidden value (' + this.skillId + ') on element of ExchangeStartOkCraftWithInformationMessage.skillId.');
            }

        }
    }
    export class ExchangeStartOkHumanVendorMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5767;

        sellerId: number;
        objectsInfos: ObjectItemToSellInHumanVendorShop[];

        constructor() {
            this.sellerId = 0;
            this.objectsInfos = [];
            super();
        }

        public getMessageId(): number {
            return ExchangeStartOkHumanVendorMessage.ID;
        }

        public reset(): void {
            this.sellerId = 0;
            this.objectsInfos = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeStartOkHumanVendorMessage(param1);
        }

        public serializeAs_ExchangeStartOkHumanVendorMessage(param1: ICustomDataOutput): void {
            if (this.sellerId < 0) {
                throw new Error('Forbidden value (' + this.sellerId + ') on element sellerId.');
            }
            param1.writeVarInt(this.sellerId);
            param1.writeShort(this.objectsInfos.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.objectsInfos.length) {
                (this.objectsInfos[_loc2_]).serializeAs_ObjectItemToSellInHumanVendorShop(param1);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeStartOkHumanVendorMessage(param1);
        }

        public deserializeAs_ExchangeStartOkHumanVendorMessage(param1: ICustomDataInput): void {
            var _loc4_: ObjectItemToSellInHumanVendorShop = null;
            this.sellerId = param1.readVarUhInt();
            if (this.sellerId < 0) {
                throw new Error('Forbidden value (' + this.sellerId + ') on element of ExchangeStartOkHumanVendorMessage.sellerId.');
            }
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = new ObjectItemToSellInHumanVendorShop();
                _loc4_.deserialize(param1);
                this.objectsInfos.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class ExchangeStartOkJobIndexMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5819;

        jobs: number[];

        constructor() {
            this.jobs = [];
            super();
        }

        public getMessageId(): number {
            return ExchangeStartOkJobIndexMessage.ID;
        }

        public reset(): void {
            this.jobs = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeStartOkJobIndexMessage(param1);
        }

        public serializeAs_ExchangeStartOkJobIndexMessage(param1: ICustomDataOutput): void {
            param1.writeShort(this.jobs.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.jobs.length) {
                if (this.jobs[_loc2_] < 0) {
                    throw new Error('Forbidden value (' + this.jobs[_loc2_] + ') on element 1 (starting at 1) of jobs.');
                }
                param1.writeVarInt(this.jobs[_loc2_]);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeStartOkJobIndexMessage(param1);
        }

        public deserializeAs_ExchangeStartOkJobIndexMessage(param1: ICustomDataInput): void {
            var _loc4_: number = 0;
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = param1.readVarUhInt();
                if (_loc4_ < 0) {
                    throw new Error('Forbidden value (' + _loc4_ + ') on elements of jobs.');
                }
                this.jobs.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class ExchangeStartOkMountWithOutPaddockMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5991;

        stabledMountsDescription: MountClientData[];

        constructor() {
            this.stabledMountsDescription = [];
            super();
        }

        public getMessageId(): number {
            return ExchangeStartOkMountWithOutPaddockMessage.ID;
        }

        public reset(): void {
            this.stabledMountsDescription = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeStartOkMountWithOutPaddockMessage(param1);
        }

        public serializeAs_ExchangeStartOkMountWithOutPaddockMessage(param1: ICustomDataOutput): void {
            param1.writeShort(this.stabledMountsDescription.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.stabledMountsDescription.length) {
                (this.stabledMountsDescription[_loc2_]).serializeAs_MountClientData(param1);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeStartOkMountWithOutPaddockMessage(param1);
        }

        public deserializeAs_ExchangeStartOkMountWithOutPaddockMessage(param1: ICustomDataInput): void {
            var _loc4_: MountClientData = null;
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = new MountClientData();
                _loc4_.deserialize(param1);
                this.stabledMountsDescription.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class ExchangeStartOkMountMessage extends ExchangeStartOkMountWithOutPaddockMessage {
        public static ID: number = 5979;

        paddockedMountsDescription: MountClientData[];

        constructor() {
            this.paddockedMountsDescription = [];
            super();
        }

        public getMessageId(): number {
            return ExchangeStartOkMountMessage.ID;
        }

        public reset(): void {
            this.paddockedMountsDescription = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeStartOkMountMessage(param1);
        }

        public serializeAs_ExchangeStartOkMountMessage(param1: ICustomDataOutput): void {
            super.serializeAs_ExchangeStartOkMountWithOutPaddockMessage(param1);
            param1.writeShort(this.paddockedMountsDescription.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.paddockedMountsDescription.length) {
                (this.paddockedMountsDescription[_loc2_]).serializeAs_MountClientData(param1);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeStartOkMountMessage(param1);
        }

        public deserializeAs_ExchangeStartOkMountMessage(param1: ICustomDataInput): void {
            var _loc4_: MountClientData = null;
            super.deserialize(param1);
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = new MountClientData();
                _loc4_.deserialize(param1);
                this.paddockedMountsDescription.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class ExchangeStartOkMulticraftCrafterMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5818;

        skillId: number;

        constructor() {
            this.skillId = 0;
            super();
        }

        public getMessageId(): number {
            return ExchangeStartOkMulticraftCrafterMessage.ID;
        }

        public reset(): void {
            this.skillId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeStartOkMulticraftCrafterMessage(param1);
        }

        public serializeAs_ExchangeStartOkMulticraftCrafterMessage(param1: ICustomDataOutput): void {
            if (this.skillId < 0) {
                throw new Error('Forbidden value (' + this.skillId + ') on element skillId.');
            }
            param1.writeVarInt(this.skillId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeStartOkMulticraftCrafterMessage(param1);
        }

        public deserializeAs_ExchangeStartOkMulticraftCrafterMessage(param1: ICustomDataInput): void {
            this.skillId = param1.readVarUhInt();
            if (this.skillId < 0) {
                throw new Error('Forbidden value (' + this.skillId + ') on element of ExchangeStartOkMulticraftCrafterMessage.skillId.');
            }

        }
    }
    export class ExchangeStartOkMulticraftCustomerMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5817;

        skillId: number;
        crafterJobLevel: number;

        constructor() {
            this.skillId = 0;
            this.crafterJobLevel = 0;
            super();
        }

        public getMessageId(): number {
            return ExchangeStartOkMulticraftCustomerMessage.ID;
        }

        public reset(): void {
            this.skillId = 0;
            this.crafterJobLevel = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeStartOkMulticraftCustomerMessage(param1);
        }

        public serializeAs_ExchangeStartOkMulticraftCustomerMessage(param1: ICustomDataOutput): void {
            if (this.skillId < 0) {
                throw new Error('Forbidden value (' + this.skillId + ') on element skillId.');
            }
            param1.writeVarInt(this.skillId);
            if (this.crafterJobLevel < 0 || this.crafterJobLevel > 255) {
                throw new Error('Forbidden value (' + this.crafterJobLevel + ') on element crafterJobLevel.');
            }
            param1.writeByte(this.crafterJobLevel);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeStartOkMulticraftCustomerMessage(param1);
        }

        public deserializeAs_ExchangeStartOkMulticraftCustomerMessage(param1: ICustomDataInput): void {
            this.skillId = param1.readVarUhInt();
            if (this.skillId < 0) {
                throw new Error('Forbidden value (' + this.skillId + ') on element of ExchangeStartOkMulticraftCustomerMessage.skillId.');
            }
            this.crafterJobLevel = param1.readUnsignedByte();
            if (this.crafterJobLevel < 0 || this.crafterJobLevel > 255) {
                throw new Error('Forbidden value (' + this.crafterJobLevel + ') on element of ExchangeStartOkMulticraftCustomerMessage.crafterJobLevel.');
            }

        }
    }
    export class ExchangeStartOkNpcShopMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5761;

        npcSellerId: number;
        tokenId: number;
        objectsInfos: ObjectItemToSellInNpcShop[];

        constructor() {
            this.npcSellerId = 0;
            this.tokenId = 0;
            this.objectsInfos = [];
            super();
        }

        public getMessageId(): number {
            return ExchangeStartOkNpcShopMessage.ID;
        }

        public reset(): void {
            this.npcSellerId = 0;
            this.tokenId = 0;
            this.objectsInfos = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeStartOkNpcShopMessage(param1);
        }

        public serializeAs_ExchangeStartOkNpcShopMessage(param1: ICustomDataOutput): void {
            param1.writeInt(this.npcSellerId);
            if (this.tokenId < 0) {
                throw new Error('Forbidden value (' + this.tokenId + ') on element tokenId.');
            }
            param1.writeVarShort(this.tokenId);
            param1.writeShort(this.objectsInfos.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.objectsInfos.length) {
                (this.objectsInfos[_loc2_]).serializeAs_ObjectItemToSellInNpcShop(param1);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeStartOkNpcShopMessage(param1);
        }

        public deserializeAs_ExchangeStartOkNpcShopMessage(param1: ICustomDataInput): void {
            var _loc4_: ObjectItemToSellInNpcShop = null;
            this.npcSellerId = param1.readInt();
            this.tokenId = param1.readVarUhShort();
            if (this.tokenId < 0) {
                throw new Error('Forbidden value (' + this.tokenId + ') on element of ExchangeStartOkNpcShopMessage.tokenId.');
            }
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = new ObjectItemToSellInNpcShop();
                _loc4_.deserialize(param1);
                this.objectsInfos.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class ExchangeStartOkNpcTradeMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5785;

        npcId: number;

        constructor() {
            this.npcId = 0;
            super();
        }

        public getMessageId(): number {
            return ExchangeStartOkNpcTradeMessage.ID;
        }

        public reset(): void {
            this.npcId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeStartOkNpcTradeMessage(param1);
        }

        public serializeAs_ExchangeStartOkNpcTradeMessage(param1: ICustomDataOutput): void {
            param1.writeInt(this.npcId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeStartOkNpcTradeMessage(param1);
        }

        public deserializeAs_ExchangeStartOkNpcTradeMessage(param1: ICustomDataInput): void {
            this.npcId = param1.readInt();

        }
    }
    export class ExchangeStartOkRecycleTradeMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6600;

        percentToPrism: number;
        percentToPlayer: number;

        constructor() {
            this.percentToPrism = 0;
            this.percentToPlayer = 0;
            super();
        }

        public getMessageId(): number {
            return ExchangeStartOkRecycleTradeMessage.ID;
        }

        public reset(): void {
            this.percentToPrism = 0;
            this.percentToPlayer = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeStartOkRecycleTradeMessage(param1);
        }

        public serializeAs_ExchangeStartOkRecycleTradeMessage(param1: ICustomDataOutput): void {
            if (this.percentToPrism < 0) {
                throw new Error('Forbidden value (' + this.percentToPrism + ') on element percentToPrism.');
            }
            param1.writeShort(this.percentToPrism);
            if (this.percentToPlayer < 0) {
                throw new Error('Forbidden value (' + this.percentToPlayer + ') on element percentToPlayer.');
            }
            param1.writeShort(this.percentToPlayer);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeStartOkRecycleTradeMessage(param1);
        }

        public deserializeAs_ExchangeStartOkRecycleTradeMessage(param1: ICustomDataInput): void {
            this.percentToPrism = param1.readShort();
            if (this.percentToPrism < 0) {
                throw new Error('Forbidden value (' + this.percentToPrism + ') on element of ExchangeStartOkRecycleTradeMessage.percentToPrism.');
            }
            this.percentToPlayer = param1.readShort();
            if (this.percentToPlayer < 0) {
                throw new Error('Forbidden value (' + this.percentToPlayer + ') on element of ExchangeStartOkRecycleTradeMessage.percentToPlayer.');
            }

        }
    }
    export class ExchangeStartOkRunesTradeMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6567;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return ExchangeStartOkRunesTradeMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeStartOkRunesTradeMessage(param1);
        }

        public serializeAs_ExchangeStartOkRunesTradeMessage(param1: ICustomDataOutput): void {

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeStartOkRunesTradeMessage(param1);
        }

        public deserializeAs_ExchangeStartOkRunesTradeMessage(param1: ICustomDataInput): void {

        }
    }
    export class ExchangeStartedBidBuyerMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5904;

        buyerDescriptor: SellerBuyerDescriptor;

        constructor() {
            this.buyerDescriptor = new SellerBuyerDescriptor();
            super();
        }

        public getMessageId(): number {
            return ExchangeStartedBidBuyerMessage.ID;
        }

        public reset(): void {
            this.buyerDescriptor = new SellerBuyerDescriptor();
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeStartedBidBuyerMessage(param1);
        }

        public serializeAs_ExchangeStartedBidBuyerMessage(param1: ICustomDataOutput): void {
            this.buyerDescriptor.serializeAs_SellerBuyerDescriptor(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeStartedBidBuyerMessage(param1);
        }

        public deserializeAs_ExchangeStartedBidBuyerMessage(param1: ICustomDataInput): void {
            this.buyerDescriptor = new SellerBuyerDescriptor();
            this.buyerDescriptor.deserialize(param1);

        }
    }
    export class ExchangeStartedBidSellerMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5905;

        sellerDescriptor: SellerBuyerDescriptor;
        objectsInfos: ObjectItemToSellInBid[];

        constructor() {
            this.sellerDescriptor = new SellerBuyerDescriptor();
            this.objectsInfos = [];
            super();
        }

        public getMessageId(): number {
            return ExchangeStartedBidSellerMessage.ID;
        }

        public reset(): void {
            this.sellerDescriptor = new SellerBuyerDescriptor();
            this.objectsInfos = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeStartedBidSellerMessage(param1);
        }

        public serializeAs_ExchangeStartedBidSellerMessage(param1: ICustomDataOutput): void {
            this.sellerDescriptor.serializeAs_SellerBuyerDescriptor(param1);
            param1.writeShort(this.objectsInfos.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.objectsInfos.length) {
                (this.objectsInfos[_loc2_]).serializeAs_ObjectItemToSellInBid(param1);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeStartedBidSellerMessage(param1);
        }

        public deserializeAs_ExchangeStartedBidSellerMessage(param1: ICustomDataInput): void {
            var _loc4_: ObjectItemToSellInBid = null;
            this.sellerDescriptor = new SellerBuyerDescriptor();
            this.sellerDescriptor.deserialize(param1);
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = new ObjectItemToSellInBid();
                _loc4_.deserialize(param1);
                this.objectsInfos.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class ExchangeStartedMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5512;

        exchangeType: number;

        constructor() {
            this.exchangeType = 0;
            super();
        }

        public getMessageId(): number {
            return ExchangeStartedMessage.ID;
        }

        public reset(): void {
            this.exchangeType = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeStartedMessage(param1);
        }

        public serializeAs_ExchangeStartedMessage(param1: ICustomDataOutput): void {
            param1.writeByte(this.exchangeType);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeStartedMessage(param1);
        }

        public deserializeAs_ExchangeStartedMessage(param1: ICustomDataInput): void {
            this.exchangeType = param1.readByte();

        }
    }
    export class ExchangeStartedMountStockMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5984;

        objectsInfos: ObjectItem[];

        constructor() {
            this.objectsInfos = [];
            super();
        }

        public getMessageId(): number {
            return ExchangeStartedMountStockMessage.ID;
        }

        public reset(): void {
            this.objectsInfos = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeStartedMountStockMessage(param1);
        }

        public serializeAs_ExchangeStartedMountStockMessage(param1: ICustomDataOutput): void {
            param1.writeShort(this.objectsInfos.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.objectsInfos.length) {
                (this.objectsInfos[_loc2_]).serializeAs_ObjectItem(param1);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeStartedMountStockMessage(param1);
        }

        public deserializeAs_ExchangeStartedMountStockMessage(param1: ICustomDataInput): void {
            var _loc4_: ObjectItem = null;
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = new ObjectItem();
                _loc4_.deserialize(param1);
                this.objectsInfos.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class ExchangeStartedWithPodsMessage extends ExchangeStartedMessage {
        public static ID: number = 6129;

        firstCharacterId: number;
        firstCharacterCurrentWeight: number;
        firstCharacterMaxWeight: number;
        secondCharacterId: number;
        secondCharacterCurrentWeight: number;
        secondCharacterMaxWeight: number;

        constructor() {
            this.firstCharacterId = 0;
            this.firstCharacterCurrentWeight = 0;
            this.firstCharacterMaxWeight = 0;
            this.secondCharacterId = 0;
            this.secondCharacterCurrentWeight = 0;
            this.secondCharacterMaxWeight = 0;
            super();
        }

        public getMessageId(): number {
            return ExchangeStartedWithPodsMessage.ID;
        }

        public reset(): void {
            this.firstCharacterId = 0;
            this.firstCharacterCurrentWeight = 0;
            this.firstCharacterMaxWeight = 0;
            this.secondCharacterId = 0;
            this.secondCharacterCurrentWeight = 0;
            this.secondCharacterMaxWeight = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeStartedWithPodsMessage(param1);
        }

        public serializeAs_ExchangeStartedWithPodsMessage(param1: ICustomDataOutput): void {
            super.serializeAs_ExchangeStartedMessage(param1);
            param1.writeInt(this.firstCharacterId);
            if (this.firstCharacterCurrentWeight < 0) {
                throw new Error('Forbidden value (' + this.firstCharacterCurrentWeight + ') on element firstCharacterCurrentWeight.');
            }
            param1.writeVarInt(this.firstCharacterCurrentWeight);
            if (this.firstCharacterMaxWeight < 0) {
                throw new Error('Forbidden value (' + this.firstCharacterMaxWeight + ') on element firstCharacterMaxWeight.');
            }
            param1.writeVarInt(this.firstCharacterMaxWeight);
            param1.writeInt(this.secondCharacterId);
            if (this.secondCharacterCurrentWeight < 0) {
                throw new Error('Forbidden value (' + this.secondCharacterCurrentWeight + ') on element secondCharacterCurrentWeight.');
            }
            param1.writeVarInt(this.secondCharacterCurrentWeight);
            if (this.secondCharacterMaxWeight < 0) {
                throw new Error('Forbidden value (' + this.secondCharacterMaxWeight + ') on element secondCharacterMaxWeight.');
            }
            param1.writeVarInt(this.secondCharacterMaxWeight);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeStartedWithPodsMessage(param1);
        }

        public deserializeAs_ExchangeStartedWithPodsMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.firstCharacterId = param1.readInt();
            this.firstCharacterCurrentWeight = param1.readVarUhInt();
            if (this.firstCharacterCurrentWeight < 0) {
                throw new Error('Forbidden value (' + this.firstCharacterCurrentWeight + ') on element of ExchangeStartedWithPodsMessage.firstCharacterCurrentWeight.');
            }
            this.firstCharacterMaxWeight = param1.readVarUhInt();
            if (this.firstCharacterMaxWeight < 0) {
                throw new Error('Forbidden value (' + this.firstCharacterMaxWeight + ') on element of ExchangeStartedWithPodsMessage.firstCharacterMaxWeight.');
            }
            this.secondCharacterId = param1.readInt();
            this.secondCharacterCurrentWeight = param1.readVarUhInt();
            if (this.secondCharacterCurrentWeight < 0) {
                throw new Error('Forbidden value (' + this.secondCharacterCurrentWeight + ') on element of ExchangeStartedWithPodsMessage.secondCharacterCurrentWeight.');
            }
            this.secondCharacterMaxWeight = param1.readVarUhInt();
            if (this.secondCharacterMaxWeight < 0) {
                throw new Error('Forbidden value (' + this.secondCharacterMaxWeight + ') on element of ExchangeStartedWithPodsMessage.secondCharacterMaxWeight.');
            }

        }
    }
    export class ExchangeStartedWithStorageMessage extends ExchangeStartedMessage {
        public static ID: number = 6236;

        storageMaxSlot: number;

        constructor() {
            this.storageMaxSlot = 0;
            super();
        }

        public getMessageId(): number {
            return ExchangeStartedWithStorageMessage.ID;
        }

        public reset(): void {
            this.storageMaxSlot = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeStartedWithStorageMessage(param1);
        }

        public serializeAs_ExchangeStartedWithStorageMessage(param1: ICustomDataOutput): void {
            super.serializeAs_ExchangeStartedMessage(param1);
            if (this.storageMaxSlot < 0) {
                throw new Error('Forbidden value (' + this.storageMaxSlot + ') on element storageMaxSlot.');
            }
            param1.writeVarInt(this.storageMaxSlot);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeStartedWithStorageMessage(param1);
        }

        public deserializeAs_ExchangeStartedWithStorageMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.storageMaxSlot = param1.readVarUhInt();
            if (this.storageMaxSlot < 0) {
                throw new Error('Forbidden value (' + this.storageMaxSlot + ') on element of ExchangeStartedWithStorageMessage.storageMaxSlot.');
            }

        }
    }
    export class ExchangeStoppedMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6589;

        id: number;

        constructor() {
            this.id = 0;
            super();
        }

        public getMessageId(): number {
            return ExchangeStoppedMessage.ID;
        }

        public reset(): void {
            this.id = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeStoppedMessage(param1);
        }

        public serializeAs_ExchangeStoppedMessage(param1: ICustomDataOutput): void {
            if (this.id < 0) {
                throw new Error('Forbidden value (' + this.id + ') on element id.');
            }
            param1.writeVarInt(this.id);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeStoppedMessage(param1);
        }

        public deserializeAs_ExchangeStoppedMessage(param1: ICustomDataInput): void {
            this.id = param1.readVarUhInt();
            if (this.id < 0) {
                throw new Error('Forbidden value (' + this.id + ') on element of ExchangeStoppedMessage.id.');
            }

        }
    }
    export class ExchangeTypesExchangerDescriptionForUserMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5765;

        typeDescription: number[];

        constructor() {
            this.typeDescription = [];
            super();
        }

        public getMessageId(): number {
            return ExchangeTypesExchangerDescriptionForUserMessage.ID;
        }

        public reset(): void {
            this.typeDescription = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeTypesExchangerDescriptionForUserMessage(param1);
        }

        public serializeAs_ExchangeTypesExchangerDescriptionForUserMessage(param1: ICustomDataOutput): void {
            param1.writeShort(this.typeDescription.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.typeDescription.length) {
                if (this.typeDescription[_loc2_] < 0) {
                    throw new Error('Forbidden value (' + this.typeDescription[_loc2_] + ') on element 1 (starting at 1) of typeDescription.');
                }
                param1.writeVarInt(this.typeDescription[_loc2_]);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeTypesExchangerDescriptionForUserMessage(param1);
        }

        public deserializeAs_ExchangeTypesExchangerDescriptionForUserMessage(param1: ICustomDataInput): void {
            var _loc4_: number = 0;
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = param1.readVarUhInt();
                if (_loc4_ < 0) {
                    throw new Error('Forbidden value (' + _loc4_ + ') on elements of typeDescription.');
                }
                this.typeDescription.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class ExchangeTypesItemsExchangerDescriptionForUserMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5752;

        itemTypeDescriptions: BidExchangerObjectInfo[];

        constructor() {
            this.itemTypeDescriptions = [];
            super();
        }

        public getMessageId(): number {
            return ExchangeTypesItemsExchangerDescriptionForUserMessage.ID;
        }

        public reset(): void {
            this.itemTypeDescriptions = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeTypesItemsExchangerDescriptionForUserMessage(param1);
        }

        public serializeAs_ExchangeTypesItemsExchangerDescriptionForUserMessage(param1: ICustomDataOutput): void {
            param1.writeShort(this.itemTypeDescriptions.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.itemTypeDescriptions.length) {
                (this.itemTypeDescriptions[_loc2_]).serializeAs_BidExchangerObjectInfo(param1);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeTypesItemsExchangerDescriptionForUserMessage(param1);
        }

        public deserializeAs_ExchangeTypesItemsExchangerDescriptionForUserMessage(param1: ICustomDataInput): void {
            var _loc4_: BidExchangerObjectInfo = null;
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = new BidExchangerObjectInfo();
                _loc4_.deserialize(param1);
                this.itemTypeDescriptions.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class ExchangeWaitingResultMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5786;

        bwait: boolean;

        constructor() {
            this.bwait = false;
            super();
        }

        public getMessageId(): number {
            return ExchangeWaitingResultMessage.ID;
        }

        public reset(): void {
            this.bwait = false;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeWaitingResultMessage(param1);
        }

        public serializeAs_ExchangeWaitingResultMessage(param1: ICustomDataOutput): void {
            param1.writeBoolean(this.bwait);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeWaitingResultMessage(param1);
        }

        public deserializeAs_ExchangeWaitingResultMessage(param1: ICustomDataInput): void {
            this.bwait = param1.readBoolean();

        }
    }
    export class ExchangeWeightMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5793;

        currentWeight: number;
        maxWeight: number;

        constructor() {
            this.currentWeight = 0;
            this.maxWeight = 0;
            super();
        }

        public getMessageId(): number {
            return ExchangeWeightMessage.ID;
        }

        public reset(): void {
            this.currentWeight = 0;
            this.maxWeight = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeWeightMessage(param1);
        }

        public serializeAs_ExchangeWeightMessage(param1: ICustomDataOutput): void {
            if (this.currentWeight < 0) {
                throw new Error('Forbidden value (' + this.currentWeight + ') on element currentWeight.');
            }
            param1.writeVarInt(this.currentWeight);
            if (this.maxWeight < 0) {
                throw new Error('Forbidden value (' + this.maxWeight + ') on element maxWeight.');
            }
            param1.writeVarInt(this.maxWeight);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeWeightMessage(param1);
        }

        public deserializeAs_ExchangeWeightMessage(param1: ICustomDataInput): void {
            this.currentWeight = param1.readVarUhInt();
            if (this.currentWeight < 0) {
                throw new Error('Forbidden value (' + this.currentWeight + ') on element of ExchangeWeightMessage.currentWeight.');
            }
            this.maxWeight = param1.readVarUhInt();
            if (this.maxWeight < 0) {
                throw new Error('Forbidden value (' + this.maxWeight + ') on element of ExchangeWeightMessage.maxWeight.');
            }

        }
    }
    export class ItemNoMoreAvailableMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5769;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return ItemNoMoreAvailableMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ItemNoMoreAvailableMessage(param1);
        }

        public serializeAs_ItemNoMoreAvailableMessage(param1: ICustomDataOutput): void {

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ItemNoMoreAvailableMessage(param1);
        }

        public deserializeAs_ItemNoMoreAvailableMessage(param1: ICustomDataInput): void {

        }
    }
    export class JobBookSubscribeRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6592;

        jobId: number;

        constructor() {
            this.jobId = 0;
            super();
        }

        public getMessageId(): number {
            return JobBookSubscribeRequestMessage.ID;
        }

        public reset(): void {
            this.jobId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_JobBookSubscribeRequestMessage(param1);
        }

        public serializeAs_JobBookSubscribeRequestMessage(param1: ICustomDataOutput): void {
            if (this.jobId < 0) {
                throw new Error('Forbidden value (' + this.jobId + ') on element jobId.');
            }
            param1.writeByte(this.jobId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_JobBookSubscribeRequestMessage(param1);
        }

        public deserializeAs_JobBookSubscribeRequestMessage(param1: ICustomDataInput): void {
            this.jobId = param1.readByte();
            if (this.jobId < 0) {
                throw new Error('Forbidden value (' + this.jobId + ') on element of JobBookSubscribeRequestMessage.jobId.');
            }

        }
    }
    export class RecycleResultMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6601;

        nuggetsForPrism: number;
        nuggetsForPlayer: number;

        constructor() {
            this.nuggetsForPrism = 0;
            this.nuggetsForPlayer = 0;
            super();
        }

        public getMessageId(): number {
            return RecycleResultMessage.ID;
        }

        public reset(): void {
            this.nuggetsForPrism = 0;
            this.nuggetsForPlayer = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_RecycleResultMessage(param1);
        }

        public serializeAs_RecycleResultMessage(param1: ICustomDataOutput): void {
            if (this.nuggetsForPrism < 0) {
                throw new Error('Forbidden value (' + this.nuggetsForPrism + ') on element nuggetsForPrism.');
            }
            param1.writeVarInt(this.nuggetsForPrism);
            if (this.nuggetsForPlayer < 0) {
                throw new Error('Forbidden value (' + this.nuggetsForPlayer + ') on element nuggetsForPlayer.');
            }
            param1.writeVarInt(this.nuggetsForPlayer);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_RecycleResultMessage(param1);
        }

        public deserializeAs_RecycleResultMessage(param1: ICustomDataInput): void {
            this.nuggetsForPrism = param1.readVarUhInt();
            if (this.nuggetsForPrism < 0) {
                throw new Error('Forbidden value (' + this.nuggetsForPrism + ') on element of RecycleResultMessage.nuggetsForPrism.');
            }
            this.nuggetsForPlayer = param1.readVarUhInt();
            if (this.nuggetsForPlayer < 0) {
                throw new Error('Forbidden value (' + this.nuggetsForPlayer + ') on element of RecycleResultMessage.nuggetsForPlayer.');
            }

        }
    }
    export class UpdateMountBoostMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6179;

        rideId: number;
        boostToUpdateList: UpdateMountBoost[];

        constructor() {
            this.rideId = 0;
            this.boostToUpdateList = [];
            super();
        }

        public getMessageId(): number {
            return UpdateMountBoostMessage.ID;
        }

        public reset(): void {
            this.rideId = 0;
            this.boostToUpdateList = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_UpdateMountBoostMessage(param1);
        }

        public serializeAs_UpdateMountBoostMessage(param1: ICustomDataOutput): void {
            param1.writeVarInt(this.rideId);
            param1.writeShort(this.boostToUpdateList.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.boostToUpdateList.length) {
                param1.writeShort((this.boostToUpdateList[_loc2_]).getTypeId());
                (this.boostToUpdateList[_loc2_]).serialize(param1);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_UpdateMountBoostMessage(param1);
        }

        public deserializeAs_UpdateMountBoostMessage(param1: ICustomDataInput): void {
            var _loc4_: number = 0;
            var _loc5_: UpdateMountBoost = null;
            this.rideId = param1.readVarInt();
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = param1.readUnsignedShort();
                _loc5_ = <UpdateMountBoost>ProtocolTypeManager.getInstance(UpdateMountBoost, _loc4_);
                _loc5_.deserialize(param1);
                this.boostToUpdateList.push(_loc5_);
                _loc3_++;
            }

        }
    }
    export class ExchangeKamaModifiedMessage extends ExchangeObjectMessage {
        public static ID: number = 5521;

        quantity: number;

        constructor() {
            this.quantity = 0;
            super();
        }

        public getMessageId(): number {
            return ExchangeKamaModifiedMessage.ID;
        }

        public reset(): void {
            this.quantity = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeKamaModifiedMessage(param1);
        }

        public serializeAs_ExchangeKamaModifiedMessage(param1: ICustomDataOutput): void {
            super.serializeAs_ExchangeObjectMessage(param1);
            if (this.quantity < 0) {
                throw new Error('Forbidden value (' + this.quantity + ') on element quantity.');
            }
            param1.writeVarInt(this.quantity);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeKamaModifiedMessage(param1);
        }

        public deserializeAs_ExchangeKamaModifiedMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.quantity = param1.readVarUhInt();
            if (this.quantity < 0) {
                throw new Error('Forbidden value (' + this.quantity + ') on element of ExchangeKamaModifiedMessage.quantity.');
            }

        }
    }
    export class ExchangeMultiCraftCrafterCanUseHisRessourcesMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6020;

        allowed: boolean;

        constructor() {
            this.allowed = false;
            super();
        }

        public getMessageId(): number {
            return ExchangeMultiCraftCrafterCanUseHisRessourcesMessage.ID;
        }

        public reset(): void {
            this.allowed = false;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeMultiCraftCrafterCanUseHisRessourcesMessage(param1);
        }

        public serializeAs_ExchangeMultiCraftCrafterCanUseHisRessourcesMessage(param1: ICustomDataOutput): void {
            param1.writeBoolean(this.allowed);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeMultiCraftCrafterCanUseHisRessourcesMessage(param1);
        }

        public deserializeAs_ExchangeMultiCraftCrafterCanUseHisRessourcesMessage(param1: ICustomDataInput): void {
            this.allowed = param1.readBoolean();

        }
    }
    export class ExchangeMultiCraftSetCrafterCanUseHisRessourcesMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6021;

        allow: boolean;

        constructor() {
            this.allow = false;
            super();
        }

        public getMessageId(): number {
            return ExchangeMultiCraftSetCrafterCanUseHisRessourcesMessage.ID;
        }

        public reset(): void {
            this.allow = false;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeMultiCraftSetCrafterCanUseHisRessourcesMessage(param1);
        }

        public serializeAs_ExchangeMultiCraftSetCrafterCanUseHisRessourcesMessage(param1: ICustomDataOutput): void {
            param1.writeBoolean(this.allow);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeMultiCraftSetCrafterCanUseHisRessourcesMessage(param1);
        }

        public deserializeAs_ExchangeMultiCraftSetCrafterCanUseHisRessourcesMessage(param1: ICustomDataInput): void {
            this.allow = param1.readBoolean();

        }
    }
    export class ExchangeObjectModifiedInBagMessage extends ExchangeObjectMessage {
        public static ID: number = 6008;

        object: ObjectItem;

        constructor() {
            this.object = new ObjectItem();
            super();
        }

        public getMessageId(): number {
            return ExchangeObjectModifiedInBagMessage.ID;
        }

        public reset(): void {
            this.object = new ObjectItem();
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeObjectModifiedInBagMessage(param1);
        }

        public serializeAs_ExchangeObjectModifiedInBagMessage(param1: ICustomDataOutput): void {
            super.serializeAs_ExchangeObjectMessage(param1);
            this.object.serializeAs_ObjectItem(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeObjectModifiedInBagMessage(param1);
        }

        public deserializeAs_ExchangeObjectModifiedInBagMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.object = new ObjectItem();
            this.object.deserialize(param1);

        }
    }
    export class ExchangeObjectModifiedMessage extends ExchangeObjectMessage {
        public static ID: number = 5519;

        object: ObjectItem;

        constructor() {
            this.object = new ObjectItem();
            super();
        }

        public getMessageId(): number {
            return ExchangeObjectModifiedMessage.ID;
        }

        public reset(): void {
            this.object = new ObjectItem();
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeObjectModifiedMessage(param1);
        }

        public serializeAs_ExchangeObjectModifiedMessage(param1: ICustomDataOutput): void {
            super.serializeAs_ExchangeObjectMessage(param1);
            this.object.serializeAs_ObjectItem(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeObjectModifiedMessage(param1);
        }

        public deserializeAs_ExchangeObjectModifiedMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.object = new ObjectItem();
            this.object.deserialize(param1);

        }
    }
    export class ExchangeObjectPutInBagMessage extends ExchangeObjectMessage {
        public static ID: number = 6009;

        object: ObjectItem;

        constructor() {
            this.object = new ObjectItem();
            super();
        }

        public getMessageId(): number {
            return ExchangeObjectPutInBagMessage.ID;
        }

        public reset(): void {
            this.object = new ObjectItem();
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeObjectPutInBagMessage(param1);
        }

        public serializeAs_ExchangeObjectPutInBagMessage(param1: ICustomDataOutput): void {
            super.serializeAs_ExchangeObjectMessage(param1);
            this.object.serializeAs_ObjectItem(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeObjectPutInBagMessage(param1);
        }

        public deserializeAs_ExchangeObjectPutInBagMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.object = new ObjectItem();
            this.object.deserialize(param1);

        }
    }
    export class ExchangeObjectRemovedFromBagMessage extends ExchangeObjectMessage {
        public static ID: number = 6010;

        objectUID: number;

        constructor() {
            this.objectUID = 0;
            super();
        }

        public getMessageId(): number {
            return ExchangeObjectRemovedFromBagMessage.ID;
        }

        public reset(): void {
            this.objectUID = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeObjectRemovedFromBagMessage(param1);
        }

        public serializeAs_ExchangeObjectRemovedFromBagMessage(param1: ICustomDataOutput): void {
            super.serializeAs_ExchangeObjectMessage(param1);
            if (this.objectUID < 0) {
                throw new Error('Forbidden value (' + this.objectUID + ') on element objectUID.');
            }
            param1.writeVarInt(this.objectUID);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeObjectRemovedFromBagMessage(param1);
        }

        public deserializeAs_ExchangeObjectRemovedFromBagMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.objectUID = param1.readVarUhInt();
            if (this.objectUID < 0) {
                throw new Error('Forbidden value (' + this.objectUID + ') on element of ExchangeObjectRemovedFromBagMessage.objectUID.');
            }

        }
    }
    export class ExchangeObjectRemovedMessage extends ExchangeObjectMessage {
        public static ID: number = 5517;

        objectUID: number;

        constructor() {
            this.objectUID = 0;
            super();
        }

        public getMessageId(): number {
            return ExchangeObjectRemovedMessage.ID;
        }

        public reset(): void {
            this.objectUID = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeObjectRemovedMessage(param1);
        }

        public serializeAs_ExchangeObjectRemovedMessage(param1: ICustomDataOutput): void {
            super.serializeAs_ExchangeObjectMessage(param1);
            if (this.objectUID < 0) {
                throw new Error('Forbidden value (' + this.objectUID + ') on element objectUID.');
            }
            param1.writeVarInt(this.objectUID);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeObjectRemovedMessage(param1);
        }

        public deserializeAs_ExchangeObjectRemovedMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.objectUID = param1.readVarUhInt();
            if (this.objectUID < 0) {
                throw new Error('Forbidden value (' + this.objectUID + ') on element of ExchangeObjectRemovedMessage.objectUID.');
            }

        }
    }
    export class ExchangeObjectsModifiedMessage extends ExchangeObjectMessage {
        public static ID: number = 6533;

        object: ObjectItem[];

        constructor() {
            this.object = [];
            super();
        }

        public getMessageId(): number {
            return ExchangeObjectsModifiedMessage.ID;
        }

        public reset(): void {
            this.object = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeObjectsModifiedMessage(param1);
        }

        public serializeAs_ExchangeObjectsModifiedMessage(param1: ICustomDataOutput): void {
            super.serializeAs_ExchangeObjectMessage(param1);
            param1.writeShort(this.object.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.object.length) {
                (this.object[_loc2_]).serializeAs_ObjectItem(param1);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeObjectsModifiedMessage(param1);
        }

        public deserializeAs_ExchangeObjectsModifiedMessage(param1: ICustomDataInput): void {
            var _loc4_: ObjectItem = null;
            super.deserialize(param1);
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = new ObjectItem();
                _loc4_.deserialize(param1);
                this.object.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class ExchangeObjectsRemovedMessage extends ExchangeObjectMessage {
        public static ID: number = 6532;

        objectUID: number[];

        constructor() {
            this.objectUID = [];
            super();
        }

        public getMessageId(): number {
            return ExchangeObjectsRemovedMessage.ID;
        }

        public reset(): void {
            this.objectUID = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ExchangeObjectsRemovedMessage(param1);
        }

        public serializeAs_ExchangeObjectsRemovedMessage(param1: ICustomDataOutput): void {
            super.serializeAs_ExchangeObjectMessage(param1);
            param1.writeShort(this.objectUID.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.objectUID.length) {
                if (this.objectUID[_loc2_] < 0) {
                    throw new Error('Forbidden value (' + this.objectUID[_loc2_] + ') on element 1 (starting at 1) of objectUID.');
                }
                param1.writeVarInt(this.objectUID[_loc2_]);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ExchangeObjectsRemovedMessage(param1);
        }

        public deserializeAs_ExchangeObjectsRemovedMessage(param1: ICustomDataInput): void {
            var _loc4_: number = 0;
            super.deserialize(param1);
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = param1.readVarUhInt();
                if (_loc4_ < 0) {
                    throw new Error('Forbidden value (' + _loc4_ + ') on elements of objectUID.');
                }
                this.objectUID.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class GoldAddedMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6030;

        gold: GoldItem;

        constructor() {
            this.gold = new GoldItem();
            super();
        }

        public getMessageId(): number {
            return GoldAddedMessage.ID;
        }

        public reset(): void {
            this.gold = new GoldItem();
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GoldAddedMessage(param1);
        }

        public serializeAs_GoldAddedMessage(param1: ICustomDataOutput): void {
            this.gold.serializeAs_GoldItem(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GoldAddedMessage(param1);
        }

        public deserializeAs_GoldAddedMessage(param1: ICustomDataInput): void {
            this.gold = new GoldItem();
            this.gold.deserialize(param1);

        }
    }
    export class InventoryContentMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 3016;

        objects: ObjectItem[];
        kamas: number;

        constructor() {
            this.objects = [];
            this.kamas = 0;
            super();
        }

        public getMessageId(): number {
            return InventoryContentMessage.ID;
        }

        public reset(): void {
            this.objects = [];
            this.kamas = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_InventoryContentMessage(param1);
        }

        public serializeAs_InventoryContentMessage(param1: ICustomDataOutput): void {
            param1.writeShort(this.objects.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.objects.length) {
                (this.objects[_loc2_]).serializeAs_ObjectItem(param1);
                _loc2_++;
            }
            if (this.kamas < 0) {
                throw new Error('Forbidden value (' + this.kamas + ') on element kamas.');
            }
            param1.writeVarInt(this.kamas);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_InventoryContentMessage(param1);
        }

        public deserializeAs_InventoryContentMessage(param1: ICustomDataInput): void {
            var _loc4_: ObjectItem = null;
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = new ObjectItem();
                _loc4_.deserialize(param1);
                this.objects.push(_loc4_);
                _loc3_++;
            }
            this.kamas = param1.readVarUhInt();
            if (this.kamas < 0) {
                throw new Error('Forbidden value (' + this.kamas + ') on element of InventoryContentMessage.kamas.');
            }

        }
    }
    export class InventoryContentAndPresetMessage extends InventoryContentMessage {
        public static ID: number = 6162;

        presets: Preset[];
        idolsPresets: IdolsPreset[];

        constructor() {
            this.presets = [];
            this.idolsPresets = [];
            super();
        }

        public getMessageId(): number {
            return InventoryContentAndPresetMessage.ID;
        }

        public reset(): void {
            this.presets = [];
            this.idolsPresets = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_InventoryContentAndPresetMessage(param1);
        }

        public serializeAs_InventoryContentAndPresetMessage(param1: ICustomDataOutput): void {
            super.serializeAs_InventoryContentMessage(param1);
            param1.writeShort(this.presets.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.presets.length) {
                (this.presets[_loc2_]).serializeAs_Preset(param1);
                _loc2_++;
            }
            param1.writeShort(this.idolsPresets.length);
            var _loc3_: number = 0;
            while (_loc3_ < this.idolsPresets.length) {
                (this.idolsPresets[_loc3_]).serializeAs_IdolsPreset(param1);
                _loc3_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_InventoryContentAndPresetMessage(param1);
        }

        public deserializeAs_InventoryContentAndPresetMessage(param1: ICustomDataInput): void {
            var _loc6_: Preset = null;
            var _loc7_: IdolsPreset = null;
            super.deserialize(param1);
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc6_ = new Preset();
                _loc6_.deserialize(param1);
                this.presets.push(_loc6_);
                _loc3_++;
            }
            var _loc4_: number = param1.readUnsignedShort();
            var _loc5_: number = 0;
            while (_loc5_ < _loc4_) {
            _loc7_ = new IdolsPreset();
                _loc7_.deserialize(param1);
                this.idolsPresets.push(_loc7_);
                _loc5_++;
            }

        }
    }
    export class InventoryWeightMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 3009;

        weight: number;
        weightMax: number;

        constructor() {
            this.weight = 0;
            this.weightMax = 0;
            super();
        }

        public getMessageId(): number {
            return InventoryWeightMessage.ID;
        }

        public reset(): void {
            this.weight = 0;
            this.weightMax = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_InventoryWeightMessage(param1);
        }

        public serializeAs_InventoryWeightMessage(param1: ICustomDataOutput): void {
            if (this.weight < 0) {
                throw new Error('Forbidden value (' + this.weight + ') on element weight.');
            }
            param1.writeVarInt(this.weight);
            if (this.weightMax < 0) {
                throw new Error('Forbidden value (' + this.weightMax + ') on element weightMax.');
            }
            param1.writeVarInt(this.weightMax);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_InventoryWeightMessage(param1);
        }

        public deserializeAs_InventoryWeightMessage(param1: ICustomDataInput): void {
            this.weight = param1.readVarUhInt();
            if (this.weight < 0) {
                throw new Error('Forbidden value (' + this.weight + ') on element of InventoryWeightMessage.weight.');
            }
            this.weightMax = param1.readVarUhInt();
            if (this.weightMax < 0) {
                throw new Error('Forbidden value (' + this.weightMax + ') on element of InventoryWeightMessage.weightMax.');
            }

        }
    }
    export class LivingObjectChangeSkinRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5725;

        livingUID: number;
        livingPosition: number;
        skinId: number;

        constructor() {
            this.livingUID = 0;
            this.livingPosition = 0;
            this.skinId = 0;
            super();
        }

        public getMessageId(): number {
            return LivingObjectChangeSkinRequestMessage.ID;
        }

        public reset(): void {
            this.livingUID = 0;
            this.livingPosition = 0;
            this.skinId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_LivingObjectChangeSkinRequestMessage(param1);
        }

        public serializeAs_LivingObjectChangeSkinRequestMessage(param1: ICustomDataOutput): void {
            if (this.livingUID < 0) {
                throw new Error('Forbidden value (' + this.livingUID + ') on element livingUID.');
            }
            param1.writeVarInt(this.livingUID);
            if (this.livingPosition < 0 || this.livingPosition > 255) {
                throw new Error('Forbidden value (' + this.livingPosition + ') on element livingPosition.');
            }
            param1.writeByte(this.livingPosition);
            if (this.skinId < 0) {
                throw new Error('Forbidden value (' + this.skinId + ') on element skinId.');
            }
            param1.writeVarInt(this.skinId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_LivingObjectChangeSkinRequestMessage(param1);
        }

        public deserializeAs_LivingObjectChangeSkinRequestMessage(param1: ICustomDataInput): void {
            this.livingUID = param1.readVarUhInt();
            if (this.livingUID < 0) {
                throw new Error('Forbidden value (' + this.livingUID + ') on element of LivingObjectChangeSkinRequestMessage.livingUID.');
            }
            this.livingPosition = param1.readUnsignedByte();
            if (this.livingPosition < 0 || this.livingPosition > 255) {
                throw new Error('Forbidden value (' + this.livingPosition + ') on element of LivingObjectChangeSkinRequestMessage.livingPosition.');
            }
            this.skinId = param1.readVarUhInt();
            if (this.skinId < 0) {
                throw new Error('Forbidden value (' + this.skinId + ') on element of LivingObjectChangeSkinRequestMessage.skinId.');
            }

        }
    }
    export class LivingObjectDissociateMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5723;

        livingUID: number;
        livingPosition: number;

        constructor() {
            this.livingUID = 0;
            this.livingPosition = 0;
            super();
        }

        public getMessageId(): number {
            return LivingObjectDissociateMessage.ID;
        }

        public reset(): void {
            this.livingUID = 0;
            this.livingPosition = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_LivingObjectDissociateMessage(param1);
        }

        public serializeAs_LivingObjectDissociateMessage(param1: ICustomDataOutput): void {
            if (this.livingUID < 0) {
                throw new Error('Forbidden value (' + this.livingUID + ') on element livingUID.');
            }
            param1.writeVarInt(this.livingUID);
            if (this.livingPosition < 0 || this.livingPosition > 255) {
                throw new Error('Forbidden value (' + this.livingPosition + ') on element livingPosition.');
            }
            param1.writeByte(this.livingPosition);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_LivingObjectDissociateMessage(param1);
        }

        public deserializeAs_LivingObjectDissociateMessage(param1: ICustomDataInput): void {
            this.livingUID = param1.readVarUhInt();
            if (this.livingUID < 0) {
                throw new Error('Forbidden value (' + this.livingUID + ') on element of LivingObjectDissociateMessage.livingUID.');
            }
            this.livingPosition = param1.readUnsignedByte();
            if (this.livingPosition < 0 || this.livingPosition > 255) {
                throw new Error('Forbidden value (' + this.livingPosition + ') on element of LivingObjectDissociateMessage.livingPosition.');
            }

        }
    }
    export class LivingObjectMessageMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6065;

        msgId: number;
        timeStamp: number;
        owner: string;
        objectGenericId: number;

        constructor() {
            this.msgId = 0;
            this.timeStamp = 0;
            this.owner = '';
            this.objectGenericId = 0;
            super();
        }

        public getMessageId(): number {
            return LivingObjectMessageMessage.ID;
        }

        public reset(): void {
            this.msgId = 0;
            this.timeStamp = 0;
            this.owner = '';
            this.objectGenericId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_LivingObjectMessageMessage(param1);
        }

        public serializeAs_LivingObjectMessageMessage(param1: ICustomDataOutput): void {
            if (this.msgId < 0) {
                throw new Error('Forbidden value (' + this.msgId + ') on element msgId.');
            }
            param1.writeVarShort(this.msgId);
            if (this.timeStamp < 0) {
                throw new Error('Forbidden value (' + this.timeStamp + ') on element timeStamp.');
            }
            param1.writeInt(this.timeStamp);
            param1.writeUTF(this.owner);
            if (this.objectGenericId < 0) {
                throw new Error('Forbidden value (' + this.objectGenericId + ') on element objectGenericId.');
            }
            param1.writeVarShort(this.objectGenericId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_LivingObjectMessageMessage(param1);
        }

        public deserializeAs_LivingObjectMessageMessage(param1: ICustomDataInput): void {
            this.msgId = param1.readVarUhShort();
            if (this.msgId < 0) {
                throw new Error('Forbidden value (' + this.msgId + ') on element of LivingObjectMessageMessage.msgId.');
            }
            this.timeStamp = param1.readInt();
            if (this.timeStamp < 0) {
                throw new Error('Forbidden value (' + this.timeStamp + ') on element of LivingObjectMessageMessage.timeStamp.');
            }
            this.owner = param1.readUTF();
            this.objectGenericId = param1.readVarUhShort();
            if (this.objectGenericId < 0) {
                throw new Error('Forbidden value (' + this.objectGenericId + ') on element of LivingObjectMessageMessage.objectGenericId.');
            }

        }
    }
    export class LivingObjectMessageRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6066;

        msgId: number;
        parameters: string[];
        livingObject: number;

        constructor() {
            this.msgId = 0;
            this.parameters = [];
            this.livingObject = 0;
            super();
        }

        public getMessageId(): number {
            return LivingObjectMessageRequestMessage.ID;
        }

        public reset(): void {
            this.msgId = 0;
            this.parameters = [];
            this.livingObject = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_LivingObjectMessageRequestMessage(param1);
        }

        public serializeAs_LivingObjectMessageRequestMessage(param1: ICustomDataOutput): void {
            if (this.msgId < 0) {
                throw new Error('Forbidden value (' + this.msgId + ') on element msgId.');
            }
            param1.writeVarShort(this.msgId);
            param1.writeShort(this.parameters.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.parameters.length) {
                param1.writeUTF(this.parameters[_loc2_]);
                _loc2_++;
            }
            if (this.livingObject < 0) {
                throw new Error('Forbidden value (' + this.livingObject + ') on element livingObject.');
            }
            param1.writeVarInt(this.livingObject);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_LivingObjectMessageRequestMessage(param1);
        }

        public deserializeAs_LivingObjectMessageRequestMessage(param1: ICustomDataInput): void {
            var _loc4_: string = null;
            this.msgId = param1.readVarUhShort();
            if (this.msgId < 0) {
                throw new Error('Forbidden value (' + this.msgId + ') on element of LivingObjectMessageRequestMessage.msgId.');
            }
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = param1.readUTF();
                this.parameters.push(_loc4_);
                _loc3_++;
            }
            this.livingObject = param1.readVarUhInt();
            if (this.livingObject < 0) {
                throw new Error('Forbidden value (' + this.livingObject + ') on element of LivingObjectMessageRequestMessage.livingObject.');
            }

        }
    }
    export class SymbioticObjectAssociatedMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6527;

        hostUID: number;

        constructor() {
            this.hostUID = 0;
            super();
        }

        public getMessageId(): number {
            return SymbioticObjectAssociatedMessage.ID;
        }

        public reset(): void {
            this.hostUID = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_SymbioticObjectAssociatedMessage(param1);
        }

        public serializeAs_SymbioticObjectAssociatedMessage(param1: ICustomDataOutput): void {
            if (this.hostUID < 0) {
                throw new Error('Forbidden value (' + this.hostUID + ') on element hostUID.');
            }
            param1.writeVarInt(this.hostUID);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_SymbioticObjectAssociatedMessage(param1);
        }

        public deserializeAs_SymbioticObjectAssociatedMessage(param1: ICustomDataInput): void {
            this.hostUID = param1.readVarUhInt();
            if (this.hostUID < 0) {
                throw new Error('Forbidden value (' + this.hostUID + ') on element of SymbioticObjectAssociatedMessage.hostUID.');
            }

        }
    }
    export class MimicryObjectAssociatedMessage extends SymbioticObjectAssociatedMessage {
        public static ID: number = 6462;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return MimicryObjectAssociatedMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_MimicryObjectAssociatedMessage(param1);
        }

        public serializeAs_MimicryObjectAssociatedMessage(param1: ICustomDataOutput): void {
            super.serializeAs_SymbioticObjectAssociatedMessage(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_MimicryObjectAssociatedMessage(param1);
        }

        public deserializeAs_MimicryObjectAssociatedMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);

        }
    }
    export class MimicryObjectEraseRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6457;

        hostUID: number;
        hostPos: number;

        constructor() {
            this.hostUID = 0;
            this.hostPos = 0;
            super();
        }

        public getMessageId(): number {
            return MimicryObjectEraseRequestMessage.ID;
        }

        public reset(): void {
            this.hostUID = 0;
            this.hostPos = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_MimicryObjectEraseRequestMessage(param1);
        }

        public serializeAs_MimicryObjectEraseRequestMessage(param1: ICustomDataOutput): void {
            if (this.hostUID < 0) {
                throw new Error('Forbidden value (' + this.hostUID + ') on element hostUID.');
            }
            param1.writeVarInt(this.hostUID);
            if (this.hostPos < 0 || this.hostPos > 255) {
                throw new Error('Forbidden value (' + this.hostPos + ') on element hostPos.');
            }
            param1.writeByte(this.hostPos);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_MimicryObjectEraseRequestMessage(param1);
        }

        public deserializeAs_MimicryObjectEraseRequestMessage(param1: ICustomDataInput): void {
            this.hostUID = param1.readVarUhInt();
            if (this.hostUID < 0) {
                throw new Error('Forbidden value (' + this.hostUID + ') on element of MimicryObjectEraseRequestMessage.hostUID.');
            }
            this.hostPos = param1.readUnsignedByte();
            if (this.hostPos < 0 || this.hostPos > 255) {
                throw new Error('Forbidden value (' + this.hostPos + ') on element of MimicryObjectEraseRequestMessage.hostPos.');
            }

        }
    }
    export class ObjectErrorMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 3004;

        reason: number;

        constructor() {
            this.reason = 0;
            super();
        }

        public getMessageId(): number {
            return ObjectErrorMessage.ID;
        }

        public reset(): void {
            this.reason = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ObjectErrorMessage(param1);
        }

        public serializeAs_ObjectErrorMessage(param1: ICustomDataOutput): void {
            param1.writeByte(this.reason);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ObjectErrorMessage(param1);
        }

        public deserializeAs_ObjectErrorMessage(param1: ICustomDataInput): void {
            this.reason = param1.readByte();

        }
    }
    export class SymbioticObjectErrorMessage extends ObjectErrorMessage {
        public static ID: number = 6526;

        errorCode: number;

        constructor() {
            this.errorCode = 0;
            super();
        }

        public getMessageId(): number {
            return SymbioticObjectErrorMessage.ID;
        }

        public reset(): void {
            this.errorCode = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_SymbioticObjectErrorMessage(param1);
        }

        public serializeAs_SymbioticObjectErrorMessage(param1: ICustomDataOutput): void {
            super.serializeAs_ObjectErrorMessage(param1);
            param1.writeByte(this.errorCode);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_SymbioticObjectErrorMessage(param1);
        }

        public deserializeAs_SymbioticObjectErrorMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.errorCode = param1.readByte();

        }
    }
    export class MimicryObjectErrorMessage extends SymbioticObjectErrorMessage {
        public static ID: number = 6461;

        preview: boolean;

        constructor() {
            this.preview = false;
            super();
        }

        public getMessageId(): number {
            return MimicryObjectErrorMessage.ID;
        }

        public reset(): void {
            this.preview = false;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_MimicryObjectErrorMessage(param1);
        }

        public serializeAs_MimicryObjectErrorMessage(param1: ICustomDataOutput): void {
            super.serializeAs_SymbioticObjectErrorMessage(param1);
            param1.writeBoolean(this.preview);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_MimicryObjectErrorMessage(param1);
        }

        public deserializeAs_MimicryObjectErrorMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.preview = param1.readBoolean();

        }
    }
    export class SymbioticObjectAssociateRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6522;

        symbioteUID: number;
        symbiotePos: number;
        hostUID: number;
        hostPos: number;

        constructor() {
            this.symbioteUID = 0;
            this.symbiotePos = 0;
            this.hostUID = 0;
            this.hostPos = 0;
            super();
        }

        public getMessageId(): number {
            return SymbioticObjectAssociateRequestMessage.ID;
        }

        public reset(): void {
            this.symbioteUID = 0;
            this.symbiotePos = 0;
            this.hostUID = 0;
            this.hostPos = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_SymbioticObjectAssociateRequestMessage(param1);
        }

        public serializeAs_SymbioticObjectAssociateRequestMessage(param1: ICustomDataOutput): void {
            if (this.symbioteUID < 0) {
                throw new Error('Forbidden value (' + this.symbioteUID + ') on element symbioteUID.');
            }
            param1.writeVarInt(this.symbioteUID);
            if (this.symbiotePos < 0 || this.symbiotePos > 255) {
                throw new Error('Forbidden value (' + this.symbiotePos + ') on element symbiotePos.');
            }
            param1.writeByte(this.symbiotePos);
            if (this.hostUID < 0) {
                throw new Error('Forbidden value (' + this.hostUID + ') on element hostUID.');
            }
            param1.writeVarInt(this.hostUID);
            if (this.hostPos < 0 || this.hostPos > 255) {
                throw new Error('Forbidden value (' + this.hostPos + ') on element hostPos.');
            }
            param1.writeByte(this.hostPos);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_SymbioticObjectAssociateRequestMessage(param1);
        }

        public deserializeAs_SymbioticObjectAssociateRequestMessage(param1: ICustomDataInput): void {
            this.symbioteUID = param1.readVarUhInt();
            if (this.symbioteUID < 0) {
                throw new Error('Forbidden value (' + this.symbioteUID + ') on element of SymbioticObjectAssociateRequestMessage.symbioteUID.');
            }
            this.symbiotePos = param1.readUnsignedByte();
            if (this.symbiotePos < 0 || this.symbiotePos > 255) {
                throw new Error('Forbidden value (' + this.symbiotePos + ') on element of SymbioticObjectAssociateRequestMessage.symbiotePos.');
            }
            this.hostUID = param1.readVarUhInt();
            if (this.hostUID < 0) {
                throw new Error('Forbidden value (' + this.hostUID + ') on element of SymbioticObjectAssociateRequestMessage.hostUID.');
            }
            this.hostPos = param1.readUnsignedByte();
            if (this.hostPos < 0 || this.hostPos > 255) {
                throw new Error('Forbidden value (' + this.hostPos + ') on element of SymbioticObjectAssociateRequestMessage.hostPos.');
            }

        }
    }
    export class MimicryObjectFeedAndAssociateRequestMessage extends SymbioticObjectAssociateRequestMessage {
        public static ID: number = 6460;

        foodUID: number;
        foodPos: number;
        preview: boolean;

        constructor() {
            this.foodUID = 0;
            this.foodPos = 0;
            this.preview = false;
            super();
        }

        public getMessageId(): number {
            return MimicryObjectFeedAndAssociateRequestMessage.ID;
        }

        public reset(): void {
            this.foodUID = 0;
            this.foodPos = 0;
            this.preview = false;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_MimicryObjectFeedAndAssociateRequestMessage(param1);
        }

        public serializeAs_MimicryObjectFeedAndAssociateRequestMessage(param1: ICustomDataOutput): void {
            super.serializeAs_SymbioticObjectAssociateRequestMessage(param1);
            if (this.foodUID < 0) {
                throw new Error('Forbidden value (' + this.foodUID + ') on element foodUID.');
            }
            param1.writeVarInt(this.foodUID);
            if (this.foodPos < 0 || this.foodPos > 255) {
                throw new Error('Forbidden value (' + this.foodPos + ') on element foodPos.');
            }
            param1.writeByte(this.foodPos);
            param1.writeBoolean(this.preview);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_MimicryObjectFeedAndAssociateRequestMessage(param1);
        }

        public deserializeAs_MimicryObjectFeedAndAssociateRequestMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.foodUID = param1.readVarUhInt();
            if (this.foodUID < 0) {
                throw new Error('Forbidden value (' + this.foodUID + ') on element of MimicryObjectFeedAndAssociateRequestMessage.foodUID.');
            }
            this.foodPos = param1.readUnsignedByte();
            if (this.foodPos < 0 || this.foodPos > 255) {
                throw new Error('Forbidden value (' + this.foodPos + ') on element of MimicryObjectFeedAndAssociateRequestMessage.foodPos.');
            }
            this.preview = param1.readBoolean();

        }
    }
    export class MimicryObjectPreviewMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6458;

        result: ObjectItem;

        constructor() {
            this.result = new ObjectItem();
            super();
        }

        public getMessageId(): number {
            return MimicryObjectPreviewMessage.ID;
        }

        public reset(): void {
            this.result = new ObjectItem();
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_MimicryObjectPreviewMessage(param1);
        }

        public serializeAs_MimicryObjectPreviewMessage(param1: ICustomDataOutput): void {
            this.result.serializeAs_ObjectItem(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_MimicryObjectPreviewMessage(param1);
        }

        public deserializeAs_MimicryObjectPreviewMessage(param1: ICustomDataInput): void {
            this.result = new ObjectItem();
            this.result.deserialize(param1);

        }
    }
    export class ObjectAddedMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 3025;

        object: ObjectItem;

        constructor() {
            this.object = new ObjectItem();
            super();
        }

        public getMessageId(): number {
            return ObjectAddedMessage.ID;
        }

        public reset(): void {
            this.object = new ObjectItem();
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ObjectAddedMessage(param1);
        }

        public serializeAs_ObjectAddedMessage(param1: ICustomDataOutput): void {
            this.object.serializeAs_ObjectItem(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ObjectAddedMessage(param1);
        }

        public deserializeAs_ObjectAddedMessage(param1: ICustomDataInput): void {
            this.object = new ObjectItem();
            this.object.deserialize(param1);

        }
    }
    export class ObjectDeleteMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 3022;

        objectUID: number;
        quantity: number;

        constructor() {
            this.objectUID = 0;
            this.quantity = 0;
            super();
        }

        public getMessageId(): number {
            return ObjectDeleteMessage.ID;
        }

        public reset(): void {
            this.objectUID = 0;
            this.quantity = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ObjectDeleteMessage(param1);
        }

        public serializeAs_ObjectDeleteMessage(param1: ICustomDataOutput): void {
            if (this.objectUID < 0) {
                throw new Error('Forbidden value (' + this.objectUID + ') on element objectUID.');
            }
            param1.writeVarInt(this.objectUID);
            if (this.quantity < 0) {
                throw new Error('Forbidden value (' + this.quantity + ') on element quantity.');
            }
            param1.writeVarInt(this.quantity);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ObjectDeleteMessage(param1);
        }

        public deserializeAs_ObjectDeleteMessage(param1: ICustomDataInput): void {
            this.objectUID = param1.readVarUhInt();
            if (this.objectUID < 0) {
                throw new Error('Forbidden value (' + this.objectUID + ') on element of ObjectDeleteMessage.objectUID.');
            }
            this.quantity = param1.readVarUhInt();
            if (this.quantity < 0) {
                throw new Error('Forbidden value (' + this.quantity + ') on element of ObjectDeleteMessage.quantity.');
            }

        }
    }
    export class ObjectDeletedMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 3024;

        objectUID: number;

        constructor() {
            this.objectUID = 0;
            super();
        }

        public getMessageId(): number {
            return ObjectDeletedMessage.ID;
        }

        public reset(): void {
            this.objectUID = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ObjectDeletedMessage(param1);
        }

        public serializeAs_ObjectDeletedMessage(param1: ICustomDataOutput): void {
            if (this.objectUID < 0) {
                throw new Error('Forbidden value (' + this.objectUID + ') on element objectUID.');
            }
            param1.writeVarInt(this.objectUID);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ObjectDeletedMessage(param1);
        }

        public deserializeAs_ObjectDeletedMessage(param1: ICustomDataInput): void {
            this.objectUID = param1.readVarUhInt();
            if (this.objectUID < 0) {
                throw new Error('Forbidden value (' + this.objectUID + ') on element of ObjectDeletedMessage.objectUID.');
            }

        }
    }
    export class ObjectDropMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 3005;

        objectUID: number;
        quantity: number;

        constructor() {
            this.objectUID = 0;
            this.quantity = 0;
            super();
        }

        public getMessageId(): number {
            return ObjectDropMessage.ID;
        }

        public reset(): void {
            this.objectUID = 0;
            this.quantity = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ObjectDropMessage(param1);
        }

        public serializeAs_ObjectDropMessage(param1: ICustomDataOutput): void {
            if (this.objectUID < 0) {
                throw new Error('Forbidden value (' + this.objectUID + ') on element objectUID.');
            }
            param1.writeVarInt(this.objectUID);
            if (this.quantity < 0) {
                throw new Error('Forbidden value (' + this.quantity + ') on element quantity.');
            }
            param1.writeVarInt(this.quantity);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ObjectDropMessage(param1);
        }

        public deserializeAs_ObjectDropMessage(param1: ICustomDataInput): void {
            this.objectUID = param1.readVarUhInt();
            if (this.objectUID < 0) {
                throw new Error('Forbidden value (' + this.objectUID + ') on element of ObjectDropMessage.objectUID.');
            }
            this.quantity = param1.readVarUhInt();
            if (this.quantity < 0) {
                throw new Error('Forbidden value (' + this.quantity + ') on element of ObjectDropMessage.quantity.');
            }

        }
    }
    export class ObjectFeedMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6290;

        objectUID: number;
        foodUID: number;
        foodQuantity: number;

        constructor() {
            this.objectUID = 0;
            this.foodUID = 0;
            this.foodQuantity = 0;
            super();
        }

        public getMessageId(): number {
            return ObjectFeedMessage.ID;
        }

        public reset(): void {
            this.objectUID = 0;
            this.foodUID = 0;
            this.foodQuantity = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ObjectFeedMessage(param1);
        }

        public serializeAs_ObjectFeedMessage(param1: ICustomDataOutput): void {
            if (this.objectUID < 0) {
                throw new Error('Forbidden value (' + this.objectUID + ') on element objectUID.');
            }
            param1.writeVarInt(this.objectUID);
            if (this.foodUID < 0) {
                throw new Error('Forbidden value (' + this.foodUID + ') on element foodUID.');
            }
            param1.writeVarInt(this.foodUID);
            if (this.foodQuantity < 0) {
                throw new Error('Forbidden value (' + this.foodQuantity + ') on element foodQuantity.');
            }
            param1.writeVarInt(this.foodQuantity);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ObjectFeedMessage(param1);
        }

        public deserializeAs_ObjectFeedMessage(param1: ICustomDataInput): void {
            this.objectUID = param1.readVarUhInt();
            if (this.objectUID < 0) {
                throw new Error('Forbidden value (' + this.objectUID + ') on element of ObjectFeedMessage.objectUID.');
            }
            this.foodUID = param1.readVarUhInt();
            if (this.foodUID < 0) {
                throw new Error('Forbidden value (' + this.foodUID + ') on element of ObjectFeedMessage.foodUID.');
            }
            this.foodQuantity = param1.readVarUhInt();
            if (this.foodQuantity < 0) {
                throw new Error('Forbidden value (' + this.foodQuantity + ') on element of ObjectFeedMessage.foodQuantity.');
            }

        }
    }
    export class ObjectFoundWhileRecoltingMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6017;

        genericId: number;
        quantity: number;
        resourceGenericId: number;

        constructor() {
            this.genericId = 0;
            this.quantity = 0;
            this.resourceGenericId = 0;
            super();
        }

        public getMessageId(): number {
            return ObjectFoundWhileRecoltingMessage.ID;
        }

        public reset(): void {
            this.genericId = 0;
            this.quantity = 0;
            this.resourceGenericId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ObjectFoundWhileRecoltingMessage(param1);
        }

        public serializeAs_ObjectFoundWhileRecoltingMessage(param1: ICustomDataOutput): void {
            if (this.genericId < 0) {
                throw new Error('Forbidden value (' + this.genericId + ') on element genericId.');
            }
            param1.writeVarShort(this.genericId);
            if (this.quantity < 0) {
                throw new Error('Forbidden value (' + this.quantity + ') on element quantity.');
            }
            param1.writeVarInt(this.quantity);
            if (this.resourceGenericId < 0) {
                throw new Error('Forbidden value (' + this.resourceGenericId + ') on element resourceGenericId.');
            }
            param1.writeVarInt(this.resourceGenericId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ObjectFoundWhileRecoltingMessage(param1);
        }

        public deserializeAs_ObjectFoundWhileRecoltingMessage(param1: ICustomDataInput): void {
            this.genericId = param1.readVarUhShort();
            if (this.genericId < 0) {
                throw new Error('Forbidden value (' + this.genericId + ') on element of ObjectFoundWhileRecoltingMessage.genericId.');
            }
            this.quantity = param1.readVarUhInt();
            if (this.quantity < 0) {
                throw new Error('Forbidden value (' + this.quantity + ') on element of ObjectFoundWhileRecoltingMessage.quantity.');
            }
            this.resourceGenericId = param1.readVarUhInt();
            if (this.resourceGenericId < 0) {
                throw new Error('Forbidden value (' + this.resourceGenericId + ') on element of ObjectFoundWhileRecoltingMessage.resourceGenericId.');
            }

        }
    }
    export class ObjectJobAddedMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6014;

        jobId: number;

        constructor() {
            this.jobId = 0;
            super();
        }

        public getMessageId(): number {
            return ObjectJobAddedMessage.ID;
        }

        public reset(): void {
            this.jobId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ObjectJobAddedMessage(param1);
        }

        public serializeAs_ObjectJobAddedMessage(param1: ICustomDataOutput): void {
            if (this.jobId < 0) {
                throw new Error('Forbidden value (' + this.jobId + ') on element jobId.');
            }
            param1.writeByte(this.jobId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ObjectJobAddedMessage(param1);
        }

        public deserializeAs_ObjectJobAddedMessage(param1: ICustomDataInput): void {
            this.jobId = param1.readByte();
            if (this.jobId < 0) {
                throw new Error('Forbidden value (' + this.jobId + ') on element of ObjectJobAddedMessage.jobId.');
            }

        }
    }
    export class ObjectModifiedMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 3029;

        object: ObjectItem;

        constructor() {
            this.object = new ObjectItem();
            super();
        }

        public getMessageId(): number {
            return ObjectModifiedMessage.ID;
        }

        public reset(): void {
            this.object = new ObjectItem();
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ObjectModifiedMessage(param1);
        }

        public serializeAs_ObjectModifiedMessage(param1: ICustomDataOutput): void {
            this.object.serializeAs_ObjectItem(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ObjectModifiedMessage(param1);
        }

        public deserializeAs_ObjectModifiedMessage(param1: ICustomDataInput): void {
            this.object = new ObjectItem();
            this.object.deserialize(param1);

        }
    }
    export class ObjectMovementMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 3010;

        objectUID: number;
        position: number;

        constructor() {
            this.objectUID = 0;
            this.position = 63;
            super();
        }

        public getMessageId(): number {
            return ObjectMovementMessage.ID;
        }

        public reset(): void {
            this.objectUID = 0;
            this.position = 63;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ObjectMovementMessage(param1);
        }

        public serializeAs_ObjectMovementMessage(param1: ICustomDataOutput): void {
            if (this.objectUID < 0) {
                throw new Error('Forbidden value (' + this.objectUID + ') on element objectUID.');
            }
            param1.writeVarInt(this.objectUID);
            param1.writeByte(this.position);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ObjectMovementMessage(param1);
        }

        public deserializeAs_ObjectMovementMessage(param1: ICustomDataInput): void {
            this.objectUID = param1.readVarUhInt();
            if (this.objectUID < 0) {
                throw new Error('Forbidden value (' + this.objectUID + ') on element of ObjectMovementMessage.objectUID.');
            }
            this.position = param1.readUnsignedByte();
            if (this.position < 0 || this.position > 255) {
                throw new Error('Forbidden value (' + this.position + ') on element of ObjectMovementMessage.position.');
            }

        }
    }
    export class ObjectQuantityMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 3023;

        objectUID: number;
        quantity: number;

        constructor() {
            this.objectUID = 0;
            this.quantity = 0;
            super();
        }

        public getMessageId(): number {
            return ObjectQuantityMessage.ID;
        }

        public reset(): void {
            this.objectUID = 0;
            this.quantity = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ObjectQuantityMessage(param1);
        }

        public serializeAs_ObjectQuantityMessage(param1: ICustomDataOutput): void {
            if (this.objectUID < 0) {
                throw new Error('Forbidden value (' + this.objectUID + ') on element objectUID.');
            }
            param1.writeVarInt(this.objectUID);
            if (this.quantity < 0) {
                throw new Error('Forbidden value (' + this.quantity + ') on element quantity.');
            }
            param1.writeVarInt(this.quantity);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ObjectQuantityMessage(param1);
        }

        public deserializeAs_ObjectQuantityMessage(param1: ICustomDataInput): void {
            this.objectUID = param1.readVarUhInt();
            if (this.objectUID < 0) {
                throw new Error('Forbidden value (' + this.objectUID + ') on element of ObjectQuantityMessage.objectUID.');
            }
            this.quantity = param1.readVarUhInt();
            if (this.quantity < 0) {
                throw new Error('Forbidden value (' + this.quantity + ') on element of ObjectQuantityMessage.quantity.');
            }

        }
    }
    export class ObjectSetPositionMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 3021;

        objectUID: number;
        position: number;
        quantity: number;

        constructor() {
            this.objectUID = 0;
            this.position = 63;
            this.quantity = 0;
            super();
        }

        public getMessageId(): number {
            return ObjectSetPositionMessage.ID;
        }

        public reset(): void {
            this.objectUID = 0;
            this.position = 63;
            this.quantity = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ObjectSetPositionMessage(param1);
        }

        public serializeAs_ObjectSetPositionMessage(param1: ICustomDataOutput): void {
            if (this.objectUID < 0) {
                throw new Error('Forbidden value (' + this.objectUID + ') on element objectUID.');
            }
            param1.writeVarInt(this.objectUID);
            param1.writeByte(this.position);
            if (this.quantity < 0) {
                throw new Error('Forbidden value (' + this.quantity + ') on element quantity.');
            }
            param1.writeVarInt(this.quantity);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ObjectSetPositionMessage(param1);
        }

        public deserializeAs_ObjectSetPositionMessage(param1: ICustomDataInput): void {
            this.objectUID = param1.readVarUhInt();
            if (this.objectUID < 0) {
                throw new Error('Forbidden value (' + this.objectUID + ') on element of ObjectSetPositionMessage.objectUID.');
            }
            this.position = param1.readUnsignedByte();
            if (this.position < 0 || this.position > 255) {
                throw new Error('Forbidden value (' + this.position + ') on element of ObjectSetPositionMessage.position.');
            }
            this.quantity = param1.readVarUhInt();
            if (this.quantity < 0) {
                throw new Error('Forbidden value (' + this.quantity + ') on element of ObjectSetPositionMessage.quantity.');
            }

        }
    }
    export class ObjectUseMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 3019;

        objectUID: number;

        constructor() {
            this.objectUID = 0;
            super();
        }

        public getMessageId(): number {
            return ObjectUseMessage.ID;
        }

        public reset(): void {
            this.objectUID = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ObjectUseMessage(param1);
        }

        public serializeAs_ObjectUseMessage(param1: ICustomDataOutput): void {
            if (this.objectUID < 0) {
                throw new Error('Forbidden value (' + this.objectUID + ') on element objectUID.');
            }
            param1.writeVarInt(this.objectUID);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ObjectUseMessage(param1);
        }

        public deserializeAs_ObjectUseMessage(param1: ICustomDataInput): void {
            this.objectUID = param1.readVarUhInt();
            if (this.objectUID < 0) {
                throw new Error('Forbidden value (' + this.objectUID + ') on element of ObjectUseMessage.objectUID.');
            }

        }
    }
    export class ObjectUseMultipleMessage extends ObjectUseMessage {
        public static ID: number = 6234;

        quantity: number;

        constructor() {
            this.quantity = 0;
            super();
        }

        public getMessageId(): number {
            return ObjectUseMultipleMessage.ID;
        }

        public reset(): void {
            this.quantity = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ObjectUseMultipleMessage(param1);
        }

        public serializeAs_ObjectUseMultipleMessage(param1: ICustomDataOutput): void {
            super.serializeAs_ObjectUseMessage(param1);
            if (this.quantity < 0) {
                throw new Error('Forbidden value (' + this.quantity + ') on element quantity.');
            }
            param1.writeVarInt(this.quantity);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ObjectUseMultipleMessage(param1);
        }

        public deserializeAs_ObjectUseMultipleMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.quantity = param1.readVarUhInt();
            if (this.quantity < 0) {
                throw new Error('Forbidden value (' + this.quantity + ') on element of ObjectUseMultipleMessage.quantity.');
            }

        }
    }
    export class ObjectUseOnCellMessage extends ObjectUseMessage {
        public static ID: number = 3013;

        cells: number;

        constructor() {
            this.cells = 0;
            super();
        }

        public getMessageId(): number {
            return ObjectUseOnCellMessage.ID;
        }

        public reset(): void {
            this.cells = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ObjectUseOnCellMessage(param1);
        }

        public serializeAs_ObjectUseOnCellMessage(param1: ICustomDataOutput): void {
            super.serializeAs_ObjectUseMessage(param1);
            if (this.cells < 0 || this.cells > 559) {
                throw new Error('Forbidden value (' + this.cells + ') on element cells.');
            }
            param1.writeVarShort(this.cells);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ObjectUseOnCellMessage(param1);
        }

        public deserializeAs_ObjectUseOnCellMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.cells = param1.readVarUhShort();
            if (this.cells < 0 || this.cells > 559) {
                throw new Error('Forbidden value (' + this.cells + ') on element of ObjectUseOnCellMessage.cells.');
            }

        }
    }
    export class ObjectUseOnCharacterMessage extends ObjectUseMessage {
        public static ID: number = 3003;

        characterId: number;

        constructor() {
            this.characterId = 0;
            super();
        }

        public getMessageId(): number {
            return ObjectUseOnCharacterMessage.ID;
        }

        public reset(): void {
            this.characterId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ObjectUseOnCharacterMessage(param1);
        }

        public serializeAs_ObjectUseOnCharacterMessage(param1: ICustomDataOutput): void {
            super.serializeAs_ObjectUseMessage(param1);
            if (this.characterId < 0) {
                throw new Error('Forbidden value (' + this.characterId + ') on element characterId.');
            }
            param1.writeVarInt(this.characterId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ObjectUseOnCharacterMessage(param1);
        }

        public deserializeAs_ObjectUseOnCharacterMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.characterId = param1.readVarUhInt();
            if (this.characterId < 0) {
                throw new Error('Forbidden value (' + this.characterId + ') on element of ObjectUseOnCharacterMessage.characterId.');
            }

        }
    }
    export class ObjectsAddedMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6033;

        object: ObjectItem[];

        constructor() {
            this.object = [];
            super();
        }

        public getMessageId(): number {
            return ObjectsAddedMessage.ID;
        }

        public reset(): void {
            this.object = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ObjectsAddedMessage(param1);
        }

        public serializeAs_ObjectsAddedMessage(param1: ICustomDataOutput): void {
            param1.writeShort(this.object.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.object.length) {
                (this.object[_loc2_]).serializeAs_ObjectItem(param1);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ObjectsAddedMessage(param1);
        }

        public deserializeAs_ObjectsAddedMessage(param1: ICustomDataInput): void {
            var _loc4_: ObjectItem = null;
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = new ObjectItem();
                _loc4_.deserialize(param1);
                this.object.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class ObjectsDeletedMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6034;

        objectUID: number[];

        constructor() {
            this.objectUID = [];
            super();
        }

        public getMessageId(): number {
            return ObjectsDeletedMessage.ID;
        }

        public reset(): void {
            this.objectUID = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ObjectsDeletedMessage(param1);
        }

        public serializeAs_ObjectsDeletedMessage(param1: ICustomDataOutput): void {
            param1.writeShort(this.objectUID.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.objectUID.length) {
                if (this.objectUID[_loc2_] < 0) {
                    throw new Error('Forbidden value (' + this.objectUID[_loc2_] + ') on element 1 (starting at 1) of objectUID.');
                }
                param1.writeVarInt(this.objectUID[_loc2_]);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ObjectsDeletedMessage(param1);
        }

        public deserializeAs_ObjectsDeletedMessage(param1: ICustomDataInput): void {
            var _loc4_: number = 0;
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = param1.readVarUhInt();
                if (_loc4_ < 0) {
                    throw new Error('Forbidden value (' + _loc4_ + ') on elements of objectUID.');
                }
                this.objectUID.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class ObjectsQuantityMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6206;

        objectsUIDAndQty: ObjectItemQuantity[];

        constructor() {
            this.objectsUIDAndQty = [];
            super();
        }

        public getMessageId(): number {
            return ObjectsQuantityMessage.ID;
        }

        public reset(): void {
            this.objectsUIDAndQty = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ObjectsQuantityMessage(param1);
        }

        public serializeAs_ObjectsQuantityMessage(param1: ICustomDataOutput): void {
            param1.writeShort(this.objectsUIDAndQty.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.objectsUIDAndQty.length) {
                (this.objectsUIDAndQty[_loc2_]).serializeAs_ObjectItemQuantity(param1);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ObjectsQuantityMessage(param1);
        }

        public deserializeAs_ObjectsQuantityMessage(param1: ICustomDataInput): void {
            var _loc4_: ObjectItemQuantity = null;
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = new ObjectItemQuantity();
                _loc4_.deserialize(param1);
                this.objectsUIDAndQty.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class ObtainedItemMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6519;

        genericId: number;
        baseQuantity: number;

        constructor() {
            this.genericId = 0;
            this.baseQuantity = 0;
            super();
        }

        public getMessageId(): number {
            return ObtainedItemMessage.ID;
        }

        public reset(): void {
            this.genericId = 0;
            this.baseQuantity = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ObtainedItemMessage(param1);
        }

        public serializeAs_ObtainedItemMessage(param1: ICustomDataOutput): void {
            if (this.genericId < 0) {
                throw new Error('Forbidden value (' + this.genericId + ') on element genericId.');
            }
            param1.writeVarShort(this.genericId);
            if (this.baseQuantity < 0) {
                throw new Error('Forbidden value (' + this.baseQuantity + ') on element baseQuantity.');
            }
            param1.writeVarInt(this.baseQuantity);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ObtainedItemMessage(param1);
        }

        public deserializeAs_ObtainedItemMessage(param1: ICustomDataInput): void {
            this.genericId = param1.readVarUhShort();
            if (this.genericId < 0) {
                throw new Error('Forbidden value (' + this.genericId + ') on element of ObtainedItemMessage.genericId.');
            }
            this.baseQuantity = param1.readVarUhInt();
            if (this.baseQuantity < 0) {
                throw new Error('Forbidden value (' + this.baseQuantity + ') on element of ObtainedItemMessage.baseQuantity.');
            }

        }
    }
    export class ObtainedItemWithBonusMessage extends ObtainedItemMessage {
        public static ID: number = 6520;

        bonusQuantity: number;

        constructor() {
            this.bonusQuantity = 0;
            super();
        }

        public getMessageId(): number {
            return ObtainedItemWithBonusMessage.ID;
        }

        public reset(): void {
            this.bonusQuantity = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ObtainedItemWithBonusMessage(param1);
        }

        public serializeAs_ObtainedItemWithBonusMessage(param1: ICustomDataOutput): void {
            super.serializeAs_ObtainedItemMessage(param1);
            if (this.bonusQuantity < 0) {
                throw new Error('Forbidden value (' + this.bonusQuantity + ') on element bonusQuantity.');
            }
            param1.writeVarInt(this.bonusQuantity);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ObtainedItemWithBonusMessage(param1);
        }

        public deserializeAs_ObtainedItemWithBonusMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.bonusQuantity = param1.readVarUhInt();
            if (this.bonusQuantity < 0) {
                throw new Error('Forbidden value (' + this.bonusQuantity + ') on element of ObtainedItemWithBonusMessage.bonusQuantity.');
            }

        }
    }
    export class SetUpdateMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5503;

        setId: number;
        setObjects: number[];
        setEffects: ObjectEffect[];

        constructor() {
            this.setId = 0;
            this.setObjects = [];
            this.setEffects = [];
            super();
        }

        public getMessageId(): number {
            return SetUpdateMessage.ID;
        }

        public reset(): void {
            this.setId = 0;
            this.setObjects = [];
            this.setEffects = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_SetUpdateMessage(param1);
        }

        public serializeAs_SetUpdateMessage(param1: ICustomDataOutput): void {
            if (this.setId < 0) {
                throw new Error('Forbidden value (' + this.setId + ') on element setId.');
            }
            param1.writeVarShort(this.setId);
            param1.writeShort(this.setObjects.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.setObjects.length) {
                if (this.setObjects[_loc2_] < 0) {
                    throw new Error('Forbidden value (' + this.setObjects[_loc2_] + ') on element 2 (starting at 1) of setObjects.');
                }
                param1.writeVarShort(this.setObjects[_loc2_]);
                _loc2_++;
            }
            param1.writeShort(this.setEffects.length);
            var _loc3_: number = 0;
            while (_loc3_ < this.setEffects.length) {
                param1.writeShort((this.setEffects[_loc3_]).getTypeId());
                (this.setEffects[_loc3_]).serialize(param1);
                _loc3_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_SetUpdateMessage(param1);
        }

        public deserializeAs_SetUpdateMessage(param1: ICustomDataInput): void {
            var _loc6_: number = 0;
            var _loc7_: number = 0;
            var _loc8_: ObjectEffect = null;
            this.setId = param1.readVarUhShort();
            if (this.setId < 0) {
                throw new Error('Forbidden value (' + this.setId + ') on element of SetUpdateMessage.setId.');
            }
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc6_ = param1.readVarUhShort();
                if (_loc6_ < 0) {
                    throw new Error('Forbidden value (' + _loc6_ + ') on elements of setObjects.');
                }
                this.setObjects.push(_loc6_);
                _loc3_++;
            }
            var _loc4_: number = param1.readUnsignedShort();
            var _loc5_: number = 0;
            while (_loc5_ < _loc4_) {
            _loc7_ = param1.readUnsignedShort();
                _loc8_ = <ObjectEffect>ProtocolTypeManager.getInstance(ObjectEffect, _loc7_);
                _loc8_.deserialize(param1);
                this.setEffects.push(_loc8_);
                _loc5_++;
            }

        }
    }
    export class WrapperObjectAssociatedMessage extends SymbioticObjectAssociatedMessage {
        public static ID: number = 6523;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return WrapperObjectAssociatedMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_WrapperObjectAssociatedMessage(param1);
        }

        public serializeAs_WrapperObjectAssociatedMessage(param1: ICustomDataOutput): void {
            super.serializeAs_SymbioticObjectAssociatedMessage(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_WrapperObjectAssociatedMessage(param1);
        }

        public deserializeAs_WrapperObjectAssociatedMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);

        }
    }
    export class WrapperObjectDissociateRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6524;

        hostUID: number;
        hostPos: number;

        constructor() {
            this.hostUID = 0;
            this.hostPos = 0;
            super();
        }

        public getMessageId(): number {
            return WrapperObjectDissociateRequestMessage.ID;
        }

        public reset(): void {
            this.hostUID = 0;
            this.hostPos = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_WrapperObjectDissociateRequestMessage(param1);
        }

        public serializeAs_WrapperObjectDissociateRequestMessage(param1: ICustomDataOutput): void {
            if (this.hostUID < 0) {
                throw new Error('Forbidden value (' + this.hostUID + ') on element hostUID.');
            }
            param1.writeVarInt(this.hostUID);
            if (this.hostPos < 0 || this.hostPos > 255) {
                throw new Error('Forbidden value (' + this.hostPos + ') on element hostPos.');
            }
            param1.writeByte(this.hostPos);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_WrapperObjectDissociateRequestMessage(param1);
        }

        public deserializeAs_WrapperObjectDissociateRequestMessage(param1: ICustomDataInput): void {
            this.hostUID = param1.readVarUhInt();
            if (this.hostUID < 0) {
                throw new Error('Forbidden value (' + this.hostUID + ') on element of WrapperObjectDissociateRequestMessage.hostUID.');
            }
            this.hostPos = param1.readUnsignedByte();
            if (this.hostPos < 0 || this.hostPos > 255) {
                throw new Error('Forbidden value (' + this.hostPos + ') on element of WrapperObjectDissociateRequestMessage.hostPos.');
            }

        }
    }
    export class WrapperObjectErrorMessage extends SymbioticObjectErrorMessage {
        public static ID: number = 6529;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return WrapperObjectErrorMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_WrapperObjectErrorMessage(param1);
        }

        public serializeAs_WrapperObjectErrorMessage(param1: ICustomDataOutput): void {
            super.serializeAs_SymbioticObjectErrorMessage(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_WrapperObjectErrorMessage(param1);
        }

        public deserializeAs_WrapperObjectErrorMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);

        }
    }
    export class IdolsPresetDeleteMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6602;

        presetId: number;

        constructor() {
            this.presetId = 0;
            super();
        }

        public getMessageId(): number {
            return IdolsPresetDeleteMessage.ID;
        }

        public reset(): void {
            this.presetId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_IdolsPresetDeleteMessage(param1);
        }

        public serializeAs_IdolsPresetDeleteMessage(param1: ICustomDataOutput): void {
            if (this.presetId < 0) {
                throw new Error('Forbidden value (' + this.presetId + ') on element presetId.');
            }
            param1.writeByte(this.presetId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_IdolsPresetDeleteMessage(param1);
        }

        public deserializeAs_IdolsPresetDeleteMessage(param1: ICustomDataInput): void {
            this.presetId = param1.readByte();
            if (this.presetId < 0) {
                throw new Error('Forbidden value (' + this.presetId + ') on element of IdolsPresetDeleteMessage.presetId.');
            }

        }
    }
    export class IdolsPresetDeleteResultMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6605;

        presetId: number;
        code: number;

        constructor() {
            this.presetId = 0;
            this.code = 2;
            super();
        }

        public getMessageId(): number {
            return IdolsPresetDeleteResultMessage.ID;
        }

        public reset(): void {
            this.presetId = 0;
            this.code = 2;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_IdolsPresetDeleteResultMessage(param1);
        }

        public serializeAs_IdolsPresetDeleteResultMessage(param1: ICustomDataOutput): void {
            if (this.presetId < 0) {
                throw new Error('Forbidden value (' + this.presetId + ') on element presetId.');
            }
            param1.writeByte(this.presetId);
            param1.writeByte(this.code);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_IdolsPresetDeleteResultMessage(param1);
        }

        public deserializeAs_IdolsPresetDeleteResultMessage(param1: ICustomDataInput): void {
            this.presetId = param1.readByte();
            if (this.presetId < 0) {
                throw new Error('Forbidden value (' + this.presetId + ') on element of IdolsPresetDeleteResultMessage.presetId.');
            }
            this.code = param1.readByte();
            if (this.code < 0) {
                throw new Error('Forbidden value (' + this.code + ') on element of IdolsPresetDeleteResultMessage.code.');
            }

        }
    }
    export class IdolsPresetSaveMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6603;

        presetId: number;
        symbolId: number;

        constructor() {
            this.presetId = 0;
            this.symbolId = 0;
            super();
        }

        public getMessageId(): number {
            return IdolsPresetSaveMessage.ID;
        }

        public reset(): void {
            this.presetId = 0;
            this.symbolId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_IdolsPresetSaveMessage(param1);
        }

        public serializeAs_IdolsPresetSaveMessage(param1: ICustomDataOutput): void {
            if (this.presetId < 0) {
                throw new Error('Forbidden value (' + this.presetId + ') on element presetId.');
            }
            param1.writeByte(this.presetId);
            if (this.symbolId < 0) {
                throw new Error('Forbidden value (' + this.symbolId + ') on element symbolId.');
            }
            param1.writeByte(this.symbolId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_IdolsPresetSaveMessage(param1);
        }

        public deserializeAs_IdolsPresetSaveMessage(param1: ICustomDataInput): void {
            this.presetId = param1.readByte();
            if (this.presetId < 0) {
                throw new Error('Forbidden value (' + this.presetId + ') on element of IdolsPresetSaveMessage.presetId.');
            }
            this.symbolId = param1.readByte();
            if (this.symbolId < 0) {
                throw new Error('Forbidden value (' + this.symbolId + ') on element of IdolsPresetSaveMessage.symbolId.');
            }

        }
    }
    export class IdolsPresetSaveResultMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6604;

        presetId: number;
        code: number;

        constructor() {
            this.presetId = 0;
            this.code = 2;
            super();
        }

        public getMessageId(): number {
            return IdolsPresetSaveResultMessage.ID;
        }

        public reset(): void {
            this.presetId = 0;
            this.code = 2;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_IdolsPresetSaveResultMessage(param1);
        }

        public serializeAs_IdolsPresetSaveResultMessage(param1: ICustomDataOutput): void {
            if (this.presetId < 0) {
                throw new Error('Forbidden value (' + this.presetId + ') on element presetId.');
            }
            param1.writeByte(this.presetId);
            param1.writeByte(this.code);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_IdolsPresetSaveResultMessage(param1);
        }

        public deserializeAs_IdolsPresetSaveResultMessage(param1: ICustomDataInput): void {
            this.presetId = param1.readByte();
            if (this.presetId < 0) {
                throw new Error('Forbidden value (' + this.presetId + ') on element of IdolsPresetSaveResultMessage.presetId.');
            }
            this.code = param1.readByte();
            if (this.code < 0) {
                throw new Error('Forbidden value (' + this.code + ') on element of IdolsPresetSaveResultMessage.code.');
            }

        }
    }
    export class IdolsPresetUpdateMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6606;

        idolsPreset: IdolsPreset;

        constructor() {
            this.idolsPreset = new IdolsPreset();
            super();
        }

        public getMessageId(): number {
            return IdolsPresetUpdateMessage.ID;
        }

        public reset(): void {
            this.idolsPreset = new IdolsPreset();
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_IdolsPresetUpdateMessage(param1);
        }

        public serializeAs_IdolsPresetUpdateMessage(param1: ICustomDataOutput): void {
            this.idolsPreset.serializeAs_IdolsPreset(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_IdolsPresetUpdateMessage(param1);
        }

        public deserializeAs_IdolsPresetUpdateMessage(param1: ICustomDataInput): void {
            this.idolsPreset = new IdolsPreset();
            this.idolsPreset.deserialize(param1);

        }
    }
    export class InventoryPresetDeleteMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6169;

        presetId: number;

        constructor() {
            this.presetId = 0;
            super();
        }

        public getMessageId(): number {
            return InventoryPresetDeleteMessage.ID;
        }

        public reset(): void {
            this.presetId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_InventoryPresetDeleteMessage(param1);
        }

        public serializeAs_InventoryPresetDeleteMessage(param1: ICustomDataOutput): void {
            if (this.presetId < 0) {
                throw new Error('Forbidden value (' + this.presetId + ') on element presetId.');
            }
            param1.writeByte(this.presetId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_InventoryPresetDeleteMessage(param1);
        }

        public deserializeAs_InventoryPresetDeleteMessage(param1: ICustomDataInput): void {
            this.presetId = param1.readByte();
            if (this.presetId < 0) {
                throw new Error('Forbidden value (' + this.presetId + ') on element of InventoryPresetDeleteMessage.presetId.');
            }

        }
    }
    export class InventoryPresetDeleteResultMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6173;

        presetId: number;
        code: number;

        constructor() {
            this.presetId = 0;
            this.code = 2;
            super();
        }

        public getMessageId(): number {
            return InventoryPresetDeleteResultMessage.ID;
        }

        public reset(): void {
            this.presetId = 0;
            this.code = 2;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_InventoryPresetDeleteResultMessage(param1);
        }

        public serializeAs_InventoryPresetDeleteResultMessage(param1: ICustomDataOutput): void {
            if (this.presetId < 0) {
                throw new Error('Forbidden value (' + this.presetId + ') on element presetId.');
            }
            param1.writeByte(this.presetId);
            param1.writeByte(this.code);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_InventoryPresetDeleteResultMessage(param1);
        }

        public deserializeAs_InventoryPresetDeleteResultMessage(param1: ICustomDataInput): void {
            this.presetId = param1.readByte();
            if (this.presetId < 0) {
                throw new Error('Forbidden value (' + this.presetId + ') on element of InventoryPresetDeleteResultMessage.presetId.');
            }
            this.code = param1.readByte();
            if (this.code < 0) {
                throw new Error('Forbidden value (' + this.code + ') on element of InventoryPresetDeleteResultMessage.code.');
            }

        }
    }
    export class InventoryPresetItemUpdateErrorMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6211;

        code: number;

        constructor() {
            this.code = 1;
            super();
        }

        public getMessageId(): number {
            return InventoryPresetItemUpdateErrorMessage.ID;
        }

        public reset(): void {
            this.code = 1;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_InventoryPresetItemUpdateErrorMessage(param1);
        }

        public serializeAs_InventoryPresetItemUpdateErrorMessage(param1: ICustomDataOutput): void {
            param1.writeByte(this.code);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_InventoryPresetItemUpdateErrorMessage(param1);
        }

        public deserializeAs_InventoryPresetItemUpdateErrorMessage(param1: ICustomDataInput): void {
            this.code = param1.readByte();
            if (this.code < 0) {
                throw new Error('Forbidden value (' + this.code + ') on element of InventoryPresetItemUpdateErrorMessage.code.');
            }

        }
    }
    export class InventoryPresetItemUpdateMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6168;

        presetId: number;
        presetItem: PresetItem;

        constructor() {
            this.presetId = 0;
            this.presetItem = new PresetItem();
            super();
        }

        public getMessageId(): number {
            return InventoryPresetItemUpdateMessage.ID;
        }

        public reset(): void {
            this.presetId = 0;
            this.presetItem = new PresetItem();
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_InventoryPresetItemUpdateMessage(param1);
        }

        public serializeAs_InventoryPresetItemUpdateMessage(param1: ICustomDataOutput): void {
            if (this.presetId < 0) {
                throw new Error('Forbidden value (' + this.presetId + ') on element presetId.');
            }
            param1.writeByte(this.presetId);
            this.presetItem.serializeAs_PresetItem(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_InventoryPresetItemUpdateMessage(param1);
        }

        public deserializeAs_InventoryPresetItemUpdateMessage(param1: ICustomDataInput): void {
            this.presetId = param1.readByte();
            if (this.presetId < 0) {
                throw new Error('Forbidden value (' + this.presetId + ') on element of InventoryPresetItemUpdateMessage.presetId.');
            }
            this.presetItem = new PresetItem();
            this.presetItem.deserialize(param1);

        }
    }
    export class InventoryPresetItemUpdateRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6210;

        presetId: number;
        position: number;
        objUid: number;

        constructor() {
            this.presetId = 0;
            this.position = 63;
            this.objUid = 0;
            super();
        }

        public getMessageId(): number {
            return InventoryPresetItemUpdateRequestMessage.ID;
        }

        public reset(): void {
            this.presetId = 0;
            this.position = 63;
            this.objUid = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_InventoryPresetItemUpdateRequestMessage(param1);
        }

        public serializeAs_InventoryPresetItemUpdateRequestMessage(param1: ICustomDataOutput): void {
            if (this.presetId < 0) {
                throw new Error('Forbidden value (' + this.presetId + ') on element presetId.');
            }
            param1.writeByte(this.presetId);
            param1.writeByte(this.position);
            if (this.objUid < 0) {
                throw new Error('Forbidden value (' + this.objUid + ') on element objUid.');
            }
            param1.writeVarInt(this.objUid);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_InventoryPresetItemUpdateRequestMessage(param1);
        }

        public deserializeAs_InventoryPresetItemUpdateRequestMessage(param1: ICustomDataInput): void {
            this.presetId = param1.readByte();
            if (this.presetId < 0) {
                throw new Error('Forbidden value (' + this.presetId + ') on element of InventoryPresetItemUpdateRequestMessage.presetId.');
            }
            this.position = param1.readUnsignedByte();
            if (this.position < 0 || this.position > 255) {
                throw new Error('Forbidden value (' + this.position + ') on element of InventoryPresetItemUpdateRequestMessage.position.');
            }
            this.objUid = param1.readVarUhInt();
            if (this.objUid < 0) {
                throw new Error('Forbidden value (' + this.objUid + ') on element of InventoryPresetItemUpdateRequestMessage.objUid.');
            }

        }
    }
    export class InventoryPresetSaveCustomMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6329;

        presetId: number;
        symbolId: number;
        itemsPositions: number[];
        itemsUids: number[];

        constructor() {
            this.presetId = 0;
            this.symbolId = 0;
            this.itemsPositions = [];
            this.itemsUids = [];
            super();
        }

        public getMessageId(): number {
            return InventoryPresetSaveCustomMessage.ID;
        }

        public reset(): void {
            this.presetId = 0;
            this.symbolId = 0;
            this.itemsPositions = [];
            this.itemsUids = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_InventoryPresetSaveCustomMessage(param1);
        }

        public serializeAs_InventoryPresetSaveCustomMessage(param1: ICustomDataOutput): void {
            if (this.presetId < 0) {
                throw new Error('Forbidden value (' + this.presetId + ') on element presetId.');
            }
            param1.writeByte(this.presetId);
            if (this.symbolId < 0) {
                throw new Error('Forbidden value (' + this.symbolId + ') on element symbolId.');
            }
            param1.writeByte(this.symbolId);
            param1.writeShort(this.itemsPositions.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.itemsPositions.length) {
                param1.writeByte(this.itemsPositions[_loc2_]);
                _loc2_++;
            }
            param1.writeShort(this.itemsUids.length);
            var _loc3_: number = 0;
            while (_loc3_ < this.itemsUids.length) {
                if (this.itemsUids[_loc3_] < 0) {
                    throw new Error('Forbidden value (' + this.itemsUids[_loc3_] + ') on element 4 (starting at 1) of itemsUids.');
                }
                param1.writeVarInt(this.itemsUids[_loc3_]);
                _loc3_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_InventoryPresetSaveCustomMessage(param1);
        }

        public deserializeAs_InventoryPresetSaveCustomMessage(param1: ICustomDataInput): void {
            var _loc6_: number = 0;
            var _loc7_: number = 0;
            this.presetId = param1.readByte();
            if (this.presetId < 0) {
                throw new Error('Forbidden value (' + this.presetId + ') on element of InventoryPresetSaveCustomMessage.presetId.');
            }
            this.symbolId = param1.readByte();
            if (this.symbolId < 0) {
                throw new Error('Forbidden value (' + this.symbolId + ') on element of InventoryPresetSaveCustomMessage.symbolId.');
            }
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc6_ = param1.readUnsignedByte();
                if (_loc6_ < 0 || _loc6_ > 255) {
                    throw new Error('Forbidden value (' + _loc6_ + ') on elements of itemsPositions.');
                }
                this.itemsPositions.push(_loc6_);
                _loc3_++;
            }
            var _loc4_: number = param1.readUnsignedShort();
            var _loc5_: number = 0;
            while (_loc5_ < _loc4_) {
            _loc7_ = param1.readVarUhInt();
                if (_loc7_ < 0) {
                    throw new Error('Forbidden value (' + _loc7_ + ') on elements of itemsUids.');
                }
                this.itemsUids.push(_loc7_);
                _loc5_++;
            }

        }
    }
    export class InventoryPresetSaveMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6165;

        presetId: number;
        symbolId: number;
        saveEquipment: boolean;

        constructor() {
            this.presetId = 0;
            this.symbolId = 0;
            this.saveEquipment = false;
            super();
        }

        public getMessageId(): number {
            return InventoryPresetSaveMessage.ID;
        }

        public reset(): void {
            this.presetId = 0;
            this.symbolId = 0;
            this.saveEquipment = false;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_InventoryPresetSaveMessage(param1);
        }

        public serializeAs_InventoryPresetSaveMessage(param1: ICustomDataOutput): void {
            if (this.presetId < 0) {
                throw new Error('Forbidden value (' + this.presetId + ') on element presetId.');
            }
            param1.writeByte(this.presetId);
            if (this.symbolId < 0) {
                throw new Error('Forbidden value (' + this.symbolId + ') on element symbolId.');
            }
            param1.writeByte(this.symbolId);
            param1.writeBoolean(this.saveEquipment);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_InventoryPresetSaveMessage(param1);
        }

        public deserializeAs_InventoryPresetSaveMessage(param1: ICustomDataInput): void {
            this.presetId = param1.readByte();
            if (this.presetId < 0) {
                throw new Error('Forbidden value (' + this.presetId + ') on element of InventoryPresetSaveMessage.presetId.');
            }
            this.symbolId = param1.readByte();
            if (this.symbolId < 0) {
                throw new Error('Forbidden value (' + this.symbolId + ') on element of InventoryPresetSaveMessage.symbolId.');
            }
            this.saveEquipment = param1.readBoolean();

        }
    }
    export class InventoryPresetSaveResultMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6170;

        presetId: number;
        code: number;

        constructor() {
            this.presetId = 0;
            this.code = 2;
            super();
        }

        public getMessageId(): number {
            return InventoryPresetSaveResultMessage.ID;
        }

        public reset(): void {
            this.presetId = 0;
            this.code = 2;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_InventoryPresetSaveResultMessage(param1);
        }

        public serializeAs_InventoryPresetSaveResultMessage(param1: ICustomDataOutput): void {
            if (this.presetId < 0) {
                throw new Error('Forbidden value (' + this.presetId + ') on element presetId.');
            }
            param1.writeByte(this.presetId);
            param1.writeByte(this.code);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_InventoryPresetSaveResultMessage(param1);
        }

        public deserializeAs_InventoryPresetSaveResultMessage(param1: ICustomDataInput): void {
            this.presetId = param1.readByte();
            if (this.presetId < 0) {
                throw new Error('Forbidden value (' + this.presetId + ') on element of InventoryPresetSaveResultMessage.presetId.');
            }
            this.code = param1.readByte();
            if (this.code < 0) {
                throw new Error('Forbidden value (' + this.code + ') on element of InventoryPresetSaveResultMessage.code.');
            }

        }
    }
    export class InventoryPresetUpdateMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6171;

        preset: Preset;

        constructor() {
            this.preset = new Preset();
            super();
        }

        public getMessageId(): number {
            return InventoryPresetUpdateMessage.ID;
        }

        public reset(): void {
            this.preset = new Preset();
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_InventoryPresetUpdateMessage(param1);
        }

        public serializeAs_InventoryPresetUpdateMessage(param1: ICustomDataOutput): void {
            this.preset.serializeAs_Preset(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_InventoryPresetUpdateMessage(param1);
        }

        public deserializeAs_InventoryPresetUpdateMessage(param1: ICustomDataInput): void {
            this.preset = new Preset();
            this.preset.deserialize(param1);

        }
    }
    export class InventoryPresetUseMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6167;

        presetId: number;

        constructor() {
            this.presetId = 0;
            super();
        }

        public getMessageId(): number {
            return InventoryPresetUseMessage.ID;
        }

        public reset(): void {
            this.presetId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_InventoryPresetUseMessage(param1);
        }

        public serializeAs_InventoryPresetUseMessage(param1: ICustomDataOutput): void {
            if (this.presetId < 0) {
                throw new Error('Forbidden value (' + this.presetId + ') on element presetId.');
            }
            param1.writeByte(this.presetId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_InventoryPresetUseMessage(param1);
        }

        public deserializeAs_InventoryPresetUseMessage(param1: ICustomDataInput): void {
            this.presetId = param1.readByte();
            if (this.presetId < 0) {
                throw new Error('Forbidden value (' + this.presetId + ') on element of InventoryPresetUseMessage.presetId.');
            }

        }
    }
    export class InventoryPresetUseResultMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6163;

        presetId: number;
        code: number;
        unlinkedPosition: number[];

        constructor() {
            this.presetId = 0;
            this.code = 3;
            this.unlinkedPosition = [];
            super();
        }

        public getMessageId(): number {
            return InventoryPresetUseResultMessage.ID;
        }

        public reset(): void {
            this.presetId = 0;
            this.code = 3;
            this.unlinkedPosition = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_InventoryPresetUseResultMessage(param1);
        }

        public serializeAs_InventoryPresetUseResultMessage(param1: ICustomDataOutput): void {
            if (this.presetId < 0) {
                throw new Error('Forbidden value (' + this.presetId + ') on element presetId.');
            }
            param1.writeByte(this.presetId);
            param1.writeByte(this.code);
            param1.writeShort(this.unlinkedPosition.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.unlinkedPosition.length) {
                param1.writeByte(this.unlinkedPosition[_loc2_]);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_InventoryPresetUseResultMessage(param1);
        }

        public deserializeAs_InventoryPresetUseResultMessage(param1: ICustomDataInput): void {
            var _loc4_: number = 0;
            this.presetId = param1.readByte();
            if (this.presetId < 0) {
                throw new Error('Forbidden value (' + this.presetId + ') on element of InventoryPresetUseResultMessage.presetId.');
            }
            this.code = param1.readByte();
            if (this.code < 0) {
                throw new Error('Forbidden value (' + this.code + ') on element of InventoryPresetUseResultMessage.code.');
            }
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = param1.readUnsignedByte();
                if (_loc4_ < 0 || _loc4_ > 255) {
                    throw new Error('Forbidden value (' + _loc4_ + ') on elements of unlinkedPosition.');
                }
                this.unlinkedPosition.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class SpellListMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 1200;

        spellPrevisualization: boolean;
        spells: SpellItem[];

        constructor() {
            this.spellPrevisualization = false;
            this.spells = [];
            super();
        }

        public getMessageId(): number {
            return SpellListMessage.ID;
        }

        public reset(): void {
            this.spellPrevisualization = false;
            this.spells = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_SpellListMessage(param1);
        }

        public serializeAs_SpellListMessage(param1: ICustomDataOutput): void {
            param1.writeBoolean(this.spellPrevisualization);
            param1.writeShort(this.spells.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.spells.length) {
                (this.spells[_loc2_]).serializeAs_SpellItem(param1);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_SpellListMessage(param1);
        }

        public deserializeAs_SpellListMessage(param1: ICustomDataInput): void {
            var _loc4_: SpellItem = null;
            this.spellPrevisualization = param1.readBoolean();
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = new SpellItem();
                _loc4_.deserialize(param1);
                this.spells.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class StorageInventoryContentMessage extends InventoryContentMessage {
        public static ID: number = 5646;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return StorageInventoryContentMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_StorageInventoryContentMessage(param1);
        }

        public serializeAs_StorageInventoryContentMessage(param1: ICustomDataOutput): void {
            super.serializeAs_InventoryContentMessage(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_StorageInventoryContentMessage(param1);
        }

        public deserializeAs_StorageInventoryContentMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);

        }
    }
    export class StorageKamasUpdateMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5645;

        kamasTotal: number;

        constructor() {
            this.kamasTotal = 0;
            super();
        }

        public getMessageId(): number {
            return StorageKamasUpdateMessage.ID;
        }

        public reset(): void {
            this.kamasTotal = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_StorageKamasUpdateMessage(param1);
        }

        public serializeAs_StorageKamasUpdateMessage(param1: ICustomDataOutput): void {
            param1.writeInt(this.kamasTotal);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_StorageKamasUpdateMessage(param1);
        }

        public deserializeAs_StorageKamasUpdateMessage(param1: ICustomDataInput): void {
            this.kamasTotal = param1.readInt();

        }
    }
    export class StorageObjectRemoveMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5648;

        objectUID: number;

        constructor() {
            this.objectUID = 0;
            super();
        }

        public getMessageId(): number {
            return StorageObjectRemoveMessage.ID;
        }

        public reset(): void {
            this.objectUID = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_StorageObjectRemoveMessage(param1);
        }

        public serializeAs_StorageObjectRemoveMessage(param1: ICustomDataOutput): void {
            if (this.objectUID < 0) {
                throw new Error('Forbidden value (' + this.objectUID + ') on element objectUID.');
            }
            param1.writeVarInt(this.objectUID);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_StorageObjectRemoveMessage(param1);
        }

        public deserializeAs_StorageObjectRemoveMessage(param1: ICustomDataInput): void {
            this.objectUID = param1.readVarUhInt();
            if (this.objectUID < 0) {
                throw new Error('Forbidden value (' + this.objectUID + ') on element of StorageObjectRemoveMessage.objectUID.');
            }

        }
    }
    export class StorageObjectUpdateMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5647;

        object: ObjectItem;

        constructor() {
            this.object = new ObjectItem();
            super();
        }

        public getMessageId(): number {
            return StorageObjectUpdateMessage.ID;
        }

        public reset(): void {
            this.object = new ObjectItem();
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_StorageObjectUpdateMessage(param1);
        }

        public serializeAs_StorageObjectUpdateMessage(param1: ICustomDataOutput): void {
            this.object.serializeAs_ObjectItem(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_StorageObjectUpdateMessage(param1);
        }

        public deserializeAs_StorageObjectUpdateMessage(param1: ICustomDataInput): void {
            this.object = new ObjectItem();
            this.object.deserialize(param1);

        }
    }
    export class StorageObjectsRemoveMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6035;

        objectUIDList: number[];

        constructor() {
            this.objectUIDList = [];
            super();
        }

        public getMessageId(): number {
            return StorageObjectsRemoveMessage.ID;
        }

        public reset(): void {
            this.objectUIDList = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_StorageObjectsRemoveMessage(param1);
        }

        public serializeAs_StorageObjectsRemoveMessage(param1: ICustomDataOutput): void {
            param1.writeShort(this.objectUIDList.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.objectUIDList.length) {
                if (this.objectUIDList[_loc2_] < 0) {
                    throw new Error('Forbidden value (' + this.objectUIDList[_loc2_] + ') on element 1 (starting at 1) of objectUIDList.');
                }
                param1.writeVarInt(this.objectUIDList[_loc2_]);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_StorageObjectsRemoveMessage(param1);
        }

        public deserializeAs_StorageObjectsRemoveMessage(param1: ICustomDataInput): void {
            var _loc4_: number = 0;
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = param1.readVarUhInt();
                if (_loc4_ < 0) {
                    throw new Error('Forbidden value (' + _loc4_ + ') on elements of objectUIDList.');
                }
                this.objectUIDList.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class StorageObjectsUpdateMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6036;

        objectList: ObjectItem[];

        constructor() {
            this.objectList = [];
            super();
        }

        public getMessageId(): number {
            return StorageObjectsUpdateMessage.ID;
        }

        public reset(): void {
            this.objectList = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_StorageObjectsUpdateMessage(param1);
        }

        public serializeAs_StorageObjectsUpdateMessage(param1: ICustomDataOutput): void {
            param1.writeShort(this.objectList.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.objectList.length) {
                (this.objectList[_loc2_]).serializeAs_ObjectItem(param1);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_StorageObjectsUpdateMessage(param1);
        }

        public deserializeAs_StorageObjectsUpdateMessage(param1: ICustomDataInput): void {
            var _loc4_: ObjectItem = null;
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = new ObjectItem();
                _loc4_.deserialize(param1);
                this.objectList.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class AccessoryPreviewErrorMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6521;

        error: number;

        constructor() {
            this.error = 0;
            super();
        }

        public getMessageId(): number {
            return AccessoryPreviewErrorMessage.ID;
        }

        public reset(): void {
            this.error = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_AccessoryPreviewErrorMessage(param1);
        }

        public serializeAs_AccessoryPreviewErrorMessage(param1: ICustomDataOutput): void {
            param1.writeByte(this.error);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_AccessoryPreviewErrorMessage(param1);
        }

        public deserializeAs_AccessoryPreviewErrorMessage(param1: ICustomDataInput): void {
            this.error = param1.readByte();
            if (this.error < 0) {
                throw new Error('Forbidden value (' + this.error + ') on element of AccessoryPreviewErrorMessage.error.');
            }

        }
    }
    export class AccessoryPreviewMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6517;

        look: EntityLook;

        constructor() {
            this.look = new EntityLook();
            super();
        }

        public getMessageId(): number {
            return AccessoryPreviewMessage.ID;
        }

        public reset(): void {
            this.look = new EntityLook();
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_AccessoryPreviewMessage(param1);
        }

        public serializeAs_AccessoryPreviewMessage(param1: ICustomDataOutput): void {
            this.look.serializeAs_EntityLook(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_AccessoryPreviewMessage(param1);
        }

        public deserializeAs_AccessoryPreviewMessage(param1: ICustomDataInput): void {
            this.look = new EntityLook();
            this.look.deserialize(param1);

        }
    }
    export class AccessoryPreviewRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6518;

        genericId: number[];

        constructor() {
            this.genericId = [];
            super();
        }

        public getMessageId(): number {
            return AccessoryPreviewRequestMessage.ID;
        }

        public reset(): void {
            this.genericId = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_AccessoryPreviewRequestMessage(param1);
        }

        public serializeAs_AccessoryPreviewRequestMessage(param1: ICustomDataOutput): void {
            param1.writeShort(this.genericId.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.genericId.length) {
                if (this.genericId[_loc2_] < 0) {
                    throw new Error('Forbidden value (' + this.genericId[_loc2_] + ') on element 1 (starting at 1) of genericId.');
                }
                param1.writeVarShort(this.genericId[_loc2_]);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_AccessoryPreviewRequestMessage(param1);
        }

        public deserializeAs_AccessoryPreviewRequestMessage(param1: ICustomDataInput): void {
            var _loc4_: number = 0;
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = param1.readVarUhShort();
                if (_loc4_ < 0) {
                    throw new Error('Forbidden value (' + _loc4_ + ') on elements of genericId.');
                }
                this.genericId.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class PopupWarningMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6134;

        lockDuration: number;
        author: string;
        content: string;

        constructor() {
            this.lockDuration = 0;
            this.author = '';
            this.content = '';
            super();
        }

        public getMessageId(): number {
            return PopupWarningMessage.ID;
        }

        public reset(): void {
            this.lockDuration = 0;
            this.author = '';
            this.content = '';
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_PopupWarningMessage(param1);
        }

        public serializeAs_PopupWarningMessage(param1: ICustomDataOutput): void {
            if (this.lockDuration < 0 || this.lockDuration > 255) {
                throw new Error('Forbidden value (' + this.lockDuration + ') on element lockDuration.');
            }
            param1.writeByte(this.lockDuration);
            param1.writeUTF(this.author);
            param1.writeUTF(this.content);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_PopupWarningMessage(param1);
        }

        public deserializeAs_PopupWarningMessage(param1: ICustomDataInput): void {
            this.lockDuration = param1.readUnsignedByte();
            if (this.lockDuration < 0 || this.lockDuration > 255) {
                throw new Error('Forbidden value (' + this.lockDuration + ') on element of PopupWarningMessage.lockDuration.');
            }
            this.author = param1.readUTF();
            this.content = param1.readUTF();

        }
    }
    export class AreaFightModificatorUpdateMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6493;

        spellPairId: number;

        constructor() {
            this.spellPairId = 0;
            super();
        }

        public getMessageId(): number {
            return AreaFightModificatorUpdateMessage.ID;
        }

        public reset(): void {
            this.spellPairId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_AreaFightModificatorUpdateMessage(param1);
        }

        public serializeAs_AreaFightModificatorUpdateMessage(param1: ICustomDataOutput): void {
            param1.writeInt(this.spellPairId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_AreaFightModificatorUpdateMessage(param1);
        }

        public deserializeAs_AreaFightModificatorUpdateMessage(param1: ICustomDataInput): void {
            this.spellPairId = param1.readInt();

        }
    }
    export class PrismAttackRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6042;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return PrismAttackRequestMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_PrismAttackRequestMessage(param1);
        }

        public serializeAs_PrismAttackRequestMessage(param1: ICustomDataOutput): void {

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_PrismAttackRequestMessage(param1);
        }

        public deserializeAs_PrismAttackRequestMessage(param1: ICustomDataInput): void {

        }
    }
    export class PrismFightAddedMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6452;

        fight: PrismFightersInformation;

        constructor() {
            this.fight = new PrismFightersInformation();
            super();
        }

        public getMessageId(): number {
            return PrismFightAddedMessage.ID;
        }

        public reset(): void {
            this.fight = new PrismFightersInformation();
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_PrismFightAddedMessage(param1);
        }

        public serializeAs_PrismFightAddedMessage(param1: ICustomDataOutput): void {
            this.fight.serializeAs_PrismFightersInformation(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_PrismFightAddedMessage(param1);
        }

        public deserializeAs_PrismFightAddedMessage(param1: ICustomDataInput): void {
            this.fight = new PrismFightersInformation();
            this.fight.deserialize(param1);

        }
    }
    export class PrismFightAttackerAddMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5893;

        subAreaId: number;
        fightId: number;
        attacker: CharacterMinimalPlusLookInformations;

        constructor() {
            this.subAreaId = 0;
            this.fightId = 0;
            this.attacker = new CharacterMinimalPlusLookInformations();
            super();
        }

        public getMessageId(): number {
            return PrismFightAttackerAddMessage.ID;
        }

        public reset(): void {
            this.subAreaId = 0;
            this.fightId = 0;
            this.attacker = new CharacterMinimalPlusLookInformations();
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_PrismFightAttackerAddMessage(param1);
        }

        public serializeAs_PrismFightAttackerAddMessage(param1: ICustomDataOutput): void {
            if (this.subAreaId < 0) {
                throw new Error('Forbidden value (' + this.subAreaId + ') on element subAreaId.');
            }
            param1.writeVarShort(this.subAreaId);
            if (this.fightId < 0) {
                throw new Error('Forbidden value (' + this.fightId + ') on element fightId.');
            }
            param1.writeVarShort(this.fightId);
            param1.writeShort(this.attacker.getTypeId());
            this.attacker.serialize(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_PrismFightAttackerAddMessage(param1);
        }

        public deserializeAs_PrismFightAttackerAddMessage(param1: ICustomDataInput): void {
            this.subAreaId = param1.readVarUhShort();
            if (this.subAreaId < 0) {
                throw new Error('Forbidden value (' + this.subAreaId + ') on element of PrismFightAttackerAddMessage.subAreaId.');
            }
            this.fightId = param1.readVarUhShort();
            if (this.fightId < 0) {
                throw new Error('Forbidden value (' + this.fightId + ') on element of PrismFightAttackerAddMessage.fightId.');
            }
            var _loc2_: number = param1.readUnsignedShort();
            this.attacker = <CharacterMinimalPlusLookInformations>ProtocolTypeManager.getInstance(CharacterMinimalPlusLookInformations, _loc2_);
            this.attacker.deserialize(param1);

        }
    }
    export class PrismFightAttackerRemoveMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5897;

        subAreaId: number;
        fightId: number;
        fighterToRemoveId: number;

        constructor() {
            this.subAreaId = 0;
            this.fightId = 0;
            this.fighterToRemoveId = 0;
            super();
        }

        public getMessageId(): number {
            return PrismFightAttackerRemoveMessage.ID;
        }

        public reset(): void {
            this.subAreaId = 0;
            this.fightId = 0;
            this.fighterToRemoveId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_PrismFightAttackerRemoveMessage(param1);
        }

        public serializeAs_PrismFightAttackerRemoveMessage(param1: ICustomDataOutput): void {
            if (this.subAreaId < 0) {
                throw new Error('Forbidden value (' + this.subAreaId + ') on element subAreaId.');
            }
            param1.writeVarShort(this.subAreaId);
            if (this.fightId < 0) {
                throw new Error('Forbidden value (' + this.fightId + ') on element fightId.');
            }
            param1.writeVarShort(this.fightId);
            if (this.fighterToRemoveId < 0) {
                throw new Error('Forbidden value (' + this.fighterToRemoveId + ') on element fighterToRemoveId.');
            }
            param1.writeVarInt(this.fighterToRemoveId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_PrismFightAttackerRemoveMessage(param1);
        }

        public deserializeAs_PrismFightAttackerRemoveMessage(param1: ICustomDataInput): void {
            this.subAreaId = param1.readVarUhShort();
            if (this.subAreaId < 0) {
                throw new Error('Forbidden value (' + this.subAreaId + ') on element of PrismFightAttackerRemoveMessage.subAreaId.');
            }
            this.fightId = param1.readVarUhShort();
            if (this.fightId < 0) {
                throw new Error('Forbidden value (' + this.fightId + ') on element of PrismFightAttackerRemoveMessage.fightId.');
            }
            this.fighterToRemoveId = param1.readVarUhInt();
            if (this.fighterToRemoveId < 0) {
                throw new Error('Forbidden value (' + this.fighterToRemoveId + ') on element of PrismFightAttackerRemoveMessage.fighterToRemoveId.');
            }

        }
    }
    export class PrismFightDefenderAddMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5895;

        subAreaId: number;
        fightId: number;
        defender: CharacterMinimalPlusLookInformations;

        constructor() {
            this.subAreaId = 0;
            this.fightId = 0;
            this.defender = new CharacterMinimalPlusLookInformations();
            super();
        }

        public getMessageId(): number {
            return PrismFightDefenderAddMessage.ID;
        }

        public reset(): void {
            this.subAreaId = 0;
            this.fightId = 0;
            this.defender = new CharacterMinimalPlusLookInformations();
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_PrismFightDefenderAddMessage(param1);
        }

        public serializeAs_PrismFightDefenderAddMessage(param1: ICustomDataOutput): void {
            if (this.subAreaId < 0) {
                throw new Error('Forbidden value (' + this.subAreaId + ') on element subAreaId.');
            }
            param1.writeVarShort(this.subAreaId);
            if (this.fightId < 0) {
                throw new Error('Forbidden value (' + this.fightId + ') on element fightId.');
            }
            param1.writeVarShort(this.fightId);
            param1.writeShort(this.defender.getTypeId());
            this.defender.serialize(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_PrismFightDefenderAddMessage(param1);
        }

        public deserializeAs_PrismFightDefenderAddMessage(param1: ICustomDataInput): void {
            this.subAreaId = param1.readVarUhShort();
            if (this.subAreaId < 0) {
                throw new Error('Forbidden value (' + this.subAreaId + ') on element of PrismFightDefenderAddMessage.subAreaId.');
            }
            this.fightId = param1.readVarUhShort();
            if (this.fightId < 0) {
                throw new Error('Forbidden value (' + this.fightId + ') on element of PrismFightDefenderAddMessage.fightId.');
            }
            var _loc2_: number = param1.readUnsignedShort();
            this.defender = <CharacterMinimalPlusLookInformations>ProtocolTypeManager.getInstance(CharacterMinimalPlusLookInformations, _loc2_);
            this.defender.deserialize(param1);

        }
    }
    export class PrismFightDefenderLeaveMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5892;

        subAreaId: number;
        fightId: number;
        fighterToRemoveId: number;

        constructor() {
            this.subAreaId = 0;
            this.fightId = 0;
            this.fighterToRemoveId = 0;
            super();
        }

        public getMessageId(): number {
            return PrismFightDefenderLeaveMessage.ID;
        }

        public reset(): void {
            this.subAreaId = 0;
            this.fightId = 0;
            this.fighterToRemoveId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_PrismFightDefenderLeaveMessage(param1);
        }

        public serializeAs_PrismFightDefenderLeaveMessage(param1: ICustomDataOutput): void {
            if (this.subAreaId < 0) {
                throw new Error('Forbidden value (' + this.subAreaId + ') on element subAreaId.');
            }
            param1.writeVarShort(this.subAreaId);
            if (this.fightId < 0) {
                throw new Error('Forbidden value (' + this.fightId + ') on element fightId.');
            }
            param1.writeVarShort(this.fightId);
            if (this.fighterToRemoveId < 0) {
                throw new Error('Forbidden value (' + this.fighterToRemoveId + ') on element fighterToRemoveId.');
            }
            param1.writeVarInt(this.fighterToRemoveId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_PrismFightDefenderLeaveMessage(param1);
        }

        public deserializeAs_PrismFightDefenderLeaveMessage(param1: ICustomDataInput): void {
            this.subAreaId = param1.readVarUhShort();
            if (this.subAreaId < 0) {
                throw new Error('Forbidden value (' + this.subAreaId + ') on element of PrismFightDefenderLeaveMessage.subAreaId.');
            }
            this.fightId = param1.readVarUhShort();
            if (this.fightId < 0) {
                throw new Error('Forbidden value (' + this.fightId + ') on element of PrismFightDefenderLeaveMessage.fightId.');
            }
            this.fighterToRemoveId = param1.readVarUhInt();
            if (this.fighterToRemoveId < 0) {
                throw new Error('Forbidden value (' + this.fighterToRemoveId + ') on element of PrismFightDefenderLeaveMessage.fighterToRemoveId.');
            }

        }
    }
    export class PrismFightJoinLeaveRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5843;

        subAreaId: number;
        join: boolean;

        constructor() {
            this.subAreaId = 0;
            this.join = false;
            super();
        }

        public getMessageId(): number {
            return PrismFightJoinLeaveRequestMessage.ID;
        }

        public reset(): void {
            this.subAreaId = 0;
            this.join = false;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_PrismFightJoinLeaveRequestMessage(param1);
        }

        public serializeAs_PrismFightJoinLeaveRequestMessage(param1: ICustomDataOutput): void {
            if (this.subAreaId < 0) {
                throw new Error('Forbidden value (' + this.subAreaId + ') on element subAreaId.');
            }
            param1.writeVarShort(this.subAreaId);
            param1.writeBoolean(this.join);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_PrismFightJoinLeaveRequestMessage(param1);
        }

        public deserializeAs_PrismFightJoinLeaveRequestMessage(param1: ICustomDataInput): void {
            this.subAreaId = param1.readVarUhShort();
            if (this.subAreaId < 0) {
                throw new Error('Forbidden value (' + this.subAreaId + ') on element of PrismFightJoinLeaveRequestMessage.subAreaId.');
            }
            this.join = param1.readBoolean();

        }
    }
    export class PrismFightRemovedMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6453;

        subAreaId: number;

        constructor() {
            this.subAreaId = 0;
            super();
        }

        public getMessageId(): number {
            return PrismFightRemovedMessage.ID;
        }

        public reset(): void {
            this.subAreaId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_PrismFightRemovedMessage(param1);
        }

        public serializeAs_PrismFightRemovedMessage(param1: ICustomDataOutput): void {
            if (this.subAreaId < 0) {
                throw new Error('Forbidden value (' + this.subAreaId + ') on element subAreaId.');
            }
            param1.writeVarShort(this.subAreaId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_PrismFightRemovedMessage(param1);
        }

        public deserializeAs_PrismFightRemovedMessage(param1: ICustomDataInput): void {
            this.subAreaId = param1.readVarUhShort();
            if (this.subAreaId < 0) {
                throw new Error('Forbidden value (' + this.subAreaId + ') on element of PrismFightRemovedMessage.subAreaId.');
            }

        }
    }
    export class PrismFightStateUpdateMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6040;

        state: number;

        constructor() {
            this.state = 0;
            super();
        }

        public getMessageId(): number {
            return PrismFightStateUpdateMessage.ID;
        }

        public reset(): void {
            this.state = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_PrismFightStateUpdateMessage(param1);
        }

        public serializeAs_PrismFightStateUpdateMessage(param1: ICustomDataOutput): void {
            if (this.state < 0) {
                throw new Error('Forbidden value (' + this.state + ') on element state.');
            }
            param1.writeByte(this.state);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_PrismFightStateUpdateMessage(param1);
        }

        public deserializeAs_PrismFightStateUpdateMessage(param1: ICustomDataInput): void {
            this.state = param1.readByte();
            if (this.state < 0) {
                throw new Error('Forbidden value (' + this.state + ') on element of PrismFightStateUpdateMessage.state.');
            }

        }
    }
    export class PrismFightSwapRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5901;

        subAreaId: number;
        targetId: number;

        constructor() {
            this.subAreaId = 0;
            this.targetId = 0;
            super();
        }

        public getMessageId(): number {
            return PrismFightSwapRequestMessage.ID;
        }

        public reset(): void {
            this.subAreaId = 0;
            this.targetId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_PrismFightSwapRequestMessage(param1);
        }

        public serializeAs_PrismFightSwapRequestMessage(param1: ICustomDataOutput): void {
            if (this.subAreaId < 0) {
                throw new Error('Forbidden value (' + this.subAreaId + ') on element subAreaId.');
            }
            param1.writeVarShort(this.subAreaId);
            if (this.targetId < 0) {
                throw new Error('Forbidden value (' + this.targetId + ') on element targetId.');
            }
            param1.writeVarInt(this.targetId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_PrismFightSwapRequestMessage(param1);
        }

        public deserializeAs_PrismFightSwapRequestMessage(param1: ICustomDataInput): void {
            this.subAreaId = param1.readVarUhShort();
            if (this.subAreaId < 0) {
                throw new Error('Forbidden value (' + this.subAreaId + ') on element of PrismFightSwapRequestMessage.subAreaId.');
            }
            this.targetId = param1.readVarUhInt();
            if (this.targetId < 0) {
                throw new Error('Forbidden value (' + this.targetId + ') on element of PrismFightSwapRequestMessage.targetId.');
            }

        }
    }
    export class PrismInfoCloseMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5853;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return PrismInfoCloseMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_PrismInfoCloseMessage(param1);
        }

        public serializeAs_PrismInfoCloseMessage(param1: ICustomDataOutput): void {

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_PrismInfoCloseMessage(param1);
        }

        public deserializeAs_PrismInfoCloseMessage(param1: ICustomDataInput): void {

        }
    }
    export class PrismInfoInValidMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5859;

        reason: number;

        constructor() {
            this.reason = 0;
            super();
        }

        public getMessageId(): number {
            return PrismInfoInValidMessage.ID;
        }

        public reset(): void {
            this.reason = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_PrismInfoInValidMessage(param1);
        }

        public serializeAs_PrismInfoInValidMessage(param1: ICustomDataOutput): void {
            param1.writeByte(this.reason);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_PrismInfoInValidMessage(param1);
        }

        public deserializeAs_PrismInfoInValidMessage(param1: ICustomDataInput): void {
            this.reason = param1.readByte();
            if (this.reason < 0) {
                throw new Error('Forbidden value (' + this.reason + ') on element of PrismInfoInValidMessage.reason.');
            }

        }
    }
    export class PrismInfoJoinLeaveRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5844;

        join: boolean;

        constructor() {
            this.join = false;
            super();
        }

        public getMessageId(): number {
            return PrismInfoJoinLeaveRequestMessage.ID;
        }

        public reset(): void {
            this.join = false;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_PrismInfoJoinLeaveRequestMessage(param1);
        }

        public serializeAs_PrismInfoJoinLeaveRequestMessage(param1: ICustomDataOutput): void {
            param1.writeBoolean(this.join);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_PrismInfoJoinLeaveRequestMessage(param1);
        }

        public deserializeAs_PrismInfoJoinLeaveRequestMessage(param1: ICustomDataInput): void {
            this.join = param1.readBoolean();

        }
    }
    export class PrismModuleExchangeRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6531;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return PrismModuleExchangeRequestMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_PrismModuleExchangeRequestMessage(param1);
        }

        public serializeAs_PrismModuleExchangeRequestMessage(param1: ICustomDataOutput): void {

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_PrismModuleExchangeRequestMessage(param1);
        }

        public deserializeAs_PrismModuleExchangeRequestMessage(param1: ICustomDataInput): void {

        }
    }
    export class PrismSetSabotagedRefusedMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6466;

        subAreaId: number;
        reason: number;

        constructor() {
            this.subAreaId = 0;
            this.reason = 0;
            super();
        }

        public getMessageId(): number {
            return PrismSetSabotagedRefusedMessage.ID;
        }

        public reset(): void {
            this.subAreaId = 0;
            this.reason = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_PrismSetSabotagedRefusedMessage(param1);
        }

        public serializeAs_PrismSetSabotagedRefusedMessage(param1: ICustomDataOutput): void {
            if (this.subAreaId < 0) {
                throw new Error('Forbidden value (' + this.subAreaId + ') on element subAreaId.');
            }
            param1.writeVarShort(this.subAreaId);
            param1.writeByte(this.reason);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_PrismSetSabotagedRefusedMessage(param1);
        }

        public deserializeAs_PrismSetSabotagedRefusedMessage(param1: ICustomDataInput): void {
            this.subAreaId = param1.readVarUhShort();
            if (this.subAreaId < 0) {
                throw new Error('Forbidden value (' + this.subAreaId + ') on element of PrismSetSabotagedRefusedMessage.subAreaId.');
            }
            this.reason = param1.readByte();

        }
    }
    export class PrismSetSabotagedRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6468;

        subAreaId: number;

        constructor() {
            this.subAreaId = 0;
            super();
        }

        public getMessageId(): number {
            return PrismSetSabotagedRequestMessage.ID;
        }

        public reset(): void {
            this.subAreaId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_PrismSetSabotagedRequestMessage(param1);
        }

        public serializeAs_PrismSetSabotagedRequestMessage(param1: ICustomDataOutput): void {
            if (this.subAreaId < 0) {
                throw new Error('Forbidden value (' + this.subAreaId + ') on element subAreaId.');
            }
            param1.writeVarShort(this.subAreaId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_PrismSetSabotagedRequestMessage(param1);
        }

        public deserializeAs_PrismSetSabotagedRequestMessage(param1: ICustomDataInput): void {
            this.subAreaId = param1.readVarUhShort();
            if (this.subAreaId < 0) {
                throw new Error('Forbidden value (' + this.subAreaId + ') on element of PrismSetSabotagedRequestMessage.subAreaId.');
            }

        }
    }
    export class PrismSettingsErrorMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6442;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return PrismSettingsErrorMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_PrismSettingsErrorMessage(param1);
        }

        public serializeAs_PrismSettingsErrorMessage(param1: ICustomDataOutput): void {

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_PrismSettingsErrorMessage(param1);
        }

        public deserializeAs_PrismSettingsErrorMessage(param1: ICustomDataInput): void {

        }
    }
    export class PrismSettingsRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6437;

        subAreaId: number;
        startDefenseTime: number;

        constructor() {
            this.subAreaId = 0;
            this.startDefenseTime = 0;
            super();
        }

        public getMessageId(): number {
            return PrismSettingsRequestMessage.ID;
        }

        public reset(): void {
            this.subAreaId = 0;
            this.startDefenseTime = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_PrismSettingsRequestMessage(param1);
        }

        public serializeAs_PrismSettingsRequestMessage(param1: ICustomDataOutput): void {
            if (this.subAreaId < 0) {
                throw new Error('Forbidden value (' + this.subAreaId + ') on element subAreaId.');
            }
            param1.writeVarShort(this.subAreaId);
            if (this.startDefenseTime < 0) {
                throw new Error('Forbidden value (' + this.startDefenseTime + ') on element startDefenseTime.');
            }
            param1.writeByte(this.startDefenseTime);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_PrismSettingsRequestMessage(param1);
        }

        public deserializeAs_PrismSettingsRequestMessage(param1: ICustomDataInput): void {
            this.subAreaId = param1.readVarUhShort();
            if (this.subAreaId < 0) {
                throw new Error('Forbidden value (' + this.subAreaId + ') on element of PrismSettingsRequestMessage.subAreaId.');
            }
            this.startDefenseTime = param1.readByte();
            if (this.startDefenseTime < 0) {
                throw new Error('Forbidden value (' + this.startDefenseTime + ') on element of PrismSettingsRequestMessage.startDefenseTime.');
            }

        }
    }
    export class PrismUseRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6041;

        moduleToUse: number;

        constructor() {
            this.moduleToUse = 0;
            super();
        }

        public getMessageId(): number {
            return PrismUseRequestMessage.ID;
        }

        public reset(): void {
            this.moduleToUse = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_PrismUseRequestMessage(param1);
        }

        public serializeAs_PrismUseRequestMessage(param1: ICustomDataOutput): void {
            param1.writeByte(this.moduleToUse);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_PrismUseRequestMessage(param1);
        }

        public deserializeAs_PrismUseRequestMessage(param1: ICustomDataInput): void {
            this.moduleToUse = param1.readByte();
            if (this.moduleToUse < 0) {
                throw new Error('Forbidden value (' + this.moduleToUse + ') on element of PrismUseRequestMessage.moduleToUse.');
            }

        }
    }
    export class PrismsInfoValidMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6451;

        fights: PrismFightersInformation[];

        constructor() {
            this.fights = [];
            super();
        }

        public getMessageId(): number {
            return PrismsInfoValidMessage.ID;
        }

        public reset(): void {
            this.fights = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_PrismsInfoValidMessage(param1);
        }

        public serializeAs_PrismsInfoValidMessage(param1: ICustomDataOutput): void {
            param1.writeShort(this.fights.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.fights.length) {
                (this.fights[_loc2_]).serializeAs_PrismFightersInformation(param1);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_PrismsInfoValidMessage(param1);
        }

        public deserializeAs_PrismsInfoValidMessage(param1: ICustomDataInput): void {
            var _loc4_: PrismFightersInformation = null;
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = new PrismFightersInformation();
                _loc4_.deserialize(param1);
                this.fights.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class PrismsListMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6440;

        prisms: PrismSubareaEmptyInfo[];

        constructor() {
            this.prisms = [];
            super();
        }

        public getMessageId(): number {
            return PrismsListMessage.ID;
        }

        public reset(): void {
            this.prisms = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_PrismsListMessage(param1);
        }

        public serializeAs_PrismsListMessage(param1: ICustomDataOutput): void {
            param1.writeShort(this.prisms.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.prisms.length) {
                param1.writeShort((this.prisms[_loc2_]).getTypeId());
                (this.prisms[_loc2_]).serialize(param1);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_PrismsListMessage(param1);
        }

        public deserializeAs_PrismsListMessage(param1: ICustomDataInput): void {
            var _loc4_: number = 0;
            var _loc5_: PrismSubareaEmptyInfo = null;
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = param1.readUnsignedShort();
                _loc5_ = <PrismSubareaEmptyInfo>ProtocolTypeManager.getInstance(PrismSubareaEmptyInfo, _loc4_);
                _loc5_.deserialize(param1);
                this.prisms.push(_loc5_);
                _loc3_++;
            }

        }
    }
    export class PrismsListRegisterMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6441;

        listen: number;

        constructor() {
            this.listen = 0;
            super();
        }

        public getMessageId(): number {
            return PrismsListRegisterMessage.ID;
        }

        public reset(): void {
            this.listen = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_PrismsListRegisterMessage(param1);
        }

        public serializeAs_PrismsListRegisterMessage(param1: ICustomDataOutput): void {
            param1.writeByte(this.listen);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_PrismsListRegisterMessage(param1);
        }

        public deserializeAs_PrismsListRegisterMessage(param1: ICustomDataInput): void {
            this.listen = param1.readByte();
            if (this.listen < 0) {
                throw new Error('Forbidden value (' + this.listen + ') on element of PrismsListRegisterMessage.listen.');
            }

        }
    }
    export class PrismsListUpdateMessage extends PrismsListMessage {
        public static ID: number = 6438;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return PrismsListUpdateMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_PrismsListUpdateMessage(param1);
        }

        public serializeAs_PrismsListUpdateMessage(param1: ICustomDataOutput): void {
            super.serializeAs_PrismsListMessage(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_PrismsListUpdateMessage(param1);
        }

        public deserializeAs_PrismsListUpdateMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);

        }
    }
    export class AlignmentRankUpdateMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6058;

        alignmentRank: number;
        verbose: boolean;

        constructor() {
            this.alignmentRank = 0;
            this.verbose = false;
            super();
        }

        public getMessageId(): number {
            return AlignmentRankUpdateMessage.ID;
        }

        public reset(): void {
            this.alignmentRank = 0;
            this.verbose = false;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_AlignmentRankUpdateMessage(param1);
        }

        public serializeAs_AlignmentRankUpdateMessage(param1: ICustomDataOutput): void {
            if (this.alignmentRank < 0) {
                throw new Error('Forbidden value (' + this.alignmentRank + ') on element alignmentRank.');
            }
            param1.writeByte(this.alignmentRank);
            param1.writeBoolean(this.verbose);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_AlignmentRankUpdateMessage(param1);
        }

        public deserializeAs_AlignmentRankUpdateMessage(param1: ICustomDataInput): void {
            this.alignmentRank = param1.readByte();
            if (this.alignmentRank < 0) {
                throw new Error('Forbidden value (' + this.alignmentRank + ') on element of AlignmentRankUpdateMessage.alignmentRank.');
            }
            this.verbose = param1.readBoolean();

        }
    }
    export class SetEnableAVARequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6443;

        enable: boolean;

        constructor() {
            this.enable = false;
            super();
        }

        public getMessageId(): number {
            return SetEnableAVARequestMessage.ID;
        }

        public reset(): void {
            this.enable = false;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_SetEnableAVARequestMessage(param1);
        }

        public serializeAs_SetEnableAVARequestMessage(param1: ICustomDataOutput): void {
            param1.writeBoolean(this.enable);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_SetEnableAVARequestMessage(param1);
        }

        public deserializeAs_SetEnableAVARequestMessage(param1: ICustomDataInput): void {
            this.enable = param1.readBoolean();

        }
    }
    export class SetEnablePVPRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 1810;

        enable: boolean;

        constructor() {
            this.enable = false;
            super();
        }

        public getMessageId(): number {
            return SetEnablePVPRequestMessage.ID;
        }

        public reset(): void {
            this.enable = false;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_SetEnablePVPRequestMessage(param1);
        }

        public serializeAs_SetEnablePVPRequestMessage(param1: ICustomDataOutput): void {
            param1.writeBoolean(this.enable);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_SetEnablePVPRequestMessage(param1);
        }

        public deserializeAs_SetEnablePVPRequestMessage(param1: ICustomDataInput): void {
            this.enable = param1.readBoolean();

        }
    }
    export class UpdateMapPlayersAgressableStatusMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6454;

        playerIds: number[];
        enable: number[];

        constructor() {
            this.playerIds = [];
            this.enable = [];
            super();
        }

        public getMessageId(): number {
            return UpdateMapPlayersAgressableStatusMessage.ID;
        }

        public reset(): void {
            this.playerIds = [];
            this.enable = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_UpdateMapPlayersAgressableStatusMessage(param1);
        }

        public serializeAs_UpdateMapPlayersAgressableStatusMessage(param1: ICustomDataOutput): void {
            param1.writeShort(this.playerIds.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.playerIds.length) {
                if (this.playerIds[_loc2_] < 0) {
                    throw new Error('Forbidden value (' + this.playerIds[_loc2_] + ') on element 1 (starting at 1) of playerIds.');
                }
                param1.writeVarInt(this.playerIds[_loc2_]);
                _loc2_++;
            }
            param1.writeShort(this.enable.length);
            var _loc3_: number = 0;
            while (_loc3_ < this.enable.length) {
                param1.writeByte(this.enable[_loc3_]);
                _loc3_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_UpdateMapPlayersAgressableStatusMessage(param1);
        }

        public deserializeAs_UpdateMapPlayersAgressableStatusMessage(param1: ICustomDataInput): void {
            var _loc6_: number = 0;
            var _loc7_: number = 0;
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc6_ = param1.readVarUhInt();
                if (_loc6_ < 0) {
                    throw new Error('Forbidden value (' + _loc6_ + ') on elements of playerIds.');
                }
                this.playerIds.push(_loc6_);
                _loc3_++;
            }
            var _loc4_: number = param1.readUnsignedShort();
            var _loc5_: number = 0;
            while (_loc5_ < _loc4_) {
            _loc7_ = param1.readByte();
                if (_loc7_ < 0) {
                    throw new Error('Forbidden value (' + _loc7_ + ') on elements of enable.');
                }
                this.enable.push(_loc7_);
                _loc5_++;
            }

        }
    }
    export class UpdateSelfAgressableStatusMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6456;

        status: number;
        probationTime: number;

        constructor() {
            this.status = 0;
            this.probationTime = 0;
            super();
        }

        public getMessageId(): number {
            return UpdateSelfAgressableStatusMessage.ID;
        }

        public reset(): void {
            this.status = 0;
            this.probationTime = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_UpdateSelfAgressableStatusMessage(param1);
        }

        public serializeAs_UpdateSelfAgressableStatusMessage(param1: ICustomDataOutput): void {
            param1.writeByte(this.status);
            if (this.probationTime < 0) {
                throw new Error('Forbidden value (' + this.probationTime + ') on element probationTime.');
            }
            param1.writeInt(this.probationTime);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_UpdateSelfAgressableStatusMessage(param1);
        }

        public deserializeAs_UpdateSelfAgressableStatusMessage(param1: ICustomDataInput): void {
            this.status = param1.readByte();
            if (this.status < 0) {
                throw new Error('Forbidden value (' + this.status + ') on element of UpdateSelfAgressableStatusMessage.status.');
            }
            this.probationTime = param1.readInt();
            if (this.probationTime < 0) {
                throw new Error('Forbidden value (' + this.probationTime + ') on element of UpdateSelfAgressableStatusMessage.probationTime.');
            }

        }
    }
    export class CharacterReportMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6079;

        reportedId: number;
        reason: number;

        constructor() {
            this.reportedId = 0;
            this.reason = 0;
            super();
        }

        public getMessageId(): number {
            return CharacterReportMessage.ID;
        }

        public reset(): void {
            this.reportedId = 0;
            this.reason = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_CharacterReportMessage(param1);
        }

        public serializeAs_CharacterReportMessage(param1: ICustomDataOutput): void {
            if (this.reportedId < 0) {
                throw new Error('Forbidden value (' + this.reportedId + ') on element reportedId.');
            }
            param1.writeVarInt(this.reportedId);
            if (this.reason < 0) {
                throw new Error('Forbidden value (' + this.reason + ') on element reason.');
            }
            param1.writeByte(this.reason);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_CharacterReportMessage(param1);
        }

        public deserializeAs_CharacterReportMessage(param1: ICustomDataInput): void {
            this.reportedId = param1.readVarUhInt();
            if (this.reportedId < 0) {
                throw new Error('Forbidden value (' + this.reportedId + ') on element of CharacterReportMessage.reportedId.');
            }
            this.reason = param1.readByte();
            if (this.reason < 0) {
                throw new Error('Forbidden value (' + this.reason + ') on element of CharacterReportMessage.reason.');
            }

        }
    }
    export class CinematicMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6053;

        cinematicId: number;

        constructor() {
            this.cinematicId = 0;
            super();
        }

        public getMessageId(): number {
            return CinematicMessage.ID;
        }

        public reset(): void {
            this.cinematicId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_CinematicMessage(param1);
        }

        public serializeAs_CinematicMessage(param1: ICustomDataOutput): void {
            if (this.cinematicId < 0) {
                throw new Error('Forbidden value (' + this.cinematicId + ') on element cinematicId.');
            }
            param1.writeVarShort(this.cinematicId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_CinematicMessage(param1);
        }

        public deserializeAs_CinematicMessage(param1: ICustomDataInput): void {
            this.cinematicId = param1.readVarUhShort();
            if (this.cinematicId < 0) {
                throw new Error('Forbidden value (' + this.cinematicId + ') on element of CinematicMessage.cinematicId.');
            }

        }
    }
    export class URLOpenMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6266;

        urlId: number;

        constructor() {
            this.urlId = 0;
            super();
        }

        public getMessageId(): number {
            return URLOpenMessage.ID;
        }

        public reset(): void {
            this.urlId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_URLOpenMessage(param1);
        }

        public serializeAs_URLOpenMessage(param1: ICustomDataOutput): void {
            if (this.urlId < 0) {
                throw new Error('Forbidden value (' + this.urlId + ') on element urlId.');
            }
            param1.writeByte(this.urlId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_URLOpenMessage(param1);
        }

        public deserializeAs_URLOpenMessage(param1: ICustomDataInput): void {
            this.urlId = param1.readByte();
            if (this.urlId < 0) {
                throw new Error('Forbidden value (' + this.urlId + ') on element of URLOpenMessage.urlId.');
            }

        }
    }
    export class ShortcutBarAddErrorMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6227;

        error: number;

        constructor() {
            this.error = 0;
            super();
        }

        public getMessageId(): number {
            return ShortcutBarAddErrorMessage.ID;
        }

        public reset(): void {
            this.error = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ShortcutBarAddErrorMessage(param1);
        }

        public serializeAs_ShortcutBarAddErrorMessage(param1: ICustomDataOutput): void {
            param1.writeByte(this.error);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ShortcutBarAddErrorMessage(param1);
        }

        public deserializeAs_ShortcutBarAddErrorMessage(param1: ICustomDataInput): void {
            this.error = param1.readByte();
            if (this.error < 0) {
                throw new Error('Forbidden value (' + this.error + ') on element of ShortcutBarAddErrorMessage.error.');
            }

        }
    }
    export class ShortcutBarAddRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6225;

        barType: number;
        shortcut: Shortcut;

        constructor() {
            this.barType = 0;
            this.shortcut = new Shortcut();
            super();
        }

        public getMessageId(): number {
            return ShortcutBarAddRequestMessage.ID;
        }

        public reset(): void {
            this.barType = 0;
            this.shortcut = new Shortcut();
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ShortcutBarAddRequestMessage(param1);
        }

        public serializeAs_ShortcutBarAddRequestMessage(param1: ICustomDataOutput): void {
            param1.writeByte(this.barType);
            param1.writeShort(this.shortcut.getTypeId());
            this.shortcut.serialize(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ShortcutBarAddRequestMessage(param1);
        }

        public deserializeAs_ShortcutBarAddRequestMessage(param1: ICustomDataInput): void {
            this.barType = param1.readByte();
            if (this.barType < 0) {
                throw new Error('Forbidden value (' + this.barType + ') on element of ShortcutBarAddRequestMessage.barType.');
            }
            var _loc2_: number = param1.readUnsignedShort();
            this.shortcut = <Shortcut>ProtocolTypeManager.getInstance(Shortcut, _loc2_);
            this.shortcut.deserialize(param1);

        }
    }
    export class ShortcutBarContentMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6231;

        barType: number;
        shortcuts: Shortcut[];

        constructor() {
            this.barType = 0;
            this.shortcuts = [];
            super();
        }

        public getMessageId(): number {
            return ShortcutBarContentMessage.ID;
        }

        public reset(): void {
            this.barType = 0;
            this.shortcuts = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ShortcutBarContentMessage(param1);
        }

        public serializeAs_ShortcutBarContentMessage(param1: ICustomDataOutput): void {
            param1.writeByte(this.barType);
            param1.writeShort(this.shortcuts.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.shortcuts.length) {
                param1.writeShort((this.shortcuts[_loc2_]).getTypeId());
                (this.shortcuts[_loc2_]).serialize(param1);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ShortcutBarContentMessage(param1);
        }

        public deserializeAs_ShortcutBarContentMessage(param1: ICustomDataInput): void {
            var _loc4_: number = 0;
            var _loc5_: Shortcut = null;
            this.barType = param1.readByte();
            if (this.barType < 0) {
                throw new Error('Forbidden value (' + this.barType + ') on element of ShortcutBarContentMessage.barType.');
            }
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = param1.readUnsignedShort();
                _loc5_ = <Shortcut>ProtocolTypeManager.getInstance(Shortcut, _loc4_);
                _loc5_.deserialize(param1);
                this.shortcuts.push(_loc5_);
                _loc3_++;
            }

        }
    }
    export class ShortcutBarRefreshMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6229;

        barType: number;
        shortcut: Shortcut;

        constructor() {
            this.barType = 0;
            this.shortcut = new Shortcut();
            super();
        }

        public getMessageId(): number {
            return ShortcutBarRefreshMessage.ID;
        }

        public reset(): void {
            this.barType = 0;
            this.shortcut = new Shortcut();
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ShortcutBarRefreshMessage(param1);
        }

        public serializeAs_ShortcutBarRefreshMessage(param1: ICustomDataOutput): void {
            param1.writeByte(this.barType);
            param1.writeShort(this.shortcut.getTypeId());
            this.shortcut.serialize(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ShortcutBarRefreshMessage(param1);
        }

        public deserializeAs_ShortcutBarRefreshMessage(param1: ICustomDataInput): void {
            this.barType = param1.readByte();
            if (this.barType < 0) {
                throw new Error('Forbidden value (' + this.barType + ') on element of ShortcutBarRefreshMessage.barType.');
            }
            var _loc2_: number = param1.readUnsignedShort();
            this.shortcut = <Shortcut>ProtocolTypeManager.getInstance(Shortcut, _loc2_);
            this.shortcut.deserialize(param1);

        }
    }
    export class ShortcutBarRemoveErrorMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6222;

        error: number;

        constructor() {
            this.error = 0;
            super();
        }

        public getMessageId(): number {
            return ShortcutBarRemoveErrorMessage.ID;
        }

        public reset(): void {
            this.error = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ShortcutBarRemoveErrorMessage(param1);
        }

        public serializeAs_ShortcutBarRemoveErrorMessage(param1: ICustomDataOutput): void {
            param1.writeByte(this.error);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ShortcutBarRemoveErrorMessage(param1);
        }

        public deserializeAs_ShortcutBarRemoveErrorMessage(param1: ICustomDataInput): void {
            this.error = param1.readByte();
            if (this.error < 0) {
                throw new Error('Forbidden value (' + this.error + ') on element of ShortcutBarRemoveErrorMessage.error.');
            }

        }
    }
    export class ShortcutBarRemoveRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6228;

        barType: number;
        slot: number;

        constructor() {
            this.barType = 0;
            this.slot = 0;
            super();
        }

        public getMessageId(): number {
            return ShortcutBarRemoveRequestMessage.ID;
        }

        public reset(): void {
            this.barType = 0;
            this.slot = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ShortcutBarRemoveRequestMessage(param1);
        }

        public serializeAs_ShortcutBarRemoveRequestMessage(param1: ICustomDataOutput): void {
            param1.writeByte(this.barType);
            if (this.slot < 0 || this.slot > 99) {
                throw new Error('Forbidden value (' + this.slot + ') on element slot.');
            }
            param1.writeByte(this.slot);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ShortcutBarRemoveRequestMessage(param1);
        }

        public deserializeAs_ShortcutBarRemoveRequestMessage(param1: ICustomDataInput): void {
            this.barType = param1.readByte();
            if (this.barType < 0) {
                throw new Error('Forbidden value (' + this.barType + ') on element of ShortcutBarRemoveRequestMessage.barType.');
            }
            this.slot = param1.readByte();
            if (this.slot < 0 || this.slot > 99) {
                throw new Error('Forbidden value (' + this.slot + ') on element of ShortcutBarRemoveRequestMessage.slot.');
            }

        }
    }
    export class ShortcutBarRemovedMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6224;

        barType: number;
        slot: number;

        constructor() {
            this.barType = 0;
            this.slot = 0;
            super();
        }

        public getMessageId(): number {
            return ShortcutBarRemovedMessage.ID;
        }

        public reset(): void {
            this.barType = 0;
            this.slot = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ShortcutBarRemovedMessage(param1);
        }

        public serializeAs_ShortcutBarRemovedMessage(param1: ICustomDataOutput): void {
            param1.writeByte(this.barType);
            if (this.slot < 0 || this.slot > 99) {
                throw new Error('Forbidden value (' + this.slot + ') on element slot.');
            }
            param1.writeByte(this.slot);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ShortcutBarRemovedMessage(param1);
        }

        public deserializeAs_ShortcutBarRemovedMessage(param1: ICustomDataInput): void {
            this.barType = param1.readByte();
            if (this.barType < 0) {
                throw new Error('Forbidden value (' + this.barType + ') on element of ShortcutBarRemovedMessage.barType.');
            }
            this.slot = param1.readByte();
            if (this.slot < 0 || this.slot > 99) {
                throw new Error('Forbidden value (' + this.slot + ') on element of ShortcutBarRemovedMessage.slot.');
            }

        }
    }
    export class ShortcutBarSwapErrorMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6226;

        error: number;

        constructor() {
            this.error = 0;
            super();
        }

        public getMessageId(): number {
            return ShortcutBarSwapErrorMessage.ID;
        }

        public reset(): void {
            this.error = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ShortcutBarSwapErrorMessage(param1);
        }

        public serializeAs_ShortcutBarSwapErrorMessage(param1: ICustomDataOutput): void {
            param1.writeByte(this.error);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ShortcutBarSwapErrorMessage(param1);
        }

        public deserializeAs_ShortcutBarSwapErrorMessage(param1: ICustomDataInput): void {
            this.error = param1.readByte();
            if (this.error < 0) {
                throw new Error('Forbidden value (' + this.error + ') on element of ShortcutBarSwapErrorMessage.error.');
            }

        }
    }
    export class ShortcutBarSwapRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6230;

        barType: number;
        firstSlot: number;
        secondSlot: number;

        constructor() {
            this.barType = 0;
            this.firstSlot = 0;
            this.secondSlot = 0;
            super();
        }

        public getMessageId(): number {
            return ShortcutBarSwapRequestMessage.ID;
        }

        public reset(): void {
            this.barType = 0;
            this.firstSlot = 0;
            this.secondSlot = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ShortcutBarSwapRequestMessage(param1);
        }

        public serializeAs_ShortcutBarSwapRequestMessage(param1: ICustomDataOutput): void {
            param1.writeByte(this.barType);
            if (this.firstSlot < 0 || this.firstSlot > 99) {
                throw new Error('Forbidden value (' + this.firstSlot + ') on element firstSlot.');
            }
            param1.writeByte(this.firstSlot);
            if (this.secondSlot < 0 || this.secondSlot > 99) {
                throw new Error('Forbidden value (' + this.secondSlot + ') on element secondSlot.');
            }
            param1.writeByte(this.secondSlot);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ShortcutBarSwapRequestMessage(param1);
        }

        public deserializeAs_ShortcutBarSwapRequestMessage(param1: ICustomDataInput): void {
            this.barType = param1.readByte();
            if (this.barType < 0) {
                throw new Error('Forbidden value (' + this.barType + ') on element of ShortcutBarSwapRequestMessage.barType.');
            }
            this.firstSlot = param1.readByte();
            if (this.firstSlot < 0 || this.firstSlot > 99) {
                throw new Error('Forbidden value (' + this.firstSlot + ') on element of ShortcutBarSwapRequestMessage.firstSlot.');
            }
            this.secondSlot = param1.readByte();
            if (this.secondSlot < 0 || this.secondSlot > 99) {
                throw new Error('Forbidden value (' + this.secondSlot + ') on element of ShortcutBarSwapRequestMessage.secondSlot.');
            }

        }
    }
    export class ContactLookErrorMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6045;

        requestId: number;

        constructor() {
            this.requestId = 0;
            super();
        }

        public getMessageId(): number {
            return ContactLookErrorMessage.ID;
        }

        public reset(): void {
            this.requestId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ContactLookErrorMessage(param1);
        }

        public serializeAs_ContactLookErrorMessage(param1: ICustomDataOutput): void {
            if (this.requestId < 0) {
                throw new Error('Forbidden value (' + this.requestId + ') on element requestId.');
            }
            param1.writeVarInt(this.requestId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ContactLookErrorMessage(param1);
        }

        public deserializeAs_ContactLookErrorMessage(param1: ICustomDataInput): void {
            this.requestId = param1.readVarUhInt();
            if (this.requestId < 0) {
                throw new Error('Forbidden value (' + this.requestId + ') on element of ContactLookErrorMessage.requestId.');
            }

        }
    }
    export class ContactLookMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5934;

        requestId: number;
        playerName: string;
        playerId: number;
        look: EntityLook;

        constructor() {
            this.requestId = 0;
            this.playerName = '';
            this.playerId = 0;
            this.look = new EntityLook();
            super();
        }

        public getMessageId(): number {
            return ContactLookMessage.ID;
        }

        public reset(): void {
            this.requestId = 0;
            this.playerName = '';
            this.playerId = 0;
            this.look = new EntityLook();
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ContactLookMessage(param1);
        }

        public serializeAs_ContactLookMessage(param1: ICustomDataOutput): void {
            if (this.requestId < 0) {
                throw new Error('Forbidden value (' + this.requestId + ') on element requestId.');
            }
            param1.writeVarInt(this.requestId);
            param1.writeUTF(this.playerName);
            if (this.playerId < 0) {
                throw new Error('Forbidden value (' + this.playerId + ') on element playerId.');
            }
            param1.writeVarInt(this.playerId);
            this.look.serializeAs_EntityLook(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ContactLookMessage(param1);
        }

        public deserializeAs_ContactLookMessage(param1: ICustomDataInput): void {
            this.requestId = param1.readVarUhInt();
            if (this.requestId < 0) {
                throw new Error('Forbidden value (' + this.requestId + ') on element of ContactLookMessage.requestId.');
            }
            this.playerName = param1.readUTF();
            this.playerId = param1.readVarUhInt();
            if (this.playerId < 0) {
                throw new Error('Forbidden value (' + this.playerId + ') on element of ContactLookMessage.playerId.');
            }
            this.look = new EntityLook();
            this.look.deserialize(param1);

        }
    }
    export class ContactLookRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5932;

        requestId: number;
        contactType: number;

        constructor() {
            this.requestId = 0;
            this.contactType = 0;
            super();
        }

        public getMessageId(): number {
            return ContactLookRequestMessage.ID;
        }

        public reset(): void {
            this.requestId = 0;
            this.contactType = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ContactLookRequestMessage(param1);
        }

        public serializeAs_ContactLookRequestMessage(param1: ICustomDataOutput): void {
            if (this.requestId < 0 || this.requestId > 255) {
                throw new Error('Forbidden value (' + this.requestId + ') on element requestId.');
            }
            param1.writeByte(this.requestId);
            param1.writeByte(this.contactType);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ContactLookRequestMessage(param1);
        }

        public deserializeAs_ContactLookRequestMessage(param1: ICustomDataInput): void {
            this.requestId = param1.readUnsignedByte();
            if (this.requestId < 0 || this.requestId > 255) {
                throw new Error('Forbidden value (' + this.requestId + ') on element of ContactLookRequestMessage.requestId.');
            }
            this.contactType = param1.readByte();
            if (this.contactType < 0) {
                throw new Error('Forbidden value (' + this.contactType + ') on element of ContactLookRequestMessage.contactType.');
            }

        }
    }
    export class ContactLookRequestByIdMessage extends ContactLookRequestMessage {
        public static ID: number = 5935;

        playerId: number;

        constructor() {
            this.playerId = 0;
            super();
        }

        public getMessageId(): number {
            return ContactLookRequestByIdMessage.ID;
        }

        public reset(): void {
            this.playerId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ContactLookRequestByIdMessage(param1);
        }

        public serializeAs_ContactLookRequestByIdMessage(param1: ICustomDataOutput): void {
            super.serializeAs_ContactLookRequestMessage(param1);
            if (this.playerId < 0) {
                throw new Error('Forbidden value (' + this.playerId + ') on element playerId.');
            }
            param1.writeVarInt(this.playerId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ContactLookRequestByIdMessage(param1);
        }

        public deserializeAs_ContactLookRequestByIdMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.playerId = param1.readVarUhInt();
            if (this.playerId < 0) {
                throw new Error('Forbidden value (' + this.playerId + ') on element of ContactLookRequestByIdMessage.playerId.');
            }

        }
    }
    export class StartupActionAddMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6538;

        newAction: StartupActionAddObject;

        constructor() {
            this.newAction = new StartupActionAddObject();
            super();
        }

        public getMessageId(): number {
            return StartupActionAddMessage.ID;
        }

        public reset(): void {
            this.newAction = new StartupActionAddObject();
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_StartupActionAddMessage(param1);
        }

        public serializeAs_StartupActionAddMessage(param1: ICustomDataOutput): void {
            this.newAction.serializeAs_StartupActionAddObject(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_StartupActionAddMessage(param1);
        }

        public deserializeAs_StartupActionAddMessage(param1: ICustomDataInput): void {
            this.newAction = new StartupActionAddObject();
            this.newAction.deserialize(param1);

        }
    }
    export class StartupActionFinishedMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 1304;

        success: boolean;
        actionId: number;
        automaticAction: boolean;

        constructor() {
            this.success = false;
            this.actionId = 0;
            this.automaticAction = false;
            super();
        }

        public getMessageId(): number {
            return StartupActionFinishedMessage.ID;
        }

        public reset(): void {
            this.success = false;
            this.actionId = 0;
            this.automaticAction = false;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_StartupActionFinishedMessage(param1);
        }

        public serializeAs_StartupActionFinishedMessage(param1: ICustomDataOutput): void {
            var _loc2_: number = 0;
            _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 0, this.success);
            _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 1, this.automaticAction);
            param1.writeByte(_loc2_);
            if (this.actionId < 0) {
                throw new Error('Forbidden value (' + this.actionId + ') on element actionId.');
            }
            param1.writeInt(this.actionId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_StartupActionFinishedMessage(param1);
        }

        public deserializeAs_StartupActionFinishedMessage(param1: ICustomDataInput): void {
            var _loc2_: number = param1.readByte();
            this.success = BooleanByteWrapper.getFlag(_loc2_, 0);
            this.automaticAction = BooleanByteWrapper.getFlag(_loc2_, 1);
            this.actionId = param1.readInt();
            if (this.actionId < 0) {
                throw new Error('Forbidden value (' + this.actionId + ') on element of StartupActionFinishedMessage.actionId.');
            }

        }
    }
    export class StartupActionsAllAttributionMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6537;

        characterId: number;

        constructor() {
            this.characterId = 0;
            super();
        }

        public getMessageId(): number {
            return StartupActionsAllAttributionMessage.ID;
        }

        public reset(): void {
            this.characterId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_StartupActionsAllAttributionMessage(param1);
        }

        public serializeAs_StartupActionsAllAttributionMessage(param1: ICustomDataOutput): void {
            if (this.characterId < 0) {
                throw new Error('Forbidden value (' + this.characterId + ') on element characterId.');
            }
            param1.writeInt(this.characterId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_StartupActionsAllAttributionMessage(param1);
        }

        public deserializeAs_StartupActionsAllAttributionMessage(param1: ICustomDataInput): void {
            this.characterId = param1.readInt();
            if (this.characterId < 0) {
                throw new Error('Forbidden value (' + this.characterId + ') on element of StartupActionsAllAttributionMessage.characterId.');
            }

        }
    }
    export class StartupActionsExecuteMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 1302;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return StartupActionsExecuteMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_StartupActionsExecuteMessage(param1);
        }

        public serializeAs_StartupActionsExecuteMessage(param1: ICustomDataOutput): void {

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_StartupActionsExecuteMessage(param1);
        }

        public deserializeAs_StartupActionsExecuteMessage(param1: ICustomDataInput): void {

        }
    }
    export class StartupActionsListMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 1301;

        actions: StartupActionAddObject[];

        constructor() {
            this.actions = [];
            super();
        }

        public getMessageId(): number {
            return StartupActionsListMessage.ID;
        }

        public reset(): void {
            this.actions = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_StartupActionsListMessage(param1);
        }

        public serializeAs_StartupActionsListMessage(param1: ICustomDataOutput): void {
            param1.writeShort(this.actions.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.actions.length) {
                (this.actions[_loc2_]).serializeAs_StartupActionAddObject(param1);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_StartupActionsListMessage(param1);
        }

        public deserializeAs_StartupActionsListMessage(param1: ICustomDataInput): void {
            var _loc4_: StartupActionAddObject = null;
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = new StartupActionAddObject();
                _loc4_.deserialize(param1);
                this.actions.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class StartupActionsObjetAttributionMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 1303;

        actionId: number;
        characterId: number;

        constructor() {
            this.actionId = 0;
            this.characterId = 0;
            super();
        }

        public getMessageId(): number {
            return StartupActionsObjetAttributionMessage.ID;
        }

        public reset(): void {
            this.actionId = 0;
            this.characterId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_StartupActionsObjetAttributionMessage(param1);
        }

        public serializeAs_StartupActionsObjetAttributionMessage(param1: ICustomDataOutput): void {
            if (this.actionId < 0) {
                throw new Error('Forbidden value (' + this.actionId + ') on element actionId.');
            }
            param1.writeInt(this.actionId);
            if (this.characterId < 0) {
                throw new Error('Forbidden value (' + this.characterId + ') on element characterId.');
            }
            param1.writeInt(this.characterId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_StartupActionsObjetAttributionMessage(param1);
        }

        public deserializeAs_StartupActionsObjetAttributionMessage(param1: ICustomDataInput): void {
            this.actionId = param1.readInt();
            if (this.actionId < 0) {
                throw new Error('Forbidden value (' + this.actionId + ') on element of StartupActionsObjetAttributionMessage.actionId.');
            }
            this.characterId = param1.readInt();
            if (this.characterId < 0) {
                throw new Error('Forbidden value (' + this.characterId + ') on element of StartupActionsObjetAttributionMessage.characterId.');
            }

        }
    }
    export class SubscriptionLimitationMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5542;

        reason: number;

        constructor() {
            this.reason = 0;
            super();
        }

        public getMessageId(): number {
            return SubscriptionLimitationMessage.ID;
        }

        public reset(): void {
            this.reason = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_SubscriptionLimitationMessage(param1);
        }

        public serializeAs_SubscriptionLimitationMessage(param1: ICustomDataOutput): void {
            param1.writeByte(this.reason);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_SubscriptionLimitationMessage(param1);
        }

        public deserializeAs_SubscriptionLimitationMessage(param1: ICustomDataInput): void {
            this.reason = param1.readByte();
            if (this.reason < 0) {
                throw new Error('Forbidden value (' + this.reason + ') on element of SubscriptionLimitationMessage.reason.');
            }

        }
    }
    export class SubscriptionZoneMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5573;

        active: boolean;

        constructor() {
            this.active = false;
            super();
        }

        public getMessageId(): number {
            return SubscriptionZoneMessage.ID;
        }

        public reset(): void {
            this.active = false;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_SubscriptionZoneMessage(param1);
        }

        public serializeAs_SubscriptionZoneMessage(param1: ICustomDataOutput): void {
            param1.writeBoolean(this.active);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_SubscriptionZoneMessage(param1);
        }

        public deserializeAs_SubscriptionZoneMessage(param1: ICustomDataInput): void {
            this.active = param1.readBoolean();

        }
    }
    export class OrnamentGainedMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6368;

        ornamentId: number;

        constructor() {
            this.ornamentId = 0;
            super();
        }

        public getMessageId(): number {
            return OrnamentGainedMessage.ID;
        }

        public reset(): void {
            this.ornamentId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_OrnamentGainedMessage(param1);
        }

        public serializeAs_OrnamentGainedMessage(param1: ICustomDataOutput): void {
            if (this.ornamentId < 0) {
                throw new Error('Forbidden value (' + this.ornamentId + ') on element ornamentId.');
            }
            param1.writeShort(this.ornamentId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_OrnamentGainedMessage(param1);
        }

        public deserializeAs_OrnamentGainedMessage(param1: ICustomDataInput): void {
            this.ornamentId = param1.readShort();
            if (this.ornamentId < 0) {
                throw new Error('Forbidden value (' + this.ornamentId + ') on element of OrnamentGainedMessage.ornamentId.');
            }

        }
    }
    export class OrnamentSelectErrorMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6370;

        reason: number;

        constructor() {
            this.reason = 0;
            super();
        }

        public getMessageId(): number {
            return OrnamentSelectErrorMessage.ID;
        }

        public reset(): void {
            this.reason = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_OrnamentSelectErrorMessage(param1);
        }

        public serializeAs_OrnamentSelectErrorMessage(param1: ICustomDataOutput): void {
            param1.writeByte(this.reason);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_OrnamentSelectErrorMessage(param1);
        }

        public deserializeAs_OrnamentSelectErrorMessage(param1: ICustomDataInput): void {
            this.reason = param1.readByte();
            if (this.reason < 0) {
                throw new Error('Forbidden value (' + this.reason + ') on element of OrnamentSelectErrorMessage.reason.');
            }

        }
    }
    export class OrnamentSelectRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6374;

        ornamentId: number;

        constructor() {
            this.ornamentId = 0;
            super();
        }

        public getMessageId(): number {
            return OrnamentSelectRequestMessage.ID;
        }

        public reset(): void {
            this.ornamentId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_OrnamentSelectRequestMessage(param1);
        }

        public serializeAs_OrnamentSelectRequestMessage(param1: ICustomDataOutput): void {
            if (this.ornamentId < 0) {
                throw new Error('Forbidden value (' + this.ornamentId + ') on element ornamentId.');
            }
            param1.writeVarShort(this.ornamentId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_OrnamentSelectRequestMessage(param1);
        }

        public deserializeAs_OrnamentSelectRequestMessage(param1: ICustomDataInput): void {
            this.ornamentId = param1.readVarUhShort();
            if (this.ornamentId < 0) {
                throw new Error('Forbidden value (' + this.ornamentId + ') on element of OrnamentSelectRequestMessage.ornamentId.');
            }

        }
    }
    export class OrnamentSelectedMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6369;

        ornamentId: number;

        constructor() {
            this.ornamentId = 0;
            super();
        }

        public getMessageId(): number {
            return OrnamentSelectedMessage.ID;
        }

        public reset(): void {
            this.ornamentId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_OrnamentSelectedMessage(param1);
        }

        public serializeAs_OrnamentSelectedMessage(param1: ICustomDataOutput): void {
            if (this.ornamentId < 0) {
                throw new Error('Forbidden value (' + this.ornamentId + ') on element ornamentId.');
            }
            param1.writeVarShort(this.ornamentId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_OrnamentSelectedMessage(param1);
        }

        public deserializeAs_OrnamentSelectedMessage(param1: ICustomDataInput): void {
            this.ornamentId = param1.readVarUhShort();
            if (this.ornamentId < 0) {
                throw new Error('Forbidden value (' + this.ornamentId + ') on element of OrnamentSelectedMessage.ornamentId.');
            }

        }
    }
    export class TitleGainedMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6364;

        titleId: number;

        constructor() {
            this.titleId = 0;
            super();
        }

        public getMessageId(): number {
            return TitleGainedMessage.ID;
        }

        public reset(): void {
            this.titleId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_TitleGainedMessage(param1);
        }

        public serializeAs_TitleGainedMessage(param1: ICustomDataOutput): void {
            if (this.titleId < 0) {
                throw new Error('Forbidden value (' + this.titleId + ') on element titleId.');
            }
            param1.writeVarShort(this.titleId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_TitleGainedMessage(param1);
        }

        public deserializeAs_TitleGainedMessage(param1: ICustomDataInput): void {
            this.titleId = param1.readVarUhShort();
            if (this.titleId < 0) {
                throw new Error('Forbidden value (' + this.titleId + ') on element of TitleGainedMessage.titleId.');
            }

        }
    }
    export class TitleLostMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6371;

        titleId: number;

        constructor() {
            this.titleId = 0;
            super();
        }

        public getMessageId(): number {
            return TitleLostMessage.ID;
        }

        public reset(): void {
            this.titleId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_TitleLostMessage(param1);
        }

        public serializeAs_TitleLostMessage(param1: ICustomDataOutput): void {
            if (this.titleId < 0) {
                throw new Error('Forbidden value (' + this.titleId + ') on element titleId.');
            }
            param1.writeVarShort(this.titleId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_TitleLostMessage(param1);
        }

        public deserializeAs_TitleLostMessage(param1: ICustomDataInput): void {
            this.titleId = param1.readVarUhShort();
            if (this.titleId < 0) {
                throw new Error('Forbidden value (' + this.titleId + ') on element of TitleLostMessage.titleId.');
            }

        }
    }
    export class TitleSelectErrorMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6373;

        reason: number;

        constructor() {
            this.reason = 0;
            super();
        }

        public getMessageId(): number {
            return TitleSelectErrorMessage.ID;
        }

        public reset(): void {
            this.reason = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_TitleSelectErrorMessage(param1);
        }

        public serializeAs_TitleSelectErrorMessage(param1: ICustomDataOutput): void {
            param1.writeByte(this.reason);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_TitleSelectErrorMessage(param1);
        }

        public deserializeAs_TitleSelectErrorMessage(param1: ICustomDataInput): void {
            this.reason = param1.readByte();
            if (this.reason < 0) {
                throw new Error('Forbidden value (' + this.reason + ') on element of TitleSelectErrorMessage.reason.');
            }

        }
    }
    export class TitleSelectRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6365;

        titleId: number;

        constructor() {
            this.titleId = 0;
            super();
        }

        public getMessageId(): number {
            return TitleSelectRequestMessage.ID;
        }

        public reset(): void {
            this.titleId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_TitleSelectRequestMessage(param1);
        }

        public serializeAs_TitleSelectRequestMessage(param1: ICustomDataOutput): void {
            if (this.titleId < 0) {
                throw new Error('Forbidden value (' + this.titleId + ') on element titleId.');
            }
            param1.writeVarShort(this.titleId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_TitleSelectRequestMessage(param1);
        }

        public deserializeAs_TitleSelectRequestMessage(param1: ICustomDataInput): void {
            this.titleId = param1.readVarUhShort();
            if (this.titleId < 0) {
                throw new Error('Forbidden value (' + this.titleId + ') on element of TitleSelectRequestMessage.titleId.');
            }

        }
    }
    export class TitleSelectedMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6366;

        titleId: number;

        constructor() {
            this.titleId = 0;
            super();
        }

        public getMessageId(): number {
            return TitleSelectedMessage.ID;
        }

        public reset(): void {
            this.titleId = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_TitleSelectedMessage(param1);
        }

        public serializeAs_TitleSelectedMessage(param1: ICustomDataOutput): void {
            if (this.titleId < 0) {
                throw new Error('Forbidden value (' + this.titleId + ') on element titleId.');
            }
            param1.writeVarShort(this.titleId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_TitleSelectedMessage(param1);
        }

        public deserializeAs_TitleSelectedMessage(param1: ICustomDataInput): void {
            this.titleId = param1.readVarUhShort();
            if (this.titleId < 0) {
                throw new Error('Forbidden value (' + this.titleId + ') on element of TitleSelectedMessage.titleId.');
            }

        }
    }
    export class TitlesAndOrnamentsListMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6367;

        titles: number[];
        ornaments: number[];
        activeTitle: number;
        activeOrnament: number;

        constructor() {
            this.titles = [];
            this.ornaments = [];
            this.activeTitle = 0;
            this.activeOrnament = 0;
            super();
        }

        public getMessageId(): number {
            return TitlesAndOrnamentsListMessage.ID;
        }

        public reset(): void {
            this.titles = [];
            this.ornaments = [];
            this.activeTitle = 0;
            this.activeOrnament = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_TitlesAndOrnamentsListMessage(param1);
        }

        public serializeAs_TitlesAndOrnamentsListMessage(param1: ICustomDataOutput): void {
            param1.writeShort(this.titles.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.titles.length) {
                if (this.titles[_loc2_] < 0) {
                    throw new Error('Forbidden value (' + this.titles[_loc2_] + ') on element 1 (starting at 1) of titles.');
                }
                param1.writeVarShort(this.titles[_loc2_]);
                _loc2_++;
            }
            param1.writeShort(this.ornaments.length);
            var _loc3_: number = 0;
            while (_loc3_ < this.ornaments.length) {
                if (this.ornaments[_loc3_] < 0) {
                    throw new Error('Forbidden value (' + this.ornaments[_loc3_] + ') on element 2 (starting at 1) of ornaments.');
                }
                param1.writeVarShort(this.ornaments[_loc3_]);
                _loc3_++;
            }
            if (this.activeTitle < 0) {
                throw new Error('Forbidden value (' + this.activeTitle + ') on element activeTitle.');
            }
            param1.writeVarShort(this.activeTitle);
            if (this.activeOrnament < 0) {
                throw new Error('Forbidden value (' + this.activeOrnament + ') on element activeOrnament.');
            }
            param1.writeVarShort(this.activeOrnament);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_TitlesAndOrnamentsListMessage(param1);
        }

        public deserializeAs_TitlesAndOrnamentsListMessage(param1: ICustomDataInput): void {
            var _loc6_: number = 0;
            var _loc7_: number = 0;
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc6_ = param1.readVarUhShort();
                if (_loc6_ < 0) {
                    throw new Error('Forbidden value (' + _loc6_ + ') on elements of titles.');
                }
                this.titles.push(_loc6_);
                _loc3_++;
            }
            var _loc4_: number = param1.readUnsignedShort();
            var _loc5_: number = 0;
            while (_loc5_ < _loc4_) {
            _loc7_ = param1.readVarUhShort();
                if (_loc7_ < 0) {
                    throw new Error('Forbidden value (' + _loc7_ + ') on elements of ornaments.');
                }
                this.ornaments.push(_loc7_);
                _loc5_++;
            }
            this.activeTitle = param1.readVarUhShort();
            if (this.activeTitle < 0) {
                throw new Error('Forbidden value (' + this.activeTitle + ') on element of TitlesAndOrnamentsListMessage.activeTitle.');
            }
            this.activeOrnament = param1.readVarUhShort();
            if (this.activeOrnament < 0) {
                throw new Error('Forbidden value (' + this.activeOrnament + ') on element of TitlesAndOrnamentsListMessage.activeOrnament.');
            }

        }
    }
    export class TitlesAndOrnamentsListRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6363;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return TitlesAndOrnamentsListRequestMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_TitlesAndOrnamentsListRequestMessage(param1);
        }

        public serializeAs_TitlesAndOrnamentsListRequestMessage(param1: ICustomDataOutput): void {

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_TitlesAndOrnamentsListRequestMessage(param1);
        }

        public deserializeAs_TitlesAndOrnamentsListRequestMessage(param1: ICustomDataInput): void {

        }
    }
    export class ClientUIOpenedMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6459;

        type: number;

        constructor() {
            this.type = 0;
            super();
        }

        public getMessageId(): number {
            return ClientUIOpenedMessage.ID;
        }

        public reset(): void {
            this.type = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ClientUIOpenedMessage(param1);
        }

        public serializeAs_ClientUIOpenedMessage(param1: ICustomDataOutput): void {
            param1.writeByte(this.type);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ClientUIOpenedMessage(param1);
        }

        public deserializeAs_ClientUIOpenedMessage(param1: ICustomDataInput): void {
            this.type = param1.readByte();
            if (this.type < 0) {
                throw new Error('Forbidden value (' + this.type + ') on element of ClientUIOpenedMessage.type.');
            }

        }
    }
    export class ClientUIOpenedByObjectMessage extends ClientUIOpenedMessage {
        public static ID: number = 6463;

        uid: number;

        constructor() {
            this.uid = 0;
            super();
        }

        public getMessageId(): number {
            return ClientUIOpenedByObjectMessage.ID;
        }

        public reset(): void {
            this.uid = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ClientUIOpenedByObjectMessage(param1);
        }

        public serializeAs_ClientUIOpenedByObjectMessage(param1: ICustomDataOutput): void {
            super.serializeAs_ClientUIOpenedMessage(param1);
            if (this.uid < 0) {
                throw new Error('Forbidden value (' + this.uid + ') on element uid.');
            }
            param1.writeVarInt(this.uid);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ClientUIOpenedByObjectMessage(param1);
        }

        public deserializeAs_ClientUIOpenedByObjectMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.uid = param1.readVarUhInt();
            if (this.uid < 0) {
                throw new Error('Forbidden value (' + this.uid + ') on element of ClientUIOpenedByObjectMessage.uid.');
            }

        }
    }
    export class ProtocolRequired extends NetworkMessage implements INetworkMessage {
        public static ID: number = 1;

        requiredVersion: number;
        currentVersion: number;

        constructor() {
            this.requiredVersion = 0;
            this.currentVersion = 0;
            super();
        }

        public getMessageId(): number {
            return ProtocolRequired.ID;
        }

        public reset(): void {
            this.requiredVersion = 0;
            this.currentVersion = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ProtocolRequired(param1);
        }

        public serializeAs_ProtocolRequired(param1: ICustomDataOutput): void {
            if (this.requiredVersion < 0) {
                throw new Error('Forbidden value (' + this.requiredVersion + ') on element requiredVersion.');
            }
            param1.writeInt(this.requiredVersion);
            if (this.currentVersion < 0) {
                throw new Error('Forbidden value (' + this.currentVersion + ') on element currentVersion.');
            }
            param1.writeInt(this.currentVersion);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ProtocolRequired(param1);
        }

        public deserializeAs_ProtocolRequired(param1: ICustomDataInput): void {
            this.requiredVersion = param1.readInt();
            if (this.requiredVersion < 0) {
                throw new Error('Forbidden value (' + this.requiredVersion + ') on element of ProtocolRequired.requiredVersion.');
            }
            this.currentVersion = param1.readInt();
            if (this.currentVersion < 0) {
                throw new Error('Forbidden value (' + this.currentVersion + ') on element of ProtocolRequired.currentVersion.');
            }

        }
    }
    export class LoginQueueStatusMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 10;

        position: number;
        total: number;

        constructor() {
            this.position = 0;
            this.total = 0;
            super();
        }

        public getMessageId(): number {
            return LoginQueueStatusMessage.ID;
        }

        public reset(): void {
            this.position = 0;
            this.total = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_LoginQueueStatusMessage(param1);
        }

        public serializeAs_LoginQueueStatusMessage(param1: ICustomDataOutput): void {
            if (this.position < 0 || this.position > 65535) {
                throw new Error('Forbidden value (' + this.position + ') on element position.');
            }
            param1.writeShort(this.position);
            if (this.total < 0 || this.total > 65535) {
                throw new Error('Forbidden value (' + this.total + ') on element total.');
            }
            param1.writeShort(this.total);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_LoginQueueStatusMessage(param1);
        }

        public deserializeAs_LoginQueueStatusMessage(param1: ICustomDataInput): void {
            this.position = param1.readUnsignedShort();
            if (this.position < 0 || this.position > 65535) {
                throw new Error('Forbidden value (' + this.position + ') on element of LoginQueueStatusMessage.position.');
            }
            this.total = param1.readUnsignedShort();
            if (this.total < 0 || this.total > 65535) {
                throw new Error('Forbidden value (' + this.total + ') on element of LoginQueueStatusMessage.total.');
            }

        }
    }
    export class QueueStatusMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6100;

        position: number;
        total: number;

        constructor() {
            this.position = 0;
            this.total = 0;
            super();
        }

        public getMessageId(): number {
            return QueueStatusMessage.ID;
        }

        public reset(): void {
            this.position = 0;
            this.total = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_QueueStatusMessage(param1);
        }

        public serializeAs_QueueStatusMessage(param1: ICustomDataOutput): void {
            if (this.position < 0 || this.position > 65535) {
                throw new Error('Forbidden value (' + this.position + ') on element position.');
            }
            param1.writeShort(this.position);
            if (this.total < 0 || this.total > 65535) {
                throw new Error('Forbidden value (' + this.total + ') on element total.');
            }
            param1.writeShort(this.total);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_QueueStatusMessage(param1);
        }

        public deserializeAs_QueueStatusMessage(param1: ICustomDataInput): void {
            this.position = param1.readUnsignedShort();
            if (this.position < 0 || this.position > 65535) {
                throw new Error('Forbidden value (' + this.position + ') on element of QueueStatusMessage.position.');
            }
            this.total = param1.readUnsignedShort();
            if (this.total < 0 || this.total > 65535) {
                throw new Error('Forbidden value (' + this.total + ') on element of QueueStatusMessage.total.');
            }

        }
    }
    export class TrustStatusMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6267;

        trusted: boolean;
        certified: boolean;

        constructor() {
            this.trusted = false;
            this.certified = false;
            super();
        }

        public getMessageId(): number {
            return TrustStatusMessage.ID;
        }

        public reset(): void {
            this.trusted = false;
            this.certified = false;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_TrustStatusMessage(param1);
        }

        public serializeAs_TrustStatusMessage(param1: ICustomDataOutput): void {
            var _loc2_: number = 0;
            _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 0, this.trusted);
            _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 1, this.certified);
            param1.writeByte(_loc2_);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_TrustStatusMessage(param1);
        }

        public deserializeAs_TrustStatusMessage(param1: ICustomDataInput): void {
            var _loc2_: number = param1.readByte();
            this.trusted = BooleanByteWrapper.getFlag(_loc2_, 0);
            this.certified = BooleanByteWrapper.getFlag(_loc2_, 1);

        }
    }
    export class CheckFileMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6156;

        filenameHash: string;
        type: number;
        value: string;

        constructor() {
            this.filenameHash = '';
            this.type = 0;
            this.value = '';
            super();
        }

        public getMessageId(): number {
            return CheckFileMessage.ID;
        }

        public reset(): void {
            this.filenameHash = '';
            this.type = 0;
            this.value = '';
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_CheckFileMessage(param1);
        }

        public serializeAs_CheckFileMessage(param1: ICustomDataOutput): void {
            param1.writeUTF(this.filenameHash);
            param1.writeByte(this.type);
            param1.writeUTF(this.value);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_CheckFileMessage(param1);
        }

        public deserializeAs_CheckFileMessage(param1: ICustomDataInput): void {
            this.filenameHash = param1.readUTF();
            this.type = param1.readByte();
            if (this.type < 0) {
                throw new Error('Forbidden value (' + this.type + ') on element of CheckFileMessage.type.');
            }
            this.value = param1.readUTF();

        }
    }
    export class CheckFileRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6154;

        filename: string;
        type: number;

        constructor() {
            this.filename = '';
            this.type = 0;
            super();
        }

        public getMessageId(): number {
            return CheckFileRequestMessage.ID;
        }

        public reset(): void {
            this.filename = '';
            this.type = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_CheckFileRequestMessage(param1);
        }

        public serializeAs_CheckFileRequestMessage(param1: ICustomDataOutput): void {
            param1.writeUTF(this.filename);
            param1.writeByte(this.type);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_CheckFileRequestMessage(param1);
        }

        public deserializeAs_CheckFileRequestMessage(param1: ICustomDataInput): void {
            this.filename = param1.readUTF();
            this.type = param1.readByte();
            if (this.type < 0) {
                throw new Error('Forbidden value (' + this.type + ') on element of CheckFileRequestMessage.type.');
            }

        }
    }
    export class CheckIntegrityMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6372;

        data: number[];

        constructor() {
            this.data = [];
            super();
        }

        public getMessageId(): number {
            return CheckIntegrityMessage.ID;
        }

        public reset(): void {
            this.data = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_CheckIntegrityMessage(param1);
        }

        public serializeAs_CheckIntegrityMessage(param1: ICustomDataOutput): void {
            param1.writeVarInt(this.data.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.data.length) {
                param1.writeByte(this.data[_loc2_]);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_CheckIntegrityMessage(param1);
        }

        public deserializeAs_CheckIntegrityMessage(param1: ICustomDataInput): void {
            var _loc4_: any = 0;
            var _loc2_: number = param1.readVarInt();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = param1.readByte();
                this.data.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class ClientKeyMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 5607;

        key: string;

        constructor() {
            this.key = '';
            super();
        }

        public getMessageId(): number {
            return ClientKeyMessage.ID;
        }

        public reset(): void {
            this.key = '';
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ClientKeyMessage(param1);
        }

        public serializeAs_ClientKeyMessage(param1: ICustomDataOutput): void {
            param1.writeUTF(this.key);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ClientKeyMessage(param1);
        }

        public deserializeAs_ClientKeyMessage(param1: ICustomDataInput): void {
            this.key = param1.readUTF();

        }
    }
    export class RawDataMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6253;

        content: ByteArray;

        constructor() {
            this.content = new ByteArray();
            super();
        }

        public getMessageId(): number {
            return RawDataMessage.ID;
        }

        public reset(): void {
            this.content = new ByteArray();
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_RawDataMessage(param1);
        }

        public serializeAs_RawDataMessage(param1: ICustomDataOutput): void {
            param1.writeVarInt(this.content.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.content.length) {
                param1.writeByte(this.content.getArray()[_loc2_]);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_RawDataMessage(param1);
        }

        public deserializeAs_RawDataMessage(param1: ICustomDataInput): void {
            var _loc2_: number = param1.readVarInt();
            param1.readBytes(this.content, 0, _loc2_);

        }
    }
    export class SystemMessageDisplayMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 189;

        hangUp: boolean;
        msgId: number;
        parameters: string[];

        constructor() {
            this.hangUp = false;
            this.msgId = 0;
            this.parameters = [];
            super();
        }

        public getMessageId(): number {
            return SystemMessageDisplayMessage.ID;
        }

        public reset(): void {
            this.hangUp = false;
            this.msgId = 0;
            this.parameters = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_SystemMessageDisplayMessage(param1);
        }

        public serializeAs_SystemMessageDisplayMessage(param1: ICustomDataOutput): void {
            param1.writeBoolean(this.hangUp);
            if (this.msgId < 0) {
                throw new Error('Forbidden value (' + this.msgId + ') on element msgId.');
            }
            param1.writeVarShort(this.msgId);
            param1.writeShort(this.parameters.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.parameters.length) {
                param1.writeUTF(this.parameters[_loc2_]);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_SystemMessageDisplayMessage(param1);
        }

        public deserializeAs_SystemMessageDisplayMessage(param1: ICustomDataInput): void {
            var _loc4_: string = null;
            this.hangUp = param1.readBoolean();
            this.msgId = param1.readVarUhShort();
            if (this.msgId < 0) {
                throw new Error('Forbidden value (' + this.msgId + ') on element of SystemMessageDisplayMessage.msgId.');
            }
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = param1.readUTF();
                this.parameters.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class DownloadCurrentSpeedMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 1511;

        downloadSpeed: number;

        constructor() {
            this.downloadSpeed = 0;
            super();
        }

        public getMessageId(): number {
            return DownloadCurrentSpeedMessage.ID;
        }

        public reset(): void {
            this.downloadSpeed = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_DownloadCurrentSpeedMessage(param1);
        }

        public serializeAs_DownloadCurrentSpeedMessage(param1: ICustomDataOutput): void {
            if (this.downloadSpeed < 1 || this.downloadSpeed > 10) {
                throw new Error('Forbidden value (' + this.downloadSpeed + ') on element downloadSpeed.');
            }
            param1.writeByte(this.downloadSpeed);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_DownloadCurrentSpeedMessage(param1);
        }

        public deserializeAs_DownloadCurrentSpeedMessage(param1: ICustomDataInput): void {
            this.downloadSpeed = param1.readByte();
            if (this.downloadSpeed < 1 || this.downloadSpeed > 10) {
                throw new Error('Forbidden value (' + this.downloadSpeed + ') on element of DownloadCurrentSpeedMessage.downloadSpeed.');
            }

        }
    }
    export class DownloadErrorMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 1513;

        errorId: number;
        message: string;
        helpUrl: string;

        constructor() {
            this.errorId = 0;
            this.message = '';
            this.helpUrl = '';
            super();
        }

        public getMessageId(): number {
            return DownloadErrorMessage.ID;
        }

        public reset(): void {
            this.errorId = 0;
            this.message = '';
            this.helpUrl = '';
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_DownloadErrorMessage(param1);
        }

        public serializeAs_DownloadErrorMessage(param1: ICustomDataOutput): void {
            param1.writeByte(this.errorId);
            param1.writeUTF(this.message);
            param1.writeUTF(this.helpUrl);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_DownloadErrorMessage(param1);
        }

        public deserializeAs_DownloadErrorMessage(param1: ICustomDataInput): void {
            this.errorId = param1.readByte();
            if (this.errorId < 0) {
                throw new Error('Forbidden value (' + this.errorId + ') on element of DownloadErrorMessage.errorId.');
            }
            this.message = param1.readUTF();
            this.helpUrl = param1.readUTF();

        }
    }
    export class DownloadGetCurrentSpeedRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 1510;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return DownloadGetCurrentSpeedRequestMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_DownloadGetCurrentSpeedRequestMessage(param1);
        }

        public serializeAs_DownloadGetCurrentSpeedRequestMessage(param1: ICustomDataOutput): void {

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_DownloadGetCurrentSpeedRequestMessage(param1);
        }

        public deserializeAs_DownloadGetCurrentSpeedRequestMessage(param1: ICustomDataInput): void {

        }
    }
    export class DownloadPartMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 1503;

        id: string;

        constructor() {
            this.id = '';
            super();
        }

        public getMessageId(): number {
            return DownloadPartMessage.ID;
        }

        public reset(): void {
            this.id = '';
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_DownloadPartMessage(param1);
        }

        public serializeAs_DownloadPartMessage(param1: ICustomDataOutput): void {
            param1.writeUTF(this.id);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_DownloadPartMessage(param1);
        }

        public deserializeAs_DownloadPartMessage(param1: ICustomDataInput): void {
            this.id = param1.readUTF();

        }
    }
    export class DownloadSetSpeedRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 1512;

        downloadSpeed: number;

        constructor() {
            this.downloadSpeed = 0;
            super();
        }

        public getMessageId(): number {
            return DownloadSetSpeedRequestMessage.ID;
        }

        public reset(): void {
            this.downloadSpeed = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_DownloadSetSpeedRequestMessage(param1);
        }

        public serializeAs_DownloadSetSpeedRequestMessage(param1: ICustomDataOutput): void {
            if (this.downloadSpeed < 1 || this.downloadSpeed > 10) {
                throw new Error('Forbidden value (' + this.downloadSpeed + ') on element downloadSpeed.');
            }
            param1.writeByte(this.downloadSpeed);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_DownloadSetSpeedRequestMessage(param1);
        }

        public deserializeAs_DownloadSetSpeedRequestMessage(param1: ICustomDataInput): void {
            this.downloadSpeed = param1.readByte();
            if (this.downloadSpeed < 1 || this.downloadSpeed > 10) {
                throw new Error('Forbidden value (' + this.downloadSpeed + ') on element of DownloadSetSpeedRequestMessage.downloadSpeed.');
            }

        }
    }
    export class GetPartInfoMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 1506;

        id: string;

        constructor() {
            this.id = '';
            super();
        }

        public getMessageId(): number {
            return GetPartInfoMessage.ID;
        }

        public reset(): void {
            this.id = '';
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GetPartInfoMessage(param1);
        }

        public serializeAs_GetPartInfoMessage(param1: ICustomDataOutput): void {
            param1.writeUTF(this.id);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GetPartInfoMessage(param1);
        }

        public deserializeAs_GetPartInfoMessage(param1: ICustomDataInput): void {
            this.id = param1.readUTF();

        }
    }
    export class GetPartsListMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 1501;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return GetPartsListMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GetPartsListMessage(param1);
        }

        public serializeAs_GetPartsListMessage(param1: ICustomDataOutput): void {

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GetPartsListMessage(param1);
        }

        public deserializeAs_GetPartsListMessage(param1: ICustomDataInput): void {

        }
    }
    export class PartInfoMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 1508;

        part: ContentPart;
        installationPercent: number;

        constructor() {
            this.part = new ContentPart();
            this.installationPercent = 0;
            super();
        }

        public getMessageId(): number {
            return PartInfoMessage.ID;
        }

        public reset(): void {
            this.part = new ContentPart();
            this.installationPercent = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_PartInfoMessage(param1);
        }

        public serializeAs_PartInfoMessage(param1: ICustomDataOutput): void {
            this.part.serializeAs_ContentPart(param1);
            param1.writeFloat(this.installationPercent);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_PartInfoMessage(param1);
        }

        public deserializeAs_PartInfoMessage(param1: ICustomDataInput): void {
            this.part = new ContentPart();
            this.part.deserialize(param1);
            this.installationPercent = param1.readFloat();

        }
    }
    export class PartsListMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 1502;

        parts: ContentPart[];

        constructor() {
            this.parts = [];
            super();
        }

        public getMessageId(): number {
            return PartsListMessage.ID;
        }

        public reset(): void {
            this.parts = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_PartsListMessage(param1);
        }

        public serializeAs_PartsListMessage(param1: ICustomDataOutput): void {
            param1.writeShort(this.parts.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.parts.length) {
                (this.parts[_loc2_]).serializeAs_ContentPart(param1);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_PartsListMessage(param1);
        }

        public deserializeAs_PartsListMessage(param1: ICustomDataInput): void {
            var _loc4_: ContentPart = null;
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = new ContentPart();
                _loc4_.deserialize(param1);
                this.parts.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class MailStatusMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6275;

        unread: number;
        total: number;

        constructor() {
            this.unread = 0;
            this.total = 0;
            super();
        }

        public getMessageId(): number {
            return MailStatusMessage.ID;
        }

        public reset(): void {
            this.unread = 0;
            this.total = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_MailStatusMessage(param1);
        }

        public serializeAs_MailStatusMessage(param1: ICustomDataOutput): void {
            if (this.unread < 0) {
                throw new Error('Forbidden value (' + this.unread + ') on element unread.');
            }
            param1.writeVarShort(this.unread);
            if (this.total < 0) {
                throw new Error('Forbidden value (' + this.total + ') on element total.');
            }
            param1.writeVarShort(this.total);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_MailStatusMessage(param1);
        }

        public deserializeAs_MailStatusMessage(param1: ICustomDataInput): void {
            this.unread = param1.readVarUhShort();
            if (this.unread < 0) {
                throw new Error('Forbidden value (' + this.unread + ') on element of MailStatusMessage.unread.');
            }
            this.total = param1.readVarUhShort();
            if (this.total < 0) {
                throw new Error('Forbidden value (' + this.total + ') on element of MailStatusMessage.total.');
            }

        }
    }
    export class NewMailMessage extends MailStatusMessage {
        public static ID: number = 6292;

        sendersAccountId: number[];

        constructor() {
            this.sendersAccountId = [];
            super();
        }

        public getMessageId(): number {
            return NewMailMessage.ID;
        }

        public reset(): void {
            this.sendersAccountId = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_NewMailMessage(param1);
        }

        public serializeAs_NewMailMessage(param1: ICustomDataOutput): void {
            super.serializeAs_MailStatusMessage(param1);
            param1.writeShort(this.sendersAccountId.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.sendersAccountId.length) {
                if (this.sendersAccountId[_loc2_] < 0) {
                    throw new Error('Forbidden value (' + this.sendersAccountId[_loc2_] + ') on element 1 (starting at 1) of sendersAccountId.');
                }
                param1.writeInt(this.sendersAccountId[_loc2_]);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_NewMailMessage(param1);
        }

        public deserializeAs_NewMailMessage(param1: ICustomDataInput): void {
            var _loc4_: number = 0;
            super.deserialize(param1);
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = param1.readInt();
                if (_loc4_ < 0) {
                    throw new Error('Forbidden value (' + _loc4_ + ') on elements of sendersAccountId.');
                }
                this.sendersAccountId.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class KrosmasterAuthTokenErrorMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6345;

        reason: number;

        constructor() {
            this.reason = 0;
            super();
        }

        public getMessageId(): number {
            return KrosmasterAuthTokenErrorMessage.ID;
        }

        public reset(): void {
            this.reason = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_KrosmasterAuthTokenErrorMessage(param1);
        }

        public serializeAs_KrosmasterAuthTokenErrorMessage(param1: ICustomDataOutput): void {
            param1.writeByte(this.reason);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_KrosmasterAuthTokenErrorMessage(param1);
        }

        public deserializeAs_KrosmasterAuthTokenErrorMessage(param1: ICustomDataInput): void {
            this.reason = param1.readByte();
            if (this.reason < 0) {
                throw new Error('Forbidden value (' + this.reason + ') on element of KrosmasterAuthTokenErrorMessage.reason.');
            }

        }
    }
    export class KrosmasterAuthTokenMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6351;

        token: string;

        constructor() {
            this.token = '';
            super();
        }

        public getMessageId(): number {
            return KrosmasterAuthTokenMessage.ID;
        }

        public reset(): void {
            this.token = '';
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_KrosmasterAuthTokenMessage(param1);
        }

        public serializeAs_KrosmasterAuthTokenMessage(param1: ICustomDataOutput): void {
            param1.writeUTF(this.token);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_KrosmasterAuthTokenMessage(param1);
        }

        public deserializeAs_KrosmasterAuthTokenMessage(param1: ICustomDataInput): void {
            this.token = param1.readUTF();

        }
    }
    export class KrosmasterAuthTokenRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6346;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return KrosmasterAuthTokenRequestMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_KrosmasterAuthTokenRequestMessage(param1);
        }

        public serializeAs_KrosmasterAuthTokenRequestMessage(param1: ICustomDataOutput): void {

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_KrosmasterAuthTokenRequestMessage(param1);
        }

        public deserializeAs_KrosmasterAuthTokenRequestMessage(param1: ICustomDataInput): void {

        }
    }
    export class KrosmasterInventoryErrorMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6343;

        reason: number;

        constructor() {
            this.reason = 0;
            super();
        }

        public getMessageId(): number {
            return KrosmasterInventoryErrorMessage.ID;
        }

        public reset(): void {
            this.reason = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_KrosmasterInventoryErrorMessage(param1);
        }

        public serializeAs_KrosmasterInventoryErrorMessage(param1: ICustomDataOutput): void {
            param1.writeByte(this.reason);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_KrosmasterInventoryErrorMessage(param1);
        }

        public deserializeAs_KrosmasterInventoryErrorMessage(param1: ICustomDataInput): void {
            this.reason = param1.readByte();
            if (this.reason < 0) {
                throw new Error('Forbidden value (' + this.reason + ') on element of KrosmasterInventoryErrorMessage.reason.');
            }

        }
    }
    export class KrosmasterInventoryMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6350;

        figures: KrosmasterFigure[];

        constructor() {
            this.figures = [];
            super();
        }

        public getMessageId(): number {
            return KrosmasterInventoryMessage.ID;
        }

        public reset(): void {
            this.figures = [];
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_KrosmasterInventoryMessage(param1);
        }

        public serializeAs_KrosmasterInventoryMessage(param1: ICustomDataOutput): void {
            param1.writeShort(this.figures.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.figures.length) {
                (this.figures[_loc2_]).serializeAs_KrosmasterFigure(param1);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_KrosmasterInventoryMessage(param1);
        }

        public deserializeAs_KrosmasterInventoryMessage(param1: ICustomDataInput): void {
            var _loc4_: KrosmasterFigure = null;
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = new KrosmasterFigure();
                _loc4_.deserialize(param1);
                this.figures.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class KrosmasterInventoryRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6344;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return KrosmasterInventoryRequestMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_KrosmasterInventoryRequestMessage(param1);
        }

        public serializeAs_KrosmasterInventoryRequestMessage(param1: ICustomDataOutput): void {

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_KrosmasterInventoryRequestMessage(param1);
        }

        public deserializeAs_KrosmasterInventoryRequestMessage(param1: ICustomDataInput): void {

        }
    }
    export class KrosmasterPlayingStatusMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6347;

        playing: boolean;

        constructor() {
            this.playing = false;
            super();
        }

        public getMessageId(): number {
            return KrosmasterPlayingStatusMessage.ID;
        }

        public reset(): void {
            this.playing = false;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_KrosmasterPlayingStatusMessage(param1);
        }

        public serializeAs_KrosmasterPlayingStatusMessage(param1: ICustomDataOutput): void {
            param1.writeBoolean(this.playing);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_KrosmasterPlayingStatusMessage(param1);
        }

        public deserializeAs_KrosmasterPlayingStatusMessage(param1: ICustomDataInput): void {
            this.playing = param1.readBoolean();

        }
    }
    export class KrosmasterTransferMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6348;

        uid: string;
        failure: number;

        constructor() {
            this.uid = '';
            this.failure = 0;
            super();
        }

        public getMessageId(): number {
            return KrosmasterTransferMessage.ID;
        }

        public reset(): void {
            this.uid = '';
            this.failure = 0;
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_KrosmasterTransferMessage(param1);
        }

        public serializeAs_KrosmasterTransferMessage(param1: ICustomDataOutput): void {
            param1.writeUTF(this.uid);
            param1.writeByte(this.failure);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_KrosmasterTransferMessage(param1);
        }

        public deserializeAs_KrosmasterTransferMessage(param1: ICustomDataInput): void {
            this.uid = param1.readUTF();
            this.failure = param1.readByte();
            if (this.failure < 0) {
                throw new Error('Forbidden value (' + this.failure + ') on element of KrosmasterTransferMessage.failure.');
            }

        }
    }
    export class KrosmasterTransferRequestMessage extends NetworkMessage implements INetworkMessage {
        public static ID: number = 6349;

        uid: string;

        constructor() {
            this.uid = '';
            super();
        }

        public getMessageId(): number {
            return KrosmasterTransferRequestMessage.ID;
        }

        public reset(): void {
            this.uid = '';
        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_KrosmasterTransferRequestMessage(param1);
        }

        public serializeAs_KrosmasterTransferRequestMessage(param1: ICustomDataOutput): void {
            param1.writeUTF(this.uid);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_KrosmasterTransferRequestMessage(param1);
        }

        public deserializeAs_KrosmasterTransferRequestMessage(param1: ICustomDataInput): void {
            this.uid = param1.readUTF();

        }
    }
    export class ClientYouAreDrunkMessage extends DebugInClientMessage {
        public static ID: number = 6594;



        constructor() {

            super();
        }

        public getMessageId(): number {
            return ClientYouAreDrunkMessage.ID;
        }

        public reset(): void {

        }

        public pack(param1: ICustomDataOutput): void {
            let loc2 = new ByteArray();
            this.serialize(new CustomDataWrapper(loc2));
            NetworkMessage.writePacket(param1, this.getMessageId(), loc2);
        }

        public unpack(param1: ICustomDataInput, param2: number): void {
            this.deserialize(param1);
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ClientYouAreDrunkMessage(param1);
        }

        public serializeAs_ClientYouAreDrunkMessage(param1: ICustomDataOutput): void {
            super.serializeAs_DebugInClientMessage(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ClientYouAreDrunkMessage(param1);
        }

        public deserializeAs_ClientYouAreDrunkMessage(param1: ICustomDataInput): void {
            super.deserialize(param1);

        }
    }
    export class StatisticData implements INetworkType {
        public static ID: number = 484;

        actionId: number;

        constructor() {
            this.actionId = 0;
        }

        public getTypeId(): number {
            return StatisticData.ID;
        }

        public reset(): void {
            this.actionId = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_StatisticData(param1);
        }

        public serializeAs_StatisticData(param1: ICustomDataOutput): void {
            if (this.actionId < 0) {
                throw new Error('Forbidden value (' + this.actionId + ') on element actionId.');
            }
            param1.writeVarShort(this.actionId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_StatisticData(param1);
        }

        public deserializeAs_StatisticData(param1: ICustomDataInput): void {
            this.actionId = param1.readVarUhShort();
            if (this.actionId < 0) {
                throw new Error('Forbidden value (' + this.actionId + ') on element of StatisticData.actionId.');
            }

        }
    }
    export class StatisticDataBoolean extends StatisticData implements INetworkType {
        public static ID: number = 482;

        value: boolean;

        constructor() {
            this.value = false;
            super();
        }

        public getTypeId(): number {
            return StatisticDataBoolean.ID;
        }

        public reset(): void {
            this.value = false;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_StatisticDataBoolean(param1);
        }

        public serializeAs_StatisticDataBoolean(param1: ICustomDataOutput): void {
            super.serializeAs_StatisticData(param1);
            param1.writeBoolean(this.value);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_StatisticDataBoolean(param1);
        }

        public deserializeAs_StatisticDataBoolean(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.value = param1.readBoolean();

        }
    }
    export class StatisticDataByte extends StatisticData implements INetworkType {
        public static ID: number = 486;

        value: number;

        constructor() {
            this.value = 0;
            super();
        }

        public getTypeId(): number {
            return StatisticDataByte.ID;
        }

        public reset(): void {
            this.value = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_StatisticDataByte(param1);
        }

        public serializeAs_StatisticDataByte(param1: ICustomDataOutput): void {
            super.serializeAs_StatisticData(param1);
            param1.writeByte(this.value);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_StatisticDataByte(param1);
        }

        public deserializeAs_StatisticDataByte(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.value = param1.readByte();

        }
    }
    export class StatisticDataInt extends StatisticData implements INetworkType {
        public static ID: number = 485;

        value: number;

        constructor() {
            this.value = 0;
            super();
        }

        public getTypeId(): number {
            return StatisticDataInt.ID;
        }

        public reset(): void {
            this.value = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_StatisticDataInt(param1);
        }

        public serializeAs_StatisticDataInt(param1: ICustomDataOutput): void {
            super.serializeAs_StatisticData(param1);
            param1.writeInt(this.value);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_StatisticDataInt(param1);
        }

        public deserializeAs_StatisticDataInt(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.value = param1.readInt();

        }
    }
    export class StatisticDataShort extends StatisticData implements INetworkType {
        public static ID: number = 488;

        value: number;

        constructor() {
            this.value = 0;
            super();
        }

        public getTypeId(): number {
            return StatisticDataShort.ID;
        }

        public reset(): void {
            this.value = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_StatisticDataShort(param1);
        }

        public serializeAs_StatisticDataShort(param1: ICustomDataOutput): void {
            super.serializeAs_StatisticData(param1);
            param1.writeShort(this.value);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_StatisticDataShort(param1);
        }

        public deserializeAs_StatisticDataShort(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.value = param1.readShort();

        }
    }
    export class StatisticDataString extends StatisticData implements INetworkType {
        public static ID: number = 487;

        value: string;

        constructor() {
            this.value = '';
            super();
        }

        public getTypeId(): number {
            return StatisticDataString.ID;
        }

        public reset(): void {
            this.value = '';
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_StatisticDataString(param1);
        }

        public serializeAs_StatisticDataString(param1: ICustomDataOutput): void {
            super.serializeAs_StatisticData(param1);
            param1.writeUTF(this.value);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_StatisticDataString(param1);
        }

        public deserializeAs_StatisticDataString(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.value = param1.readUTF();

        }
    }
    export class GameServerInformations implements INetworkType {
        public static ID: number = 25;

        id: number;
        type: number;
        status: number;
        completion: number;
        isSelectable: boolean;
        charactersCount: number;
        charactersSlots: number;
        date: number;

        constructor() {
            this.id = 0;
            this.type = -1;
            this.status = 1;
            this.completion = 0;
            this.isSelectable = false;
            this.charactersCount = 0;
            this.charactersSlots = 0;
            this.date = 0;
        }

        public getTypeId(): number {
            return GameServerInformations.ID;
        }

        public reset(): void {
            this.id = 0;
            this.type = -1;
            this.status = 1;
            this.completion = 0;
            this.isSelectable = false;
            this.charactersCount = 0;
            this.charactersSlots = 0;
            this.date = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameServerInformations(param1);
        }

        public serializeAs_GameServerInformations(param1: ICustomDataOutput): void {
            if (this.id < 0) {
                throw new Error('Forbidden value (' + this.id + ') on element id.');
            }
            param1.writeVarShort(this.id);
            param1.writeByte(this.type);
            param1.writeByte(this.status);
            param1.writeByte(this.completion);
            param1.writeBoolean(this.isSelectable);
            if (this.charactersCount < 0) {
                throw new Error('Forbidden value (' + this.charactersCount + ') on element charactersCount.');
            }
            param1.writeByte(this.charactersCount);
            if (this.charactersSlots < 0) {
                throw new Error('Forbidden value (' + this.charactersSlots + ') on element charactersSlots.');
            }
            param1.writeByte(this.charactersSlots);
            if (this.date < -9.007199254740992E15 || this.date > 9.007199254740992E15) {
                throw new Error('Forbidden value (' + this.date + ') on element date.');
            }
            param1.writeDouble(this.date);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameServerInformations(param1);
        }

        public deserializeAs_GameServerInformations(param1: ICustomDataInput): void {
            this.id = param1.readVarUhShort();
            if (this.id < 0) {
                throw new Error('Forbidden value (' + this.id + ') on element of GameServerInformations.id.');
            }
            this.type = param1.readByte();
            this.status = param1.readByte();
            if (this.status < 0) {
                throw new Error('Forbidden value (' + this.status + ') on element of GameServerInformations.status.');
            }
            this.completion = param1.readByte();
            if (this.completion < 0) {
                throw new Error('Forbidden value (' + this.completion + ') on element of GameServerInformations.completion.');
            }
            this.isSelectable = param1.readBoolean();
            this.charactersCount = param1.readByte();
            if (this.charactersCount < 0) {
                throw new Error('Forbidden value (' + this.charactersCount + ') on element of GameServerInformations.charactersCount.');
            }
            this.charactersSlots = param1.readByte();
            if (this.charactersSlots < 0) {
                throw new Error('Forbidden value (' + this.charactersSlots + ') on element of GameServerInformations.charactersSlots.');
            }
            this.date = param1.readDouble();
            if (this.date < -9.007199254740992E15 || this.date > 9.007199254740992E15) {
                throw new Error('Forbidden value (' + this.date + ') on element of GameServerInformations.date.');
            }

        }
    }
    export class Achievement implements INetworkType {
        public static ID: number = 363;

        id: number;
        finishedObjective: AchievementObjective[];
        startedObjectives: AchievementStartedObjective[];

        constructor() {
            this.id = 0;
            this.finishedObjective = [];
            this.startedObjectives = [];
        }

        public getTypeId(): number {
            return Achievement.ID;
        }

        public reset(): void {
            this.id = 0;
            this.finishedObjective = [];
            this.startedObjectives = [];
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_Achievement(param1);
        }

        public serializeAs_Achievement(param1: ICustomDataOutput): void {
            if (this.id < 0) {
                throw new Error('Forbidden value (' + this.id + ') on element id.');
            }
            param1.writeVarShort(this.id);
            param1.writeShort(this.finishedObjective.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.finishedObjective.length) {
                (this.finishedObjective[_loc2_]).serializeAs_AchievementObjective(param1);
                _loc2_++;
            }
            param1.writeShort(this.startedObjectives.length);
            var _loc3_: number = 0;
            while (_loc3_ < this.startedObjectives.length) {
                (this.startedObjectives[_loc3_]).serializeAs_AchievementStartedObjective(param1);
                _loc3_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_Achievement(param1);
        }

        public deserializeAs_Achievement(param1: ICustomDataInput): void {
            var _loc6_: AchievementObjective = null;
            var _loc7_: AchievementStartedObjective = null;
            this.id = param1.readVarUhShort();
            if (this.id < 0) {
                throw new Error('Forbidden value (' + this.id + ') on element of Achievement.id.');
            }
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc6_ = new AchievementObjective();
                _loc6_.deserialize(param1);
                this.finishedObjective.push(_loc6_);
                _loc3_++;
            }
            var _loc4_: number = param1.readUnsignedShort();
            var _loc5_: number = 0;
            while (_loc5_ < _loc4_) {
            _loc7_ = new AchievementStartedObjective();
                _loc7_.deserialize(param1);
                this.startedObjectives.push(_loc7_);
                _loc5_++;
            }

        }
    }
    export class AchievementObjective implements INetworkType {
        public static ID: number = 404;

        id: number;
        maxValue: number;

        constructor() {
            this.id = 0;
            this.maxValue = 0;
        }

        public getTypeId(): number {
            return AchievementObjective.ID;
        }

        public reset(): void {
            this.id = 0;
            this.maxValue = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_AchievementObjective(param1);
        }

        public serializeAs_AchievementObjective(param1: ICustomDataOutput): void {
            if (this.id < 0) {
                throw new Error('Forbidden value (' + this.id + ') on element id.');
            }
            param1.writeVarInt(this.id);
            if (this.maxValue < 0) {
                throw new Error('Forbidden value (' + this.maxValue + ') on element maxValue.');
            }
            param1.writeVarShort(this.maxValue);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_AchievementObjective(param1);
        }

        public deserializeAs_AchievementObjective(param1: ICustomDataInput): void {
            this.id = param1.readVarUhInt();
            if (this.id < 0) {
                throw new Error('Forbidden value (' + this.id + ') on element of AchievementObjective.id.');
            }
            this.maxValue = param1.readVarUhShort();
            if (this.maxValue < 0) {
                throw new Error('Forbidden value (' + this.maxValue + ') on element of AchievementObjective.maxValue.');
            }

        }
    }
    export class AchievementRewardable implements INetworkType {
        public static ID: number = 412;

        id: number;
        finishedlevel: number;

        constructor() {
            this.id = 0;
            this.finishedlevel = 0;
        }

        public getTypeId(): number {
            return AchievementRewardable.ID;
        }

        public reset(): void {
            this.id = 0;
            this.finishedlevel = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_AchievementRewardable(param1);
        }

        public serializeAs_AchievementRewardable(param1: ICustomDataOutput): void {
            if (this.id < 0) {
                throw new Error('Forbidden value (' + this.id + ') on element id.');
            }
            param1.writeVarShort(this.id);
            if (this.finishedlevel < 0 || this.finishedlevel > 200) {
                throw new Error('Forbidden value (' + this.finishedlevel + ') on element finishedlevel.');
            }
            param1.writeByte(this.finishedlevel);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_AchievementRewardable(param1);
        }

        public deserializeAs_AchievementRewardable(param1: ICustomDataInput): void {
            this.id = param1.readVarUhShort();
            if (this.id < 0) {
                throw new Error('Forbidden value (' + this.id + ') on element of AchievementRewardable.id.');
            }
            this.finishedlevel = param1.readUnsignedByte();
            if (this.finishedlevel < 0 || this.finishedlevel > 200) {
                throw new Error('Forbidden value (' + this.finishedlevel + ') on element of AchievementRewardable.finishedlevel.');
            }

        }
    }
    export class AchievementStartedObjective extends AchievementObjective implements INetworkType {
        public static ID: number = 402;

        value: number;

        constructor() {
            this.value = 0;
            super();
        }

        public getTypeId(): number {
            return AchievementStartedObjective.ID;
        }

        public reset(): void {
            this.value = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_AchievementStartedObjective(param1);
        }

        public serializeAs_AchievementStartedObjective(param1: ICustomDataOutput): void {
            super.serializeAs_AchievementObjective(param1);
            if (this.value < 0) {
                throw new Error('Forbidden value (' + this.value + ') on element value.');
            }
            param1.writeVarShort(this.value);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_AchievementStartedObjective(param1);
        }

        public deserializeAs_AchievementStartedObjective(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.value = param1.readVarUhShort();
            if (this.value < 0) {
                throw new Error('Forbidden value (' + this.value + ') on element of AchievementStartedObjective.value.');
            }

        }
    }
    export class FightDispellableEffectExtendedInformations implements INetworkType {
        public static ID: number = 208;

        actionId: number;
        sourceId: number;
        effect: AbstractFightDispellableEffect;

        constructor() {
            this.actionId = 0;
            this.sourceId = 0;
            this.effect = new AbstractFightDispellableEffect();
        }

        public getTypeId(): number {
            return FightDispellableEffectExtendedInformations.ID;
        }

        public reset(): void {
            this.actionId = 0;
            this.sourceId = 0;
            this.effect = new AbstractFightDispellableEffect();
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_FightDispellableEffectExtendedInformations(param1);
        }

        public serializeAs_FightDispellableEffectExtendedInformations(param1: ICustomDataOutput): void {
            if (this.actionId < 0) {
                throw new Error('Forbidden value (' + this.actionId + ') on element actionId.');
            }
            param1.writeVarShort(this.actionId);
            param1.writeInt(this.sourceId);
            param1.writeShort(this.effect.getTypeId());
            this.effect.serialize(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_FightDispellableEffectExtendedInformations(param1);
        }

        public deserializeAs_FightDispellableEffectExtendedInformations(param1: ICustomDataInput): void {
            this.actionId = param1.readVarUhShort();
            if (this.actionId < 0) {
                throw new Error('Forbidden value (' + this.actionId + ') on element of FightDispellableEffectExtendedInformations.actionId.');
            }
            this.sourceId = param1.readInt();
            var _loc2_: number = param1.readUnsignedShort();
            this.effect = <AbstractFightDispellableEffect>ProtocolTypeManager.getInstance(AbstractFightDispellableEffect, _loc2_);
            this.effect.deserialize(param1);

        }
    }
    export class AbstractFightDispellableEffect implements INetworkType {
        public static ID: number = 206;

        uid: number;
        targetId: number;
        turnDuration: number;
        dispelable: number;
        spellId: number;
        effectId: number;
        parentBoostUid: number;

        constructor() {
            this.uid = 0;
            this.targetId = 0;
            this.turnDuration = 0;
            this.dispelable = 1;
            this.spellId = 0;
            this.effectId = 0;
            this.parentBoostUid = 0;
        }

        public getTypeId(): number {
            return AbstractFightDispellableEffect.ID;
        }

        public reset(): void {
            this.uid = 0;
            this.targetId = 0;
            this.turnDuration = 0;
            this.dispelable = 1;
            this.spellId = 0;
            this.effectId = 0;
            this.parentBoostUid = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_AbstractFightDispellableEffect(param1);
        }

        public serializeAs_AbstractFightDispellableEffect(param1: ICustomDataOutput): void {
            if (this.uid < 0) {
                throw new Error('Forbidden value (' + this.uid + ') on element uid.');
            }
            param1.writeVarInt(this.uid);
            param1.writeInt(this.targetId);
            param1.writeShort(this.turnDuration);
            param1.writeByte(this.dispelable);
            if (this.spellId < 0) {
                throw new Error('Forbidden value (' + this.spellId + ') on element spellId.');
            }
            param1.writeVarShort(this.spellId);
            if (this.effectId < 0) {
                throw new Error('Forbidden value (' + this.effectId + ') on element effectId.');
            }
            param1.writeVarInt(this.effectId);
            if (this.parentBoostUid < 0) {
                throw new Error('Forbidden value (' + this.parentBoostUid + ') on element parentBoostUid.');
            }
            param1.writeVarInt(this.parentBoostUid);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_AbstractFightDispellableEffect(param1);
        }

        public deserializeAs_AbstractFightDispellableEffect(param1: ICustomDataInput): void {
            this.uid = param1.readVarUhInt();
            if (this.uid < 0) {
                throw new Error('Forbidden value (' + this.uid + ') on element of AbstractFightDispellableEffect.uid.');
            }
            this.targetId = param1.readInt();
            this.turnDuration = param1.readShort();
            this.dispelable = param1.readByte();
            if (this.dispelable < 0) {
                throw new Error('Forbidden value (' + this.dispelable + ') on element of AbstractFightDispellableEffect.dispelable.');
            }
            this.spellId = param1.readVarUhShort();
            if (this.spellId < 0) {
                throw new Error('Forbidden value (' + this.spellId + ') on element of AbstractFightDispellableEffect.spellId.');
            }
            this.effectId = param1.readVarUhInt();
            if (this.effectId < 0) {
                throw new Error('Forbidden value (' + this.effectId + ') on element of AbstractFightDispellableEffect.effectId.');
            }
            this.parentBoostUid = param1.readVarUhInt();
            if (this.parentBoostUid < 0) {
                throw new Error('Forbidden value (' + this.parentBoostUid + ') on element of AbstractFightDispellableEffect.parentBoostUid.');
            }

        }
    }
    export class FightTemporaryBoostEffect extends AbstractFightDispellableEffect implements INetworkType {
        public static ID: number = 209;

        delta: number;

        constructor() {
            this.delta = 0;
            super();
        }

        public getTypeId(): number {
            return FightTemporaryBoostEffect.ID;
        }

        public reset(): void {
            this.delta = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_FightTemporaryBoostEffect(param1);
        }

        public serializeAs_FightTemporaryBoostEffect(param1: ICustomDataOutput): void {
            super.serializeAs_AbstractFightDispellableEffect(param1);
            param1.writeShort(this.delta);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_FightTemporaryBoostEffect(param1);
        }

        public deserializeAs_FightTemporaryBoostEffect(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.delta = param1.readShort();

        }
    }
    export class FightTemporaryBoostStateEffect extends FightTemporaryBoostEffect implements INetworkType {
        public static ID: number = 214;

        stateId: number;

        constructor() {
            this.stateId = 0;
            super();
        }

        public getTypeId(): number {
            return FightTemporaryBoostStateEffect.ID;
        }

        public reset(): void {
            this.stateId = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_FightTemporaryBoostStateEffect(param1);
        }

        public serializeAs_FightTemporaryBoostStateEffect(param1: ICustomDataOutput): void {
            super.serializeAs_FightTemporaryBoostEffect(param1);
            param1.writeShort(this.stateId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_FightTemporaryBoostStateEffect(param1);
        }

        public deserializeAs_FightTemporaryBoostStateEffect(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.stateId = param1.readShort();

        }
    }
    export class FightTemporaryBoostWeaponDamagesEffect extends FightTemporaryBoostEffect implements INetworkType {
        public static ID: number = 211;

        weaponTypeId: number;

        constructor() {
            this.weaponTypeId = 0;
            super();
        }

        public getTypeId(): number {
            return FightTemporaryBoostWeaponDamagesEffect.ID;
        }

        public reset(): void {
            this.weaponTypeId = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_FightTemporaryBoostWeaponDamagesEffect(param1);
        }

        public serializeAs_FightTemporaryBoostWeaponDamagesEffect(param1: ICustomDataOutput): void {
            super.serializeAs_FightTemporaryBoostEffect(param1);
            param1.writeShort(this.weaponTypeId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_FightTemporaryBoostWeaponDamagesEffect(param1);
        }

        public deserializeAs_FightTemporaryBoostWeaponDamagesEffect(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.weaponTypeId = param1.readShort();

        }
    }
    export class FightTemporarySpellBoostEffect extends FightTemporaryBoostEffect implements INetworkType {
        public static ID: number = 207;

        boostedSpellId: number;

        constructor() {
            this.boostedSpellId = 0;
            super();
        }

        public getTypeId(): number {
            return FightTemporarySpellBoostEffect.ID;
        }

        public reset(): void {
            this.boostedSpellId = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_FightTemporarySpellBoostEffect(param1);
        }

        public serializeAs_FightTemporarySpellBoostEffect(param1: ICustomDataOutput): void {
            super.serializeAs_FightTemporaryBoostEffect(param1);
            if (this.boostedSpellId < 0) {
                throw new Error('Forbidden value (' + this.boostedSpellId + ') on element boostedSpellId.');
            }
            param1.writeVarShort(this.boostedSpellId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_FightTemporarySpellBoostEffect(param1);
        }

        public deserializeAs_FightTemporarySpellBoostEffect(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.boostedSpellId = param1.readVarUhShort();
            if (this.boostedSpellId < 0) {
                throw new Error('Forbidden value (' + this.boostedSpellId + ') on element of FightTemporarySpellBoostEffect.boostedSpellId.');
            }

        }
    }
    export class FightTemporarySpellImmunityEffect extends AbstractFightDispellableEffect implements INetworkType {
        public static ID: number = 366;

        immuneSpellId: number;

        constructor() {
            this.immuneSpellId = 0;
            super();
        }

        public getTypeId(): number {
            return FightTemporarySpellImmunityEffect.ID;
        }

        public reset(): void {
            this.immuneSpellId = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_FightTemporarySpellImmunityEffect(param1);
        }

        public serializeAs_FightTemporarySpellImmunityEffect(param1: ICustomDataOutput): void {
            super.serializeAs_AbstractFightDispellableEffect(param1);
            param1.writeInt(this.immuneSpellId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_FightTemporarySpellImmunityEffect(param1);
        }

        public deserializeAs_FightTemporarySpellImmunityEffect(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.immuneSpellId = param1.readInt();

        }
    }
    export class FightTriggeredEffect extends AbstractFightDispellableEffect implements INetworkType {
        public static ID: number = 210;

        param1: number;
        param2: number;
        param3: number;
        delay: number;

        constructor() {
            this.param1 = 0;
            this.param2 = 0;
            this.param3 = 0;
            this.delay = 0;
            super();
        }

        public getTypeId(): number {
            return FightTriggeredEffect.ID;
        }

        public reset(): void {
            this.param1 = 0;
            this.param2 = 0;
            this.param3 = 0;
            this.delay = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_FightTriggeredEffect(param1);
        }

        public serializeAs_FightTriggeredEffect(param1: ICustomDataOutput): void {
            super.serializeAs_AbstractFightDispellableEffect(param1);
            param1.writeInt(this.param1);
            param1.writeInt(this.param2);
            param1.writeInt(this.param3);
            param1.writeShort(this.delay);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_FightTriggeredEffect(param1);
        }

        public deserializeAs_FightTriggeredEffect(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.param1 = param1.readInt();
            this.param2 = param1.readInt();
            this.param3 = param1.readInt();
            this.delay = param1.readShort();

        }
    }
    export class GameActionMark implements INetworkType {
        public static ID: number = 351;

        markAuthorId: number;
        markTeamId: number;
        markSpellId: number;
        markSpellLevel: number;
        markId: number;
        markType: number;
        markimpactCell: number;
        cells: GameActionMarkedCell[];
        active: boolean;

        constructor() {
            this.markAuthorId = 0;
            this.markTeamId = 2;
            this.markSpellId = 0;
            this.markSpellLevel = 0;
            this.markId = 0;
            this.markType = 0;
            this.markimpactCell = 0;
            this.cells = [];
            this.active = false;
        }

        public getTypeId(): number {
            return GameActionMark.ID;
        }

        public reset(): void {
            this.markAuthorId = 0;
            this.markTeamId = 2;
            this.markSpellId = 0;
            this.markSpellLevel = 0;
            this.markId = 0;
            this.markType = 0;
            this.markimpactCell = 0;
            this.cells = [];
            this.active = false;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameActionMark(param1);
        }

        public serializeAs_GameActionMark(param1: ICustomDataOutput): void {
            param1.writeInt(this.markAuthorId);
            param1.writeByte(this.markTeamId);
            if (this.markSpellId < 0) {
                throw new Error('Forbidden value (' + this.markSpellId + ') on element markSpellId.');
            }
            param1.writeInt(this.markSpellId);
            if (this.markSpellLevel < 1 || this.markSpellLevel > 6) {
                throw new Error('Forbidden value (' + this.markSpellLevel + ') on element markSpellLevel.');
            }
            param1.writeByte(this.markSpellLevel);
            param1.writeShort(this.markId);
            param1.writeByte(this.markType);
            if (this.markimpactCell < -1 || this.markimpactCell > 559) {
                throw new Error('Forbidden value (' + this.markimpactCell + ') on element markimpactCell.');
            }
            param1.writeShort(this.markimpactCell);
            param1.writeShort(this.cells.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.cells.length) {
                (this.cells[_loc2_]).serializeAs_GameActionMarkedCell(param1);
                _loc2_++;
            }
            param1.writeBoolean(this.active);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameActionMark(param1);
        }

        public deserializeAs_GameActionMark(param1: ICustomDataInput): void {
            var _loc4_: GameActionMarkedCell = null;
            this.markAuthorId = param1.readInt();
            this.markTeamId = param1.readByte();
            if (this.markTeamId < 0) {
                throw new Error('Forbidden value (' + this.markTeamId + ') on element of GameActionMark.markTeamId.');
            }
            this.markSpellId = param1.readInt();
            if (this.markSpellId < 0) {
                throw new Error('Forbidden value (' + this.markSpellId + ') on element of GameActionMark.markSpellId.');
            }
            this.markSpellLevel = param1.readByte();
            if (this.markSpellLevel < 1 || this.markSpellLevel > 6) {
                throw new Error('Forbidden value (' + this.markSpellLevel + ') on element of GameActionMark.markSpellLevel.');
            }
            this.markId = param1.readShort();
            this.markType = param1.readByte();
            this.markimpactCell = param1.readShort();
            if (this.markimpactCell < -1 || this.markimpactCell > 559) {
                throw new Error('Forbidden value (' + this.markimpactCell + ') on element of GameActionMark.markimpactCell.');
            }
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = new GameActionMarkedCell();
                _loc4_.deserialize(param1);
                this.cells.push(_loc4_);
                _loc3_++;
            }
            this.active = param1.readBoolean();

        }
    }
    export class GameActionMarkedCell implements INetworkType {
        public static ID: number = 85;

        cellId: number;
        zoneSize: number;
        cellColor: number;
        cellsType: number;

        constructor() {
            this.cellId = 0;
            this.zoneSize = 0;
            this.cellColor = 0;
            this.cellsType = 0;
        }

        public getTypeId(): number {
            return GameActionMarkedCell.ID;
        }

        public reset(): void {
            this.cellId = 0;
            this.zoneSize = 0;
            this.cellColor = 0;
            this.cellsType = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameActionMarkedCell(param1);
        }

        public serializeAs_GameActionMarkedCell(param1: ICustomDataOutput): void {
            if (this.cellId < 0 || this.cellId > 559) {
                throw new Error('Forbidden value (' + this.cellId + ') on element cellId.');
            }
            param1.writeVarShort(this.cellId);
            param1.writeByte(this.zoneSize);
            param1.writeInt(this.cellColor);
            param1.writeByte(this.cellsType);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameActionMarkedCell(param1);
        }

        public deserializeAs_GameActionMarkedCell(param1: ICustomDataInput): void {
            this.cellId = param1.readVarUhShort();
            if (this.cellId < 0 || this.cellId > 559) {
                throw new Error('Forbidden value (' + this.cellId + ') on element of GameActionMarkedCell.cellId.');
            }
            this.zoneSize = param1.readByte();
            this.cellColor = param1.readInt();
            this.cellsType = param1.readByte();

        }
    }
    export class ServerSessionConstant implements INetworkType {
        public static ID: number = 430;

        id: number;

        constructor() {
            this.id = 0;
        }

        public getTypeId(): number {
            return ServerSessionConstant.ID;
        }

        public reset(): void {
            this.id = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ServerSessionConstant(param1);
        }

        public serializeAs_ServerSessionConstant(param1: ICustomDataOutput): void {
            if (this.id < 0) {
                throw new Error('Forbidden value (' + this.id + ') on element id.');
            }
            param1.writeVarShort(this.id);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ServerSessionConstant(param1);
        }

        public deserializeAs_ServerSessionConstant(param1: ICustomDataInput): void {
            this.id = param1.readVarUhShort();
            if (this.id < 0) {
                throw new Error('Forbidden value (' + this.id + ') on element of ServerSessionConstant.id.');
            }

        }
    }
    export class ServerSessionConstantInteger extends ServerSessionConstant implements INetworkType {
        public static ID: number = 433;

        value: number;

        constructor() {
            this.value = 0;
            super();
        }

        public getTypeId(): number {
            return ServerSessionConstantInteger.ID;
        }

        public reset(): void {
            this.value = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ServerSessionConstantInteger(param1);
        }

        public serializeAs_ServerSessionConstantInteger(param1: ICustomDataOutput): void {
            super.serializeAs_ServerSessionConstant(param1);
            param1.writeInt(this.value);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ServerSessionConstantInteger(param1);
        }

        public deserializeAs_ServerSessionConstantInteger(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.value = param1.readInt();

        }
    }
    export class ServerSessionConstantLong extends ServerSessionConstant implements INetworkType {
        public static ID: number = 429;

        value: number;

        constructor() {
            this.value = 0;
            super();
        }

        public getTypeId(): number {
            return ServerSessionConstantLong.ID;
        }

        public reset(): void {
            this.value = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ServerSessionConstantLong(param1);
        }

        public serializeAs_ServerSessionConstantLong(param1: ICustomDataOutput): void {
            super.serializeAs_ServerSessionConstant(param1);
            if (this.value < -9.007199254740992E15 || this.value > 9.007199254740992E15) {
                throw new Error('Forbidden value (' + this.value + ') on element value.');
            }
            param1.writeDouble(this.value);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ServerSessionConstantLong(param1);
        }

        public deserializeAs_ServerSessionConstantLong(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.value = param1.readDouble();
            if (this.value < -9.007199254740992E15 || this.value > 9.007199254740992E15) {
                throw new Error('Forbidden value (' + this.value + ') on element of ServerSessionConstantLong.value.');
            }

        }
    }
    export class ServerSessionConstantString extends ServerSessionConstant implements INetworkType {
        public static ID: number = 436;

        value: string;

        constructor() {
            this.value = '';
            super();
        }

        public getTypeId(): number {
            return ServerSessionConstantString.ID;
        }

        public reset(): void {
            this.value = '';
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ServerSessionConstantString(param1);
        }

        public serializeAs_ServerSessionConstantString(param1: ICustomDataOutput): void {
            super.serializeAs_ServerSessionConstant(param1);
            param1.writeUTF(this.value);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ServerSessionConstantString(param1);
        }

        public deserializeAs_ServerSessionConstantString(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.value = param1.readUTF();

        }
    }
    export class AbstractCharacterInformation implements INetworkType {
        public static ID: number = 400;

        id: number;

        constructor() {
            this.id = 0;
        }

        public getTypeId(): number {
            return AbstractCharacterInformation.ID;
        }

        public reset(): void {
            this.id = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_AbstractCharacterInformation(param1);
        }

        public serializeAs_AbstractCharacterInformation(param1: ICustomDataOutput): void {
            if (this.id < 0) {
                throw new Error('Forbidden value (' + this.id + ') on element id.');
            }
            param1.writeVarInt(this.id);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_AbstractCharacterInformation(param1);
        }

        public deserializeAs_AbstractCharacterInformation(param1: ICustomDataInput): void {
            this.id = param1.readVarUhInt();
            if (this.id < 0) {
                throw new Error('Forbidden value (' + this.id + ') on element of AbstractCharacterInformation.id.');
            }

        }
    }
    export class CharacterMinimalInformations extends AbstractCharacterInformation implements INetworkType {
        public static ID: number = 110;

        level: number;
        name: string;

        constructor() {
            this.level = 0;
            this.name = '';
            super();
        }

        public getTypeId(): number {
            return CharacterMinimalInformations.ID;
        }

        public reset(): void {
            this.level = 0;
            this.name = '';
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_CharacterMinimalInformations(param1);
        }

        public serializeAs_CharacterMinimalInformations(param1: ICustomDataOutput): void {
            super.serializeAs_AbstractCharacterInformation(param1);
            if (this.level < 1 || this.level > 200) {
                throw new Error('Forbidden value (' + this.level + ') on element level.');
            }
            param1.writeByte(this.level);
            param1.writeUTF(this.name);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_CharacterMinimalInformations(param1);
        }

        public deserializeAs_CharacterMinimalInformations(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.level = param1.readUnsignedByte();
            if (this.level < 1 || this.level > 200) {
                throw new Error('Forbidden value (' + this.level + ') on element of CharacterMinimalInformations.level.');
            }
            this.name = param1.readUTF();

        }
    }
    export class CharacterMinimalPlusLookInformations extends CharacterMinimalInformations implements INetworkType {
        public static ID: number = 163;

        entityLook: EntityLook;

        constructor() {
            this.entityLook = new EntityLook();
            super();
        }

        public getTypeId(): number {
            return CharacterMinimalPlusLookInformations.ID;
        }

        public reset(): void {
            this.entityLook = new EntityLook();
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_CharacterMinimalPlusLookInformations(param1);
        }

        public serializeAs_CharacterMinimalPlusLookInformations(param1: ICustomDataOutput): void {
            super.serializeAs_CharacterMinimalInformations(param1);
            this.entityLook.serializeAs_EntityLook(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_CharacterMinimalPlusLookInformations(param1);
        }

        public deserializeAs_CharacterMinimalPlusLookInformations(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.entityLook = new EntityLook();
            this.entityLook.deserialize(param1);

        }
    }
    export class CharacterMinimalGuildInformations extends CharacterMinimalPlusLookInformations implements INetworkType {
        public static ID: number = 445;

        guild: BasicGuildInformations;

        constructor() {
            this.guild = new BasicGuildInformations();
            super();
        }

        public getTypeId(): number {
            return CharacterMinimalGuildInformations.ID;
        }

        public reset(): void {
            this.guild = new BasicGuildInformations();
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_CharacterMinimalGuildInformations(param1);
        }

        public serializeAs_CharacterMinimalGuildInformations(param1: ICustomDataOutput): void {
            super.serializeAs_CharacterMinimalPlusLookInformations(param1);
            this.guild.serializeAs_BasicGuildInformations(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_CharacterMinimalGuildInformations(param1);
        }

        public deserializeAs_CharacterMinimalGuildInformations(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.guild = new BasicGuildInformations();
            this.guild.deserialize(param1);

        }
    }
    export class CharacterMinimalAllianceInformations extends CharacterMinimalGuildInformations implements INetworkType {
        public static ID: number = 444;

        alliance: BasicAllianceInformations;

        constructor() {
            this.alliance = new BasicAllianceInformations();
            super();
        }

        public getTypeId(): number {
            return CharacterMinimalAllianceInformations.ID;
        }

        public reset(): void {
            this.alliance = new BasicAllianceInformations();
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_CharacterMinimalAllianceInformations(param1);
        }

        public serializeAs_CharacterMinimalAllianceInformations(param1: ICustomDataOutput): void {
            super.serializeAs_CharacterMinimalGuildInformations(param1);
            this.alliance.serializeAs_BasicAllianceInformations(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_CharacterMinimalAllianceInformations(param1);
        }

        public deserializeAs_CharacterMinimalAllianceInformations(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.alliance = new BasicAllianceInformations();
            this.alliance.deserialize(param1);

        }
    }
    export class CharacterMinimalPlusLookAndGradeInformations extends CharacterMinimalPlusLookInformations implements INetworkType {
        public static ID: number = 193;

        grade: number;

        constructor() {
            this.grade = 0;
            super();
        }

        public getTypeId(): number {
            return CharacterMinimalPlusLookAndGradeInformations.ID;
        }

        public reset(): void {
            this.grade = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_CharacterMinimalPlusLookAndGradeInformations(param1);
        }

        public serializeAs_CharacterMinimalPlusLookAndGradeInformations(param1: ICustomDataOutput): void {
            super.serializeAs_CharacterMinimalPlusLookInformations(param1);
            if (this.grade < 0) {
                throw new Error('Forbidden value (' + this.grade + ') on element grade.');
            }
            param1.writeVarInt(this.grade);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_CharacterMinimalPlusLookAndGradeInformations(param1);
        }

        public deserializeAs_CharacterMinimalPlusLookAndGradeInformations(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.grade = param1.readVarUhInt();
            if (this.grade < 0) {
                throw new Error('Forbidden value (' + this.grade + ') on element of CharacterMinimalPlusLookAndGradeInformations.grade.');
            }

        }
    }
    export class ActorAlignmentInformations implements INetworkType {
        public static ID: number = 201;

        alignmentSide: number;
        alignmentValue: number;
        alignmentGrade: number;
        characterPower: number;

        constructor() {
            this.alignmentSide = 0;
            this.alignmentValue = 0;
            this.alignmentGrade = 0;
            this.characterPower = 0;
        }

        public getTypeId(): number {
            return ActorAlignmentInformations.ID;
        }

        public reset(): void {
            this.alignmentSide = 0;
            this.alignmentValue = 0;
            this.alignmentGrade = 0;
            this.characterPower = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ActorAlignmentInformations(param1);
        }

        public serializeAs_ActorAlignmentInformations(param1: ICustomDataOutput): void {
            param1.writeByte(this.alignmentSide);
            if (this.alignmentValue < 0) {
                throw new Error('Forbidden value (' + this.alignmentValue + ') on element alignmentValue.');
            }
            param1.writeByte(this.alignmentValue);
            if (this.alignmentGrade < 0) {
                throw new Error('Forbidden value (' + this.alignmentGrade + ') on element alignmentGrade.');
            }
            param1.writeByte(this.alignmentGrade);
            if (this.characterPower < 0) {
                throw new Error('Forbidden value (' + this.characterPower + ') on element characterPower.');
            }
            param1.writeVarInt(this.characterPower);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ActorAlignmentInformations(param1);
        }

        public deserializeAs_ActorAlignmentInformations(param1: ICustomDataInput): void {
            this.alignmentSide = param1.readByte();
            this.alignmentValue = param1.readByte();
            if (this.alignmentValue < 0) {
                throw new Error('Forbidden value (' + this.alignmentValue + ') on element of ActorAlignmentInformations.alignmentValue.');
            }
            this.alignmentGrade = param1.readByte();
            if (this.alignmentGrade < 0) {
                throw new Error('Forbidden value (' + this.alignmentGrade + ') on element of ActorAlignmentInformations.alignmentGrade.');
            }
            this.characterPower = param1.readVarUhInt();
            if (this.characterPower < 0) {
                throw new Error('Forbidden value (' + this.characterPower + ') on element of ActorAlignmentInformations.characterPower.');
            }

        }
    }
    export class ActorExtendedAlignmentInformations extends ActorAlignmentInformations implements INetworkType {
        public static ID: number = 202;

        honor: number;
        honorGradeFloor: number;
        honorNextGradeFloor: number;
        aggressable: number;

        constructor() {
            this.honor = 0;
            this.honorGradeFloor = 0;
            this.honorNextGradeFloor = 0;
            this.aggressable = 0;
            super();
        }

        public getTypeId(): number {
            return ActorExtendedAlignmentInformations.ID;
        }

        public reset(): void {
            this.honor = 0;
            this.honorGradeFloor = 0;
            this.honorNextGradeFloor = 0;
            this.aggressable = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ActorExtendedAlignmentInformations(param1);
        }

        public serializeAs_ActorExtendedAlignmentInformations(param1: ICustomDataOutput): void {
            super.serializeAs_ActorAlignmentInformations(param1);
            if (this.honor < 0 || this.honor > 20000) {
                throw new Error('Forbidden value (' + this.honor + ') on element honor.');
            }
            param1.writeVarShort(this.honor);
            if (this.honorGradeFloor < 0 || this.honorGradeFloor > 20000) {
                throw new Error('Forbidden value (' + this.honorGradeFloor + ') on element honorGradeFloor.');
            }
            param1.writeVarShort(this.honorGradeFloor);
            if (this.honorNextGradeFloor < 0 || this.honorNextGradeFloor > 20000) {
                throw new Error('Forbidden value (' + this.honorNextGradeFloor + ') on element honorNextGradeFloor.');
            }
            param1.writeVarShort(this.honorNextGradeFloor);
            param1.writeByte(this.aggressable);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ActorExtendedAlignmentInformations(param1);
        }

        public deserializeAs_ActorExtendedAlignmentInformations(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.honor = param1.readVarUhShort();
            if (this.honor < 0 || this.honor > 20000) {
                throw new Error('Forbidden value (' + this.honor + ') on element of ActorExtendedAlignmentInformations.honor.');
            }
            this.honorGradeFloor = param1.readVarUhShort();
            if (this.honorGradeFloor < 0 || this.honorGradeFloor > 20000) {
                throw new Error('Forbidden value (' + this.honorGradeFloor + ') on element of ActorExtendedAlignmentInformations.honorGradeFloor.');
            }
            this.honorNextGradeFloor = param1.readVarUhShort();
            if (this.honorNextGradeFloor < 0 || this.honorNextGradeFloor > 20000) {
                throw new Error('Forbidden value (' + this.honorNextGradeFloor + ') on element of ActorExtendedAlignmentInformations.honorNextGradeFloor.');
            }
            this.aggressable = param1.readByte();
            if (this.aggressable < 0) {
                throw new Error('Forbidden value (' + this.aggressable + ') on element of ActorExtendedAlignmentInformations.aggressable.');
            }

        }
    }
    export class CharacterBaseCharacteristic implements INetworkType {
        public static ID: number = 4;

        base: number;
        additionnal: number;
        objectsAndMountBonus: number;
        alignGiftBonus: number;
        contextModif: number;

        constructor() {
            this.base = 0;
            this.additionnal = 0;
            this.objectsAndMountBonus = 0;
            this.alignGiftBonus = 0;
            this.contextModif = 0;
        }

        public getTypeId(): number {
            return CharacterBaseCharacteristic.ID;
        }

        public reset(): void {
            this.base = 0;
            this.additionnal = 0;
            this.objectsAndMountBonus = 0;
            this.alignGiftBonus = 0;
            this.contextModif = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_CharacterBaseCharacteristic(param1);
        }

        public serializeAs_CharacterBaseCharacteristic(param1: ICustomDataOutput): void {
            param1.writeVarShort(this.base);
            param1.writeVarShort(this.additionnal);
            param1.writeVarShort(this.objectsAndMountBonus);
            param1.writeVarShort(this.alignGiftBonus);
            param1.writeVarShort(this.contextModif);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_CharacterBaseCharacteristic(param1);
        }

        public deserializeAs_CharacterBaseCharacteristic(param1: ICustomDataInput): void {
            this.base = param1.readVarShort();
            this.additionnal = param1.readVarShort();
            this.objectsAndMountBonus = param1.readVarShort();
            this.alignGiftBonus = param1.readVarShort();
            this.contextModif = param1.readVarShort();

        }
    }
    export class CharacterCharacteristicsInformations implements INetworkType {
        public static ID: number = 8;

        experience: number;
        experienceLevelFloor: number;
        experienceNextLevelFloor: number;
        kamas: number;
        statsPoints: number;
        additionnalPoints: number;
        spellsPoints: number;
        alignmentInfos: ActorExtendedAlignmentInformations;
        lifePoints: number;
        maxLifePoints: number;
        energyPoints: number;
        maxEnergyPoints: number;
        actionPointsCurrent: number;
        movementPointsCurrent: number;
        initiative: CharacterBaseCharacteristic;
        prospecting: CharacterBaseCharacteristic;
        actionPoints: CharacterBaseCharacteristic;
        movementPoints: CharacterBaseCharacteristic;
        strength: CharacterBaseCharacteristic;
        vitality: CharacterBaseCharacteristic;
        wisdom: CharacterBaseCharacteristic;
        chance: CharacterBaseCharacteristic;
        agility: CharacterBaseCharacteristic;
        intelligence: CharacterBaseCharacteristic;
        range: CharacterBaseCharacteristic;
        summonableCreaturesBoost: CharacterBaseCharacteristic;
        reflect: CharacterBaseCharacteristic;
        criticalHit: CharacterBaseCharacteristic;
        criticalHitWeapon: number;
        criticalMiss: CharacterBaseCharacteristic;
        healBonus: CharacterBaseCharacteristic;
        allDamagesBonus: CharacterBaseCharacteristic;
        weaponDamagesBonusPercent: CharacterBaseCharacteristic;
        damagesBonusPercent: CharacterBaseCharacteristic;
        trapBonus: CharacterBaseCharacteristic;
        trapBonusPercent: CharacterBaseCharacteristic;
        glyphBonusPercent: CharacterBaseCharacteristic;
        permanentDamagePercent: CharacterBaseCharacteristic;
        tackleBlock: CharacterBaseCharacteristic;
        tackleEvade: CharacterBaseCharacteristic;
        PAAttack: CharacterBaseCharacteristic;
        PMAttack: CharacterBaseCharacteristic;
        pushDamageBonus: CharacterBaseCharacteristic;
        criticalDamageBonus: CharacterBaseCharacteristic;
        neutralDamageBonus: CharacterBaseCharacteristic;
        earthDamageBonus: CharacterBaseCharacteristic;
        waterDamageBonus: CharacterBaseCharacteristic;
        airDamageBonus: CharacterBaseCharacteristic;
        fireDamageBonus: CharacterBaseCharacteristic;
        dodgePALostProbability: CharacterBaseCharacteristic;
        dodgePMLostProbability: CharacterBaseCharacteristic;
        neutralElementResistPercent: CharacterBaseCharacteristic;
        earthElementResistPercent: CharacterBaseCharacteristic;
        waterElementResistPercent: CharacterBaseCharacteristic;
        airElementResistPercent: CharacterBaseCharacteristic;
        fireElementResistPercent: CharacterBaseCharacteristic;
        neutralElementReduction: CharacterBaseCharacteristic;
        earthElementReduction: CharacterBaseCharacteristic;
        waterElementReduction: CharacterBaseCharacteristic;
        airElementReduction: CharacterBaseCharacteristic;
        fireElementReduction: CharacterBaseCharacteristic;
        pushDamageReduction: CharacterBaseCharacteristic;
        criticalDamageReduction: CharacterBaseCharacteristic;
        pvpNeutralElementResistPercent: CharacterBaseCharacteristic;
        pvpEarthElementResistPercent: CharacterBaseCharacteristic;
        pvpWaterElementResistPercent: CharacterBaseCharacteristic;
        pvpAirElementResistPercent: CharacterBaseCharacteristic;
        pvpFireElementResistPercent: CharacterBaseCharacteristic;
        pvpNeutralElementReduction: CharacterBaseCharacteristic;
        pvpEarthElementReduction: CharacterBaseCharacteristic;
        pvpWaterElementReduction: CharacterBaseCharacteristic;
        pvpAirElementReduction: CharacterBaseCharacteristic;
        pvpFireElementReduction: CharacterBaseCharacteristic;
        spellModifications: CharacterSpellModification[];
        probationTime: number;

        constructor() {
            this.experience = 0;
            this.experienceLevelFloor = 0;
            this.experienceNextLevelFloor = 0;
            this.kamas = 0;
            this.statsPoints = 0;
            this.additionnalPoints = 0;
            this.spellsPoints = 0;
            this.alignmentInfos = new ActorExtendedAlignmentInformations();
            this.lifePoints = 0;
            this.maxLifePoints = 0;
            this.energyPoints = 0;
            this.maxEnergyPoints = 0;
            this.actionPointsCurrent = 0;
            this.movementPointsCurrent = 0;
            this.initiative = new CharacterBaseCharacteristic();
            this.prospecting = new CharacterBaseCharacteristic();
            this.actionPoints = new CharacterBaseCharacteristic();
            this.movementPoints = new CharacterBaseCharacteristic();
            this.strength = new CharacterBaseCharacteristic();
            this.vitality = new CharacterBaseCharacteristic();
            this.wisdom = new CharacterBaseCharacteristic();
            this.chance = new CharacterBaseCharacteristic();
            this.agility = new CharacterBaseCharacteristic();
            this.intelligence = new CharacterBaseCharacteristic();
            this.range = new CharacterBaseCharacteristic();
            this.summonableCreaturesBoost = new CharacterBaseCharacteristic();
            this.reflect = new CharacterBaseCharacteristic();
            this.criticalHit = new CharacterBaseCharacteristic();
            this.criticalHitWeapon = 0;
            this.criticalMiss = new CharacterBaseCharacteristic();
            this.healBonus = new CharacterBaseCharacteristic();
            this.allDamagesBonus = new CharacterBaseCharacteristic();
            this.weaponDamagesBonusPercent = new CharacterBaseCharacteristic();
            this.damagesBonusPercent = new CharacterBaseCharacteristic();
            this.trapBonus = new CharacterBaseCharacteristic();
            this.trapBonusPercent = new CharacterBaseCharacteristic();
            this.glyphBonusPercent = new CharacterBaseCharacteristic();
            this.permanentDamagePercent = new CharacterBaseCharacteristic();
            this.tackleBlock = new CharacterBaseCharacteristic();
            this.tackleEvade = new CharacterBaseCharacteristic();
            this.PAAttack = new CharacterBaseCharacteristic();
            this.PMAttack = new CharacterBaseCharacteristic();
            this.pushDamageBonus = new CharacterBaseCharacteristic();
            this.criticalDamageBonus = new CharacterBaseCharacteristic();
            this.neutralDamageBonus = new CharacterBaseCharacteristic();
            this.earthDamageBonus = new CharacterBaseCharacteristic();
            this.waterDamageBonus = new CharacterBaseCharacteristic();
            this.airDamageBonus = new CharacterBaseCharacteristic();
            this.fireDamageBonus = new CharacterBaseCharacteristic();
            this.dodgePALostProbability = new CharacterBaseCharacteristic();
            this.dodgePMLostProbability = new CharacterBaseCharacteristic();
            this.neutralElementResistPercent = new CharacterBaseCharacteristic();
            this.earthElementResistPercent = new CharacterBaseCharacteristic();
            this.waterElementResistPercent = new CharacterBaseCharacteristic();
            this.airElementResistPercent = new CharacterBaseCharacteristic();
            this.fireElementResistPercent = new CharacterBaseCharacteristic();
            this.neutralElementReduction = new CharacterBaseCharacteristic();
            this.earthElementReduction = new CharacterBaseCharacteristic();
            this.waterElementReduction = new CharacterBaseCharacteristic();
            this.airElementReduction = new CharacterBaseCharacteristic();
            this.fireElementReduction = new CharacterBaseCharacteristic();
            this.pushDamageReduction = new CharacterBaseCharacteristic();
            this.criticalDamageReduction = new CharacterBaseCharacteristic();
            this.pvpNeutralElementResistPercent = new CharacterBaseCharacteristic();
            this.pvpEarthElementResistPercent = new CharacterBaseCharacteristic();
            this.pvpWaterElementResistPercent = new CharacterBaseCharacteristic();
            this.pvpAirElementResistPercent = new CharacterBaseCharacteristic();
            this.pvpFireElementResistPercent = new CharacterBaseCharacteristic();
            this.pvpNeutralElementReduction = new CharacterBaseCharacteristic();
            this.pvpEarthElementReduction = new CharacterBaseCharacteristic();
            this.pvpWaterElementReduction = new CharacterBaseCharacteristic();
            this.pvpAirElementReduction = new CharacterBaseCharacteristic();
            this.pvpFireElementReduction = new CharacterBaseCharacteristic();
            this.spellModifications = [];
            this.probationTime = 0;
        }

        public getTypeId(): number {
            return CharacterCharacteristicsInformations.ID;
        }

        public reset(): void {
            this.experience = 0;
            this.experienceLevelFloor = 0;
            this.experienceNextLevelFloor = 0;
            this.kamas = 0;
            this.statsPoints = 0;
            this.additionnalPoints = 0;
            this.spellsPoints = 0;
            this.alignmentInfos = new ActorExtendedAlignmentInformations();
            this.lifePoints = 0;
            this.maxLifePoints = 0;
            this.energyPoints = 0;
            this.maxEnergyPoints = 0;
            this.actionPointsCurrent = 0;
            this.movementPointsCurrent = 0;
            this.initiative = new CharacterBaseCharacteristic();
            this.prospecting = new CharacterBaseCharacteristic();
            this.actionPoints = new CharacterBaseCharacteristic();
            this.movementPoints = new CharacterBaseCharacteristic();
            this.strength = new CharacterBaseCharacteristic();
            this.vitality = new CharacterBaseCharacteristic();
            this.wisdom = new CharacterBaseCharacteristic();
            this.chance = new CharacterBaseCharacteristic();
            this.agility = new CharacterBaseCharacteristic();
            this.intelligence = new CharacterBaseCharacteristic();
            this.range = new CharacterBaseCharacteristic();
            this.summonableCreaturesBoost = new CharacterBaseCharacteristic();
            this.reflect = new CharacterBaseCharacteristic();
            this.criticalHit = new CharacterBaseCharacteristic();
            this.criticalHitWeapon = 0;
            this.criticalMiss = new CharacterBaseCharacteristic();
            this.healBonus = new CharacterBaseCharacteristic();
            this.allDamagesBonus = new CharacterBaseCharacteristic();
            this.weaponDamagesBonusPercent = new CharacterBaseCharacteristic();
            this.damagesBonusPercent = new CharacterBaseCharacteristic();
            this.trapBonus = new CharacterBaseCharacteristic();
            this.trapBonusPercent = new CharacterBaseCharacteristic();
            this.glyphBonusPercent = new CharacterBaseCharacteristic();
            this.permanentDamagePercent = new CharacterBaseCharacteristic();
            this.tackleBlock = new CharacterBaseCharacteristic();
            this.tackleEvade = new CharacterBaseCharacteristic();
            this.PAAttack = new CharacterBaseCharacteristic();
            this.PMAttack = new CharacterBaseCharacteristic();
            this.pushDamageBonus = new CharacterBaseCharacteristic();
            this.criticalDamageBonus = new CharacterBaseCharacteristic();
            this.neutralDamageBonus = new CharacterBaseCharacteristic();
            this.earthDamageBonus = new CharacterBaseCharacteristic();
            this.waterDamageBonus = new CharacterBaseCharacteristic();
            this.airDamageBonus = new CharacterBaseCharacteristic();
            this.fireDamageBonus = new CharacterBaseCharacteristic();
            this.dodgePALostProbability = new CharacterBaseCharacteristic();
            this.dodgePMLostProbability = new CharacterBaseCharacteristic();
            this.neutralElementResistPercent = new CharacterBaseCharacteristic();
            this.earthElementResistPercent = new CharacterBaseCharacteristic();
            this.waterElementResistPercent = new CharacterBaseCharacteristic();
            this.airElementResistPercent = new CharacterBaseCharacteristic();
            this.fireElementResistPercent = new CharacterBaseCharacteristic();
            this.neutralElementReduction = new CharacterBaseCharacteristic();
            this.earthElementReduction = new CharacterBaseCharacteristic();
            this.waterElementReduction = new CharacterBaseCharacteristic();
            this.airElementReduction = new CharacterBaseCharacteristic();
            this.fireElementReduction = new CharacterBaseCharacteristic();
            this.pushDamageReduction = new CharacterBaseCharacteristic();
            this.criticalDamageReduction = new CharacterBaseCharacteristic();
            this.pvpNeutralElementResistPercent = new CharacterBaseCharacteristic();
            this.pvpEarthElementResistPercent = new CharacterBaseCharacteristic();
            this.pvpWaterElementResistPercent = new CharacterBaseCharacteristic();
            this.pvpAirElementResistPercent = new CharacterBaseCharacteristic();
            this.pvpFireElementResistPercent = new CharacterBaseCharacteristic();
            this.pvpNeutralElementReduction = new CharacterBaseCharacteristic();
            this.pvpEarthElementReduction = new CharacterBaseCharacteristic();
            this.pvpWaterElementReduction = new CharacterBaseCharacteristic();
            this.pvpAirElementReduction = new CharacterBaseCharacteristic();
            this.pvpFireElementReduction = new CharacterBaseCharacteristic();
            this.spellModifications = [];
            this.probationTime = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_CharacterCharacteristicsInformations(param1);
        }

        public serializeAs_CharacterCharacteristicsInformations(param1: ICustomDataOutput): void {
            if (this.experience < 0 || this.experience > 9.007199254740992E15) {
                throw new Error('Forbidden value (' + this.experience + ') on element experience.');
            }
            param1.writeVarLong(this.experience);
            if (this.experienceLevelFloor < 0 || this.experienceLevelFloor > 9.007199254740992E15) {
                throw new Error('Forbidden value (' + this.experienceLevelFloor + ') on element experienceLevelFloor.');
            }
            param1.writeVarLong(this.experienceLevelFloor);
            if (this.experienceNextLevelFloor < 0 || this.experienceNextLevelFloor > 9.007199254740992E15) {
                throw new Error('Forbidden value (' + this.experienceNextLevelFloor + ') on element experienceNextLevelFloor.');
            }
            param1.writeVarLong(this.experienceNextLevelFloor);
            if (this.kamas < 0) {
                throw new Error('Forbidden value (' + this.kamas + ') on element kamas.');
            }
            param1.writeInt(this.kamas);
            if (this.statsPoints < 0) {
                throw new Error('Forbidden value (' + this.statsPoints + ') on element statsPoints.');
            }
            param1.writeVarShort(this.statsPoints);
            if (this.additionnalPoints < 0) {
                throw new Error('Forbidden value (' + this.additionnalPoints + ') on element additionnalPoints.');
            }
            param1.writeVarShort(this.additionnalPoints);
            if (this.spellsPoints < 0) {
                throw new Error('Forbidden value (' + this.spellsPoints + ') on element spellsPoints.');
            }
            param1.writeVarShort(this.spellsPoints);
            this.alignmentInfos.serializeAs_ActorExtendedAlignmentInformations(param1);
            if (this.lifePoints < 0) {
                throw new Error('Forbidden value (' + this.lifePoints + ') on element lifePoints.');
            }
            param1.writeVarInt(this.lifePoints);
            if (this.maxLifePoints < 0) {
                throw new Error('Forbidden value (' + this.maxLifePoints + ') on element maxLifePoints.');
            }
            param1.writeVarInt(this.maxLifePoints);
            if (this.energyPoints < 0) {
                throw new Error('Forbidden value (' + this.energyPoints + ') on element energyPoints.');
            }
            param1.writeVarShort(this.energyPoints);
            if (this.maxEnergyPoints < 0) {
                throw new Error('Forbidden value (' + this.maxEnergyPoints + ') on element maxEnergyPoints.');
            }
            param1.writeVarShort(this.maxEnergyPoints);
            param1.writeVarShort(this.actionPointsCurrent);
            param1.writeVarShort(this.movementPointsCurrent);
            this.initiative.serializeAs_CharacterBaseCharacteristic(param1);
            this.prospecting.serializeAs_CharacterBaseCharacteristic(param1);
            this.actionPoints.serializeAs_CharacterBaseCharacteristic(param1);
            this.movementPoints.serializeAs_CharacterBaseCharacteristic(param1);
            this.strength.serializeAs_CharacterBaseCharacteristic(param1);
            this.vitality.serializeAs_CharacterBaseCharacteristic(param1);
            this.wisdom.serializeAs_CharacterBaseCharacteristic(param1);
            this.chance.serializeAs_CharacterBaseCharacteristic(param1);
            this.agility.serializeAs_CharacterBaseCharacteristic(param1);
            this.intelligence.serializeAs_CharacterBaseCharacteristic(param1);
            this.range.serializeAs_CharacterBaseCharacteristic(param1);
            this.summonableCreaturesBoost.serializeAs_CharacterBaseCharacteristic(param1);
            this.reflect.serializeAs_CharacterBaseCharacteristic(param1);
            this.criticalHit.serializeAs_CharacterBaseCharacteristic(param1);
            if (this.criticalHitWeapon < 0) {
                throw new Error('Forbidden value (' + this.criticalHitWeapon + ') on element criticalHitWeapon.');
            }
            param1.writeVarShort(this.criticalHitWeapon);
            this.criticalMiss.serializeAs_CharacterBaseCharacteristic(param1);
            this.healBonus.serializeAs_CharacterBaseCharacteristic(param1);
            this.allDamagesBonus.serializeAs_CharacterBaseCharacteristic(param1);
            this.weaponDamagesBonusPercent.serializeAs_CharacterBaseCharacteristic(param1);
            this.damagesBonusPercent.serializeAs_CharacterBaseCharacteristic(param1);
            this.trapBonus.serializeAs_CharacterBaseCharacteristic(param1);
            this.trapBonusPercent.serializeAs_CharacterBaseCharacteristic(param1);
            this.glyphBonusPercent.serializeAs_CharacterBaseCharacteristic(param1);
            this.permanentDamagePercent.serializeAs_CharacterBaseCharacteristic(param1);
            this.tackleBlock.serializeAs_CharacterBaseCharacteristic(param1);
            this.tackleEvade.serializeAs_CharacterBaseCharacteristic(param1);
            this.PAAttack.serializeAs_CharacterBaseCharacteristic(param1);
            this.PMAttack.serializeAs_CharacterBaseCharacteristic(param1);
            this.pushDamageBonus.serializeAs_CharacterBaseCharacteristic(param1);
            this.criticalDamageBonus.serializeAs_CharacterBaseCharacteristic(param1);
            this.neutralDamageBonus.serializeAs_CharacterBaseCharacteristic(param1);
            this.earthDamageBonus.serializeAs_CharacterBaseCharacteristic(param1);
            this.waterDamageBonus.serializeAs_CharacterBaseCharacteristic(param1);
            this.airDamageBonus.serializeAs_CharacterBaseCharacteristic(param1);
            this.fireDamageBonus.serializeAs_CharacterBaseCharacteristic(param1);
            this.dodgePALostProbability.serializeAs_CharacterBaseCharacteristic(param1);
            this.dodgePMLostProbability.serializeAs_CharacterBaseCharacteristic(param1);
            this.neutralElementResistPercent.serializeAs_CharacterBaseCharacteristic(param1);
            this.earthElementResistPercent.serializeAs_CharacterBaseCharacteristic(param1);
            this.waterElementResistPercent.serializeAs_CharacterBaseCharacteristic(param1);
            this.airElementResistPercent.serializeAs_CharacterBaseCharacteristic(param1);
            this.fireElementResistPercent.serializeAs_CharacterBaseCharacteristic(param1);
            this.neutralElementReduction.serializeAs_CharacterBaseCharacteristic(param1);
            this.earthElementReduction.serializeAs_CharacterBaseCharacteristic(param1);
            this.waterElementReduction.serializeAs_CharacterBaseCharacteristic(param1);
            this.airElementReduction.serializeAs_CharacterBaseCharacteristic(param1);
            this.fireElementReduction.serializeAs_CharacterBaseCharacteristic(param1);
            this.pushDamageReduction.serializeAs_CharacterBaseCharacteristic(param1);
            this.criticalDamageReduction.serializeAs_CharacterBaseCharacteristic(param1);
            this.pvpNeutralElementResistPercent.serializeAs_CharacterBaseCharacteristic(param1);
            this.pvpEarthElementResistPercent.serializeAs_CharacterBaseCharacteristic(param1);
            this.pvpWaterElementResistPercent.serializeAs_CharacterBaseCharacteristic(param1);
            this.pvpAirElementResistPercent.serializeAs_CharacterBaseCharacteristic(param1);
            this.pvpFireElementResistPercent.serializeAs_CharacterBaseCharacteristic(param1);
            this.pvpNeutralElementReduction.serializeAs_CharacterBaseCharacteristic(param1);
            this.pvpEarthElementReduction.serializeAs_CharacterBaseCharacteristic(param1);
            this.pvpWaterElementReduction.serializeAs_CharacterBaseCharacteristic(param1);
            this.pvpAirElementReduction.serializeAs_CharacterBaseCharacteristic(param1);
            this.pvpFireElementReduction.serializeAs_CharacterBaseCharacteristic(param1);
            param1.writeShort(this.spellModifications.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.spellModifications.length) {
                (this.spellModifications[_loc2_]).serializeAs_CharacterSpellModification(param1);
                _loc2_++;
            }
            if (this.probationTime < 0) {
                throw new Error('Forbidden value (' + this.probationTime + ') on element probationTime.');
            }
            param1.writeInt(this.probationTime);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_CharacterCharacteristicsInformations(param1);
        }

        public deserializeAs_CharacterCharacteristicsInformations(param1: ICustomDataInput): void {
            var _loc4_: CharacterSpellModification = null;
            this.experience = param1.readVarUhLong();
            if (this.experience < 0 || this.experience > 9.007199254740992E15) {
                throw new Error('Forbidden value (' + this.experience + ') on element of CharacterCharacteristicsInformations.experience.');
            }
            this.experienceLevelFloor = param1.readVarUhLong();
            if (this.experienceLevelFloor < 0 || this.experienceLevelFloor > 9.007199254740992E15) {
                throw new Error('Forbidden value (' + this.experienceLevelFloor + ') on element of CharacterCharacteristicsInformations.experienceLevelFloor.');
            }
            this.experienceNextLevelFloor = param1.readVarUhLong();
            if (this.experienceNextLevelFloor < 0 || this.experienceNextLevelFloor > 9.007199254740992E15) {
                throw new Error('Forbidden value (' + this.experienceNextLevelFloor + ') on element of CharacterCharacteristicsInformations.experienceNextLevelFloor.');
            }
            this.kamas = param1.readInt();
            if (this.kamas < 0) {
                throw new Error('Forbidden value (' + this.kamas + ') on element of CharacterCharacteristicsInformations.kamas.');
            }
            this.statsPoints = param1.readVarUhShort();
            if (this.statsPoints < 0) {
                throw new Error('Forbidden value (' + this.statsPoints + ') on element of CharacterCharacteristicsInformations.statsPoints.');
            }
            this.additionnalPoints = param1.readVarUhShort();
            if (this.additionnalPoints < 0) {
                throw new Error('Forbidden value (' + this.additionnalPoints + ') on element of CharacterCharacteristicsInformations.additionnalPoints.');
            }
            this.spellsPoints = param1.readVarUhShort();
            if (this.spellsPoints < 0) {
                throw new Error('Forbidden value (' + this.spellsPoints + ') on element of CharacterCharacteristicsInformations.spellsPoints.');
            }
            this.alignmentInfos = new ActorExtendedAlignmentInformations();
            this.alignmentInfos.deserialize(param1);
            this.lifePoints = param1.readVarUhInt();
            if (this.lifePoints < 0) {
                throw new Error('Forbidden value (' + this.lifePoints + ') on element of CharacterCharacteristicsInformations.lifePoints.');
            }
            this.maxLifePoints = param1.readVarUhInt();
            if (this.maxLifePoints < 0) {
                throw new Error('Forbidden value (' + this.maxLifePoints + ') on element of CharacterCharacteristicsInformations.maxLifePoints.');
            }
            this.energyPoints = param1.readVarUhShort();
            if (this.energyPoints < 0) {
                throw new Error('Forbidden value (' + this.energyPoints + ') on element of CharacterCharacteristicsInformations.energyPoints.');
            }
            this.maxEnergyPoints = param1.readVarUhShort();
            if (this.maxEnergyPoints < 0) {
                throw new Error('Forbidden value (' + this.maxEnergyPoints + ') on element of CharacterCharacteristicsInformations.maxEnergyPoints.');
            }
            this.actionPointsCurrent = param1.readVarShort();
            this.movementPointsCurrent = param1.readVarShort();
            this.initiative = new CharacterBaseCharacteristic();
            this.initiative.deserialize(param1);
            this.prospecting = new CharacterBaseCharacteristic();
            this.prospecting.deserialize(param1);
            this.actionPoints = new CharacterBaseCharacteristic();
            this.actionPoints.deserialize(param1);
            this.movementPoints = new CharacterBaseCharacteristic();
            this.movementPoints.deserialize(param1);
            this.strength = new CharacterBaseCharacteristic();
            this.strength.deserialize(param1);
            this.vitality = new CharacterBaseCharacteristic();
            this.vitality.deserialize(param1);
            this.wisdom = new CharacterBaseCharacteristic();
            this.wisdom.deserialize(param1);
            this.chance = new CharacterBaseCharacteristic();
            this.chance.deserialize(param1);
            this.agility = new CharacterBaseCharacteristic();
            this.agility.deserialize(param1);
            this.intelligence = new CharacterBaseCharacteristic();
            this.intelligence.deserialize(param1);
            this.range = new CharacterBaseCharacteristic();
            this.range.deserialize(param1);
            this.summonableCreaturesBoost = new CharacterBaseCharacteristic();
            this.summonableCreaturesBoost.deserialize(param1);
            this.reflect = new CharacterBaseCharacteristic();
            this.reflect.deserialize(param1);
            this.criticalHit = new CharacterBaseCharacteristic();
            this.criticalHit.deserialize(param1);
            this.criticalHitWeapon = param1.readVarUhShort();
            if (this.criticalHitWeapon < 0) {
                throw new Error('Forbidden value (' + this.criticalHitWeapon + ') on element of CharacterCharacteristicsInformations.criticalHitWeapon.');
            }
            this.criticalMiss = new CharacterBaseCharacteristic();
            this.criticalMiss.deserialize(param1);
            this.healBonus = new CharacterBaseCharacteristic();
            this.healBonus.deserialize(param1);
            this.allDamagesBonus = new CharacterBaseCharacteristic();
            this.allDamagesBonus.deserialize(param1);
            this.weaponDamagesBonusPercent = new CharacterBaseCharacteristic();
            this.weaponDamagesBonusPercent.deserialize(param1);
            this.damagesBonusPercent = new CharacterBaseCharacteristic();
            this.damagesBonusPercent.deserialize(param1);
            this.trapBonus = new CharacterBaseCharacteristic();
            this.trapBonus.deserialize(param1);
            this.trapBonusPercent = new CharacterBaseCharacteristic();
            this.trapBonusPercent.deserialize(param1);
            this.glyphBonusPercent = new CharacterBaseCharacteristic();
            this.glyphBonusPercent.deserialize(param1);
            this.permanentDamagePercent = new CharacterBaseCharacteristic();
            this.permanentDamagePercent.deserialize(param1);
            this.tackleBlock = new CharacterBaseCharacteristic();
            this.tackleBlock.deserialize(param1);
            this.tackleEvade = new CharacterBaseCharacteristic();
            this.tackleEvade.deserialize(param1);
            this.PAAttack = new CharacterBaseCharacteristic();
            this.PAAttack.deserialize(param1);
            this.PMAttack = new CharacterBaseCharacteristic();
            this.PMAttack.deserialize(param1);
            this.pushDamageBonus = new CharacterBaseCharacteristic();
            this.pushDamageBonus.deserialize(param1);
            this.criticalDamageBonus = new CharacterBaseCharacteristic();
            this.criticalDamageBonus.deserialize(param1);
            this.neutralDamageBonus = new CharacterBaseCharacteristic();
            this.neutralDamageBonus.deserialize(param1);
            this.earthDamageBonus = new CharacterBaseCharacteristic();
            this.earthDamageBonus.deserialize(param1);
            this.waterDamageBonus = new CharacterBaseCharacteristic();
            this.waterDamageBonus.deserialize(param1);
            this.airDamageBonus = new CharacterBaseCharacteristic();
            this.airDamageBonus.deserialize(param1);
            this.fireDamageBonus = new CharacterBaseCharacteristic();
            this.fireDamageBonus.deserialize(param1);
            this.dodgePALostProbability = new CharacterBaseCharacteristic();
            this.dodgePALostProbability.deserialize(param1);
            this.dodgePMLostProbability = new CharacterBaseCharacteristic();
            this.dodgePMLostProbability.deserialize(param1);
            this.neutralElementResistPercent = new CharacterBaseCharacteristic();
            this.neutralElementResistPercent.deserialize(param1);
            this.earthElementResistPercent = new CharacterBaseCharacteristic();
            this.earthElementResistPercent.deserialize(param1);
            this.waterElementResistPercent = new CharacterBaseCharacteristic();
            this.waterElementResistPercent.deserialize(param1);
            this.airElementResistPercent = new CharacterBaseCharacteristic();
            this.airElementResistPercent.deserialize(param1);
            this.fireElementResistPercent = new CharacterBaseCharacteristic();
            this.fireElementResistPercent.deserialize(param1);
            this.neutralElementReduction = new CharacterBaseCharacteristic();
            this.neutralElementReduction.deserialize(param1);
            this.earthElementReduction = new CharacterBaseCharacteristic();
            this.earthElementReduction.deserialize(param1);
            this.waterElementReduction = new CharacterBaseCharacteristic();
            this.waterElementReduction.deserialize(param1);
            this.airElementReduction = new CharacterBaseCharacteristic();
            this.airElementReduction.deserialize(param1);
            this.fireElementReduction = new CharacterBaseCharacteristic();
            this.fireElementReduction.deserialize(param1);
            this.pushDamageReduction = new CharacterBaseCharacteristic();
            this.pushDamageReduction.deserialize(param1);
            this.criticalDamageReduction = new CharacterBaseCharacteristic();
            this.criticalDamageReduction.deserialize(param1);
            this.pvpNeutralElementResistPercent = new CharacterBaseCharacteristic();
            this.pvpNeutralElementResistPercent.deserialize(param1);
            this.pvpEarthElementResistPercent = new CharacterBaseCharacteristic();
            this.pvpEarthElementResistPercent.deserialize(param1);
            this.pvpWaterElementResistPercent = new CharacterBaseCharacteristic();
            this.pvpWaterElementResistPercent.deserialize(param1);
            this.pvpAirElementResistPercent = new CharacterBaseCharacteristic();
            this.pvpAirElementResistPercent.deserialize(param1);
            this.pvpFireElementResistPercent = new CharacterBaseCharacteristic();
            this.pvpFireElementResistPercent.deserialize(param1);
            this.pvpNeutralElementReduction = new CharacterBaseCharacteristic();
            this.pvpNeutralElementReduction.deserialize(param1);
            this.pvpEarthElementReduction = new CharacterBaseCharacteristic();
            this.pvpEarthElementReduction.deserialize(param1);
            this.pvpWaterElementReduction = new CharacterBaseCharacteristic();
            this.pvpWaterElementReduction.deserialize(param1);
            this.pvpAirElementReduction = new CharacterBaseCharacteristic();
            this.pvpAirElementReduction.deserialize(param1);
            this.pvpFireElementReduction = new CharacterBaseCharacteristic();
            this.pvpFireElementReduction.deserialize(param1);
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = new CharacterSpellModification();
                _loc4_.deserialize(param1);
                this.spellModifications.push(_loc4_);
                _loc3_++;
            }
            this.probationTime = param1.readInt();
            if (this.probationTime < 0) {
                throw new Error('Forbidden value (' + this.probationTime + ') on element of CharacterCharacteristicsInformations.probationTime.');
            }

        }
    }
    export class CharacterSpellModification implements INetworkType {
        public static ID: number = 215;

        modificationType: number;
        spellId: number;
        value: CharacterBaseCharacteristic;

        constructor() {
            this.modificationType = 0;
            this.spellId = 0;
            this.value = new CharacterBaseCharacteristic();
        }

        public getTypeId(): number {
            return CharacterSpellModification.ID;
        }

        public reset(): void {
            this.modificationType = 0;
            this.spellId = 0;
            this.value = new CharacterBaseCharacteristic();
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_CharacterSpellModification(param1);
        }

        public serializeAs_CharacterSpellModification(param1: ICustomDataOutput): void {
            param1.writeByte(this.modificationType);
            if (this.spellId < 0) {
                throw new Error('Forbidden value (' + this.spellId + ') on element spellId.');
            }
            param1.writeVarShort(this.spellId);
            this.value.serializeAs_CharacterBaseCharacteristic(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_CharacterSpellModification(param1);
        }

        public deserializeAs_CharacterSpellModification(param1: ICustomDataInput): void {
            this.modificationType = param1.readByte();
            if (this.modificationType < 0) {
                throw new Error('Forbidden value (' + this.modificationType + ') on element of CharacterSpellModification.modificationType.');
            }
            this.spellId = param1.readVarUhShort();
            if (this.spellId < 0) {
                throw new Error('Forbidden value (' + this.spellId + ') on element of CharacterSpellModification.spellId.');
            }
            this.value = new CharacterBaseCharacteristic();
            this.value.deserialize(param1);

        }
    }
    export class AbstractCharacterToRefurbishInformation extends AbstractCharacterInformation implements INetworkType {
        public static ID: number = 475;

        colors: number[];
        cosmeticId: number;

        constructor() {
            this.colors = [];
            this.cosmeticId = 0;
            super();
        }

        public getTypeId(): number {
            return AbstractCharacterToRefurbishInformation.ID;
        }

        public reset(): void {
            this.colors = [];
            this.cosmeticId = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_AbstractCharacterToRefurbishInformation(param1);
        }

        public serializeAs_AbstractCharacterToRefurbishInformation(param1: ICustomDataOutput): void {
            super.serializeAs_AbstractCharacterInformation(param1);
            param1.writeShort(this.colors.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.colors.length) {
                param1.writeInt(this.colors[_loc2_]);
                _loc2_++;
            }
            if (this.cosmeticId < 0) {
                throw new Error('Forbidden value (' + this.cosmeticId + ') on element cosmeticId.');
            }
            param1.writeVarInt(this.cosmeticId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_AbstractCharacterToRefurbishInformation(param1);
        }

        public deserializeAs_AbstractCharacterToRefurbishInformation(param1: ICustomDataInput): void {
            var _loc4_: any = 0;
            super.deserialize(param1);
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = param1.readInt();
                this.colors.push(_loc4_);
                _loc3_++;
            }
            this.cosmeticId = param1.readVarUhInt();
            if (this.cosmeticId < 0) {
                throw new Error('Forbidden value (' + this.cosmeticId + ') on element of AbstractCharacterToRefurbishInformation.cosmeticId.');
            }

        }
    }
    export class CharacterBaseInformations extends CharacterMinimalPlusLookInformations implements INetworkType {
        public static ID: number = 45;

        breed: number;
        sex: boolean;

        constructor() {
            this.breed = 0;
            this.sex = false;
            super();
        }

        public getTypeId(): number {
            return CharacterBaseInformations.ID;
        }

        public reset(): void {
            this.breed = 0;
            this.sex = false;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_CharacterBaseInformations(param1);
        }

        public serializeAs_CharacterBaseInformations(param1: ICustomDataOutput): void {
            super.serializeAs_CharacterMinimalPlusLookInformations(param1);
            param1.writeByte(this.breed);
            param1.writeBoolean(this.sex);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_CharacterBaseInformations(param1);
        }

        public deserializeAs_CharacterBaseInformations(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.breed = param1.readByte();
            this.sex = param1.readBoolean();

        }
    }
    export class CharacterHardcoreOrEpicInformations extends CharacterBaseInformations implements INetworkType {
        public static ID: number = 474;

        deathState: number;
        deathCount: number;
        deathMaxLevel: number;

        constructor() {
            this.deathState = 0;
            this.deathCount = 0;
            this.deathMaxLevel = 0;
            super();
        }

        public getTypeId(): number {
            return CharacterHardcoreOrEpicInformations.ID;
        }

        public reset(): void {
            this.deathState = 0;
            this.deathCount = 0;
            this.deathMaxLevel = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_CharacterHardcoreOrEpicInformations(param1);
        }

        public serializeAs_CharacterHardcoreOrEpicInformations(param1: ICustomDataOutput): void {
            super.serializeAs_CharacterBaseInformations(param1);
            param1.writeByte(this.deathState);
            if (this.deathCount < 0) {
                throw new Error('Forbidden value (' + this.deathCount + ') on element deathCount.');
            }
            param1.writeVarShort(this.deathCount);
            if (this.deathMaxLevel < 1 || this.deathMaxLevel > 200) {
                throw new Error('Forbidden value (' + this.deathMaxLevel + ') on element deathMaxLevel.');
            }
            param1.writeByte(this.deathMaxLevel);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_CharacterHardcoreOrEpicInformations(param1);
        }

        public deserializeAs_CharacterHardcoreOrEpicInformations(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.deathState = param1.readByte();
            if (this.deathState < 0) {
                throw new Error('Forbidden value (' + this.deathState + ') on element of CharacterHardcoreOrEpicInformations.deathState.');
            }
            this.deathCount = param1.readVarUhShort();
            if (this.deathCount < 0) {
                throw new Error('Forbidden value (' + this.deathCount + ') on element of CharacterHardcoreOrEpicInformations.deathCount.');
            }
            this.deathMaxLevel = param1.readUnsignedByte();
            if (this.deathMaxLevel < 1 || this.deathMaxLevel > 200) {
                throw new Error('Forbidden value (' + this.deathMaxLevel + ') on element of CharacterHardcoreOrEpicInformations.deathMaxLevel.');
            }

        }
    }
    export class CharacterRemodelingInformation extends AbstractCharacterInformation implements INetworkType {
        public static ID: number = 479;

        name: string;
        breed: number;
        sex: boolean;
        cosmeticId: number;
        colors: number[];

        constructor() {
            this.name = '';
            this.breed = 0;
            this.sex = false;
            this.cosmeticId = 0;
            this.colors = [];
            super();
        }

        public getTypeId(): number {
            return CharacterRemodelingInformation.ID;
        }

        public reset(): void {
            this.name = '';
            this.breed = 0;
            this.sex = false;
            this.cosmeticId = 0;
            this.colors = [];
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_CharacterRemodelingInformation(param1);
        }

        public serializeAs_CharacterRemodelingInformation(param1: ICustomDataOutput): void {
            super.serializeAs_AbstractCharacterInformation(param1);
            param1.writeUTF(this.name);
            param1.writeByte(this.breed);
            param1.writeBoolean(this.sex);
            if (this.cosmeticId < 0) {
                throw new Error('Forbidden value (' + this.cosmeticId + ') on element cosmeticId.');
            }
            param1.writeVarShort(this.cosmeticId);
            param1.writeShort(this.colors.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.colors.length) {
                param1.writeInt(this.colors[_loc2_]);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_CharacterRemodelingInformation(param1);
        }

        public deserializeAs_CharacterRemodelingInformation(param1: ICustomDataInput): void {
            var _loc4_: any = 0;
            super.deserialize(param1);
            this.name = param1.readUTF();
            this.breed = param1.readByte();
            this.sex = param1.readBoolean();
            this.cosmeticId = param1.readVarUhShort();
            if (this.cosmeticId < 0) {
                throw new Error('Forbidden value (' + this.cosmeticId + ') on element of CharacterRemodelingInformation.cosmeticId.');
            }
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = param1.readInt();
                this.colors.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class CharacterToRecolorInformation extends AbstractCharacterToRefurbishInformation implements INetworkType {
        public static ID: number = 212;



        constructor() {

            super();
        }

        public getTypeId(): number {
            return CharacterToRecolorInformation.ID;
        }

        public reset(): void {

        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_CharacterToRecolorInformation(param1);
        }

        public serializeAs_CharacterToRecolorInformation(param1: ICustomDataOutput): void {
            super.serializeAs_AbstractCharacterToRefurbishInformation(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_CharacterToRecolorInformation(param1);
        }

        public deserializeAs_CharacterToRecolorInformation(param1: ICustomDataInput): void {
            super.deserialize(param1);

        }
    }
    export class CharacterToRelookInformation extends AbstractCharacterToRefurbishInformation implements INetworkType {
        public static ID: number = 399;



        constructor() {

            super();
        }

        public getTypeId(): number {
            return CharacterToRelookInformation.ID;
        }

        public reset(): void {

        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_CharacterToRelookInformation(param1);
        }

        public serializeAs_CharacterToRelookInformation(param1: ICustomDataOutput): void {
            super.serializeAs_AbstractCharacterToRefurbishInformation(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_CharacterToRelookInformation(param1);
        }

        public deserializeAs_CharacterToRelookInformation(param1: ICustomDataInput): void {
            super.deserialize(param1);

        }
    }
    export class CharacterToRemodelInformations extends CharacterRemodelingInformation implements INetworkType {
        public static ID: number = 477;

        possibleChangeMask: number;
        mandatoryChangeMask: number;

        constructor() {
            this.possibleChangeMask = 0;
            this.mandatoryChangeMask = 0;
            super();
        }

        public getTypeId(): number {
            return CharacterToRemodelInformations.ID;
        }

        public reset(): void {
            this.possibleChangeMask = 0;
            this.mandatoryChangeMask = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_CharacterToRemodelInformations(param1);
        }

        public serializeAs_CharacterToRemodelInformations(param1: ICustomDataOutput): void {
            super.serializeAs_CharacterRemodelingInformation(param1);
            if (this.possibleChangeMask < 0) {
                throw new Error('Forbidden value (' + this.possibleChangeMask + ') on element possibleChangeMask.');
            }
            param1.writeByte(this.possibleChangeMask);
            if (this.mandatoryChangeMask < 0) {
                throw new Error('Forbidden value (' + this.mandatoryChangeMask + ') on element mandatoryChangeMask.');
            }
            param1.writeByte(this.mandatoryChangeMask);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_CharacterToRemodelInformations(param1);
        }

        public deserializeAs_CharacterToRemodelInformations(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.possibleChangeMask = param1.readByte();
            if (this.possibleChangeMask < 0) {
                throw new Error('Forbidden value (' + this.possibleChangeMask + ') on element of CharacterToRemodelInformations.possibleChangeMask.');
            }
            this.mandatoryChangeMask = param1.readByte();
            if (this.mandatoryChangeMask < 0) {
                throw new Error('Forbidden value (' + this.mandatoryChangeMask + ') on element of CharacterToRemodelInformations.mandatoryChangeMask.');
            }

        }
    }
    export class RemodelingInformation implements INetworkType {
        public static ID: number = 480;

        name: string;
        breed: number;
        sex: boolean;
        cosmeticId: number;
        colors: number[];

        constructor() {
            this.name = '';
            this.breed = 0;
            this.sex = false;
            this.cosmeticId = 0;
            this.colors = [];
        }

        public getTypeId(): number {
            return RemodelingInformation.ID;
        }

        public reset(): void {
            this.name = '';
            this.breed = 0;
            this.sex = false;
            this.cosmeticId = 0;
            this.colors = [];
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_RemodelingInformation(param1);
        }

        public serializeAs_RemodelingInformation(param1: ICustomDataOutput): void {
            param1.writeUTF(this.name);
            param1.writeByte(this.breed);
            param1.writeBoolean(this.sex);
            if (this.cosmeticId < 0) {
                throw new Error('Forbidden value (' + this.cosmeticId + ') on element cosmeticId.');
            }
            param1.writeVarShort(this.cosmeticId);
            param1.writeShort(this.colors.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.colors.length) {
                param1.writeInt(this.colors[_loc2_]);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_RemodelingInformation(param1);
        }

        public deserializeAs_RemodelingInformation(param1: ICustomDataInput): void {
            var _loc4_: any = 0;
            this.name = param1.readUTF();
            this.breed = param1.readByte();
            this.sex = param1.readBoolean();
            this.cosmeticId = param1.readVarUhShort();
            if (this.cosmeticId < 0) {
                throw new Error('Forbidden value (' + this.cosmeticId + ') on element of RemodelingInformation.cosmeticId.');
            }
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = param1.readInt();
                this.colors.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class ActorRestrictionsInformations implements INetworkType {
        public static ID: number = 204;

        cantBeAggressed: boolean;
        cantBeChallenged: boolean;
        cantTrade: boolean;
        cantBeAttackedByMutant: boolean;
        cantRun: boolean;
        forceSlowWalk: boolean;
        cantMinimize: boolean;
        cantMove: boolean;
        cantAggress: boolean;
        cantChallenge: boolean;
        cantExchange: boolean;
        cantAttack: boolean;
        cantChat: boolean;
        cantBeMerchant: boolean;
        cantUseObject: boolean;
        cantUseTaxCollector: boolean;
        cantUseInteractive: boolean;
        cantSpeakToNPC: boolean;
        cantChangeZone: boolean;
        cantAttackMonster: boolean;
        cantWalk8Directions: boolean;

        constructor() {
            this.cantBeAggressed = false;
            this.cantBeChallenged = false;
            this.cantTrade = false;
            this.cantBeAttackedByMutant = false;
            this.cantRun = false;
            this.forceSlowWalk = false;
            this.cantMinimize = false;
            this.cantMove = false;
            this.cantAggress = false;
            this.cantChallenge = false;
            this.cantExchange = false;
            this.cantAttack = false;
            this.cantChat = false;
            this.cantBeMerchant = false;
            this.cantUseObject = false;
            this.cantUseTaxCollector = false;
            this.cantUseInteractive = false;
            this.cantSpeakToNPC = false;
            this.cantChangeZone = false;
            this.cantAttackMonster = false;
            this.cantWalk8Directions = false;
        }

        public getTypeId(): number {
            return ActorRestrictionsInformations.ID;
        }

        public reset(): void {
            this.cantBeAggressed = false;
            this.cantBeChallenged = false;
            this.cantTrade = false;
            this.cantBeAttackedByMutant = false;
            this.cantRun = false;
            this.forceSlowWalk = false;
            this.cantMinimize = false;
            this.cantMove = false;
            this.cantAggress = false;
            this.cantChallenge = false;
            this.cantExchange = false;
            this.cantAttack = false;
            this.cantChat = false;
            this.cantBeMerchant = false;
            this.cantUseObject = false;
            this.cantUseTaxCollector = false;
            this.cantUseInteractive = false;
            this.cantSpeakToNPC = false;
            this.cantChangeZone = false;
            this.cantAttackMonster = false;
            this.cantWalk8Directions = false;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ActorRestrictionsInformations(param1);
        }

        public serializeAs_ActorRestrictionsInformations(param1: ICustomDataOutput): void {
            var _loc2_: number = 0;
            _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 0, this.cantBeAggressed);
            _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 1, this.cantBeChallenged);
            _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 2, this.cantTrade);
            _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 3, this.cantBeAttackedByMutant);
            _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 4, this.cantRun);
            _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 5, this.forceSlowWalk);
            _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 6, this.cantMinimize);
            _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 7, this.cantMove);
            param1.writeByte(_loc2_);
            var _loc3_: number = 0;
            _loc3_ = BooleanByteWrapper.setFlag(_loc3_, 0, this.cantAggress);
            _loc3_ = BooleanByteWrapper.setFlag(_loc3_, 1, this.cantChallenge);
            _loc3_ = BooleanByteWrapper.setFlag(_loc3_, 2, this.cantExchange);
            _loc3_ = BooleanByteWrapper.setFlag(_loc3_, 3, this.cantAttack);
            _loc3_ = BooleanByteWrapper.setFlag(_loc3_, 4, this.cantChat);
            _loc3_ = BooleanByteWrapper.setFlag(_loc3_, 5, this.cantBeMerchant);
            _loc3_ = BooleanByteWrapper.setFlag(_loc3_, 6, this.cantUseObject);
            _loc3_ = BooleanByteWrapper.setFlag(_loc3_, 7, this.cantUseTaxCollector);
            param1.writeByte(_loc3_);
            var _loc4_: number = 0;
            _loc4_ = BooleanByteWrapper.setFlag(_loc4_, 0, this.cantUseInteractive);
            _loc4_ = BooleanByteWrapper.setFlag(_loc4_, 1, this.cantSpeakToNPC);
            _loc4_ = BooleanByteWrapper.setFlag(_loc4_, 2, this.cantChangeZone);
            _loc4_ = BooleanByteWrapper.setFlag(_loc4_, 3, this.cantAttackMonster);
            _loc4_ = BooleanByteWrapper.setFlag(_loc4_, 4, this.cantWalk8Directions);
            param1.writeByte(_loc4_);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ActorRestrictionsInformations(param1);
        }

        public deserializeAs_ActorRestrictionsInformations(param1: ICustomDataInput): void {
            var _loc2_: number = param1.readByte();
            this.cantBeAggressed = BooleanByteWrapper.getFlag(_loc2_, 0);
            this.cantBeChallenged = BooleanByteWrapper.getFlag(_loc2_, 1);
            this.cantTrade = BooleanByteWrapper.getFlag(_loc2_, 2);
            this.cantBeAttackedByMutant = BooleanByteWrapper.getFlag(_loc2_, 3);
            this.cantRun = BooleanByteWrapper.getFlag(_loc2_, 4);
            this.forceSlowWalk = BooleanByteWrapper.getFlag(_loc2_, 5);
            this.cantMinimize = BooleanByteWrapper.getFlag(_loc2_, 6);
            this.cantMove = BooleanByteWrapper.getFlag(_loc2_, 7);
            var _loc3_: number = param1.readByte();
            this.cantAggress = BooleanByteWrapper.getFlag(_loc3_, 0);
            this.cantChallenge = BooleanByteWrapper.getFlag(_loc3_, 1);
            this.cantExchange = BooleanByteWrapper.getFlag(_loc3_, 2);
            this.cantAttack = BooleanByteWrapper.getFlag(_loc3_, 3);
            this.cantChat = BooleanByteWrapper.getFlag(_loc3_, 4);
            this.cantBeMerchant = BooleanByteWrapper.getFlag(_loc3_, 5);
            this.cantUseObject = BooleanByteWrapper.getFlag(_loc3_, 6);
            this.cantUseTaxCollector = BooleanByteWrapper.getFlag(_loc3_, 7);
            var _loc4_: number = param1.readByte();
            this.cantUseInteractive = BooleanByteWrapper.getFlag(_loc4_, 0);
            this.cantSpeakToNPC = BooleanByteWrapper.getFlag(_loc4_, 1);
            this.cantChangeZone = BooleanByteWrapper.getFlag(_loc4_, 2);
            this.cantAttackMonster = BooleanByteWrapper.getFlag(_loc4_, 3);
            this.cantWalk8Directions = BooleanByteWrapper.getFlag(_loc4_, 4);

        }
    }
    export class PlayerStatus implements INetworkType {
        public static ID: number = 415;

        statusId: number;

        constructor() {
            this.statusId = 1;
        }

        public getTypeId(): number {
            return PlayerStatus.ID;
        }

        public reset(): void {
            this.statusId = 1;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_PlayerStatus(param1);
        }

        public serializeAs_PlayerStatus(param1: ICustomDataOutput): void {
            param1.writeByte(this.statusId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_PlayerStatus(param1);
        }

        public deserializeAs_PlayerStatus(param1: ICustomDataInput): void {
            this.statusId = param1.readByte();
            if (this.statusId < 0) {
                throw new Error('Forbidden value (' + this.statusId + ') on element of PlayerStatus.statusId.');
            }

        }
    }
    export class PlayerStatusExtended extends PlayerStatus implements INetworkType {
        public static ID: number = 414;

        message: string;

        constructor() {
            this.message = '';
            super();
        }

        public getTypeId(): number {
            return PlayerStatusExtended.ID;
        }

        public reset(): void {
            this.message = '';
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_PlayerStatusExtended(param1);
        }

        public serializeAs_PlayerStatusExtended(param1: ICustomDataOutput): void {
            super.serializeAs_PlayerStatus(param1);
            param1.writeUTF(this.message);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_PlayerStatusExtended(param1);
        }

        public deserializeAs_PlayerStatusExtended(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.message = param1.readUTF();

        }
    }
    export class ActorOrientation implements INetworkType {
        public static ID: number = 353;

        id: number;
        direction: number;

        constructor() {
            this.id = 0;
            this.direction = 1;
        }

        public getTypeId(): number {
            return ActorOrientation.ID;
        }

        public reset(): void {
            this.id = 0;
            this.direction = 1;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ActorOrientation(param1);
        }

        public serializeAs_ActorOrientation(param1: ICustomDataOutput): void {
            param1.writeInt(this.id);
            param1.writeByte(this.direction);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ActorOrientation(param1);
        }

        public deserializeAs_ActorOrientation(param1: ICustomDataInput): void {
            this.id = param1.readInt();
            this.direction = param1.readByte();
            if (this.direction < 0) {
                throw new Error('Forbidden value (' + this.direction + ') on element of ActorOrientation.direction.');
            }

        }
    }
    export class EntityDispositionInformations implements INetworkType {
        public static ID: number = 60;

        cellId: number;
        direction: number;

        constructor() {
            this.cellId = 0;
            this.direction = 1;
        }

        public getTypeId(): number {
            return EntityDispositionInformations.ID;
        }

        public reset(): void {
            this.cellId = 0;
            this.direction = 1;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_EntityDispositionInformations(param1);
        }

        public serializeAs_EntityDispositionInformations(param1: ICustomDataOutput): void {
            if (this.cellId < -1 || this.cellId > 559) {
                throw new Error('Forbidden value (' + this.cellId + ') on element cellId.');
            }
            param1.writeShort(this.cellId);
            param1.writeByte(this.direction);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_EntityDispositionInformations(param1);
        }

        public deserializeAs_EntityDispositionInformations(param1: ICustomDataInput): void {
            this.cellId = param1.readShort();
            if (this.cellId < -1 || this.cellId > 559) {
                throw new Error('Forbidden value (' + this.cellId + ') on element of EntityDispositionInformations.cellId.');
            }
            this.direction = param1.readByte();
            if (this.direction < 0) {
                throw new Error('Forbidden value (' + this.direction + ') on element of EntityDispositionInformations.direction.');
            }

        }
    }
    export class EntityMovementInformations implements INetworkType {
        public static ID: number = 63;

        id: number;
        steps: number[];

        constructor() {
            this.id = 0;
            this.steps = [];
        }

        public getTypeId(): number {
            return EntityMovementInformations.ID;
        }

        public reset(): void {
            this.id = 0;
            this.steps = [];
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_EntityMovementInformations(param1);
        }

        public serializeAs_EntityMovementInformations(param1: ICustomDataOutput): void {
            param1.writeInt(this.id);
            param1.writeShort(this.steps.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.steps.length) {
                param1.writeByte(this.steps[_loc2_]);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_EntityMovementInformations(param1);
        }

        public deserializeAs_EntityMovementInformations(param1: ICustomDataInput): void {
            var _loc4_: any = 0;
            this.id = param1.readInt();
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = param1.readByte();
                this.steps.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class FightEntityDispositionInformations extends EntityDispositionInformations implements INetworkType {
        public static ID: number = 217;

        carryingCharacterId: number;

        constructor() {
            this.carryingCharacterId = 0;
            super();
        }

        public getTypeId(): number {
            return FightEntityDispositionInformations.ID;
        }

        public reset(): void {
            this.carryingCharacterId = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_FightEntityDispositionInformations(param1);
        }

        public serializeAs_FightEntityDispositionInformations(param1: ICustomDataOutput): void {
            super.serializeAs_EntityDispositionInformations(param1);
            param1.writeInt(this.carryingCharacterId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_FightEntityDispositionInformations(param1);
        }

        public deserializeAs_FightEntityDispositionInformations(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.carryingCharacterId = param1.readInt();

        }
    }
    export class GameContextActorInformations implements INetworkType {
        public static ID: number = 150;

        contextualId: number;
        look: EntityLook;
        disposition: EntityDispositionInformations;

        constructor() {
            this.contextualId = 0;
            this.look = new EntityLook();
            this.disposition = new EntityDispositionInformations();
        }

        public getTypeId(): number {
            return GameContextActorInformations.ID;
        }

        public reset(): void {
            this.contextualId = 0;
            this.look = new EntityLook();
            this.disposition = new EntityDispositionInformations();
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameContextActorInformations(param1);
        }

        public serializeAs_GameContextActorInformations(param1: ICustomDataOutput): void {
            param1.writeInt(this.contextualId);
            this.look.serializeAs_EntityLook(param1);
            param1.writeShort(this.disposition.getTypeId());
            this.disposition.serialize(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameContextActorInformations(param1);
        }

        public deserializeAs_GameContextActorInformations(param1: ICustomDataInput): void {
            this.contextualId = param1.readInt();
            this.look = new EntityLook();
            this.look.deserialize(param1);
            var _loc2_: number = param1.readUnsignedShort();
            this.disposition = <EntityDispositionInformations>ProtocolTypeManager.getInstance(EntityDispositionInformations, _loc2_);
            this.disposition.deserialize(param1);

        }
    }
    export class GameRolePlayActorInformations extends GameContextActorInformations implements INetworkType {
        public static ID: number = 141;



        constructor() {

            super();
        }

        public getTypeId(): number {
            return GameRolePlayActorInformations.ID;
        }

        public reset(): void {

        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameRolePlayActorInformations(param1);
        }

        public serializeAs_GameRolePlayActorInformations(param1: ICustomDataOutput): void {
            super.serializeAs_GameContextActorInformations(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameRolePlayActorInformations(param1);
        }

        public deserializeAs_GameRolePlayActorInformations(param1: ICustomDataInput): void {
            super.deserialize(param1);

        }
    }
    export class GameRolePlayTaxCollectorInformations extends GameRolePlayActorInformations implements INetworkType {
        public static ID: number = 148;

        identification: TaxCollectorStaticInformations;
        guildLevel: number;
        taxCollectorAttack: number;

        constructor() {
            this.identification = new TaxCollectorStaticInformations();
            this.guildLevel = 0;
            this.taxCollectorAttack = 0;
            super();
        }

        public getTypeId(): number {
            return GameRolePlayTaxCollectorInformations.ID;
        }

        public reset(): void {
            this.identification = new TaxCollectorStaticInformations();
            this.guildLevel = 0;
            this.taxCollectorAttack = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameRolePlayTaxCollectorInformations(param1);
        }

        public serializeAs_GameRolePlayTaxCollectorInformations(param1: ICustomDataOutput): void {
            super.serializeAs_GameRolePlayActorInformations(param1);
            param1.writeShort(this.identification.getTypeId());
            this.identification.serialize(param1);
            if (this.guildLevel < 0 || this.guildLevel > 255) {
                throw new Error('Forbidden value (' + this.guildLevel + ') on element guildLevel.');
            }
            param1.writeByte(this.guildLevel);
            param1.writeInt(this.taxCollectorAttack);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameRolePlayTaxCollectorInformations(param1);
        }

        public deserializeAs_GameRolePlayTaxCollectorInformations(param1: ICustomDataInput): void {
            super.deserialize(param1);
            var _loc2_: number = param1.readUnsignedShort();
            this.identification = <TaxCollectorStaticInformations>ProtocolTypeManager.getInstance(TaxCollectorStaticInformations, _loc2_);
            this.identification.deserialize(param1);
            this.guildLevel = param1.readUnsignedByte();
            if (this.guildLevel < 0 || this.guildLevel > 255) {
                throw new Error('Forbidden value (' + this.guildLevel + ') on element of GameRolePlayTaxCollectorInformations.guildLevel.');
            }
            this.taxCollectorAttack = param1.readInt();

        }
    }
    export class IdentifiedEntityDispositionInformations extends EntityDispositionInformations implements INetworkType {
        public static ID: number = 107;

        id: number;

        constructor() {
            this.id = 0;
            super();
        }

        public getTypeId(): number {
            return IdentifiedEntityDispositionInformations.ID;
        }

        public reset(): void {
            this.id = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_IdentifiedEntityDispositionInformations(param1);
        }

        public serializeAs_IdentifiedEntityDispositionInformations(param1: ICustomDataOutput): void {
            super.serializeAs_EntityDispositionInformations(param1);
            param1.writeInt(this.id);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_IdentifiedEntityDispositionInformations(param1);
        }

        public deserializeAs_IdentifiedEntityDispositionInformations(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.id = param1.readInt();

        }
    }
    export class MapCoordinates implements INetworkType {
        public static ID: number = 174;

        worldX: number;
        worldY: number;

        constructor() {
            this.worldX = 0;
            this.worldY = 0;
        }

        public getTypeId(): number {
            return MapCoordinates.ID;
        }

        public reset(): void {
            this.worldX = 0;
            this.worldY = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_MapCoordinates(param1);
        }

        public serializeAs_MapCoordinates(param1: ICustomDataOutput): void {
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error('Forbidden value (' + this.worldX + ') on element worldX.');
            }
            param1.writeShort(this.worldX);
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error('Forbidden value (' + this.worldY + ') on element worldY.');
            }
            param1.writeShort(this.worldY);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_MapCoordinates(param1);
        }

        public deserializeAs_MapCoordinates(param1: ICustomDataInput): void {
            this.worldX = param1.readShort();
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error('Forbidden value (' + this.worldX + ') on element of MapCoordinates.worldX.');
            }
            this.worldY = param1.readShort();
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error('Forbidden value (' + this.worldY + ') on element of MapCoordinates.worldY.');
            }

        }
    }
    export class MapCoordinatesAndId extends MapCoordinates implements INetworkType {
        public static ID: number = 392;

        mapId: number;

        constructor() {
            this.mapId = 0;
            super();
        }

        public getTypeId(): number {
            return MapCoordinatesAndId.ID;
        }

        public reset(): void {
            this.mapId = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_MapCoordinatesAndId(param1);
        }

        public serializeAs_MapCoordinatesAndId(param1: ICustomDataOutput): void {
            super.serializeAs_MapCoordinates(param1);
            param1.writeInt(this.mapId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_MapCoordinatesAndId(param1);
        }

        public deserializeAs_MapCoordinatesAndId(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.mapId = param1.readInt();

        }
    }
    export class MapCoordinatesExtended extends MapCoordinatesAndId implements INetworkType {
        public static ID: number = 176;

        subAreaId: number;

        constructor() {
            this.subAreaId = 0;
            super();
        }

        public getTypeId(): number {
            return MapCoordinatesExtended.ID;
        }

        public reset(): void {
            this.subAreaId = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_MapCoordinatesExtended(param1);
        }

        public serializeAs_MapCoordinatesExtended(param1: ICustomDataOutput): void {
            super.serializeAs_MapCoordinatesAndId(param1);
            if (this.subAreaId < 0) {
                throw new Error('Forbidden value (' + this.subAreaId + ') on element subAreaId.');
            }
            param1.writeVarShort(this.subAreaId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_MapCoordinatesExtended(param1);
        }

        public deserializeAs_MapCoordinatesExtended(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.subAreaId = param1.readVarUhShort();
            if (this.subAreaId < 0) {
                throw new Error('Forbidden value (' + this.subAreaId + ') on element of MapCoordinatesExtended.subAreaId.');
            }

        }
    }
    export class TaxCollectorStaticInformations implements INetworkType {
        public static ID: number = 147;

        firstNameId: number;
        lastNameId: number;
        guildIdentity: GuildInformations;

        constructor() {
            this.firstNameId = 0;
            this.lastNameId = 0;
            this.guildIdentity = new GuildInformations();
        }

        public getTypeId(): number {
            return TaxCollectorStaticInformations.ID;
        }

        public reset(): void {
            this.firstNameId = 0;
            this.lastNameId = 0;
            this.guildIdentity = new GuildInformations();
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_TaxCollectorStaticInformations(param1);
        }

        public serializeAs_TaxCollectorStaticInformations(param1: ICustomDataOutput): void {
            if (this.firstNameId < 0) {
                throw new Error('Forbidden value (' + this.firstNameId + ') on element firstNameId.');
            }
            param1.writeVarShort(this.firstNameId);
            if (this.lastNameId < 0) {
                throw new Error('Forbidden value (' + this.lastNameId + ') on element lastNameId.');
            }
            param1.writeVarShort(this.lastNameId);
            this.guildIdentity.serializeAs_GuildInformations(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_TaxCollectorStaticInformations(param1);
        }

        public deserializeAs_TaxCollectorStaticInformations(param1: ICustomDataInput): void {
            this.firstNameId = param1.readVarUhShort();
            if (this.firstNameId < 0) {
                throw new Error('Forbidden value (' + this.firstNameId + ') on element of TaxCollectorStaticInformations.firstNameId.');
            }
            this.lastNameId = param1.readVarUhShort();
            if (this.lastNameId < 0) {
                throw new Error('Forbidden value (' + this.lastNameId + ') on element of TaxCollectorStaticInformations.lastNameId.');
            }
            this.guildIdentity = new GuildInformations();
            this.guildIdentity.deserialize(param1);

        }
    }
    export class TaxCollectorStaticExtendedInformations extends TaxCollectorStaticInformations implements INetworkType {
        public static ID: number = 440;

        allianceIdentity: AllianceInformations;

        constructor() {
            this.allianceIdentity = new AllianceInformations();
            super();
        }

        public getTypeId(): number {
            return TaxCollectorStaticExtendedInformations.ID;
        }

        public reset(): void {
            this.allianceIdentity = new AllianceInformations();
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_TaxCollectorStaticExtendedInformations(param1);
        }

        public serializeAs_TaxCollectorStaticExtendedInformations(param1: ICustomDataOutput): void {
            super.serializeAs_TaxCollectorStaticInformations(param1);
            this.allianceIdentity.serializeAs_AllianceInformations(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_TaxCollectorStaticExtendedInformations(param1);
        }

        public deserializeAs_TaxCollectorStaticExtendedInformations(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.allianceIdentity = new AllianceInformations();
            this.allianceIdentity.deserialize(param1);

        }
    }
    export class AbstractFightTeamInformations implements INetworkType {
        public static ID: number = 116;

        teamId: number;
        leaderId: number;
        teamSide: number;
        teamTypeId: number;
        nbWaves: number;

        constructor() {
            this.teamId = 2;
            this.leaderId = 0;
            this.teamSide = 0;
            this.teamTypeId = 0;
            this.nbWaves = 0;
        }

        public getTypeId(): number {
            return AbstractFightTeamInformations.ID;
        }

        public reset(): void {
            this.teamId = 2;
            this.leaderId = 0;
            this.teamSide = 0;
            this.teamTypeId = 0;
            this.nbWaves = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_AbstractFightTeamInformations(param1);
        }

        public serializeAs_AbstractFightTeamInformations(param1: ICustomDataOutput): void {
            param1.writeByte(this.teamId);
            param1.writeInt(this.leaderId);
            param1.writeByte(this.teamSide);
            param1.writeByte(this.teamTypeId);
            if (this.nbWaves < 0) {
                throw new Error('Forbidden value (' + this.nbWaves + ') on element nbWaves.');
            }
            param1.writeByte(this.nbWaves);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_AbstractFightTeamInformations(param1);
        }

        public deserializeAs_AbstractFightTeamInformations(param1: ICustomDataInput): void {
            this.teamId = param1.readByte();
            if (this.teamId < 0) {
                throw new Error('Forbidden value (' + this.teamId + ') on element of AbstractFightTeamInformations.teamId.');
            }
            this.leaderId = param1.readInt();
            this.teamSide = param1.readByte();
            this.teamTypeId = param1.readByte();
            if (this.teamTypeId < 0) {
                throw new Error('Forbidden value (' + this.teamTypeId + ') on element of AbstractFightTeamInformations.teamTypeId.');
            }
            this.nbWaves = param1.readByte();
            if (this.nbWaves < 0) {
                throw new Error('Forbidden value (' + this.nbWaves + ') on element of AbstractFightTeamInformations.nbWaves.');
            }

        }
    }
    export class FightTeamInformations extends AbstractFightTeamInformations implements INetworkType {
        public static ID: number = 33;

        teamMembers: FightTeamMemberInformations[];

        constructor() {
            this.teamMembers = [];
            super();
        }

        public getTypeId(): number {
            return FightTeamInformations.ID;
        }

        public reset(): void {
            this.teamMembers = [];
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_FightTeamInformations(param1);
        }

        public serializeAs_FightTeamInformations(param1: ICustomDataOutput): void {
            super.serializeAs_AbstractFightTeamInformations(param1);
            param1.writeShort(this.teamMembers.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.teamMembers.length) {
                param1.writeShort((this.teamMembers[_loc2_]).getTypeId());
                (this.teamMembers[_loc2_]).serialize(param1);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_FightTeamInformations(param1);
        }

        public deserializeAs_FightTeamInformations(param1: ICustomDataInput): void {
            var _loc4_: number = 0;
            var _loc5_: FightTeamMemberInformations = null;
            super.deserialize(param1);
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = param1.readUnsignedShort();
                _loc5_ = <FightTeamMemberInformations>ProtocolTypeManager.getInstance(FightTeamMemberInformations, _loc4_);
                _loc5_.deserialize(param1);
                this.teamMembers.push(_loc5_);
                _loc3_++;
            }

        }
    }
    export class FightAllianceTeamInformations extends FightTeamInformations implements INetworkType {
        public static ID: number = 439;

        relation: number;

        constructor() {
            this.relation = 0;
            super();
        }

        public getTypeId(): number {
            return FightAllianceTeamInformations.ID;
        }

        public reset(): void {
            this.relation = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_FightAllianceTeamInformations(param1);
        }

        public serializeAs_FightAllianceTeamInformations(param1: ICustomDataOutput): void {
            super.serializeAs_FightTeamInformations(param1);
            param1.writeByte(this.relation);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_FightAllianceTeamInformations(param1);
        }

        public deserializeAs_FightAllianceTeamInformations(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.relation = param1.readByte();
            if (this.relation < 0) {
                throw new Error('Forbidden value (' + this.relation + ') on element of FightAllianceTeamInformations.relation.');
            }

        }
    }
    export class FightCommonInformations implements INetworkType {
        public static ID: number = 43;

        fightId: number;
        fightType: number;
        fightTeams: FightTeamInformations[];
        fightTeamsPositions: number[];
        fightTeamsOptions: FightOptionsInformations[];

        constructor() {
            this.fightId = 0;
            this.fightType = 0;
            this.fightTeams = [];
            this.fightTeamsPositions = [];
            this.fightTeamsOptions = [];
        }

        public getTypeId(): number {
            return FightCommonInformations.ID;
        }

        public reset(): void {
            this.fightId = 0;
            this.fightType = 0;
            this.fightTeams = [];
            this.fightTeamsPositions = [];
            this.fightTeamsOptions = [];
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_FightCommonInformations(param1);
        }

        public serializeAs_FightCommonInformations(param1: ICustomDataOutput): void {
            param1.writeInt(this.fightId);
            param1.writeByte(this.fightType);
            param1.writeShort(this.fightTeams.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.fightTeams.length) {
                param1.writeShort((this.fightTeams[_loc2_]).getTypeId());
                (this.fightTeams[_loc2_]).serialize(param1);
                _loc2_++;
            }
            param1.writeShort(this.fightTeamsPositions.length);
            var _loc3_: number = 0;
            while (_loc3_ < this.fightTeamsPositions.length) {
                if (this.fightTeamsPositions[_loc3_] < 0 || this.fightTeamsPositions[_loc3_] > 559) {
                    throw new Error('Forbidden value (' + this.fightTeamsPositions[_loc3_] + ') on element 4 (starting at 1) of fightTeamsPositions.');
                }
                param1.writeVarShort(this.fightTeamsPositions[_loc3_]);
                _loc3_++;
            }
            param1.writeShort(this.fightTeamsOptions.length);
            var _loc4_: number = 0;
            while (_loc4_ < this.fightTeamsOptions.length) {
                (this.fightTeamsOptions[_loc4_]).serializeAs_FightOptionsInformations(param1);
                _loc4_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_FightCommonInformations(param1);
        }

        public deserializeAs_FightCommonInformations(param1: ICustomDataInput): void {
            var _loc8_: number = 0;
            var _loc9_: FightTeamInformations = null;
            var _loc10_: number = 0;
            var _loc11_: FightOptionsInformations = null;
            this.fightId = param1.readInt();
            this.fightType = param1.readByte();
            if (this.fightType < 0) {
                throw new Error('Forbidden value (' + this.fightType + ') on element of FightCommonInformations.fightType.');
            }
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc8_ = param1.readUnsignedShort();
                _loc9_ = <FightTeamInformations>ProtocolTypeManager.getInstance(FightTeamInformations, _loc8_);
                _loc9_.deserialize(param1);
                this.fightTeams.push(_loc9_);
                _loc3_++;
            }
            var _loc4_: number = param1.readUnsignedShort();
            var _loc5_: number = 0;
            while (_loc5_ < _loc4_) {
            _loc10_ = param1.readVarUhShort();
                if (_loc10_ < 0 || _loc10_ > 559) {
                    throw new Error('Forbidden value (' + _loc10_ + ') on elements of fightTeamsPositions.');
                }
                this.fightTeamsPositions.push(_loc10_);
                _loc5_++;
            }
            var _loc6_: number = param1.readUnsignedShort();
            var _loc7_: number = 0;
            while (_loc7_ < _loc6_) {
            _loc11_ = new FightOptionsInformations();
                _loc11_.deserialize(param1);
                this.fightTeamsOptions.push(_loc11_);
                _loc7_++;
            }

        }
    }
    export class FightExternalInformations implements INetworkType {
        public static ID: number = 117;

        fightId: number;
        fightType: number;
        fightStart: number;
        fightSpectatorLocked: boolean;
        fightTeams: FightTeamLightInformations[];
        fightTeamsOptions: FightOptionsInformations[];

        constructor() {
            this.fightId = 0;
            this.fightType = 0;
            this.fightStart = 0;
            this.fightSpectatorLocked = false;
            this.fightTeams = [];
            this.fightTeamsOptions = [];
        }

        public getTypeId(): number {
            return FightExternalInformations.ID;
        }

        public reset(): void {
            this.fightId = 0;
            this.fightType = 0;
            this.fightStart = 0;
            this.fightSpectatorLocked = false;
            this.fightTeams = [];
            this.fightTeamsOptions = [];
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_FightExternalInformations(param1);
        }

        public serializeAs_FightExternalInformations(param1: ICustomDataOutput): void {
            param1.writeInt(this.fightId);
            param1.writeByte(this.fightType);
            if (this.fightStart < 0) {
                throw new Error('Forbidden value (' + this.fightStart + ') on element fightStart.');
            }
            param1.writeInt(this.fightStart);
            param1.writeBoolean(this.fightSpectatorLocked);
            var _loc2_: number = 0;
            while (_loc2_ < 2) {
            this.fightTeams[_loc2_].serializeAs_FightTeamLightInformations(param1);
                _loc2_++;
            }
            var _loc3_: number = 0;
            while (_loc3_ < 2) {
            this.fightTeamsOptions[_loc3_].serializeAs_FightOptionsInformations(param1);
                _loc3_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_FightExternalInformations(param1);
        }

        public deserializeAs_FightExternalInformations(param1: ICustomDataInput): void {
            this.fightId = param1.readInt();
            this.fightType = param1.readByte();
            if (this.fightType < 0) {
                throw new Error('Forbidden value (' + this.fightType + ') on element of FightExternalInformations.fightType.');
            }
            this.fightStart = param1.readInt();
            if (this.fightStart < 0) {
                throw new Error('Forbidden value (' + this.fightStart + ') on element of FightExternalInformations.fightStart.');
            }
            this.fightSpectatorLocked = param1.readBoolean();
            var _loc2_: number = 0;
            while (_loc2_ < 2) {
            this.fightTeams[_loc2_] = new FightTeamLightInformations();
                this.fightTeams[_loc2_].deserialize(param1);
                _loc2_++;
            }
            var _loc3_: number = 0;
            while (_loc3_ < 2) {
            this.fightTeamsOptions[_loc3_] = new FightOptionsInformations();
                this.fightTeamsOptions[_loc3_].deserialize(param1);
                _loc3_++;
            }

        }
    }
    export class FightLoot implements INetworkType {
        public static ID: number = 41;

        objects: number[];
        kamas: number;

        constructor() {
            this.objects = [];
            this.kamas = 0;
        }

        public getTypeId(): number {
            return FightLoot.ID;
        }

        public reset(): void {
            this.objects = [];
            this.kamas = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_FightLoot(param1);
        }

        public serializeAs_FightLoot(param1: ICustomDataOutput): void {
            param1.writeShort(this.objects.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.objects.length) {
                if (this.objects[_loc2_] < 0) {
                    throw new Error('Forbidden value (' + this.objects[_loc2_] + ') on element 1 (starting at 1) of objects.');
                }
                param1.writeVarShort(this.objects[_loc2_]);
                _loc2_++;
            }
            if (this.kamas < 0) {
                throw new Error('Forbidden value (' + this.kamas + ') on element kamas.');
            }
            param1.writeVarInt(this.kamas);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_FightLoot(param1);
        }

        public deserializeAs_FightLoot(param1: ICustomDataInput): void {
            var _loc4_: number = 0;
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = param1.readVarUhShort();
                if (_loc4_ < 0) {
                    throw new Error('Forbidden value (' + _loc4_ + ') on elements of objects.');
                }
                this.objects.push(_loc4_);
                _loc3_++;
            }
            this.kamas = param1.readVarUhInt();
            if (this.kamas < 0) {
                throw new Error('Forbidden value (' + this.kamas + ') on element of FightLoot.kamas.');
            }

        }
    }
    export class FightOptionsInformations implements INetworkType {
        public static ID: number = 20;

        isSecret: boolean;
        isRestrictedToPartyOnly: boolean;
        isClosed: boolean;
        isAskingForHelp: boolean;

        constructor() {
            this.isSecret = false;
            this.isRestrictedToPartyOnly = false;
            this.isClosed = false;
            this.isAskingForHelp = false;
        }

        public getTypeId(): number {
            return FightOptionsInformations.ID;
        }

        public reset(): void {
            this.isSecret = false;
            this.isRestrictedToPartyOnly = false;
            this.isClosed = false;
            this.isAskingForHelp = false;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_FightOptionsInformations(param1);
        }

        public serializeAs_FightOptionsInformations(param1: ICustomDataOutput): void {
            var _loc2_: number = 0;
            _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 0, this.isSecret);
            _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 1, this.isRestrictedToPartyOnly);
            _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 2, this.isClosed);
            _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 3, this.isAskingForHelp);
            param1.writeByte(_loc2_);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_FightOptionsInformations(param1);
        }

        public deserializeAs_FightOptionsInformations(param1: ICustomDataInput): void {
            var _loc2_: number = param1.readByte();
            this.isSecret = BooleanByteWrapper.getFlag(_loc2_, 0);
            this.isRestrictedToPartyOnly = BooleanByteWrapper.getFlag(_loc2_, 1);
            this.isClosed = BooleanByteWrapper.getFlag(_loc2_, 2);
            this.isAskingForHelp = BooleanByteWrapper.getFlag(_loc2_, 3);

        }
    }
    export class FightResultAdditionalData implements INetworkType {
        public static ID: number = 191;



        constructor() {

        }

        public getTypeId(): number {
            return FightResultAdditionalData.ID;
        }

        public reset(): void {

        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_FightResultAdditionalData(param1);
        }

        public serializeAs_FightResultAdditionalData(param1: ICustomDataOutput): void {

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_FightResultAdditionalData(param1);
        }

        public deserializeAs_FightResultAdditionalData(param1: ICustomDataInput): void {

        }
    }
    export class FightResultExperienceData extends FightResultAdditionalData implements INetworkType {
        public static ID: number = 192;

        experience: number;
        showExperience: boolean;
        experienceLevelFloor: number;
        showExperienceLevelFloor: boolean;
        experienceNextLevelFloor: number;
        showExperienceNextLevelFloor: boolean;
        experienceFightDelta: number;
        showExperienceFightDelta: boolean;
        experienceForGuild: number;
        showExperienceForGuild: boolean;
        experienceForMount: number;
        showExperienceForMount: boolean;
        isIncarnationExperience: boolean;
        rerollExperienceMul: number;

        constructor() {
            this.experience = 0;
            this.showExperience = false;
            this.experienceLevelFloor = 0;
            this.showExperienceLevelFloor = false;
            this.experienceNextLevelFloor = 0;
            this.showExperienceNextLevelFloor = false;
            this.experienceFightDelta = 0;
            this.showExperienceFightDelta = false;
            this.experienceForGuild = 0;
            this.showExperienceForGuild = false;
            this.experienceForMount = 0;
            this.showExperienceForMount = false;
            this.isIncarnationExperience = false;
            this.rerollExperienceMul = 0;
            super();
        }

        public getTypeId(): number {
            return FightResultExperienceData.ID;
        }

        public reset(): void {
            this.experience = 0;
            this.showExperience = false;
            this.experienceLevelFloor = 0;
            this.showExperienceLevelFloor = false;
            this.experienceNextLevelFloor = 0;
            this.showExperienceNextLevelFloor = false;
            this.experienceFightDelta = 0;
            this.showExperienceFightDelta = false;
            this.experienceForGuild = 0;
            this.showExperienceForGuild = false;
            this.experienceForMount = 0;
            this.showExperienceForMount = false;
            this.isIncarnationExperience = false;
            this.rerollExperienceMul = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_FightResultExperienceData(param1);
        }

        public serializeAs_FightResultExperienceData(param1: ICustomDataOutput): void {
            super.serializeAs_FightResultAdditionalData(param1);
            var _loc2_: number = 0;
            _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 0, this.showExperience);
            _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 1, this.showExperienceLevelFloor);
            _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 2, this.showExperienceNextLevelFloor);
            _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 3, this.showExperienceFightDelta);
            _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 4, this.showExperienceForGuild);
            _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 5, this.showExperienceForMount);
            _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 6, this.isIncarnationExperience);
            param1.writeByte(_loc2_);
            if (this.experience < 0 || this.experience > 9.007199254740992E15) {
                throw new Error('Forbidden value (' + this.experience + ') on element experience.');
            }
            param1.writeVarLong(this.experience);
            if (this.experienceLevelFloor < 0 || this.experienceLevelFloor > 9.007199254740992E15) {
                throw new Error('Forbidden value (' + this.experienceLevelFloor + ') on element experienceLevelFloor.');
            }
            param1.writeVarLong(this.experienceLevelFloor);
            if (this.experienceNextLevelFloor < 0 || this.experienceNextLevelFloor > 9.007199254740992E15) {
                throw new Error('Forbidden value (' + this.experienceNextLevelFloor + ') on element experienceNextLevelFloor.');
            }
            param1.writeDouble(this.experienceNextLevelFloor);
            param1.writeVarInt(this.experienceFightDelta);
            if (this.experienceForGuild < 0) {
                throw new Error('Forbidden value (' + this.experienceForGuild + ') on element experienceForGuild.');
            }
            param1.writeVarInt(this.experienceForGuild);
            if (this.experienceForMount < 0) {
                throw new Error('Forbidden value (' + this.experienceForMount + ') on element experienceForMount.');
            }
            param1.writeVarInt(this.experienceForMount);
            if (this.rerollExperienceMul < 0) {
                throw new Error('Forbidden value (' + this.rerollExperienceMul + ') on element rerollExperienceMul.');
            }
            param1.writeByte(this.rerollExperienceMul);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_FightResultExperienceData(param1);
        }

        public deserializeAs_FightResultExperienceData(param1: ICustomDataInput): void {
            super.deserialize(param1);
            var _loc2_: number = param1.readByte();
            this.showExperience = BooleanByteWrapper.getFlag(_loc2_, 0);
            this.showExperienceLevelFloor = BooleanByteWrapper.getFlag(_loc2_, 1);
            this.showExperienceNextLevelFloor = BooleanByteWrapper.getFlag(_loc2_, 2);
            this.showExperienceFightDelta = BooleanByteWrapper.getFlag(_loc2_, 3);
            this.showExperienceForGuild = BooleanByteWrapper.getFlag(_loc2_, 4);
            this.showExperienceForMount = BooleanByteWrapper.getFlag(_loc2_, 5);
            this.isIncarnationExperience = BooleanByteWrapper.getFlag(_loc2_, 6);
            this.experience = param1.readVarUhLong();
            if (this.experience < 0 || this.experience > 9.007199254740992E15) {
                throw new Error('Forbidden value (' + this.experience + ') on element of FightResultExperienceData.experience.');
            }
            this.experienceLevelFloor = param1.readVarUhLong();
            if (this.experienceLevelFloor < 0 || this.experienceLevelFloor > 9.007199254740992E15) {
                throw new Error('Forbidden value (' + this.experienceLevelFloor + ') on element of FightResultExperienceData.experienceLevelFloor.');
            }
            this.experienceNextLevelFloor = param1.readDouble();
            if (this.experienceNextLevelFloor < 0 || this.experienceNextLevelFloor > 9.007199254740992E15) {
                throw new Error('Forbidden value (' + this.experienceNextLevelFloor + ') on element of FightResultExperienceData.experienceNextLevelFloor.');
            }
            this.experienceFightDelta = param1.readVarInt();
            this.experienceForGuild = param1.readVarUhInt();
            if (this.experienceForGuild < 0) {
                throw new Error('Forbidden value (' + this.experienceForGuild + ') on element of FightResultExperienceData.experienceForGuild.');
            }
            this.experienceForMount = param1.readVarUhInt();
            if (this.experienceForMount < 0) {
                throw new Error('Forbidden value (' + this.experienceForMount + ') on element of FightResultExperienceData.experienceForMount.');
            }
            this.rerollExperienceMul = param1.readByte();
            if (this.rerollExperienceMul < 0) {
                throw new Error('Forbidden value (' + this.rerollExperienceMul + ') on element of FightResultExperienceData.rerollExperienceMul.');
            }

        }
    }
    export class FightResultListEntry implements INetworkType {
        public static ID: number = 16;

        outcome: number;
        wave: number;
        rewards: FightLoot;

        constructor() {
            this.outcome = 0;
            this.wave = 0;
            this.rewards = new FightLoot();
        }

        public getTypeId(): number {
            return FightResultListEntry.ID;
        }

        public reset(): void {
            this.outcome = 0;
            this.wave = 0;
            this.rewards = new FightLoot();
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_FightResultListEntry(param1);
        }

        public serializeAs_FightResultListEntry(param1: ICustomDataOutput): void {
            param1.writeVarShort(this.outcome);
            if (this.wave < 0) {
                throw new Error('Forbidden value (' + this.wave + ') on element wave.');
            }
            param1.writeByte(this.wave);
            this.rewards.serializeAs_FightLoot(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_FightResultListEntry(param1);
        }

        public deserializeAs_FightResultListEntry(param1: ICustomDataInput): void {
            this.outcome = param1.readVarUhShort();
            if (this.outcome < 0) {
                throw new Error('Forbidden value (' + this.outcome + ') on element of FightResultListEntry.outcome.');
            }
            this.wave = param1.readByte();
            if (this.wave < 0) {
                throw new Error('Forbidden value (' + this.wave + ') on element of FightResultListEntry.wave.');
            }
            this.rewards = new FightLoot();
            this.rewards.deserialize(param1);

        }
    }
    export class FightResultFighterListEntry extends FightResultListEntry implements INetworkType {
        public static ID: number = 189;

        id: number;
        alive: boolean;

        constructor() {
            this.id = 0;
            this.alive = false;
            super();
        }

        public getTypeId(): number {
            return FightResultFighterListEntry.ID;
        }

        public reset(): void {
            this.id = 0;
            this.alive = false;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_FightResultFighterListEntry(param1);
        }

        public serializeAs_FightResultFighterListEntry(param1: ICustomDataOutput): void {
            super.serializeAs_FightResultListEntry(param1);
            param1.writeInt(this.id);
            param1.writeBoolean(this.alive);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_FightResultFighterListEntry(param1);
        }

        public deserializeAs_FightResultFighterListEntry(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.id = param1.readInt();
            this.alive = param1.readBoolean();

        }
    }
    export class FightResultMutantListEntry extends FightResultFighterListEntry implements INetworkType {
        public static ID: number = 216;

        level: number;

        constructor() {
            this.level = 0;
            super();
        }

        public getTypeId(): number {
            return FightResultMutantListEntry.ID;
        }

        public reset(): void {
            this.level = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_FightResultMutantListEntry(param1);
        }

        public serializeAs_FightResultMutantListEntry(param1: ICustomDataOutput): void {
            super.serializeAs_FightResultFighterListEntry(param1);
            if (this.level < 0) {
                throw new Error('Forbidden value (' + this.level + ') on element level.');
            }
            param1.writeVarShort(this.level);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_FightResultMutantListEntry(param1);
        }

        public deserializeAs_FightResultMutantListEntry(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.level = param1.readVarUhShort();
            if (this.level < 0) {
                throw new Error('Forbidden value (' + this.level + ') on element of FightResultMutantListEntry.level.');
            }

        }
    }
    export class FightResultPlayerListEntry extends FightResultFighterListEntry implements INetworkType {
        public static ID: number = 24;

        level: number;
        additional: FightResultAdditionalData[];

        constructor() {
            this.level = 0;
            this.additional = [];
            super();
        }

        public getTypeId(): number {
            return FightResultPlayerListEntry.ID;
        }

        public reset(): void {
            this.level = 0;
            this.additional = [];
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_FightResultPlayerListEntry(param1);
        }

        public serializeAs_FightResultPlayerListEntry(param1: ICustomDataOutput): void {
            super.serializeAs_FightResultFighterListEntry(param1);
            if (this.level < 1 || this.level > 200) {
                throw new Error('Forbidden value (' + this.level + ') on element level.');
            }
            param1.writeByte(this.level);
            param1.writeShort(this.additional.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.additional.length) {
                param1.writeShort((this.additional[_loc2_]).getTypeId());
                (this.additional[_loc2_]).serialize(param1);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_FightResultPlayerListEntry(param1);
        }

        public deserializeAs_FightResultPlayerListEntry(param1: ICustomDataInput): void {
            var _loc4_: number = 0;
            var _loc5_: FightResultAdditionalData = null;
            super.deserialize(param1);
            this.level = param1.readUnsignedByte();
            if (this.level < 1 || this.level > 200) {
                throw new Error('Forbidden value (' + this.level + ') on element of FightResultPlayerListEntry.level.');
            }
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = param1.readUnsignedShort();
                _loc5_ = <FightResultAdditionalData>ProtocolTypeManager.getInstance(FightResultAdditionalData, _loc4_);
                _loc5_.deserialize(param1);
                this.additional.push(_loc5_);
                _loc3_++;
            }

        }
    }
    export class FightResultPvpData extends FightResultAdditionalData implements INetworkType {
        public static ID: number = 190;

        grade: number;
        minHonorForGrade: number;
        maxHonorForGrade: number;
        honor: number;
        honorDelta: number;

        constructor() {
            this.grade = 0;
            this.minHonorForGrade = 0;
            this.maxHonorForGrade = 0;
            this.honor = 0;
            this.honorDelta = 0;
            super();
        }

        public getTypeId(): number {
            return FightResultPvpData.ID;
        }

        public reset(): void {
            this.grade = 0;
            this.minHonorForGrade = 0;
            this.maxHonorForGrade = 0;
            this.honor = 0;
            this.honorDelta = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_FightResultPvpData(param1);
        }

        public serializeAs_FightResultPvpData(param1: ICustomDataOutput): void {
            super.serializeAs_FightResultAdditionalData(param1);
            if (this.grade < 0 || this.grade > 255) {
                throw new Error('Forbidden value (' + this.grade + ') on element grade.');
            }
            param1.writeByte(this.grade);
            if (this.minHonorForGrade < 0 || this.minHonorForGrade > 20000) {
                throw new Error('Forbidden value (' + this.minHonorForGrade + ') on element minHonorForGrade.');
            }
            param1.writeVarShort(this.minHonorForGrade);
            if (this.maxHonorForGrade < 0 || this.maxHonorForGrade > 20000) {
                throw new Error('Forbidden value (' + this.maxHonorForGrade + ') on element maxHonorForGrade.');
            }
            param1.writeVarShort(this.maxHonorForGrade);
            if (this.honor < 0 || this.honor > 20000) {
                throw new Error('Forbidden value (' + this.honor + ') on element honor.');
            }
            param1.writeVarShort(this.honor);
            param1.writeVarShort(this.honorDelta);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_FightResultPvpData(param1);
        }

        public deserializeAs_FightResultPvpData(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.grade = param1.readUnsignedByte();
            if (this.grade < 0 || this.grade > 255) {
                throw new Error('Forbidden value (' + this.grade + ') on element of FightResultPvpData.grade.');
            }
            this.minHonorForGrade = param1.readVarUhShort();
            if (this.minHonorForGrade < 0 || this.minHonorForGrade > 20000) {
                throw new Error('Forbidden value (' + this.minHonorForGrade + ') on element of FightResultPvpData.minHonorForGrade.');
            }
            this.maxHonorForGrade = param1.readVarUhShort();
            if (this.maxHonorForGrade < 0 || this.maxHonorForGrade > 20000) {
                throw new Error('Forbidden value (' + this.maxHonorForGrade + ') on element of FightResultPvpData.maxHonorForGrade.');
            }
            this.honor = param1.readVarUhShort();
            if (this.honor < 0 || this.honor > 20000) {
                throw new Error('Forbidden value (' + this.honor + ') on element of FightResultPvpData.honor.');
            }
            this.honorDelta = param1.readVarShort();

        }
    }
    export class FightResultTaxCollectorListEntry extends FightResultFighterListEntry implements INetworkType {
        public static ID: number = 84;

        level: number;
        guildInfo: BasicGuildInformations;
        experienceForGuild: number;

        constructor() {
            this.level = 0;
            this.guildInfo = new BasicGuildInformations();
            this.experienceForGuild = 0;
            super();
        }

        public getTypeId(): number {
            return FightResultTaxCollectorListEntry.ID;
        }

        public reset(): void {
            this.level = 0;
            this.guildInfo = new BasicGuildInformations();
            this.experienceForGuild = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_FightResultTaxCollectorListEntry(param1);
        }

        public serializeAs_FightResultTaxCollectorListEntry(param1: ICustomDataOutput): void {
            super.serializeAs_FightResultFighterListEntry(param1);
            if (this.level < 1 || this.level > 200) {
                throw new Error('Forbidden value (' + this.level + ') on element level.');
            }
            param1.writeByte(this.level);
            this.guildInfo.serializeAs_BasicGuildInformations(param1);
            param1.writeInt(this.experienceForGuild);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_FightResultTaxCollectorListEntry(param1);
        }

        public deserializeAs_FightResultTaxCollectorListEntry(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.level = param1.readUnsignedByte();
            if (this.level < 1 || this.level > 200) {
                throw new Error('Forbidden value (' + this.level + ') on element of FightResultTaxCollectorListEntry.level.');
            }
            this.guildInfo = new BasicGuildInformations();
            this.guildInfo.deserialize(param1);
            this.experienceForGuild = param1.readInt();

        }
    }
    export class FightTeamLightInformations extends AbstractFightTeamInformations implements INetworkType {
        public static ID: number = 115;

        teamMembersCount: number;
        meanLevel: number;
        hasFriend: boolean;
        hasGuildMember: boolean;
        hasAllianceMember: boolean;
        hasGroupMember: boolean;
        hasMyTaxCollector: boolean;

        constructor() {
            this.teamMembersCount = 0;
            this.meanLevel = 0;
            this.hasFriend = false;
            this.hasGuildMember = false;
            this.hasAllianceMember = false;
            this.hasGroupMember = false;
            this.hasMyTaxCollector = false;
            super();
        }

        public getTypeId(): number {
            return FightTeamLightInformations.ID;
        }

        public reset(): void {
            this.teamMembersCount = 0;
            this.meanLevel = 0;
            this.hasFriend = false;
            this.hasGuildMember = false;
            this.hasAllianceMember = false;
            this.hasGroupMember = false;
            this.hasMyTaxCollector = false;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_FightTeamLightInformations(param1);
        }

        public serializeAs_FightTeamLightInformations(param1: ICustomDataOutput): void {
            super.serializeAs_AbstractFightTeamInformations(param1);
            var _loc2_: number = 0;
            _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 0, this.hasFriend);
            _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 1, this.hasGuildMember);
            _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 2, this.hasAllianceMember);
            _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 3, this.hasGroupMember);
            _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 4, this.hasMyTaxCollector);
            param1.writeByte(_loc2_);
            if (this.teamMembersCount < 0) {
                throw new Error('Forbidden value (' + this.teamMembersCount + ') on element teamMembersCount.');
            }
            param1.writeByte(this.teamMembersCount);
            if (this.meanLevel < 0) {
                throw new Error('Forbidden value (' + this.meanLevel + ') on element meanLevel.');
            }
            param1.writeVarInt(this.meanLevel);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_FightTeamLightInformations(param1);
        }

        public deserializeAs_FightTeamLightInformations(param1: ICustomDataInput): void {
            super.deserialize(param1);
            var _loc2_: number = param1.readByte();
            this.hasFriend = BooleanByteWrapper.getFlag(_loc2_, 0);
            this.hasGuildMember = BooleanByteWrapper.getFlag(_loc2_, 1);
            this.hasAllianceMember = BooleanByteWrapper.getFlag(_loc2_, 2);
            this.hasGroupMember = BooleanByteWrapper.getFlag(_loc2_, 3);
            this.hasMyTaxCollector = BooleanByteWrapper.getFlag(_loc2_, 4);
            this.teamMembersCount = param1.readByte();
            if (this.teamMembersCount < 0) {
                throw new Error('Forbidden value (' + this.teamMembersCount + ') on element of FightTeamLightInformations.teamMembersCount.');
            }
            this.meanLevel = param1.readVarUhInt();
            if (this.meanLevel < 0) {
                throw new Error('Forbidden value (' + this.meanLevel + ') on element of FightTeamLightInformations.meanLevel.');
            }

        }
    }
    export class FightTeamMemberInformations implements INetworkType {
        public static ID: number = 44;

        id: number;

        constructor() {
            this.id = 0;
        }

        public getTypeId(): number {
            return FightTeamMemberInformations.ID;
        }

        public reset(): void {
            this.id = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_FightTeamMemberInformations(param1);
        }

        public serializeAs_FightTeamMemberInformations(param1: ICustomDataOutput): void {
            param1.writeInt(this.id);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_FightTeamMemberInformations(param1);
        }

        public deserializeAs_FightTeamMemberInformations(param1: ICustomDataInput): void {
            this.id = param1.readInt();

        }
    }
    export class FightTeamMemberCharacterInformations extends FightTeamMemberInformations implements INetworkType {
        public static ID: number = 13;

        name: string;
        level: number;

        constructor() {
            this.name = '';
            this.level = 0;
            super();
        }

        public getTypeId(): number {
            return FightTeamMemberCharacterInformations.ID;
        }

        public reset(): void {
            this.name = '';
            this.level = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_FightTeamMemberCharacterInformations(param1);
        }

        public serializeAs_FightTeamMemberCharacterInformations(param1: ICustomDataOutput): void {
            super.serializeAs_FightTeamMemberInformations(param1);
            param1.writeUTF(this.name);
            if (this.level < 0 || this.level > 255) {
                throw new Error('Forbidden value (' + this.level + ') on element level.');
            }
            param1.writeByte(this.level);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_FightTeamMemberCharacterInformations(param1);
        }

        public deserializeAs_FightTeamMemberCharacterInformations(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.name = param1.readUTF();
            this.level = param1.readUnsignedByte();
            if (this.level < 0 || this.level > 255) {
                throw new Error('Forbidden value (' + this.level + ') on element of FightTeamMemberCharacterInformations.level.');
            }

        }
    }
    export class FightTeamMemberCompanionInformations extends FightTeamMemberInformations implements INetworkType {
        public static ID: number = 451;

        companionId: number;
        level: number;
        masterId: number;

        constructor() {
            this.companionId = 0;
            this.level = 0;
            this.masterId = 0;
            super();
        }

        public getTypeId(): number {
            return FightTeamMemberCompanionInformations.ID;
        }

        public reset(): void {
            this.companionId = 0;
            this.level = 0;
            this.masterId = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_FightTeamMemberCompanionInformations(param1);
        }

        public serializeAs_FightTeamMemberCompanionInformations(param1: ICustomDataOutput): void {
            super.serializeAs_FightTeamMemberInformations(param1);
            if (this.companionId < 0) {
                throw new Error('Forbidden value (' + this.companionId + ') on element companionId.');
            }
            param1.writeByte(this.companionId);
            if (this.level < 1 || this.level > 200) {
                throw new Error('Forbidden value (' + this.level + ') on element level.');
            }
            param1.writeByte(this.level);
            param1.writeInt(this.masterId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_FightTeamMemberCompanionInformations(param1);
        }

        public deserializeAs_FightTeamMemberCompanionInformations(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.companionId = param1.readByte();
            if (this.companionId < 0) {
                throw new Error('Forbidden value (' + this.companionId + ') on element of FightTeamMemberCompanionInformations.companionId.');
            }
            this.level = param1.readUnsignedByte();
            if (this.level < 1 || this.level > 200) {
                throw new Error('Forbidden value (' + this.level + ') on element of FightTeamMemberCompanionInformations.level.');
            }
            this.masterId = param1.readInt();

        }
    }
    export class FightTeamMemberMonsterInformations extends FightTeamMemberInformations implements INetworkType {
        public static ID: number = 6;

        monsterId: number;
        grade: number;

        constructor() {
            this.monsterId = 0;
            this.grade = 0;
            super();
        }

        public getTypeId(): number {
            return FightTeamMemberMonsterInformations.ID;
        }

        public reset(): void {
            this.monsterId = 0;
            this.grade = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_FightTeamMemberMonsterInformations(param1);
        }

        public serializeAs_FightTeamMemberMonsterInformations(param1: ICustomDataOutput): void {
            super.serializeAs_FightTeamMemberInformations(param1);
            param1.writeInt(this.monsterId);
            if (this.grade < 0) {
                throw new Error('Forbidden value (' + this.grade + ') on element grade.');
            }
            param1.writeByte(this.grade);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_FightTeamMemberMonsterInformations(param1);
        }

        public deserializeAs_FightTeamMemberMonsterInformations(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.monsterId = param1.readInt();
            this.grade = param1.readByte();
            if (this.grade < 0) {
                throw new Error('Forbidden value (' + this.grade + ') on element of FightTeamMemberMonsterInformations.grade.');
            }

        }
    }
    export class FightTeamMemberTaxCollectorInformations extends FightTeamMemberInformations implements INetworkType {
        public static ID: number = 177;

        firstNameId: number;
        lastNameId: number;
        level: number;
        guildId: number;
        uid: number;

        constructor() {
            this.firstNameId = 0;
            this.lastNameId = 0;
            this.level = 0;
            this.guildId = 0;
            this.uid = 0;
            super();
        }

        public getTypeId(): number {
            return FightTeamMemberTaxCollectorInformations.ID;
        }

        public reset(): void {
            this.firstNameId = 0;
            this.lastNameId = 0;
            this.level = 0;
            this.guildId = 0;
            this.uid = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_FightTeamMemberTaxCollectorInformations(param1);
        }

        public serializeAs_FightTeamMemberTaxCollectorInformations(param1: ICustomDataOutput): void {
            super.serializeAs_FightTeamMemberInformations(param1);
            if (this.firstNameId < 0) {
                throw new Error('Forbidden value (' + this.firstNameId + ') on element firstNameId.');
            }
            param1.writeVarShort(this.firstNameId);
            if (this.lastNameId < 0) {
                throw new Error('Forbidden value (' + this.lastNameId + ') on element lastNameId.');
            }
            param1.writeVarShort(this.lastNameId);
            if (this.level < 1 || this.level > 200) {
                throw new Error('Forbidden value (' + this.level + ') on element level.');
            }
            param1.writeByte(this.level);
            if (this.guildId < 0) {
                throw new Error('Forbidden value (' + this.guildId + ') on element guildId.');
            }
            param1.writeVarInt(this.guildId);
            if (this.uid < 0) {
                throw new Error('Forbidden value (' + this.uid + ') on element uid.');
            }
            param1.writeVarInt(this.uid);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_FightTeamMemberTaxCollectorInformations(param1);
        }

        public deserializeAs_FightTeamMemberTaxCollectorInformations(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.firstNameId = param1.readVarUhShort();
            if (this.firstNameId < 0) {
                throw new Error('Forbidden value (' + this.firstNameId + ') on element of FightTeamMemberTaxCollectorInformations.firstNameId.');
            }
            this.lastNameId = param1.readVarUhShort();
            if (this.lastNameId < 0) {
                throw new Error('Forbidden value (' + this.lastNameId + ') on element of FightTeamMemberTaxCollectorInformations.lastNameId.');
            }
            this.level = param1.readUnsignedByte();
            if (this.level < 1 || this.level > 200) {
                throw new Error('Forbidden value (' + this.level + ') on element of FightTeamMemberTaxCollectorInformations.level.');
            }
            this.guildId = param1.readVarUhInt();
            if (this.guildId < 0) {
                throw new Error('Forbidden value (' + this.guildId + ') on element of FightTeamMemberTaxCollectorInformations.guildId.');
            }
            this.uid = param1.readVarUhInt();
            if (this.uid < 0) {
                throw new Error('Forbidden value (' + this.uid + ') on element of FightTeamMemberTaxCollectorInformations.uid.');
            }

        }
    }
    export class FightTeamMemberWithAllianceCharacterInformations extends FightTeamMemberCharacterInformations implements INetworkType {
        public static ID: number = 426;

        allianceInfos: BasicAllianceInformations;

        constructor() {
            this.allianceInfos = new BasicAllianceInformations();
            super();
        }

        public getTypeId(): number {
            return FightTeamMemberWithAllianceCharacterInformations.ID;
        }

        public reset(): void {
            this.allianceInfos = new BasicAllianceInformations();
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_FightTeamMemberWithAllianceCharacterInformations(param1);
        }

        public serializeAs_FightTeamMemberWithAllianceCharacterInformations(param1: ICustomDataOutput): void {
            super.serializeAs_FightTeamMemberCharacterInformations(param1);
            this.allianceInfos.serializeAs_BasicAllianceInformations(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_FightTeamMemberWithAllianceCharacterInformations(param1);
        }

        public deserializeAs_FightTeamMemberWithAllianceCharacterInformations(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.allianceInfos = new BasicAllianceInformations();
            this.allianceInfos.deserialize(param1);

        }
    }
    export class GameFightFighterInformations extends GameContextActorInformations implements INetworkType {
        public static ID: number = 143;

        teamId: number;
        wave: number;
        alive: boolean;
        stats: GameFightMinimalStats;
        previousPositions: number[];

        constructor() {
            this.teamId = 2;
            this.wave = 0;
            this.alive = false;
            this.stats = new GameFightMinimalStats();
            this.previousPositions = [];
            super();
        }

        public getTypeId(): number {
            return GameFightFighterInformations.ID;
        }

        public reset(): void {
            this.teamId = 2;
            this.wave = 0;
            this.alive = false;
            this.stats = new GameFightMinimalStats();
            this.previousPositions = [];
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameFightFighterInformations(param1);
        }

        public serializeAs_GameFightFighterInformations(param1: ICustomDataOutput): void {
            super.serializeAs_GameContextActorInformations(param1);
            param1.writeByte(this.teamId);
            if (this.wave < 0) {
                throw new Error('Forbidden value (' + this.wave + ') on element wave.');
            }
            param1.writeByte(this.wave);
            param1.writeBoolean(this.alive);
            param1.writeShort(this.stats.getTypeId());
            this.stats.serialize(param1);
            param1.writeShort(this.previousPositions.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.previousPositions.length) {
                if (this.previousPositions[_loc2_] < 0 || this.previousPositions[_loc2_] > 559) {
                    throw new Error('Forbidden value (' + this.previousPositions[_loc2_] + ') on element 5 (starting at 1) of previousPositions.');
                }
                param1.writeVarShort(this.previousPositions[_loc2_]);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameFightFighterInformations(param1);
        }

        public deserializeAs_GameFightFighterInformations(param1: ICustomDataInput): void {
            var _loc5_: number = 0;
            super.deserialize(param1);
            this.teamId = param1.readByte();
            if (this.teamId < 0) {
                throw new Error('Forbidden value (' + this.teamId + ') on element of GameFightFighterInformations.teamId.');
            }
            this.wave = param1.readByte();
            if (this.wave < 0) {
                throw new Error('Forbidden value (' + this.wave + ') on element of GameFightFighterInformations.wave.');
            }
            this.alive = param1.readBoolean();
            var _loc2_: number = param1.readUnsignedShort();
            this.stats = <GameFightMinimalStats>ProtocolTypeManager.getInstance(GameFightMinimalStats, _loc2_);
            this.stats.deserialize(param1);
            var _loc3_: number = param1.readUnsignedShort();
            var _loc4_: number = 0;
            while (_loc4_ < _loc3_) {
            _loc5_ = param1.readVarUhShort();
                if (_loc5_ < 0 || _loc5_ > 559) {
                    throw new Error('Forbidden value (' + _loc5_ + ') on elements of previousPositions.');
                }
                this.previousPositions.push(_loc5_);
                _loc4_++;
            }

        }
    }
    export class GameFightAIInformations extends GameFightFighterInformations implements INetworkType {
        public static ID: number = 151;



        constructor() {

            super();
        }

        public getTypeId(): number {
            return GameFightAIInformations.ID;
        }

        public reset(): void {

        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameFightAIInformations(param1);
        }

        public serializeAs_GameFightAIInformations(param1: ICustomDataOutput): void {
            super.serializeAs_GameFightFighterInformations(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameFightAIInformations(param1);
        }

        public deserializeAs_GameFightAIInformations(param1: ICustomDataInput): void {
            super.deserialize(param1);

        }
    }
    export class GameFightFighterNamedInformations extends GameFightFighterInformations implements INetworkType {
        public static ID: number = 158;

        name: string;
        status: PlayerStatus;

        constructor() {
            this.name = '';
            this.status = new PlayerStatus();
            super();
        }

        public getTypeId(): number {
            return GameFightFighterNamedInformations.ID;
        }

        public reset(): void {
            this.name = '';
            this.status = new PlayerStatus();
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameFightFighterNamedInformations(param1);
        }

        public serializeAs_GameFightFighterNamedInformations(param1: ICustomDataOutput): void {
            super.serializeAs_GameFightFighterInformations(param1);
            param1.writeUTF(this.name);
            this.status.serializeAs_PlayerStatus(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameFightFighterNamedInformations(param1);
        }

        public deserializeAs_GameFightFighterNamedInformations(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.name = param1.readUTF();
            this.status = new PlayerStatus();
            this.status.deserialize(param1);

        }
    }
    export class GameFightCharacterInformations extends GameFightFighterNamedInformations implements INetworkType {
        public static ID: number = 46;

        level: number;
        alignmentInfos: ActorAlignmentInformations;
        breed: number;
        sex: boolean;

        constructor() {
            this.level = 0;
            this.alignmentInfos = new ActorAlignmentInformations();
            this.breed = 0;
            this.sex = false;
            super();
        }

        public getTypeId(): number {
            return GameFightCharacterInformations.ID;
        }

        public reset(): void {
            this.level = 0;
            this.alignmentInfos = new ActorAlignmentInformations();
            this.breed = 0;
            this.sex = false;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameFightCharacterInformations(param1);
        }

        public serializeAs_GameFightCharacterInformations(param1: ICustomDataOutput): void {
            super.serializeAs_GameFightFighterNamedInformations(param1);
            if (this.level < 0 || this.level > 255) {
                throw new Error('Forbidden value (' + this.level + ') on element level.');
            }
            param1.writeByte(this.level);
            this.alignmentInfos.serializeAs_ActorAlignmentInformations(param1);
            param1.writeByte(this.breed);
            param1.writeBoolean(this.sex);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameFightCharacterInformations(param1);
        }

        public deserializeAs_GameFightCharacterInformations(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.level = param1.readUnsignedByte();
            if (this.level < 0 || this.level > 255) {
                throw new Error('Forbidden value (' + this.level + ') on element of GameFightCharacterInformations.level.');
            }
            this.alignmentInfos = new ActorAlignmentInformations();
            this.alignmentInfos.deserialize(param1);
            this.breed = param1.readByte();
            this.sex = param1.readBoolean();

        }
    }
    export class GameFightCompanionInformations extends GameFightFighterInformations implements INetworkType {
        public static ID: number = 450;

        companionGenericId: number;
        level: number;
        masterId: number;

        constructor() {
            this.companionGenericId = 0;
            this.level = 0;
            this.masterId = 0;
            super();
        }

        public getTypeId(): number {
            return GameFightCompanionInformations.ID;
        }

        public reset(): void {
            this.companionGenericId = 0;
            this.level = 0;
            this.masterId = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameFightCompanionInformations(param1);
        }

        public serializeAs_GameFightCompanionInformations(param1: ICustomDataOutput): void {
            super.serializeAs_GameFightFighterInformations(param1);
            if (this.companionGenericId < 0) {
                throw new Error('Forbidden value (' + this.companionGenericId + ') on element companionGenericId.');
            }
            param1.writeByte(this.companionGenericId);
            if (this.level < 0 || this.level > 255) {
                throw new Error('Forbidden value (' + this.level + ') on element level.');
            }
            param1.writeByte(this.level);
            param1.writeInt(this.masterId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameFightCompanionInformations(param1);
        }

        public deserializeAs_GameFightCompanionInformations(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.companionGenericId = param1.readByte();
            if (this.companionGenericId < 0) {
                throw new Error('Forbidden value (' + this.companionGenericId + ') on element of GameFightCompanionInformations.companionGenericId.');
            }
            this.level = param1.readUnsignedByte();
            if (this.level < 0 || this.level > 255) {
                throw new Error('Forbidden value (' + this.level + ') on element of GameFightCompanionInformations.level.');
            }
            this.masterId = param1.readInt();

        }
    }
    export class GameFightFighterLightInformations implements INetworkType {
        public static ID: number = 413;

        id: number;
        wave: number;
        level: number;
        breed: number;
        sex: boolean;
        alive: boolean;

        constructor() {
            this.id = 0;
            this.wave = 0;
            this.level = 0;
            this.breed = 0;
            this.sex = false;
            this.alive = false;
        }

        public getTypeId(): number {
            return GameFightFighterLightInformations.ID;
        }

        public reset(): void {
            this.id = 0;
            this.wave = 0;
            this.level = 0;
            this.breed = 0;
            this.sex = false;
            this.alive = false;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameFightFighterLightInformations(param1);
        }

        public serializeAs_GameFightFighterLightInformations(param1: ICustomDataOutput): void {
            var _loc2_: number = 0;
            _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 0, this.sex);
            _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 1, this.alive);
            param1.writeByte(_loc2_);
            param1.writeInt(this.id);
            if (this.wave < 0) {
                throw new Error('Forbidden value (' + this.wave + ') on element wave.');
            }
            param1.writeByte(this.wave);
            if (this.level < 0) {
                throw new Error('Forbidden value (' + this.level + ') on element level.');
            }
            param1.writeVarShort(this.level);
            param1.writeByte(this.breed);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameFightFighterLightInformations(param1);
        }

        public deserializeAs_GameFightFighterLightInformations(param1: ICustomDataInput): void {
            var _loc2_: number = param1.readByte();
            this.sex = BooleanByteWrapper.getFlag(_loc2_, 0);
            this.alive = BooleanByteWrapper.getFlag(_loc2_, 1);
            this.id = param1.readInt();
            this.wave = param1.readByte();
            if (this.wave < 0) {
                throw new Error('Forbidden value (' + this.wave + ') on element of GameFightFighterLightInformations.wave.');
            }
            this.level = param1.readVarUhShort();
            if (this.level < 0) {
                throw new Error('Forbidden value (' + this.level + ') on element of GameFightFighterLightInformations.level.');
            }
            this.breed = param1.readByte();

        }
    }
    export class GameFightFighterCompanionLightInformations extends GameFightFighterLightInformations implements INetworkType {
        public static ID: number = 454;

        companionId: number;
        masterId: number;

        constructor() {
            this.companionId = 0;
            this.masterId = 0;
            super();
        }

        public getTypeId(): number {
            return GameFightFighterCompanionLightInformations.ID;
        }

        public reset(): void {
            this.companionId = 0;
            this.masterId = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameFightFighterCompanionLightInformations(param1);
        }

        public serializeAs_GameFightFighterCompanionLightInformations(param1: ICustomDataOutput): void {
            super.serializeAs_GameFightFighterLightInformations(param1);
            if (this.companionId < 0) {
                throw new Error('Forbidden value (' + this.companionId + ') on element companionId.');
            }
            param1.writeByte(this.companionId);
            param1.writeInt(this.masterId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameFightFighterCompanionLightInformations(param1);
        }

        public deserializeAs_GameFightFighterCompanionLightInformations(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.companionId = param1.readByte();
            if (this.companionId < 0) {
                throw new Error('Forbidden value (' + this.companionId + ') on element of GameFightFighterCompanionLightInformations.companionId.');
            }
            this.masterId = param1.readInt();

        }
    }
    export class GameFightFighterMonsterLightInformations extends GameFightFighterLightInformations implements INetworkType {
        public static ID: number = 455;

        creatureGenericId: number;

        constructor() {
            this.creatureGenericId = 0;
            super();
        }

        public getTypeId(): number {
            return GameFightFighterMonsterLightInformations.ID;
        }

        public reset(): void {
            this.creatureGenericId = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameFightFighterMonsterLightInformations(param1);
        }

        public serializeAs_GameFightFighterMonsterLightInformations(param1: ICustomDataOutput): void {
            super.serializeAs_GameFightFighterLightInformations(param1);
            if (this.creatureGenericId < 0) {
                throw new Error('Forbidden value (' + this.creatureGenericId + ') on element creatureGenericId.');
            }
            param1.writeVarShort(this.creatureGenericId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameFightFighterMonsterLightInformations(param1);
        }

        public deserializeAs_GameFightFighterMonsterLightInformations(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.creatureGenericId = param1.readVarUhShort();
            if (this.creatureGenericId < 0) {
                throw new Error('Forbidden value (' + this.creatureGenericId + ') on element of GameFightFighterMonsterLightInformations.creatureGenericId.');
            }

        }
    }
    export class GameFightFighterNamedLightInformations extends GameFightFighterLightInformations implements INetworkType {
        public static ID: number = 456;

        name: string;

        constructor() {
            this.name = '';
            super();
        }

        public getTypeId(): number {
            return GameFightFighterNamedLightInformations.ID;
        }

        public reset(): void {
            this.name = '';
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameFightFighterNamedLightInformations(param1);
        }

        public serializeAs_GameFightFighterNamedLightInformations(param1: ICustomDataOutput): void {
            super.serializeAs_GameFightFighterLightInformations(param1);
            param1.writeUTF(this.name);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameFightFighterNamedLightInformations(param1);
        }

        public deserializeAs_GameFightFighterNamedLightInformations(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.name = param1.readUTF();

        }
    }
    export class GameFightFighterTaxCollectorLightInformations extends GameFightFighterLightInformations implements INetworkType {
        public static ID: number = 457;

        firstNameId: number;
        lastNameId: number;

        constructor() {
            this.firstNameId = 0;
            this.lastNameId = 0;
            super();
        }

        public getTypeId(): number {
            return GameFightFighterTaxCollectorLightInformations.ID;
        }

        public reset(): void {
            this.firstNameId = 0;
            this.lastNameId = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameFightFighterTaxCollectorLightInformations(param1);
        }

        public serializeAs_GameFightFighterTaxCollectorLightInformations(param1: ICustomDataOutput): void {
            super.serializeAs_GameFightFighterLightInformations(param1);
            if (this.firstNameId < 0) {
                throw new Error('Forbidden value (' + this.firstNameId + ') on element firstNameId.');
            }
            param1.writeVarShort(this.firstNameId);
            if (this.lastNameId < 0) {
                throw new Error('Forbidden value (' + this.lastNameId + ') on element lastNameId.');
            }
            param1.writeVarShort(this.lastNameId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameFightFighterTaxCollectorLightInformations(param1);
        }

        public deserializeAs_GameFightFighterTaxCollectorLightInformations(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.firstNameId = param1.readVarUhShort();
            if (this.firstNameId < 0) {
                throw new Error('Forbidden value (' + this.firstNameId + ') on element of GameFightFighterTaxCollectorLightInformations.firstNameId.');
            }
            this.lastNameId = param1.readVarUhShort();
            if (this.lastNameId < 0) {
                throw new Error('Forbidden value (' + this.lastNameId + ') on element of GameFightFighterTaxCollectorLightInformations.lastNameId.');
            }

        }
    }
    export class GameFightMinimalStats implements INetworkType {
        public static ID: number = 31;

        lifePoints: number;
        maxLifePoints: number;
        baseMaxLifePoints: number;
        permanentDamagePercent: number;
        shieldPoints: number;
        actionPoints: number;
        maxActionPoints: number;
        movementPoints: number;
        maxMovementPoints: number;
        summoner: number;
        summoned: boolean;
        neutralElementResistPercent: number;
        earthElementResistPercent: number;
        waterElementResistPercent: number;
        airElementResistPercent: number;
        fireElementResistPercent: number;
        neutralElementReduction: number;
        earthElementReduction: number;
        waterElementReduction: number;
        airElementReduction: number;
        fireElementReduction: number;
        criticalDamageFixedResist: number;
        pushDamageFixedResist: number;
        pvpNeutralElementResistPercent: number;
        pvpEarthElementResistPercent: number;
        pvpWaterElementResistPercent: number;
        pvpAirElementResistPercent: number;
        pvpFireElementResistPercent: number;
        pvpNeutralElementReduction: number;
        pvpEarthElementReduction: number;
        pvpWaterElementReduction: number;
        pvpAirElementReduction: number;
        pvpFireElementReduction: number;
        dodgePALostProbability: number;
        dodgePMLostProbability: number;
        tackleBlock: number;
        tackleEvade: number;
        invisibilityState: number;

        constructor() {
            this.lifePoints = 0;
            this.maxLifePoints = 0;
            this.baseMaxLifePoints = 0;
            this.permanentDamagePercent = 0;
            this.shieldPoints = 0;
            this.actionPoints = 0;
            this.maxActionPoints = 0;
            this.movementPoints = 0;
            this.maxMovementPoints = 0;
            this.summoner = 0;
            this.summoned = false;
            this.neutralElementResistPercent = 0;
            this.earthElementResistPercent = 0;
            this.waterElementResistPercent = 0;
            this.airElementResistPercent = 0;
            this.fireElementResistPercent = 0;
            this.neutralElementReduction = 0;
            this.earthElementReduction = 0;
            this.waterElementReduction = 0;
            this.airElementReduction = 0;
            this.fireElementReduction = 0;
            this.criticalDamageFixedResist = 0;
            this.pushDamageFixedResist = 0;
            this.pvpNeutralElementResistPercent = 0;
            this.pvpEarthElementResistPercent = 0;
            this.pvpWaterElementResistPercent = 0;
            this.pvpAirElementResistPercent = 0;
            this.pvpFireElementResistPercent = 0;
            this.pvpNeutralElementReduction = 0;
            this.pvpEarthElementReduction = 0;
            this.pvpWaterElementReduction = 0;
            this.pvpAirElementReduction = 0;
            this.pvpFireElementReduction = 0;
            this.dodgePALostProbability = 0;
            this.dodgePMLostProbability = 0;
            this.tackleBlock = 0;
            this.tackleEvade = 0;
            this.invisibilityState = 0;
        }

        public getTypeId(): number {
            return GameFightMinimalStats.ID;
        }

        public reset(): void {
            this.lifePoints = 0;
            this.maxLifePoints = 0;
            this.baseMaxLifePoints = 0;
            this.permanentDamagePercent = 0;
            this.shieldPoints = 0;
            this.actionPoints = 0;
            this.maxActionPoints = 0;
            this.movementPoints = 0;
            this.maxMovementPoints = 0;
            this.summoner = 0;
            this.summoned = false;
            this.neutralElementResistPercent = 0;
            this.earthElementResistPercent = 0;
            this.waterElementResistPercent = 0;
            this.airElementResistPercent = 0;
            this.fireElementResistPercent = 0;
            this.neutralElementReduction = 0;
            this.earthElementReduction = 0;
            this.waterElementReduction = 0;
            this.airElementReduction = 0;
            this.fireElementReduction = 0;
            this.criticalDamageFixedResist = 0;
            this.pushDamageFixedResist = 0;
            this.pvpNeutralElementResistPercent = 0;
            this.pvpEarthElementResistPercent = 0;
            this.pvpWaterElementResistPercent = 0;
            this.pvpAirElementResistPercent = 0;
            this.pvpFireElementResistPercent = 0;
            this.pvpNeutralElementReduction = 0;
            this.pvpEarthElementReduction = 0;
            this.pvpWaterElementReduction = 0;
            this.pvpAirElementReduction = 0;
            this.pvpFireElementReduction = 0;
            this.dodgePALostProbability = 0;
            this.dodgePMLostProbability = 0;
            this.tackleBlock = 0;
            this.tackleEvade = 0;
            this.invisibilityState = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameFightMinimalStats(param1);
        }

        public serializeAs_GameFightMinimalStats(param1: ICustomDataOutput): void {
            if (this.lifePoints < 0) {
                throw new Error('Forbidden value (' + this.lifePoints + ') on element lifePoints.');
            }
            param1.writeVarInt(this.lifePoints);
            if (this.maxLifePoints < 0) {
                throw new Error('Forbidden value (' + this.maxLifePoints + ') on element maxLifePoints.');
            }
            param1.writeVarInt(this.maxLifePoints);
            if (this.baseMaxLifePoints < 0) {
                throw new Error('Forbidden value (' + this.baseMaxLifePoints + ') on element baseMaxLifePoints.');
            }
            param1.writeVarInt(this.baseMaxLifePoints);
            if (this.permanentDamagePercent < 0) {
                throw new Error('Forbidden value (' + this.permanentDamagePercent + ') on element permanentDamagePercent.');
            }
            param1.writeVarInt(this.permanentDamagePercent);
            if (this.shieldPoints < 0) {
                throw new Error('Forbidden value (' + this.shieldPoints + ') on element shieldPoints.');
            }
            param1.writeVarInt(this.shieldPoints);
            param1.writeVarShort(this.actionPoints);
            param1.writeVarShort(this.maxActionPoints);
            param1.writeVarShort(this.movementPoints);
            param1.writeVarShort(this.maxMovementPoints);
            param1.writeInt(this.summoner);
            param1.writeBoolean(this.summoned);
            param1.writeVarShort(this.neutralElementResistPercent);
            param1.writeVarShort(this.earthElementResistPercent);
            param1.writeVarShort(this.waterElementResistPercent);
            param1.writeVarShort(this.airElementResistPercent);
            param1.writeVarShort(this.fireElementResistPercent);
            param1.writeVarShort(this.neutralElementReduction);
            param1.writeVarShort(this.earthElementReduction);
            param1.writeVarShort(this.waterElementReduction);
            param1.writeVarShort(this.airElementReduction);
            param1.writeVarShort(this.fireElementReduction);
            param1.writeVarShort(this.criticalDamageFixedResist);
            param1.writeVarShort(this.pushDamageFixedResist);
            param1.writeVarShort(this.pvpNeutralElementResistPercent);
            param1.writeVarShort(this.pvpEarthElementResistPercent);
            param1.writeVarShort(this.pvpWaterElementResistPercent);
            param1.writeVarShort(this.pvpAirElementResistPercent);
            param1.writeVarShort(this.pvpFireElementResistPercent);
            param1.writeVarShort(this.pvpNeutralElementReduction);
            param1.writeVarShort(this.pvpEarthElementReduction);
            param1.writeVarShort(this.pvpWaterElementReduction);
            param1.writeVarShort(this.pvpAirElementReduction);
            param1.writeVarShort(this.pvpFireElementReduction);
            if (this.dodgePALostProbability < 0) {
                throw new Error('Forbidden value (' + this.dodgePALostProbability + ') on element dodgePALostProbability.');
            }
            param1.writeVarShort(this.dodgePALostProbability);
            if (this.dodgePMLostProbability < 0) {
                throw new Error('Forbidden value (' + this.dodgePMLostProbability + ') on element dodgePMLostProbability.');
            }
            param1.writeVarShort(this.dodgePMLostProbability);
            param1.writeVarShort(this.tackleBlock);
            param1.writeVarShort(this.tackleEvade);
            param1.writeByte(this.invisibilityState);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameFightMinimalStats(param1);
        }

        public deserializeAs_GameFightMinimalStats(param1: ICustomDataInput): void {
            this.lifePoints = param1.readVarUhInt();
            if (this.lifePoints < 0) {
                throw new Error('Forbidden value (' + this.lifePoints + ') on element of GameFightMinimalStats.lifePoints.');
            }
            this.maxLifePoints = param1.readVarUhInt();
            if (this.maxLifePoints < 0) {
                throw new Error('Forbidden value (' + this.maxLifePoints + ') on element of GameFightMinimalStats.maxLifePoints.');
            }
            this.baseMaxLifePoints = param1.readVarUhInt();
            if (this.baseMaxLifePoints < 0) {
                throw new Error('Forbidden value (' + this.baseMaxLifePoints + ') on element of GameFightMinimalStats.baseMaxLifePoints.');
            }
            this.permanentDamagePercent = param1.readVarUhInt();
            if (this.permanentDamagePercent < 0) {
                throw new Error('Forbidden value (' + this.permanentDamagePercent + ') on element of GameFightMinimalStats.permanentDamagePercent.');
            }
            this.shieldPoints = param1.readVarUhInt();
            if (this.shieldPoints < 0) {
                throw new Error('Forbidden value (' + this.shieldPoints + ') on element of GameFightMinimalStats.shieldPoints.');
            }
            this.actionPoints = param1.readVarShort();
            this.maxActionPoints = param1.readVarShort();
            this.movementPoints = param1.readVarShort();
            this.maxMovementPoints = param1.readVarShort();
            this.summoner = param1.readInt();
            this.summoned = param1.readBoolean();
            this.neutralElementResistPercent = param1.readVarShort();
            this.earthElementResistPercent = param1.readVarShort();
            this.waterElementResistPercent = param1.readVarShort();
            this.airElementResistPercent = param1.readVarShort();
            this.fireElementResistPercent = param1.readVarShort();
            this.neutralElementReduction = param1.readVarShort();
            this.earthElementReduction = param1.readVarShort();
            this.waterElementReduction = param1.readVarShort();
            this.airElementReduction = param1.readVarShort();
            this.fireElementReduction = param1.readVarShort();
            this.criticalDamageFixedResist = param1.readVarShort();
            this.pushDamageFixedResist = param1.readVarShort();
            this.pvpNeutralElementResistPercent = param1.readVarShort();
            this.pvpEarthElementResistPercent = param1.readVarShort();
            this.pvpWaterElementResistPercent = param1.readVarShort();
            this.pvpAirElementResistPercent = param1.readVarShort();
            this.pvpFireElementResistPercent = param1.readVarShort();
            this.pvpNeutralElementReduction = param1.readVarShort();
            this.pvpEarthElementReduction = param1.readVarShort();
            this.pvpWaterElementReduction = param1.readVarShort();
            this.pvpAirElementReduction = param1.readVarShort();
            this.pvpFireElementReduction = param1.readVarShort();
            this.dodgePALostProbability = param1.readVarUhShort();
            if (this.dodgePALostProbability < 0) {
                throw new Error('Forbidden value (' + this.dodgePALostProbability + ') on element of GameFightMinimalStats.dodgePALostProbability.');
            }
            this.dodgePMLostProbability = param1.readVarUhShort();
            if (this.dodgePMLostProbability < 0) {
                throw new Error('Forbidden value (' + this.dodgePMLostProbability + ') on element of GameFightMinimalStats.dodgePMLostProbability.');
            }
            this.tackleBlock = param1.readVarShort();
            this.tackleEvade = param1.readVarShort();
            this.invisibilityState = param1.readByte();
            if (this.invisibilityState < 0) {
                throw new Error('Forbidden value (' + this.invisibilityState + ') on element of GameFightMinimalStats.invisibilityState.');
            }

        }
    }
    export class GameFightMinimalStatsPreparation extends GameFightMinimalStats implements INetworkType {
        public static ID: number = 360;

        initiative: number;

        constructor() {
            this.initiative = 0;
            super();
        }

        public getTypeId(): number {
            return GameFightMinimalStatsPreparation.ID;
        }

        public reset(): void {
            this.initiative = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameFightMinimalStatsPreparation(param1);
        }

        public serializeAs_GameFightMinimalStatsPreparation(param1: ICustomDataOutput): void {
            super.serializeAs_GameFightMinimalStats(param1);
            if (this.initiative < 0) {
                throw new Error('Forbidden value (' + this.initiative + ') on element initiative.');
            }
            param1.writeVarInt(this.initiative);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameFightMinimalStatsPreparation(param1);
        }

        public deserializeAs_GameFightMinimalStatsPreparation(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.initiative = param1.readVarUhInt();
            if (this.initiative < 0) {
                throw new Error('Forbidden value (' + this.initiative + ') on element of GameFightMinimalStatsPreparation.initiative.');
            }

        }
    }
    export class GameFightMonsterInformations extends GameFightAIInformations implements INetworkType {
        public static ID: number = 29;

        creatureGenericId: number;
        creatureGrade: number;

        constructor() {
            this.creatureGenericId = 0;
            this.creatureGrade = 0;
            super();
        }

        public getTypeId(): number {
            return GameFightMonsterInformations.ID;
        }

        public reset(): void {
            this.creatureGenericId = 0;
            this.creatureGrade = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameFightMonsterInformations(param1);
        }

        public serializeAs_GameFightMonsterInformations(param1: ICustomDataOutput): void {
            super.serializeAs_GameFightAIInformations(param1);
            if (this.creatureGenericId < 0) {
                throw new Error('Forbidden value (' + this.creatureGenericId + ') on element creatureGenericId.');
            }
            param1.writeVarShort(this.creatureGenericId);
            if (this.creatureGrade < 0) {
                throw new Error('Forbidden value (' + this.creatureGrade + ') on element creatureGrade.');
            }
            param1.writeByte(this.creatureGrade);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameFightMonsterInformations(param1);
        }

        public deserializeAs_GameFightMonsterInformations(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.creatureGenericId = param1.readVarUhShort();
            if (this.creatureGenericId < 0) {
                throw new Error('Forbidden value (' + this.creatureGenericId + ') on element of GameFightMonsterInformations.creatureGenericId.');
            }
            this.creatureGrade = param1.readByte();
            if (this.creatureGrade < 0) {
                throw new Error('Forbidden value (' + this.creatureGrade + ') on element of GameFightMonsterInformations.creatureGrade.');
            }

        }
    }
    export class GameFightMonsterWithAlignmentInformations extends GameFightMonsterInformations implements INetworkType {
        public static ID: number = 203;

        alignmentInfos: ActorAlignmentInformations;

        constructor() {
            this.alignmentInfos = new ActorAlignmentInformations();
            super();
        }

        public getTypeId(): number {
            return GameFightMonsterWithAlignmentInformations.ID;
        }

        public reset(): void {
            this.alignmentInfos = new ActorAlignmentInformations();
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameFightMonsterWithAlignmentInformations(param1);
        }

        public serializeAs_GameFightMonsterWithAlignmentInformations(param1: ICustomDataOutput): void {
            super.serializeAs_GameFightMonsterInformations(param1);
            this.alignmentInfos.serializeAs_ActorAlignmentInformations(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameFightMonsterWithAlignmentInformations(param1);
        }

        public deserializeAs_GameFightMonsterWithAlignmentInformations(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.alignmentInfos = new ActorAlignmentInformations();
            this.alignmentInfos.deserialize(param1);

        }
    }
    export class GameFightMutantInformations extends GameFightFighterNamedInformations implements INetworkType {
        public static ID: number = 50;

        powerLevel: number;

        constructor() {
            this.powerLevel = 0;
            super();
        }

        public getTypeId(): number {
            return GameFightMutantInformations.ID;
        }

        public reset(): void {
            this.powerLevel = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameFightMutantInformations(param1);
        }

        public serializeAs_GameFightMutantInformations(param1: ICustomDataOutput): void {
            super.serializeAs_GameFightFighterNamedInformations(param1);
            if (this.powerLevel < 0) {
                throw new Error('Forbidden value (' + this.powerLevel + ') on element powerLevel.');
            }
            param1.writeByte(this.powerLevel);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameFightMutantInformations(param1);
        }

        public deserializeAs_GameFightMutantInformations(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.powerLevel = param1.readByte();
            if (this.powerLevel < 0) {
                throw new Error('Forbidden value (' + this.powerLevel + ') on element of GameFightMutantInformations.powerLevel.');
            }

        }
    }
    export class GameFightResumeSlaveInfo implements INetworkType {
        public static ID: number = 364;

        slaveId: number;
        spellCooldowns: GameFightSpellCooldown[];
        summonCount: number;
        bombCount: number;

        constructor() {
            this.slaveId = 0;
            this.spellCooldowns = [];
            this.summonCount = 0;
            this.bombCount = 0;
        }

        public getTypeId(): number {
            return GameFightResumeSlaveInfo.ID;
        }

        public reset(): void {
            this.slaveId = 0;
            this.spellCooldowns = [];
            this.summonCount = 0;
            this.bombCount = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameFightResumeSlaveInfo(param1);
        }

        public serializeAs_GameFightResumeSlaveInfo(param1: ICustomDataOutput): void {
            param1.writeInt(this.slaveId);
            param1.writeShort(this.spellCooldowns.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.spellCooldowns.length) {
                (this.spellCooldowns[_loc2_]).serializeAs_GameFightSpellCooldown(param1);
                _loc2_++;
            }
            if (this.summonCount < 0) {
                throw new Error('Forbidden value (' + this.summonCount + ') on element summonCount.');
            }
            param1.writeByte(this.summonCount);
            if (this.bombCount < 0) {
                throw new Error('Forbidden value (' + this.bombCount + ') on element bombCount.');
            }
            param1.writeByte(this.bombCount);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameFightResumeSlaveInfo(param1);
        }

        public deserializeAs_GameFightResumeSlaveInfo(param1: ICustomDataInput): void {
            var _loc4_: GameFightSpellCooldown = null;
            this.slaveId = param1.readInt();
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = new GameFightSpellCooldown();
                _loc4_.deserialize(param1);
                this.spellCooldowns.push(_loc4_);
                _loc3_++;
            }
            this.summonCount = param1.readByte();
            if (this.summonCount < 0) {
                throw new Error('Forbidden value (' + this.summonCount + ') on element of GameFightResumeSlaveInfo.summonCount.');
            }
            this.bombCount = param1.readByte();
            if (this.bombCount < 0) {
                throw new Error('Forbidden value (' + this.bombCount + ') on element of GameFightResumeSlaveInfo.bombCount.');
            }

        }
    }
    export class GameFightSpellCooldown implements INetworkType {
        public static ID: number = 205;

        spellId: number;
        cooldown: number;

        constructor() {
            this.spellId = 0;
            this.cooldown = 0;
        }

        public getTypeId(): number {
            return GameFightSpellCooldown.ID;
        }

        public reset(): void {
            this.spellId = 0;
            this.cooldown = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameFightSpellCooldown(param1);
        }

        public serializeAs_GameFightSpellCooldown(param1: ICustomDataOutput): void {
            param1.writeInt(this.spellId);
            if (this.cooldown < 0) {
                throw new Error('Forbidden value (' + this.cooldown + ') on element cooldown.');
            }
            param1.writeByte(this.cooldown);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameFightSpellCooldown(param1);
        }

        public deserializeAs_GameFightSpellCooldown(param1: ICustomDataInput): void {
            this.spellId = param1.readInt();
            this.cooldown = param1.readByte();
            if (this.cooldown < 0) {
                throw new Error('Forbidden value (' + this.cooldown + ') on element of GameFightSpellCooldown.cooldown.');
            }

        }
    }
    export class GameFightTaxCollectorInformations extends GameFightAIInformations implements INetworkType {
        public static ID: number = 48;

        firstNameId: number;
        lastNameId: number;
        level: number;

        constructor() {
            this.firstNameId = 0;
            this.lastNameId = 0;
            this.level = 0;
            super();
        }

        public getTypeId(): number {
            return GameFightTaxCollectorInformations.ID;
        }

        public reset(): void {
            this.firstNameId = 0;
            this.lastNameId = 0;
            this.level = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameFightTaxCollectorInformations(param1);
        }

        public serializeAs_GameFightTaxCollectorInformations(param1: ICustomDataOutput): void {
            super.serializeAs_GameFightAIInformations(param1);
            if (this.firstNameId < 0) {
                throw new Error('Forbidden value (' + this.firstNameId + ') on element firstNameId.');
            }
            param1.writeVarShort(this.firstNameId);
            if (this.lastNameId < 0) {
                throw new Error('Forbidden value (' + this.lastNameId + ') on element lastNameId.');
            }
            param1.writeVarShort(this.lastNameId);
            if (this.level < 0 || this.level > 255) {
                throw new Error('Forbidden value (' + this.level + ') on element level.');
            }
            param1.writeByte(this.level);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameFightTaxCollectorInformations(param1);
        }

        public deserializeAs_GameFightTaxCollectorInformations(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.firstNameId = param1.readVarUhShort();
            if (this.firstNameId < 0) {
                throw new Error('Forbidden value (' + this.firstNameId + ') on element of GameFightTaxCollectorInformations.firstNameId.');
            }
            this.lastNameId = param1.readVarUhShort();
            if (this.lastNameId < 0) {
                throw new Error('Forbidden value (' + this.lastNameId + ') on element of GameFightTaxCollectorInformations.lastNameId.');
            }
            this.level = param1.readUnsignedByte();
            if (this.level < 0 || this.level > 255) {
                throw new Error('Forbidden value (' + this.level + ') on element of GameFightTaxCollectorInformations.level.');
            }

        }
    }
    export class AbstractSocialGroupInfos implements INetworkType {
        public static ID: number = 416;



        constructor() {

        }

        public getTypeId(): number {
            return AbstractSocialGroupInfos.ID;
        }

        public reset(): void {

        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_AbstractSocialGroupInfos(param1);
        }

        public serializeAs_AbstractSocialGroupInfos(param1: ICustomDataOutput): void {

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_AbstractSocialGroupInfos(param1);
        }

        public deserializeAs_AbstractSocialGroupInfos(param1: ICustomDataInput): void {

        }
    }
    export class BasicAllianceInformations extends AbstractSocialGroupInfos implements INetworkType {
        public static ID: number = 419;

        allianceId: number;
        allianceTag: string;

        constructor() {
            this.allianceId = 0;
            this.allianceTag = '';
            super();
        }

        public getTypeId(): number {
            return BasicAllianceInformations.ID;
        }

        public reset(): void {
            this.allianceId = 0;
            this.allianceTag = '';
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_BasicAllianceInformations(param1);
        }

        public serializeAs_BasicAllianceInformations(param1: ICustomDataOutput): void {
            super.serializeAs_AbstractSocialGroupInfos(param1);
            if (this.allianceId < 0) {
                throw new Error('Forbidden value (' + this.allianceId + ') on element allianceId.');
            }
            param1.writeVarInt(this.allianceId);
            param1.writeUTF(this.allianceTag);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_BasicAllianceInformations(param1);
        }

        public deserializeAs_BasicAllianceInformations(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.allianceId = param1.readVarUhInt();
            if (this.allianceId < 0) {
                throw new Error('Forbidden value (' + this.allianceId + ') on element of BasicAllianceInformations.allianceId.');
            }
            this.allianceTag = param1.readUTF();

        }
    }
    export class BasicNamedAllianceInformations extends BasicAllianceInformations implements INetworkType {
        public static ID: number = 418;

        allianceName: string;

        constructor() {
            this.allianceName = '';
            super();
        }

        public getTypeId(): number {
            return BasicNamedAllianceInformations.ID;
        }

        public reset(): void {
            this.allianceName = '';
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_BasicNamedAllianceInformations(param1);
        }

        public serializeAs_BasicNamedAllianceInformations(param1: ICustomDataOutput): void {
            super.serializeAs_BasicAllianceInformations(param1);
            param1.writeUTF(this.allianceName);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_BasicNamedAllianceInformations(param1);
        }

        public deserializeAs_BasicNamedAllianceInformations(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.allianceName = param1.readUTF();

        }
    }
    export class AllianceInformations extends BasicNamedAllianceInformations implements INetworkType {
        public static ID: number = 417;

        allianceEmblem: GuildEmblem;

        constructor() {
            this.allianceEmblem = new GuildEmblem();
            super();
        }

        public getTypeId(): number {
            return AllianceInformations.ID;
        }

        public reset(): void {
            this.allianceEmblem = new GuildEmblem();
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_AllianceInformations(param1);
        }

        public serializeAs_AllianceInformations(param1: ICustomDataOutput): void {
            super.serializeAs_BasicNamedAllianceInformations(param1);
            this.allianceEmblem.serializeAs_GuildEmblem(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_AllianceInformations(param1);
        }

        public deserializeAs_AllianceInformations(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.allianceEmblem = new GuildEmblem();
            this.allianceEmblem.deserialize(param1);

        }
    }
    export class AlternativeMonstersInGroupLightInformations implements INetworkType {
        public static ID: number = 394;

        playerCount: number;
        monsters: MonsterInGroupLightInformations[];

        constructor() {
            this.playerCount = 0;
            this.monsters = [];
        }

        public getTypeId(): number {
            return AlternativeMonstersInGroupLightInformations.ID;
        }

        public reset(): void {
            this.playerCount = 0;
            this.monsters = [];
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_AlternativeMonstersInGroupLightInformations(param1);
        }

        public serializeAs_AlternativeMonstersInGroupLightInformations(param1: ICustomDataOutput): void {
            param1.writeInt(this.playerCount);
            param1.writeShort(this.monsters.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.monsters.length) {
                (this.monsters[_loc2_]).serializeAs_MonsterInGroupLightInformations(param1);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_AlternativeMonstersInGroupLightInformations(param1);
        }

        public deserializeAs_AlternativeMonstersInGroupLightInformations(param1: ICustomDataInput): void {
            var _loc4_: MonsterInGroupLightInformations = null;
            this.playerCount = param1.readInt();
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = new MonsterInGroupLightInformations();
                _loc4_.deserialize(param1);
                this.monsters.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class AtlasPointsInformations implements INetworkType {
        public static ID: number = 175;

        type: number;
        coords: MapCoordinatesExtended[];

        constructor() {
            this.type = 0;
            this.coords = [];
        }

        public getTypeId(): number {
            return AtlasPointsInformations.ID;
        }

        public reset(): void {
            this.type = 0;
            this.coords = [];
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_AtlasPointsInformations(param1);
        }

        public serializeAs_AtlasPointsInformations(param1: ICustomDataOutput): void {
            param1.writeByte(this.type);
            param1.writeShort(this.coords.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.coords.length) {
                (this.coords[_loc2_]).serializeAs_MapCoordinatesExtended(param1);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_AtlasPointsInformations(param1);
        }

        public deserializeAs_AtlasPointsInformations(param1: ICustomDataInput): void {
            var _loc4_: MapCoordinatesExtended = null;
            this.type = param1.readByte();
            if (this.type < 0) {
                throw new Error('Forbidden value (' + this.type + ') on element of AtlasPointsInformations.type.');
            }
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = new MapCoordinatesExtended();
                _loc4_.deserialize(param1);
                this.coords.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class BasicGuildInformations extends AbstractSocialGroupInfos implements INetworkType {
        public static ID: number = 365;

        guildId: number;
        guildName: string;

        constructor() {
            this.guildId = 0;
            this.guildName = '';
            super();
        }

        public getTypeId(): number {
            return BasicGuildInformations.ID;
        }

        public reset(): void {
            this.guildId = 0;
            this.guildName = '';
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_BasicGuildInformations(param1);
        }

        public serializeAs_BasicGuildInformations(param1: ICustomDataOutput): void {
            super.serializeAs_AbstractSocialGroupInfos(param1);
            if (this.guildId < 0) {
                throw new Error('Forbidden value (' + this.guildId + ') on element guildId.');
            }
            param1.writeVarInt(this.guildId);
            param1.writeUTF(this.guildName);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_BasicGuildInformations(param1);
        }

        public deserializeAs_BasicGuildInformations(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.guildId = param1.readVarUhInt();
            if (this.guildId < 0) {
                throw new Error('Forbidden value (' + this.guildId + ') on element of BasicGuildInformations.guildId.');
            }
            this.guildName = param1.readUTF();

        }
    }
    export class GameRolePlayNamedActorInformations extends GameRolePlayActorInformations implements INetworkType {
        public static ID: number = 154;

        name: string;

        constructor() {
            this.name = '';
            super();
        }

        public getTypeId(): number {
            return GameRolePlayNamedActorInformations.ID;
        }

        public reset(): void {
            this.name = '';
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameRolePlayNamedActorInformations(param1);
        }

        public serializeAs_GameRolePlayNamedActorInformations(param1: ICustomDataOutput): void {
            super.serializeAs_GameRolePlayActorInformations(param1);
            param1.writeUTF(this.name);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameRolePlayNamedActorInformations(param1);
        }

        public deserializeAs_GameRolePlayNamedActorInformations(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.name = param1.readUTF();

        }
    }
    export class GameRolePlayHumanoidInformations extends GameRolePlayNamedActorInformations implements INetworkType {
        public static ID: number = 159;

        humanoidInfo: HumanInformations;
        accountId: number;

        constructor() {
            this.humanoidInfo = new HumanInformations();
            this.accountId = 0;
            super();
        }

        public getTypeId(): number {
            return GameRolePlayHumanoidInformations.ID;
        }

        public reset(): void {
            this.humanoidInfo = new HumanInformations();
            this.accountId = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameRolePlayHumanoidInformations(param1);
        }

        public serializeAs_GameRolePlayHumanoidInformations(param1: ICustomDataOutput): void {
            super.serializeAs_GameRolePlayNamedActorInformations(param1);
            param1.writeShort(this.humanoidInfo.getTypeId());
            this.humanoidInfo.serialize(param1);
            if (this.accountId < 0) {
                throw new Error('Forbidden value (' + this.accountId + ') on element accountId.');
            }
            param1.writeInt(this.accountId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameRolePlayHumanoidInformations(param1);
        }

        public deserializeAs_GameRolePlayHumanoidInformations(param1: ICustomDataInput): void {
            super.deserialize(param1);
            var _loc2_: number = param1.readUnsignedShort();
            this.humanoidInfo = <HumanInformations>ProtocolTypeManager.getInstance(HumanInformations, _loc2_);
            this.humanoidInfo.deserialize(param1);
            this.accountId = param1.readInt();
            if (this.accountId < 0) {
                throw new Error('Forbidden value (' + this.accountId + ') on element of GameRolePlayHumanoidInformations.accountId.');
            }

        }
    }
    export class GameRolePlayCharacterInformations extends GameRolePlayHumanoidInformations implements INetworkType {
        public static ID: number = 36;

        alignmentInfos: ActorAlignmentInformations;

        constructor() {
            this.alignmentInfos = new ActorAlignmentInformations();
            super();
        }

        public getTypeId(): number {
            return GameRolePlayCharacterInformations.ID;
        }

        public reset(): void {
            this.alignmentInfos = new ActorAlignmentInformations();
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameRolePlayCharacterInformations(param1);
        }

        public serializeAs_GameRolePlayCharacterInformations(param1: ICustomDataOutput): void {
            super.serializeAs_GameRolePlayHumanoidInformations(param1);
            this.alignmentInfos.serializeAs_ActorAlignmentInformations(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameRolePlayCharacterInformations(param1);
        }

        public deserializeAs_GameRolePlayCharacterInformations(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.alignmentInfos = new ActorAlignmentInformations();
            this.alignmentInfos.deserialize(param1);

        }
    }
    export class GameRolePlayGroupMonsterInformations extends GameRolePlayActorInformations implements INetworkType {
        public static ID: number = 160;

        staticInfos: GroupMonsterStaticInformations;
        creationTime: number;
        ageBonusRate: number;
        lootShare: number;
        alignmentSide: number;
        keyRingBonus: boolean;
        hasHardcoreDrop: boolean;
        hasAVARewardToken: boolean;

        constructor() {
            this.staticInfos = new GroupMonsterStaticInformations();
            this.creationTime = 0;
            this.ageBonusRate = 0;
            this.lootShare = 0;
            this.alignmentSide = 0;
            this.keyRingBonus = false;
            this.hasHardcoreDrop = false;
            this.hasAVARewardToken = false;
            super();
        }

        public getTypeId(): number {
            return GameRolePlayGroupMonsterInformations.ID;
        }

        public reset(): void {
            this.staticInfos = new GroupMonsterStaticInformations();
            this.creationTime = 0;
            this.ageBonusRate = 0;
            this.lootShare = 0;
            this.alignmentSide = 0;
            this.keyRingBonus = false;
            this.hasHardcoreDrop = false;
            this.hasAVARewardToken = false;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameRolePlayGroupMonsterInformations(param1);
        }

        public serializeAs_GameRolePlayGroupMonsterInformations(param1: ICustomDataOutput): void {
            super.serializeAs_GameRolePlayActorInformations(param1);
            var _loc2_: number = 0;
            _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 0, this.keyRingBonus);
            _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 1, this.hasHardcoreDrop);
            _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 2, this.hasAVARewardToken);
            param1.writeByte(_loc2_);
            param1.writeShort(this.staticInfos.getTypeId());
            this.staticInfos.serialize(param1);
            if (this.creationTime < 0 || this.creationTime > 9.007199254740992E15) {
                throw new Error('Forbidden value (' + this.creationTime + ') on element creationTime.');
            }
            param1.writeDouble(this.creationTime);
            if (this.ageBonusRate < 0) {
                throw new Error('Forbidden value (' + this.ageBonusRate + ') on element ageBonusRate.');
            }
            param1.writeInt(this.ageBonusRate);
            if (this.lootShare < -1 || this.lootShare > 8) {
                throw new Error('Forbidden value (' + this.lootShare + ') on element lootShare.');
            }
            param1.writeByte(this.lootShare);
            param1.writeByte(this.alignmentSide);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameRolePlayGroupMonsterInformations(param1);
        }

        public deserializeAs_GameRolePlayGroupMonsterInformations(param1: ICustomDataInput): void {
            super.deserialize(param1);
            var _loc2_: number = param1.readByte();
            this.keyRingBonus = BooleanByteWrapper.getFlag(_loc2_, 0);
            this.hasHardcoreDrop = BooleanByteWrapper.getFlag(_loc2_, 1);
            this.hasAVARewardToken = BooleanByteWrapper.getFlag(_loc2_, 2);
            var _loc3_: number = param1.readUnsignedShort();
            this.staticInfos = <GroupMonsterStaticInformations>ProtocolTypeManager.getInstance(GroupMonsterStaticInformations, _loc3_);
            this.staticInfos.deserialize(param1);
            this.creationTime = param1.readDouble();
            if (this.creationTime < 0 || this.creationTime > 9.007199254740992E15) {
                throw new Error('Forbidden value (' + this.creationTime + ') on element of GameRolePlayGroupMonsterInformations.creationTime.');
            }
            this.ageBonusRate = param1.readInt();
            if (this.ageBonusRate < 0) {
                throw new Error('Forbidden value (' + this.ageBonusRate + ') on element of GameRolePlayGroupMonsterInformations.ageBonusRate.');
            }
            this.lootShare = param1.readByte();
            if (this.lootShare < -1 || this.lootShare > 8) {
                throw new Error('Forbidden value (' + this.lootShare + ') on element of GameRolePlayGroupMonsterInformations.lootShare.');
            }
            this.alignmentSide = param1.readByte();

        }
    }
    export class GameRolePlayGroupMonsterWaveInformations extends GameRolePlayGroupMonsterInformations implements INetworkType {
        public static ID: number = 464;

        nbWaves: number;
        alternatives: GroupMonsterStaticInformations[];

        constructor() {
            this.nbWaves = 0;
            this.alternatives = [];
            super();
        }

        public getTypeId(): number {
            return GameRolePlayGroupMonsterWaveInformations.ID;
        }

        public reset(): void {
            this.nbWaves = 0;
            this.alternatives = [];
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameRolePlayGroupMonsterWaveInformations(param1);
        }

        public serializeAs_GameRolePlayGroupMonsterWaveInformations(param1: ICustomDataOutput): void {
            super.serializeAs_GameRolePlayGroupMonsterInformations(param1);
            if (this.nbWaves < 0) {
                throw new Error('Forbidden value (' + this.nbWaves + ') on element nbWaves.');
            }
            param1.writeByte(this.nbWaves);
            param1.writeShort(this.alternatives.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.alternatives.length) {
                param1.writeShort((this.alternatives[_loc2_]).getTypeId());
                (this.alternatives[_loc2_]).serialize(param1);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameRolePlayGroupMonsterWaveInformations(param1);
        }

        public deserializeAs_GameRolePlayGroupMonsterWaveInformations(param1: ICustomDataInput): void {
            var _loc4_: number = 0;
            var _loc5_: GroupMonsterStaticInformations = null;
            super.deserialize(param1);
            this.nbWaves = param1.readByte();
            if (this.nbWaves < 0) {
                throw new Error('Forbidden value (' + this.nbWaves + ') on element of GameRolePlayGroupMonsterWaveInformations.nbWaves.');
            }
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = param1.readUnsignedShort();
                _loc5_ = <GroupMonsterStaticInformations>ProtocolTypeManager.getInstance(GroupMonsterStaticInformations, _loc4_);
                _loc5_.deserialize(param1);
                this.alternatives.push(_loc5_);
                _loc3_++;
            }

        }
    }
    export class GameRolePlayMerchantInformations extends GameRolePlayNamedActorInformations implements INetworkType {
        public static ID: number = 129;

        sellType: number;
        options: HumanOption[];

        constructor() {
            this.sellType = 0;
            this.options = [];
            super();
        }

        public getTypeId(): number {
            return GameRolePlayMerchantInformations.ID;
        }

        public reset(): void {
            this.sellType = 0;
            this.options = [];
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameRolePlayMerchantInformations(param1);
        }

        public serializeAs_GameRolePlayMerchantInformations(param1: ICustomDataOutput): void {
            super.serializeAs_GameRolePlayNamedActorInformations(param1);
            if (this.sellType < 0) {
                throw new Error('Forbidden value (' + this.sellType + ') on element sellType.');
            }
            param1.writeByte(this.sellType);
            param1.writeShort(this.options.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.options.length) {
                param1.writeShort((this.options[_loc2_]).getTypeId());
                (this.options[_loc2_]).serialize(param1);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameRolePlayMerchantInformations(param1);
        }

        public deserializeAs_GameRolePlayMerchantInformations(param1: ICustomDataInput): void {
            var _loc4_: number = 0;
            var _loc5_: HumanOption = null;
            super.deserialize(param1);
            this.sellType = param1.readByte();
            if (this.sellType < 0) {
                throw new Error('Forbidden value (' + this.sellType + ') on element of GameRolePlayMerchantInformations.sellType.');
            }
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = param1.readUnsignedShort();
                _loc5_ = <HumanOption>ProtocolTypeManager.getInstance(HumanOption, _loc4_);
                _loc5_.deserialize(param1);
                this.options.push(_loc5_);
                _loc3_++;
            }

        }
    }
    export class GameRolePlayMountInformations extends GameRolePlayNamedActorInformations implements INetworkType {
        public static ID: number = 180;

        ownerName: string;
        level: number;

        constructor() {
            this.ownerName = '';
            this.level = 0;
            super();
        }

        public getTypeId(): number {
            return GameRolePlayMountInformations.ID;
        }

        public reset(): void {
            this.ownerName = '';
            this.level = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameRolePlayMountInformations(param1);
        }

        public serializeAs_GameRolePlayMountInformations(param1: ICustomDataOutput): void {
            super.serializeAs_GameRolePlayNamedActorInformations(param1);
            param1.writeUTF(this.ownerName);
            if (this.level < 0 || this.level > 255) {
                throw new Error('Forbidden value (' + this.level + ') on element level.');
            }
            param1.writeByte(this.level);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameRolePlayMountInformations(param1);
        }

        public deserializeAs_GameRolePlayMountInformations(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.ownerName = param1.readUTF();
            this.level = param1.readUnsignedByte();
            if (this.level < 0 || this.level > 255) {
                throw new Error('Forbidden value (' + this.level + ') on element of GameRolePlayMountInformations.level.');
            }

        }
    }
    export class GameRolePlayMutantInformations extends GameRolePlayHumanoidInformations implements INetworkType {
        public static ID: number = 3;

        monsterId: number;
        powerLevel: number;

        constructor() {
            this.monsterId = 0;
            this.powerLevel = 0;
            super();
        }

        public getTypeId(): number {
            return GameRolePlayMutantInformations.ID;
        }

        public reset(): void {
            this.monsterId = 0;
            this.powerLevel = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameRolePlayMutantInformations(param1);
        }

        public serializeAs_GameRolePlayMutantInformations(param1: ICustomDataOutput): void {
            super.serializeAs_GameRolePlayHumanoidInformations(param1);
            if (this.monsterId < 0) {
                throw new Error('Forbidden value (' + this.monsterId + ') on element monsterId.');
            }
            param1.writeVarShort(this.monsterId);
            param1.writeByte(this.powerLevel);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameRolePlayMutantInformations(param1);
        }

        public deserializeAs_GameRolePlayMutantInformations(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.monsterId = param1.readVarUhShort();
            if (this.monsterId < 0) {
                throw new Error('Forbidden value (' + this.monsterId + ') on element of GameRolePlayMutantInformations.monsterId.');
            }
            this.powerLevel = param1.readByte();

        }
    }
    export class GameRolePlayNpcInformations extends GameRolePlayActorInformations implements INetworkType {
        public static ID: number = 156;

        npcId: number;
        sex: boolean;
        specialArtworkId: number;

        constructor() {
            this.npcId = 0;
            this.sex = false;
            this.specialArtworkId = 0;
            super();
        }

        public getTypeId(): number {
            return GameRolePlayNpcInformations.ID;
        }

        public reset(): void {
            this.npcId = 0;
            this.sex = false;
            this.specialArtworkId = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameRolePlayNpcInformations(param1);
        }

        public serializeAs_GameRolePlayNpcInformations(param1: ICustomDataOutput): void {
            super.serializeAs_GameRolePlayActorInformations(param1);
            if (this.npcId < 0) {
                throw new Error('Forbidden value (' + this.npcId + ') on element npcId.');
            }
            param1.writeVarShort(this.npcId);
            param1.writeBoolean(this.sex);
            if (this.specialArtworkId < 0) {
                throw new Error('Forbidden value (' + this.specialArtworkId + ') on element specialArtworkId.');
            }
            param1.writeVarShort(this.specialArtworkId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameRolePlayNpcInformations(param1);
        }

        public deserializeAs_GameRolePlayNpcInformations(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.npcId = param1.readVarUhShort();
            if (this.npcId < 0) {
                throw new Error('Forbidden value (' + this.npcId + ') on element of GameRolePlayNpcInformations.npcId.');
            }
            this.sex = param1.readBoolean();
            this.specialArtworkId = param1.readVarUhShort();
            if (this.specialArtworkId < 0) {
                throw new Error('Forbidden value (' + this.specialArtworkId + ') on element of GameRolePlayNpcInformations.specialArtworkId.');
            }

        }
    }
    export class GameRolePlayNpcWithQuestInformations extends GameRolePlayNpcInformations implements INetworkType {
        public static ID: number = 383;

        questFlag: GameRolePlayNpcQuestFlag;

        constructor() {
            this.questFlag = new GameRolePlayNpcQuestFlag();
            super();
        }

        public getTypeId(): number {
            return GameRolePlayNpcWithQuestInformations.ID;
        }

        public reset(): void {
            this.questFlag = new GameRolePlayNpcQuestFlag();
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameRolePlayNpcWithQuestInformations(param1);
        }

        public serializeAs_GameRolePlayNpcWithQuestInformations(param1: ICustomDataOutput): void {
            super.serializeAs_GameRolePlayNpcInformations(param1);
            this.questFlag.serializeAs_GameRolePlayNpcQuestFlag(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameRolePlayNpcWithQuestInformations(param1);
        }

        public deserializeAs_GameRolePlayNpcWithQuestInformations(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.questFlag = new GameRolePlayNpcQuestFlag();
            this.questFlag.deserialize(param1);

        }
    }
    export class GameRolePlayPortalInformations extends GameRolePlayActorInformations implements INetworkType {
        public static ID: number = 467;

        portal: PortalInformation;

        constructor() {
            this.portal = new PortalInformation();
            super();
        }

        public getTypeId(): number {
            return GameRolePlayPortalInformations.ID;
        }

        public reset(): void {
            this.portal = new PortalInformation();
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameRolePlayPortalInformations(param1);
        }

        public serializeAs_GameRolePlayPortalInformations(param1: ICustomDataOutput): void {
            super.serializeAs_GameRolePlayActorInformations(param1);
            param1.writeShort(this.portal.getTypeId());
            this.portal.serialize(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameRolePlayPortalInformations(param1);
        }

        public deserializeAs_GameRolePlayPortalInformations(param1: ICustomDataInput): void {
            super.deserialize(param1);
            var _loc2_: number = param1.readUnsignedShort();
            this.portal = <PortalInformation>ProtocolTypeManager.getInstance(PortalInformation, _loc2_);
            this.portal.deserialize(param1);

        }
    }
    export class GameRolePlayPrismInformations extends GameRolePlayActorInformations implements INetworkType {
        public static ID: number = 161;

        prism: PrismInformation;

        constructor() {
            this.prism = new PrismInformation();
            super();
        }

        public getTypeId(): number {
            return GameRolePlayPrismInformations.ID;
        }

        public reset(): void {
            this.prism = new PrismInformation();
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameRolePlayPrismInformations(param1);
        }

        public serializeAs_GameRolePlayPrismInformations(param1: ICustomDataOutput): void {
            super.serializeAs_GameRolePlayActorInformations(param1);
            param1.writeShort(this.prism.getTypeId());
            this.prism.serialize(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameRolePlayPrismInformations(param1);
        }

        public deserializeAs_GameRolePlayPrismInformations(param1: ICustomDataInput): void {
            super.deserialize(param1);
            var _loc2_: number = param1.readUnsignedShort();
            this.prism = <PrismInformation>ProtocolTypeManager.getInstance(PrismInformation, _loc2_);
            this.prism.deserialize(param1);

        }
    }
    export class GameRolePlayTreasureHintInformations extends GameRolePlayActorInformations implements INetworkType {
        public static ID: number = 471;

        npcId: number;

        constructor() {
            this.npcId = 0;
            super();
        }

        public getTypeId(): number {
            return GameRolePlayTreasureHintInformations.ID;
        }

        public reset(): void {
            this.npcId = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameRolePlayTreasureHintInformations(param1);
        }

        public serializeAs_GameRolePlayTreasureHintInformations(param1: ICustomDataOutput): void {
            super.serializeAs_GameRolePlayActorInformations(param1);
            if (this.npcId < 0) {
                throw new Error('Forbidden value (' + this.npcId + ') on element npcId.');
            }
            param1.writeVarShort(this.npcId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameRolePlayTreasureHintInformations(param1);
        }

        public deserializeAs_GameRolePlayTreasureHintInformations(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.npcId = param1.readVarUhShort();
            if (this.npcId < 0) {
                throw new Error('Forbidden value (' + this.npcId + ') on element of GameRolePlayTreasureHintInformations.npcId.');
            }

        }
    }
    export class GroupMonsterStaticInformations implements INetworkType {
        public static ID: number = 140;

        mainCreatureLightInfos: MonsterInGroupLightInformations;
        underlings: MonsterInGroupInformations[];

        constructor() {
            this.mainCreatureLightInfos = new MonsterInGroupLightInformations();
            this.underlings = [];
        }

        public getTypeId(): number {
            return GroupMonsterStaticInformations.ID;
        }

        public reset(): void {
            this.mainCreatureLightInfos = new MonsterInGroupLightInformations();
            this.underlings = [];
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GroupMonsterStaticInformations(param1);
        }

        public serializeAs_GroupMonsterStaticInformations(param1: ICustomDataOutput): void {
            this.mainCreatureLightInfos.serializeAs_MonsterInGroupLightInformations(param1);
            param1.writeShort(this.underlings.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.underlings.length) {
                (this.underlings[_loc2_]).serializeAs_MonsterInGroupInformations(param1);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GroupMonsterStaticInformations(param1);
        }

        public deserializeAs_GroupMonsterStaticInformations(param1: ICustomDataInput): void {
            var _loc4_: MonsterInGroupInformations = null;
            this.mainCreatureLightInfos = new MonsterInGroupLightInformations();
            this.mainCreatureLightInfos.deserialize(param1);
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = new MonsterInGroupInformations();
                _loc4_.deserialize(param1);
                this.underlings.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class GroupMonsterStaticInformationsWithAlternatives extends GroupMonsterStaticInformations implements INetworkType {
        public static ID: number = 396;

        alternatives: AlternativeMonstersInGroupLightInformations[];

        constructor() {
            this.alternatives = [];
            super();
        }

        public getTypeId(): number {
            return GroupMonsterStaticInformationsWithAlternatives.ID;
        }

        public reset(): void {
            this.alternatives = [];
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GroupMonsterStaticInformationsWithAlternatives(param1);
        }

        public serializeAs_GroupMonsterStaticInformationsWithAlternatives(param1: ICustomDataOutput): void {
            super.serializeAs_GroupMonsterStaticInformations(param1);
            param1.writeShort(this.alternatives.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.alternatives.length) {
                (this.alternatives[_loc2_]).serializeAs_AlternativeMonstersInGroupLightInformations(param1);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GroupMonsterStaticInformationsWithAlternatives(param1);
        }

        public deserializeAs_GroupMonsterStaticInformationsWithAlternatives(param1: ICustomDataInput): void {
            var _loc4_: AlternativeMonstersInGroupLightInformations = null;
            super.deserialize(param1);
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = new AlternativeMonstersInGroupLightInformations();
                _loc4_.deserialize(param1);
                this.alternatives.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class GuildInformations extends BasicGuildInformations implements INetworkType {
        public static ID: number = 127;

        guildEmblem: GuildEmblem;

        constructor() {
            this.guildEmblem = new GuildEmblem();
            super();
        }

        public getTypeId(): number {
            return GuildInformations.ID;
        }

        public reset(): void {
            this.guildEmblem = new GuildEmblem();
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GuildInformations(param1);
        }

        public serializeAs_GuildInformations(param1: ICustomDataOutput): void {
            super.serializeAs_BasicGuildInformations(param1);
            this.guildEmblem.serializeAs_GuildEmblem(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GuildInformations(param1);
        }

        public deserializeAs_GuildInformations(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.guildEmblem = new GuildEmblem();
            this.guildEmblem.deserialize(param1);

        }
    }
    export class GuildInAllianceInformations extends GuildInformations implements INetworkType {
        public static ID: number = 420;

        guildLevel: number;
        nbMembers: number;
        enabled: boolean;

        constructor() {
            this.guildLevel = 0;
            this.nbMembers = 0;
            this.enabled = false;
            super();
        }

        public getTypeId(): number {
            return GuildInAllianceInformations.ID;
        }

        public reset(): void {
            this.guildLevel = 0;
            this.nbMembers = 0;
            this.enabled = false;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GuildInAllianceInformations(param1);
        }

        public serializeAs_GuildInAllianceInformations(param1: ICustomDataOutput): void {
            super.serializeAs_GuildInformations(param1);
            if (this.guildLevel < 1 || this.guildLevel > 200) {
                throw new Error('Forbidden value (' + this.guildLevel + ') on element guildLevel.');
            }
            param1.writeByte(this.guildLevel);
            if (this.nbMembers < 1 || this.nbMembers > 240) {
                throw new Error('Forbidden value (' + this.nbMembers + ') on element nbMembers.');
            }
            param1.writeByte(this.nbMembers);
            param1.writeBoolean(this.enabled);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GuildInAllianceInformations(param1);
        }

        public deserializeAs_GuildInAllianceInformations(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.guildLevel = param1.readUnsignedByte();
            if (this.guildLevel < 1 || this.guildLevel > 200) {
                throw new Error('Forbidden value (' + this.guildLevel + ') on element of GuildInAllianceInformations.guildLevel.');
            }
            this.nbMembers = param1.readUnsignedByte();
            if (this.nbMembers < 1 || this.nbMembers > 240) {
                throw new Error('Forbidden value (' + this.nbMembers + ') on element of GuildInAllianceInformations.nbMembers.');
            }
            this.enabled = param1.readBoolean();

        }
    }
    export class HumanInformations implements INetworkType {
        public static ID: number = 157;

        restrictions: ActorRestrictionsInformations;
        sex: boolean;
        options: HumanOption[];

        constructor() {
            this.restrictions = new ActorRestrictionsInformations();
            this.sex = false;
            this.options = [];
        }

        public getTypeId(): number {
            return HumanInformations.ID;
        }

        public reset(): void {
            this.restrictions = new ActorRestrictionsInformations();
            this.sex = false;
            this.options = [];
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_HumanInformations(param1);
        }

        public serializeAs_HumanInformations(param1: ICustomDataOutput): void {
            this.restrictions.serializeAs_ActorRestrictionsInformations(param1);
            param1.writeBoolean(this.sex);
            param1.writeShort(this.options.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.options.length) {
                param1.writeShort((this.options[_loc2_]).getTypeId());
                (this.options[_loc2_]).serialize(param1);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_HumanInformations(param1);
        }

        public deserializeAs_HumanInformations(param1: ICustomDataInput): void {
            var _loc4_: number = 0;
            var _loc5_: HumanOption = null;
            this.restrictions = new ActorRestrictionsInformations();
            this.restrictions.deserialize(param1);
            this.sex = param1.readBoolean();
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = param1.readUnsignedShort();
                _loc5_ = <HumanOption>ProtocolTypeManager.getInstance(HumanOption, _loc4_);
                _loc5_.deserialize(param1);
                this.options.push(_loc5_);
                _loc3_++;
            }

        }
    }
    export class HumanOption implements INetworkType {
        public static ID: number = 406;



        constructor() {

        }

        public getTypeId(): number {
            return HumanOption.ID;
        }

        public reset(): void {

        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_HumanOption(param1);
        }

        public serializeAs_HumanOption(param1: ICustomDataOutput): void {

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_HumanOption(param1);
        }

        public deserializeAs_HumanOption(param1: ICustomDataInput): void {

        }
    }
    export class HumanOptionAlliance extends HumanOption implements INetworkType {
        public static ID: number = 425;

        allianceInformations: AllianceInformations;
        aggressable: number;

        constructor() {
            this.allianceInformations = new AllianceInformations();
            this.aggressable = 0;
            super();
        }

        public getTypeId(): number {
            return HumanOptionAlliance.ID;
        }

        public reset(): void {
            this.allianceInformations = new AllianceInformations();
            this.aggressable = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_HumanOptionAlliance(param1);
        }

        public serializeAs_HumanOptionAlliance(param1: ICustomDataOutput): void {
            super.serializeAs_HumanOption(param1);
            this.allianceInformations.serializeAs_AllianceInformations(param1);
            param1.writeByte(this.aggressable);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_HumanOptionAlliance(param1);
        }

        public deserializeAs_HumanOptionAlliance(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.allianceInformations = new AllianceInformations();
            this.allianceInformations.deserialize(param1);
            this.aggressable = param1.readByte();
            if (this.aggressable < 0) {
                throw new Error('Forbidden value (' + this.aggressable + ') on element of HumanOptionAlliance.aggressable.');
            }

        }
    }
    export class HumanOptionEmote extends HumanOption implements INetworkType {
        public static ID: number = 407;

        emoteId: number;
        emoteStartTime: number;

        constructor() {
            this.emoteId = 0;
            this.emoteStartTime = 0;
            super();
        }

        public getTypeId(): number {
            return HumanOptionEmote.ID;
        }

        public reset(): void {
            this.emoteId = 0;
            this.emoteStartTime = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_HumanOptionEmote(param1);
        }

        public serializeAs_HumanOptionEmote(param1: ICustomDataOutput): void {
            super.serializeAs_HumanOption(param1);
            if (this.emoteId < 0 || this.emoteId > 255) {
                throw new Error('Forbidden value (' + this.emoteId + ') on element emoteId.');
            }
            param1.writeByte(this.emoteId);
            if (this.emoteStartTime < -9.007199254740992E15 || this.emoteStartTime > 9.007199254740992E15) {
                throw new Error('Forbidden value (' + this.emoteStartTime + ') on element emoteStartTime.');
            }
            param1.writeDouble(this.emoteStartTime);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_HumanOptionEmote(param1);
        }

        public deserializeAs_HumanOptionEmote(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.emoteId = param1.readUnsignedByte();
            if (this.emoteId < 0 || this.emoteId > 255) {
                throw new Error('Forbidden value (' + this.emoteId + ') on element of HumanOptionEmote.emoteId.');
            }
            this.emoteStartTime = param1.readDouble();
            if (this.emoteStartTime < -9.007199254740992E15 || this.emoteStartTime > 9.007199254740992E15) {
                throw new Error('Forbidden value (' + this.emoteStartTime + ') on element of HumanOptionEmote.emoteStartTime.');
            }

        }
    }
    export class HumanOptionFollowers extends HumanOption implements INetworkType {
        public static ID: number = 410;

        followingCharactersLook: IndexedEntityLook[];

        constructor() {
            this.followingCharactersLook = [];
            super();
        }

        public getTypeId(): number {
            return HumanOptionFollowers.ID;
        }

        public reset(): void {
            this.followingCharactersLook = [];
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_HumanOptionFollowers(param1);
        }

        public serializeAs_HumanOptionFollowers(param1: ICustomDataOutput): void {
            super.serializeAs_HumanOption(param1);
            param1.writeShort(this.followingCharactersLook.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.followingCharactersLook.length) {
                (this.followingCharactersLook[_loc2_]).serializeAs_IndexedEntityLook(param1);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_HumanOptionFollowers(param1);
        }

        public deserializeAs_HumanOptionFollowers(param1: ICustomDataInput): void {
            var _loc4_: IndexedEntityLook = null;
            super.deserialize(param1);
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = new IndexedEntityLook();
                _loc4_.deserialize(param1);
                this.followingCharactersLook.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class HumanOptionGuild extends HumanOption implements INetworkType {
        public static ID: number = 409;

        guildInformations: GuildInformations;

        constructor() {
            this.guildInformations = new GuildInformations();
            super();
        }

        public getTypeId(): number {
            return HumanOptionGuild.ID;
        }

        public reset(): void {
            this.guildInformations = new GuildInformations();
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_HumanOptionGuild(param1);
        }

        public serializeAs_HumanOptionGuild(param1: ICustomDataOutput): void {
            super.serializeAs_HumanOption(param1);
            this.guildInformations.serializeAs_GuildInformations(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_HumanOptionGuild(param1);
        }

        public deserializeAs_HumanOptionGuild(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.guildInformations = new GuildInformations();
            this.guildInformations.deserialize(param1);

        }
    }
    export class HumanOptionObjectUse extends HumanOption implements INetworkType {
        public static ID: number = 449;

        delayTypeId: number;
        delayEndTime: number;
        objectGID: number;

        constructor() {
            this.delayTypeId = 0;
            this.delayEndTime = 0;
            this.objectGID = 0;
            super();
        }

        public getTypeId(): number {
            return HumanOptionObjectUse.ID;
        }

        public reset(): void {
            this.delayTypeId = 0;
            this.delayEndTime = 0;
            this.objectGID = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_HumanOptionObjectUse(param1);
        }

        public serializeAs_HumanOptionObjectUse(param1: ICustomDataOutput): void {
            super.serializeAs_HumanOption(param1);
            param1.writeByte(this.delayTypeId);
            if (this.delayEndTime < 0 || this.delayEndTime > 9.007199254740992E15) {
                throw new Error('Forbidden value (' + this.delayEndTime + ') on element delayEndTime.');
            }
            param1.writeDouble(this.delayEndTime);
            if (this.objectGID < 0) {
                throw new Error('Forbidden value (' + this.objectGID + ') on element objectGID.');
            }
            param1.writeVarShort(this.objectGID);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_HumanOptionObjectUse(param1);
        }

        public deserializeAs_HumanOptionObjectUse(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.delayTypeId = param1.readByte();
            if (this.delayTypeId < 0) {
                throw new Error('Forbidden value (' + this.delayTypeId + ') on element of HumanOptionObjectUse.delayTypeId.');
            }
            this.delayEndTime = param1.readDouble();
            if (this.delayEndTime < 0 || this.delayEndTime > 9.007199254740992E15) {
                throw new Error('Forbidden value (' + this.delayEndTime + ') on element of HumanOptionObjectUse.delayEndTime.');
            }
            this.objectGID = param1.readVarUhShort();
            if (this.objectGID < 0) {
                throw new Error('Forbidden value (' + this.objectGID + ') on element of HumanOptionObjectUse.objectGID.');
            }

        }
    }
    export class HumanOptionOrnament extends HumanOption implements INetworkType {
        public static ID: number = 411;

        ornamentId: number;

        constructor() {
            this.ornamentId = 0;
            super();
        }

        public getTypeId(): number {
            return HumanOptionOrnament.ID;
        }

        public reset(): void {
            this.ornamentId = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_HumanOptionOrnament(param1);
        }

        public serializeAs_HumanOptionOrnament(param1: ICustomDataOutput): void {
            super.serializeAs_HumanOption(param1);
            if (this.ornamentId < 0) {
                throw new Error('Forbidden value (' + this.ornamentId + ') on element ornamentId.');
            }
            param1.writeVarShort(this.ornamentId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_HumanOptionOrnament(param1);
        }

        public deserializeAs_HumanOptionOrnament(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.ornamentId = param1.readVarUhShort();
            if (this.ornamentId < 0) {
                throw new Error('Forbidden value (' + this.ornamentId + ') on element of HumanOptionOrnament.ornamentId.');
            }

        }
    }
    export class HumanOptionTitle extends HumanOption implements INetworkType {
        public static ID: number = 408;

        titleId: number;
        titleParam: string;

        constructor() {
            this.titleId = 0;
            this.titleParam = '';
            super();
        }

        public getTypeId(): number {
            return HumanOptionTitle.ID;
        }

        public reset(): void {
            this.titleId = 0;
            this.titleParam = '';
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_HumanOptionTitle(param1);
        }

        public serializeAs_HumanOptionTitle(param1: ICustomDataOutput): void {
            super.serializeAs_HumanOption(param1);
            if (this.titleId < 0) {
                throw new Error('Forbidden value (' + this.titleId + ') on element titleId.');
            }
            param1.writeVarShort(this.titleId);
            param1.writeUTF(this.titleParam);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_HumanOptionTitle(param1);
        }

        public deserializeAs_HumanOptionTitle(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.titleId = param1.readVarUhShort();
            if (this.titleId < 0) {
                throw new Error('Forbidden value (' + this.titleId + ') on element of HumanOptionTitle.titleId.');
            }
            this.titleParam = param1.readUTF();

        }
    }
    export class MonsterInGroupLightInformations implements INetworkType {
        public static ID: number = 395;

        creatureGenericId: number;
        grade: number;

        constructor() {
            this.creatureGenericId = 0;
            this.grade = 0;
        }

        public getTypeId(): number {
            return MonsterInGroupLightInformations.ID;
        }

        public reset(): void {
            this.creatureGenericId = 0;
            this.grade = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_MonsterInGroupLightInformations(param1);
        }

        public serializeAs_MonsterInGroupLightInformations(param1: ICustomDataOutput): void {
            param1.writeInt(this.creatureGenericId);
            if (this.grade < 0) {
                throw new Error('Forbidden value (' + this.grade + ') on element grade.');
            }
            param1.writeByte(this.grade);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_MonsterInGroupLightInformations(param1);
        }

        public deserializeAs_MonsterInGroupLightInformations(param1: ICustomDataInput): void {
            this.creatureGenericId = param1.readInt();
            this.grade = param1.readByte();
            if (this.grade < 0) {
                throw new Error('Forbidden value (' + this.grade + ') on element of MonsterInGroupLightInformations.grade.');
            }

        }
    }
    export class MonsterInGroupInformations extends MonsterInGroupLightInformations implements INetworkType {
        public static ID: number = 144;

        look: EntityLook;

        constructor() {
            this.look = new EntityLook();
            super();
        }

        public getTypeId(): number {
            return MonsterInGroupInformations.ID;
        }

        public reset(): void {
            this.look = new EntityLook();
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_MonsterInGroupInformations(param1);
        }

        public serializeAs_MonsterInGroupInformations(param1: ICustomDataOutput): void {
            super.serializeAs_MonsterInGroupLightInformations(param1);
            this.look.serializeAs_EntityLook(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_MonsterInGroupInformations(param1);
        }

        public deserializeAs_MonsterInGroupInformations(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.look = new EntityLook();
            this.look.deserialize(param1);

        }
    }
    export class ObjectItemInRolePlay implements INetworkType {
        public static ID: number = 198;

        cellId: number;
        objectGID: number;

        constructor() {
            this.cellId = 0;
            this.objectGID = 0;
        }

        public getTypeId(): number {
            return ObjectItemInRolePlay.ID;
        }

        public reset(): void {
            this.cellId = 0;
            this.objectGID = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ObjectItemInRolePlay(param1);
        }

        public serializeAs_ObjectItemInRolePlay(param1: ICustomDataOutput): void {
            if (this.cellId < 0 || this.cellId > 559) {
                throw new Error('Forbidden value (' + this.cellId + ') on element cellId.');
            }
            param1.writeVarShort(this.cellId);
            if (this.objectGID < 0) {
                throw new Error('Forbidden value (' + this.objectGID + ') on element objectGID.');
            }
            param1.writeVarShort(this.objectGID);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ObjectItemInRolePlay(param1);
        }

        public deserializeAs_ObjectItemInRolePlay(param1: ICustomDataInput): void {
            this.cellId = param1.readVarUhShort();
            if (this.cellId < 0 || this.cellId > 559) {
                throw new Error('Forbidden value (' + this.cellId + ') on element of ObjectItemInRolePlay.cellId.');
            }
            this.objectGID = param1.readVarUhShort();
            if (this.objectGID < 0) {
                throw new Error('Forbidden value (' + this.objectGID + ') on element of ObjectItemInRolePlay.objectGID.');
            }

        }
    }
    export class DecraftedItemStackInfo implements INetworkType {
        public static ID: number = 481;

        objectUID: number;
        bonusMin: number;
        bonusMax: number;
        runesId: number[];
        runesQty: number[];

        constructor() {
            this.objectUID = 0;
            this.bonusMin = 0;
            this.bonusMax = 0;
            this.runesId = [];
            this.runesQty = [];
        }

        public getTypeId(): number {
            return DecraftedItemStackInfo.ID;
        }

        public reset(): void {
            this.objectUID = 0;
            this.bonusMin = 0;
            this.bonusMax = 0;
            this.runesId = [];
            this.runesQty = [];
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_DecraftedItemStackInfo(param1);
        }

        public serializeAs_DecraftedItemStackInfo(param1: ICustomDataOutput): void {
            if (this.objectUID < 0) {
                throw new Error('Forbidden value (' + this.objectUID + ') on element objectUID.');
            }
            param1.writeVarInt(this.objectUID);
            param1.writeFloat(this.bonusMin);
            param1.writeFloat(this.bonusMax);
            param1.writeShort(this.runesId.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.runesId.length) {
                if (this.runesId[_loc2_] < 0) {
                    throw new Error('Forbidden value (' + this.runesId[_loc2_] + ') on element 4 (starting at 1) of runesId.');
                }
                param1.writeVarShort(this.runesId[_loc2_]);
                _loc2_++;
            }
            param1.writeShort(this.runesQty.length);
            var _loc3_: number = 0;
            while (_loc3_ < this.runesQty.length) {
                if (this.runesQty[_loc3_] < 0) {
                    throw new Error('Forbidden value (' + this.runesQty[_loc3_] + ') on element 5 (starting at 1) of runesQty.');
                }
                param1.writeVarInt(this.runesQty[_loc3_]);
                _loc3_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_DecraftedItemStackInfo(param1);
        }

        public deserializeAs_DecraftedItemStackInfo(param1: ICustomDataInput): void {
            var _loc6_: number = 0;
            var _loc7_: number = 0;
            this.objectUID = param1.readVarUhInt();
            if (this.objectUID < 0) {
                throw new Error('Forbidden value (' + this.objectUID + ') on element of DecraftedItemStackInfo.objectUID.');
            }
            this.bonusMin = param1.readFloat();
            this.bonusMax = param1.readFloat();
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc6_ = param1.readVarUhShort();
                if (_loc6_ < 0) {
                    throw new Error('Forbidden value (' + _loc6_ + ') on elements of runesId.');
                }
                this.runesId.push(_loc6_);
                _loc3_++;
            }
            var _loc4_: number = param1.readUnsignedShort();
            var _loc5_: number = 0;
            while (_loc5_ < _loc4_) {
            _loc7_ = param1.readVarUhInt();
                if (_loc7_ < 0) {
                    throw new Error('Forbidden value (' + _loc7_ + ') on elements of runesQty.');
                }
                this.runesQty.push(_loc7_);
                _loc5_++;
            }

        }
    }
    export class JobCrafterDirectoryEntryJobInfo implements INetworkType {
        public static ID: number = 195;

        jobId: number;
        jobLevel: number;
        free: boolean;
        minLevel: number;

        constructor() {
            this.jobId = 0;
            this.jobLevel = 0;
            this.free = false;
            this.minLevel = 0;
        }

        public getTypeId(): number {
            return JobCrafterDirectoryEntryJobInfo.ID;
        }

        public reset(): void {
            this.jobId = 0;
            this.jobLevel = 0;
            this.free = false;
            this.minLevel = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_JobCrafterDirectoryEntryJobInfo(param1);
        }

        public serializeAs_JobCrafterDirectoryEntryJobInfo(param1: ICustomDataOutput): void {
            if (this.jobId < 0) {
                throw new Error('Forbidden value (' + this.jobId + ') on element jobId.');
            }
            param1.writeByte(this.jobId);
            if (this.jobLevel < 1 || this.jobLevel > 200) {
                throw new Error('Forbidden value (' + this.jobLevel + ') on element jobLevel.');
            }
            param1.writeByte(this.jobLevel);
            param1.writeBoolean(this.free);
            if (this.minLevel < 0 || this.minLevel > 255) {
                throw new Error('Forbidden value (' + this.minLevel + ') on element minLevel.');
            }
            param1.writeByte(this.minLevel);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_JobCrafterDirectoryEntryJobInfo(param1);
        }

        public deserializeAs_JobCrafterDirectoryEntryJobInfo(param1: ICustomDataInput): void {
            this.jobId = param1.readByte();
            if (this.jobId < 0) {
                throw new Error('Forbidden value (' + this.jobId + ') on element of JobCrafterDirectoryEntryJobInfo.jobId.');
            }
            this.jobLevel = param1.readUnsignedByte();
            if (this.jobLevel < 1 || this.jobLevel > 200) {
                throw new Error('Forbidden value (' + this.jobLevel + ') on element of JobCrafterDirectoryEntryJobInfo.jobLevel.');
            }
            this.free = param1.readBoolean();
            this.minLevel = param1.readUnsignedByte();
            if (this.minLevel < 0 || this.minLevel > 255) {
                throw new Error('Forbidden value (' + this.minLevel + ') on element of JobCrafterDirectoryEntryJobInfo.minLevel.');
            }

        }
    }
    export class JobCrafterDirectoryEntryPlayerInfo implements INetworkType {
        public static ID: number = 194;

        playerId: number;
        playerName: string;
        alignmentSide: number;
        breed: number;
        sex: boolean;
        isInWorkshop: boolean;
        worldX: number;
        worldY: number;
        mapId: number;
        subAreaId: number;
        status: PlayerStatus;

        constructor() {
            this.playerId = 0;
            this.playerName = '';
            this.alignmentSide = 0;
            this.breed = 0;
            this.sex = false;
            this.isInWorkshop = false;
            this.worldX = 0;
            this.worldY = 0;
            this.mapId = 0;
            this.subAreaId = 0;
            this.status = new PlayerStatus();
        }

        public getTypeId(): number {
            return JobCrafterDirectoryEntryPlayerInfo.ID;
        }

        public reset(): void {
            this.playerId = 0;
            this.playerName = '';
            this.alignmentSide = 0;
            this.breed = 0;
            this.sex = false;
            this.isInWorkshop = false;
            this.worldX = 0;
            this.worldY = 0;
            this.mapId = 0;
            this.subAreaId = 0;
            this.status = new PlayerStatus();
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_JobCrafterDirectoryEntryPlayerInfo(param1);
        }

        public serializeAs_JobCrafterDirectoryEntryPlayerInfo(param1: ICustomDataOutput): void {
            if (this.playerId < 0) {
                throw new Error('Forbidden value (' + this.playerId + ') on element playerId.');
            }
            param1.writeVarInt(this.playerId);
            param1.writeUTF(this.playerName);
            param1.writeByte(this.alignmentSide);
            param1.writeByte(this.breed);
            param1.writeBoolean(this.sex);
            param1.writeBoolean(this.isInWorkshop);
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error('Forbidden value (' + this.worldX + ') on element worldX.');
            }
            param1.writeShort(this.worldX);
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error('Forbidden value (' + this.worldY + ') on element worldY.');
            }
            param1.writeShort(this.worldY);
            param1.writeInt(this.mapId);
            if (this.subAreaId < 0) {
                throw new Error('Forbidden value (' + this.subAreaId + ') on element subAreaId.');
            }
            param1.writeVarShort(this.subAreaId);
            param1.writeShort(this.status.getTypeId());
            this.status.serialize(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_JobCrafterDirectoryEntryPlayerInfo(param1);
        }

        public deserializeAs_JobCrafterDirectoryEntryPlayerInfo(param1: ICustomDataInput): void {
            this.playerId = param1.readVarUhInt();
            if (this.playerId < 0) {
                throw new Error('Forbidden value (' + this.playerId + ') on element of JobCrafterDirectoryEntryPlayerInfo.playerId.');
            }
            this.playerName = param1.readUTF();
            this.alignmentSide = param1.readByte();
            this.breed = param1.readByte();
            if (this.breed < PlayableBreedEnum.Feca || this.breed > PlayableBreedEnum.Eliotrope) {
                throw new Error('Forbidden value (' + this.breed + ') on element of JobCrafterDirectoryEntryPlayerInfo.breed.');
            }
            this.sex = param1.readBoolean();
            this.isInWorkshop = param1.readBoolean();
            this.worldX = param1.readShort();
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error('Forbidden value (' + this.worldX + ') on element of JobCrafterDirectoryEntryPlayerInfo.worldX.');
            }
            this.worldY = param1.readShort();
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error('Forbidden value (' + this.worldY + ') on element of JobCrafterDirectoryEntryPlayerInfo.worldY.');
            }
            this.mapId = param1.readInt();
            this.subAreaId = param1.readVarUhShort();
            if (this.subAreaId < 0) {
                throw new Error('Forbidden value (' + this.subAreaId + ') on element of JobCrafterDirectoryEntryPlayerInfo.subAreaId.');
            }
            var _loc2_: number = param1.readUnsignedShort();
            this.status = <PlayerStatus>ProtocolTypeManager.getInstance(PlayerStatus, _loc2_);
            this.status.deserialize(param1);

        }
    }
    export class JobCrafterDirectoryListEntry implements INetworkType {
        public static ID: number = 196;

        playerInfo: JobCrafterDirectoryEntryPlayerInfo;
        jobInfo: JobCrafterDirectoryEntryJobInfo;

        constructor() {
            this.playerInfo = new JobCrafterDirectoryEntryPlayerInfo();
            this.jobInfo = new JobCrafterDirectoryEntryJobInfo();
        }

        public getTypeId(): number {
            return JobCrafterDirectoryListEntry.ID;
        }

        public reset(): void {
            this.playerInfo = new JobCrafterDirectoryEntryPlayerInfo();
            this.jobInfo = new JobCrafterDirectoryEntryJobInfo();
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_JobCrafterDirectoryListEntry(param1);
        }

        public serializeAs_JobCrafterDirectoryListEntry(param1: ICustomDataOutput): void {
            this.playerInfo.serializeAs_JobCrafterDirectoryEntryPlayerInfo(param1);
            this.jobInfo.serializeAs_JobCrafterDirectoryEntryJobInfo(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_JobCrafterDirectoryListEntry(param1);
        }

        public deserializeAs_JobCrafterDirectoryListEntry(param1: ICustomDataInput): void {
            this.playerInfo = new JobCrafterDirectoryEntryPlayerInfo();
            this.playerInfo.deserialize(param1);
            this.jobInfo = new JobCrafterDirectoryEntryJobInfo();
            this.jobInfo.deserialize(param1);

        }
    }
    export class JobCrafterDirectorySettings implements INetworkType {
        public static ID: number = 97;

        jobId: number;
        minLevel: number;
        free: boolean;

        constructor() {
            this.jobId = 0;
            this.minLevel = 0;
            this.free = false;
        }

        public getTypeId(): number {
            return JobCrafterDirectorySettings.ID;
        }

        public reset(): void {
            this.jobId = 0;
            this.minLevel = 0;
            this.free = false;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_JobCrafterDirectorySettings(param1);
        }

        public serializeAs_JobCrafterDirectorySettings(param1: ICustomDataOutput): void {
            if (this.jobId < 0) {
                throw new Error('Forbidden value (' + this.jobId + ') on element jobId.');
            }
            param1.writeByte(this.jobId);
            if (this.minLevel < 0 || this.minLevel > 255) {
                throw new Error('Forbidden value (' + this.minLevel + ') on element minLevel.');
            }
            param1.writeByte(this.minLevel);
            param1.writeBoolean(this.free);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_JobCrafterDirectorySettings(param1);
        }

        public deserializeAs_JobCrafterDirectorySettings(param1: ICustomDataInput): void {
            this.jobId = param1.readByte();
            if (this.jobId < 0) {
                throw new Error('Forbidden value (' + this.jobId + ') on element of JobCrafterDirectorySettings.jobId.');
            }
            this.minLevel = param1.readUnsignedByte();
            if (this.minLevel < 0 || this.minLevel > 255) {
                throw new Error('Forbidden value (' + this.minLevel + ') on element of JobCrafterDirectorySettings.minLevel.');
            }
            this.free = param1.readBoolean();

        }
    }
    export class JobDescription implements INetworkType {
        public static ID: number = 101;

        jobId: number;
        skills: SkillActionDescription[];

        constructor() {
            this.jobId = 0;
            this.skills = [];
        }

        public getTypeId(): number {
            return JobDescription.ID;
        }

        public reset(): void {
            this.jobId = 0;
            this.skills = [];
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_JobDescription(param1);
        }

        public serializeAs_JobDescription(param1: ICustomDataOutput): void {
            if (this.jobId < 0) {
                throw new Error('Forbidden value (' + this.jobId + ') on element jobId.');
            }
            param1.writeByte(this.jobId);
            param1.writeShort(this.skills.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.skills.length) {
                param1.writeShort((this.skills[_loc2_]).getTypeId());
                (this.skills[_loc2_]).serialize(param1);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_JobDescription(param1);
        }

        public deserializeAs_JobDescription(param1: ICustomDataInput): void {
            var _loc4_: number = 0;
            var _loc5_: SkillActionDescription = null;
            this.jobId = param1.readByte();
            if (this.jobId < 0) {
                throw new Error('Forbidden value (' + this.jobId + ') on element of JobDescription.jobId.');
            }
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = param1.readUnsignedShort();
                _loc5_ = <SkillActionDescription>ProtocolTypeManager.getInstance(SkillActionDescription, _loc4_);
                _loc5_.deserialize(param1);
                this.skills.push(_loc5_);
                _loc3_++;
            }

        }
    }
    export class JobExperience implements INetworkType {
        public static ID: number = 98;

        jobId: number;
        jobLevel: number;
        jobXP: number;
        jobXpLevelFloor: number;
        jobXpNextLevelFloor: number;

        constructor() {
            this.jobId = 0;
            this.jobLevel = 0;
            this.jobXP = 0;
            this.jobXpLevelFloor = 0;
            this.jobXpNextLevelFloor = 0;
        }

        public getTypeId(): number {
            return JobExperience.ID;
        }

        public reset(): void {
            this.jobId = 0;
            this.jobLevel = 0;
            this.jobXP = 0;
            this.jobXpLevelFloor = 0;
            this.jobXpNextLevelFloor = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_JobExperience(param1);
        }

        public serializeAs_JobExperience(param1: ICustomDataOutput): void {
            if (this.jobId < 0) {
                throw new Error('Forbidden value (' + this.jobId + ') on element jobId.');
            }
            param1.writeByte(this.jobId);
            if (this.jobLevel < 0 || this.jobLevel > 255) {
                throw new Error('Forbidden value (' + this.jobLevel + ') on element jobLevel.');
            }
            param1.writeByte(this.jobLevel);
            if (this.jobXP < 0 || this.jobXP > 9.007199254740992E15) {
                throw new Error('Forbidden value (' + this.jobXP + ') on element jobXP.');
            }
            param1.writeVarLong(this.jobXP);
            if (this.jobXpLevelFloor < 0 || this.jobXpLevelFloor > 9.007199254740992E15) {
                throw new Error('Forbidden value (' + this.jobXpLevelFloor + ') on element jobXpLevelFloor.');
            }
            param1.writeVarLong(this.jobXpLevelFloor);
            if (this.jobXpNextLevelFloor < 0 || this.jobXpNextLevelFloor > 9.007199254740992E15) {
                throw new Error('Forbidden value (' + this.jobXpNextLevelFloor + ') on element jobXpNextLevelFloor.');
            }
            param1.writeVarLong(this.jobXpNextLevelFloor);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_JobExperience(param1);
        }

        public deserializeAs_JobExperience(param1: ICustomDataInput): void {
            this.jobId = param1.readByte();
            if (this.jobId < 0) {
                throw new Error('Forbidden value (' + this.jobId + ') on element of JobExperience.jobId.');
            }
            this.jobLevel = param1.readUnsignedByte();
            if (this.jobLevel < 0 || this.jobLevel > 255) {
                throw new Error('Forbidden value (' + this.jobLevel + ') on element of JobExperience.jobLevel.');
            }
            this.jobXP = param1.readVarUhLong();
            if (this.jobXP < 0 || this.jobXP > 9.007199254740992E15) {
                throw new Error('Forbidden value (' + this.jobXP + ') on element of JobExperience.jobXP.');
            }
            this.jobXpLevelFloor = param1.readVarUhLong();
            if (this.jobXpLevelFloor < 0 || this.jobXpLevelFloor > 9.007199254740992E15) {
                throw new Error('Forbidden value (' + this.jobXpLevelFloor + ') on element of JobExperience.jobXpLevelFloor.');
            }
            this.jobXpNextLevelFloor = param1.readVarUhLong();
            if (this.jobXpNextLevelFloor < 0 || this.jobXpNextLevelFloor > 9.007199254740992E15) {
                throw new Error('Forbidden value (' + this.jobXpNextLevelFloor + ') on element of JobExperience.jobXpNextLevelFloor.');
            }

        }
    }
    export class DungeonPartyFinderPlayer implements INetworkType {
        public static ID: number = 373;

        playerId: number;
        playerName: string;
        breed: number;
        sex: boolean;
        level: number;

        constructor() {
            this.playerId = 0;
            this.playerName = '';
            this.breed = 0;
            this.sex = false;
            this.level = 0;
        }

        public getTypeId(): number {
            return DungeonPartyFinderPlayer.ID;
        }

        public reset(): void {
            this.playerId = 0;
            this.playerName = '';
            this.breed = 0;
            this.sex = false;
            this.level = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_DungeonPartyFinderPlayer(param1);
        }

        public serializeAs_DungeonPartyFinderPlayer(param1: ICustomDataOutput): void {
            if (this.playerId < 0) {
                throw new Error('Forbidden value (' + this.playerId + ') on element playerId.');
            }
            param1.writeVarInt(this.playerId);
            param1.writeUTF(this.playerName);
            param1.writeByte(this.breed);
            param1.writeBoolean(this.sex);
            if (this.level < 0 || this.level > 255) {
                throw new Error('Forbidden value (' + this.level + ') on element level.');
            }
            param1.writeByte(this.level);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_DungeonPartyFinderPlayer(param1);
        }

        public deserializeAs_DungeonPartyFinderPlayer(param1: ICustomDataInput): void {
            this.playerId = param1.readVarUhInt();
            if (this.playerId < 0) {
                throw new Error('Forbidden value (' + this.playerId + ') on element of DungeonPartyFinderPlayer.playerId.');
            }
            this.playerName = param1.readUTF();
            this.breed = param1.readByte();
            if (this.breed < PlayableBreedEnum.Feca || this.breed > PlayableBreedEnum.Eliotrope) {
                throw new Error('Forbidden value (' + this.breed + ') on element of DungeonPartyFinderPlayer.breed.');
            }
            this.sex = param1.readBoolean();
            this.level = param1.readUnsignedByte();
            if (this.level < 0 || this.level > 255) {
                throw new Error('Forbidden value (' + this.level + ') on element of DungeonPartyFinderPlayer.level.');
            }

        }
    }
    export class NamedPartyTeam implements INetworkType {
        public static ID: number = 469;

        teamId: number;
        partyName: string;

        constructor() {
            this.teamId = 2;
            this.partyName = '';
        }

        public getTypeId(): number {
            return NamedPartyTeam.ID;
        }

        public reset(): void {
            this.teamId = 2;
            this.partyName = '';
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_NamedPartyTeam(param1);
        }

        public serializeAs_NamedPartyTeam(param1: ICustomDataOutput): void {
            param1.writeByte(this.teamId);
            param1.writeUTF(this.partyName);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_NamedPartyTeam(param1);
        }

        public deserializeAs_NamedPartyTeam(param1: ICustomDataInput): void {
            this.teamId = param1.readByte();
            if (this.teamId < 0) {
                throw new Error('Forbidden value (' + this.teamId + ') on element of NamedPartyTeam.teamId.');
            }
            this.partyName = param1.readUTF();

        }
    }
    export class NamedPartyTeamWithOutcome implements INetworkType {
        public static ID: number = 470;

        team: NamedPartyTeam;
        outcome: number;

        constructor() {
            this.team = new NamedPartyTeam();
            this.outcome = 0;
        }

        public getTypeId(): number {
            return NamedPartyTeamWithOutcome.ID;
        }

        public reset(): void {
            this.team = new NamedPartyTeam();
            this.outcome = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_NamedPartyTeamWithOutcome(param1);
        }

        public serializeAs_NamedPartyTeamWithOutcome(param1: ICustomDataOutput): void {
            this.team.serializeAs_NamedPartyTeam(param1);
            param1.writeVarShort(this.outcome);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_NamedPartyTeamWithOutcome(param1);
        }

        public deserializeAs_NamedPartyTeamWithOutcome(param1: ICustomDataInput): void {
            this.team = new NamedPartyTeam();
            this.team.deserialize(param1);
            this.outcome = param1.readVarUhShort();
            if (this.outcome < 0) {
                throw new Error('Forbidden value (' + this.outcome + ') on element of NamedPartyTeamWithOutcome.outcome.');
            }

        }
    }
    export class PartyGuestInformations implements INetworkType {
        public static ID: number = 374;

        guestId: number;
        hostId: number;
        name: string;
        guestLook: EntityLook;
        breed: number;
        sex: boolean;
        status: PlayerStatus;
        companions: PartyCompanionBaseInformations[];

        constructor() {
            this.guestId = 0;
            this.hostId = 0;
            this.name = '';
            this.guestLook = new EntityLook();
            this.breed = 0;
            this.sex = false;
            this.status = new PlayerStatus();
            this.companions = [];
        }

        public getTypeId(): number {
            return PartyGuestInformations.ID;
        }

        public reset(): void {
            this.guestId = 0;
            this.hostId = 0;
            this.name = '';
            this.guestLook = new EntityLook();
            this.breed = 0;
            this.sex = false;
            this.status = new PlayerStatus();
            this.companions = [];
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_PartyGuestInformations(param1);
        }

        public serializeAs_PartyGuestInformations(param1: ICustomDataOutput): void {
            if (this.guestId < 0) {
                throw new Error('Forbidden value (' + this.guestId + ') on element guestId.');
            }
            param1.writeInt(this.guestId);
            if (this.hostId < 0) {
                throw new Error('Forbidden value (' + this.hostId + ') on element hostId.');
            }
            param1.writeInt(this.hostId);
            param1.writeUTF(this.name);
            this.guestLook.serializeAs_EntityLook(param1);
            param1.writeByte(this.breed);
            param1.writeBoolean(this.sex);
            param1.writeShort(this.status.getTypeId());
            this.status.serialize(param1);
            param1.writeShort(this.companions.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.companions.length) {
                (this.companions[_loc2_]).serializeAs_PartyCompanionBaseInformations(param1);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_PartyGuestInformations(param1);
        }

        public deserializeAs_PartyGuestInformations(param1: ICustomDataInput): void {
            var _loc5_: PartyCompanionBaseInformations = null;
            this.guestId = param1.readInt();
            if (this.guestId < 0) {
                throw new Error('Forbidden value (' + this.guestId + ') on element of PartyGuestInformations.guestId.');
            }
            this.hostId = param1.readInt();
            if (this.hostId < 0) {
                throw new Error('Forbidden value (' + this.hostId + ') on element of PartyGuestInformations.hostId.');
            }
            this.name = param1.readUTF();
            this.guestLook = new EntityLook();
            this.guestLook.deserialize(param1);
            this.breed = param1.readByte();
            this.sex = param1.readBoolean();
            var _loc2_: number = param1.readUnsignedShort();
            this.status = <PlayerStatus>ProtocolTypeManager.getInstance(PlayerStatus, _loc2_);
            this.status.deserialize(param1);
            var _loc3_: number = param1.readUnsignedShort();
            var _loc4_: number = 0;
            while (_loc4_ < _loc3_) {
            _loc5_ = new PartyCompanionBaseInformations();
                _loc5_.deserialize(param1);
                this.companions.push(_loc5_);
                _loc4_++;
            }

        }
    }
    export class PartyInvitationMemberInformations extends CharacterBaseInformations implements INetworkType {
        public static ID: number = 376;

        worldX: number;
        worldY: number;
        mapId: number;
        subAreaId: number;
        companions: PartyCompanionBaseInformations[];

        constructor() {
            this.worldX = 0;
            this.worldY = 0;
            this.mapId = 0;
            this.subAreaId = 0;
            this.companions = [];
            super();
        }

        public getTypeId(): number {
            return PartyInvitationMemberInformations.ID;
        }

        public reset(): void {
            this.worldX = 0;
            this.worldY = 0;
            this.mapId = 0;
            this.subAreaId = 0;
            this.companions = [];
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_PartyInvitationMemberInformations(param1);
        }

        public serializeAs_PartyInvitationMemberInformations(param1: ICustomDataOutput): void {
            super.serializeAs_CharacterBaseInformations(param1);
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error('Forbidden value (' + this.worldX + ') on element worldX.');
            }
            param1.writeShort(this.worldX);
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error('Forbidden value (' + this.worldY + ') on element worldY.');
            }
            param1.writeShort(this.worldY);
            param1.writeInt(this.mapId);
            if (this.subAreaId < 0) {
                throw new Error('Forbidden value (' + this.subAreaId + ') on element subAreaId.');
            }
            param1.writeVarShort(this.subAreaId);
            param1.writeShort(this.companions.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.companions.length) {
                (this.companions[_loc2_]).serializeAs_PartyCompanionBaseInformations(param1);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_PartyInvitationMemberInformations(param1);
        }

        public deserializeAs_PartyInvitationMemberInformations(param1: ICustomDataInput): void {
            var _loc4_: PartyCompanionBaseInformations = null;
            super.deserialize(param1);
            this.worldX = param1.readShort();
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error('Forbidden value (' + this.worldX + ') on element of PartyInvitationMemberInformations.worldX.');
            }
            this.worldY = param1.readShort();
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error('Forbidden value (' + this.worldY + ') on element of PartyInvitationMemberInformations.worldY.');
            }
            this.mapId = param1.readInt();
            this.subAreaId = param1.readVarUhShort();
            if (this.subAreaId < 0) {
                throw new Error('Forbidden value (' + this.subAreaId + ') on element of PartyInvitationMemberInformations.subAreaId.');
            }
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = new PartyCompanionBaseInformations();
                _loc4_.deserialize(param1);
                this.companions.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class PartyMemberInformations extends CharacterBaseInformations implements INetworkType {
        public static ID: number = 90;

        lifePoints: number;
        maxLifePoints: number;
        prospecting: number;
        regenRate: number;
        initiative: number;
        alignmentSide: number;
        worldX: number;
        worldY: number;
        mapId: number;
        subAreaId: number;
        status: PlayerStatus;
        companions: PartyCompanionMemberInformations[];

        constructor() {
            this.lifePoints = 0;
            this.maxLifePoints = 0;
            this.prospecting = 0;
            this.regenRate = 0;
            this.initiative = 0;
            this.alignmentSide = 0;
            this.worldX = 0;
            this.worldY = 0;
            this.mapId = 0;
            this.subAreaId = 0;
            this.status = new PlayerStatus();
            this.companions = [];
            super();
        }

        public getTypeId(): number {
            return PartyMemberInformations.ID;
        }

        public reset(): void {
            this.lifePoints = 0;
            this.maxLifePoints = 0;
            this.prospecting = 0;
            this.regenRate = 0;
            this.initiative = 0;
            this.alignmentSide = 0;
            this.worldX = 0;
            this.worldY = 0;
            this.mapId = 0;
            this.subAreaId = 0;
            this.status = new PlayerStatus();
            this.companions = [];
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_PartyMemberInformations(param1);
        }

        public serializeAs_PartyMemberInformations(param1: ICustomDataOutput): void {
            super.serializeAs_CharacterBaseInformations(param1);
            if (this.lifePoints < 0) {
                throw new Error('Forbidden value (' + this.lifePoints + ') on element lifePoints.');
            }
            param1.writeVarInt(this.lifePoints);
            if (this.maxLifePoints < 0) {
                throw new Error('Forbidden value (' + this.maxLifePoints + ') on element maxLifePoints.');
            }
            param1.writeVarInt(this.maxLifePoints);
            if (this.prospecting < 0) {
                throw new Error('Forbidden value (' + this.prospecting + ') on element prospecting.');
            }
            param1.writeVarShort(this.prospecting);
            if (this.regenRate < 0 || this.regenRate > 255) {
                throw new Error('Forbidden value (' + this.regenRate + ') on element regenRate.');
            }
            param1.writeByte(this.regenRate);
            if (this.initiative < 0) {
                throw new Error('Forbidden value (' + this.initiative + ') on element initiative.');
            }
            param1.writeVarShort(this.initiative);
            param1.writeByte(this.alignmentSide);
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error('Forbidden value (' + this.worldX + ') on element worldX.');
            }
            param1.writeShort(this.worldX);
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error('Forbidden value (' + this.worldY + ') on element worldY.');
            }
            param1.writeShort(this.worldY);
            param1.writeInt(this.mapId);
            if (this.subAreaId < 0) {
                throw new Error('Forbidden value (' + this.subAreaId + ') on element subAreaId.');
            }
            param1.writeVarShort(this.subAreaId);
            param1.writeShort(this.status.getTypeId());
            this.status.serialize(param1);
            param1.writeShort(this.companions.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.companions.length) {
                (this.companions[_loc2_]).serializeAs_PartyCompanionMemberInformations(param1);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_PartyMemberInformations(param1);
        }

        public deserializeAs_PartyMemberInformations(param1: ICustomDataInput): void {
            var _loc5_: PartyCompanionMemberInformations = null;
            super.deserialize(param1);
            this.lifePoints = param1.readVarUhInt();
            if (this.lifePoints < 0) {
                throw new Error('Forbidden value (' + this.lifePoints + ') on element of PartyMemberInformations.lifePoints.');
            }
            this.maxLifePoints = param1.readVarUhInt();
            if (this.maxLifePoints < 0) {
                throw new Error('Forbidden value (' + this.maxLifePoints + ') on element of PartyMemberInformations.maxLifePoints.');
            }
            this.prospecting = param1.readVarUhShort();
            if (this.prospecting < 0) {
                throw new Error('Forbidden value (' + this.prospecting + ') on element of PartyMemberInformations.prospecting.');
            }
            this.regenRate = param1.readUnsignedByte();
            if (this.regenRate < 0 || this.regenRate > 255) {
                throw new Error('Forbidden value (' + this.regenRate + ') on element of PartyMemberInformations.regenRate.');
            }
            this.initiative = param1.readVarUhShort();
            if (this.initiative < 0) {
                throw new Error('Forbidden value (' + this.initiative + ') on element of PartyMemberInformations.initiative.');
            }
            this.alignmentSide = param1.readByte();
            this.worldX = param1.readShort();
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error('Forbidden value (' + this.worldX + ') on element of PartyMemberInformations.worldX.');
            }
            this.worldY = param1.readShort();
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error('Forbidden value (' + this.worldY + ') on element of PartyMemberInformations.worldY.');
            }
            this.mapId = param1.readInt();
            this.subAreaId = param1.readVarUhShort();
            if (this.subAreaId < 0) {
                throw new Error('Forbidden value (' + this.subAreaId + ') on element of PartyMemberInformations.subAreaId.');
            }
            var _loc2_: number = param1.readUnsignedShort();
            this.status = <PlayerStatus>ProtocolTypeManager.getInstance(PlayerStatus, _loc2_);
            this.status.deserialize(param1);
            var _loc3_: number = param1.readUnsignedShort();
            var _loc4_: number = 0;
            while (_loc4_ < _loc3_) {
            _loc5_ = new PartyCompanionMemberInformations();
                _loc5_.deserialize(param1);
                this.companions.push(_loc5_);
                _loc4_++;
            }

        }
    }
    export class PartyMemberArenaInformations extends PartyMemberInformations implements INetworkType {
        public static ID: number = 391;

        rank: number;

        constructor() {
            this.rank = 0;
            super();
        }

        public getTypeId(): number {
            return PartyMemberArenaInformations.ID;
        }

        public reset(): void {
            this.rank = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_PartyMemberArenaInformations(param1);
        }

        public serializeAs_PartyMemberArenaInformations(param1: ICustomDataOutput): void {
            super.serializeAs_PartyMemberInformations(param1);
            if (this.rank < 0 || this.rank > 2300) {
                throw new Error('Forbidden value (' + this.rank + ') on element rank.');
            }
            param1.writeVarShort(this.rank);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_PartyMemberArenaInformations(param1);
        }

        public deserializeAs_PartyMemberArenaInformations(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.rank = param1.readVarUhShort();
            if (this.rank < 0 || this.rank > 2300) {
                throw new Error('Forbidden value (' + this.rank + ') on element of PartyMemberArenaInformations.rank.');
            }

        }
    }
    export class PartyMemberGeoPosition implements INetworkType {
        public static ID: number = 378;

        memberId: number;
        worldX: number;
        worldY: number;
        mapId: number;
        subAreaId: number;

        constructor() {
            this.memberId = 0;
            this.worldX = 0;
            this.worldY = 0;
            this.mapId = 0;
            this.subAreaId = 0;
        }

        public getTypeId(): number {
            return PartyMemberGeoPosition.ID;
        }

        public reset(): void {
            this.memberId = 0;
            this.worldX = 0;
            this.worldY = 0;
            this.mapId = 0;
            this.subAreaId = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_PartyMemberGeoPosition(param1);
        }

        public serializeAs_PartyMemberGeoPosition(param1: ICustomDataOutput): void {
            if (this.memberId < 0) {
                throw new Error('Forbidden value (' + this.memberId + ') on element memberId.');
            }
            param1.writeInt(this.memberId);
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error('Forbidden value (' + this.worldX + ') on element worldX.');
            }
            param1.writeShort(this.worldX);
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error('Forbidden value (' + this.worldY + ') on element worldY.');
            }
            param1.writeShort(this.worldY);
            param1.writeInt(this.mapId);
            if (this.subAreaId < 0) {
                throw new Error('Forbidden value (' + this.subAreaId + ') on element subAreaId.');
            }
            param1.writeVarShort(this.subAreaId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_PartyMemberGeoPosition(param1);
        }

        public deserializeAs_PartyMemberGeoPosition(param1: ICustomDataInput): void {
            this.memberId = param1.readInt();
            if (this.memberId < 0) {
                throw new Error('Forbidden value (' + this.memberId + ') on element of PartyMemberGeoPosition.memberId.');
            }
            this.worldX = param1.readShort();
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error('Forbidden value (' + this.worldX + ') on element of PartyMemberGeoPosition.worldX.');
            }
            this.worldY = param1.readShort();
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error('Forbidden value (' + this.worldY + ') on element of PartyMemberGeoPosition.worldY.');
            }
            this.mapId = param1.readInt();
            this.subAreaId = param1.readVarUhShort();
            if (this.subAreaId < 0) {
                throw new Error('Forbidden value (' + this.subAreaId + ') on element of PartyMemberGeoPosition.subAreaId.');
            }

        }
    }
    export class PartyCompanionBaseInformations implements INetworkType {
        public static ID: number = 453;

        indexId: number;
        companionGenericId: number;
        entityLook: EntityLook;

        constructor() {
            this.indexId = 0;
            this.companionGenericId = 0;
            this.entityLook = new EntityLook();
        }

        public getTypeId(): number {
            return PartyCompanionBaseInformations.ID;
        }

        public reset(): void {
            this.indexId = 0;
            this.companionGenericId = 0;
            this.entityLook = new EntityLook();
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_PartyCompanionBaseInformations(param1);
        }

        public serializeAs_PartyCompanionBaseInformations(param1: ICustomDataOutput): void {
            if (this.indexId < 0) {
                throw new Error('Forbidden value (' + this.indexId + ') on element indexId.');
            }
            param1.writeByte(this.indexId);
            if (this.companionGenericId < 0) {
                throw new Error('Forbidden value (' + this.companionGenericId + ') on element companionGenericId.');
            }
            param1.writeByte(this.companionGenericId);
            this.entityLook.serializeAs_EntityLook(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_PartyCompanionBaseInformations(param1);
        }

        public deserializeAs_PartyCompanionBaseInformations(param1: ICustomDataInput): void {
            this.indexId = param1.readByte();
            if (this.indexId < 0) {
                throw new Error('Forbidden value (' + this.indexId + ') on element of PartyCompanionBaseInformations.indexId.');
            }
            this.companionGenericId = param1.readByte();
            if (this.companionGenericId < 0) {
                throw new Error('Forbidden value (' + this.companionGenericId + ') on element of PartyCompanionBaseInformations.companionGenericId.');
            }
            this.entityLook = new EntityLook();
            this.entityLook.deserialize(param1);

        }
    }
    export class PartyCompanionMemberInformations extends PartyCompanionBaseInformations implements INetworkType {
        public static ID: number = 452;

        initiative: number;
        lifePoints: number;
        maxLifePoints: number;
        prospecting: number;
        regenRate: number;

        constructor() {
            this.initiative = 0;
            this.lifePoints = 0;
            this.maxLifePoints = 0;
            this.prospecting = 0;
            this.regenRate = 0;
            super();
        }

        public getTypeId(): number {
            return PartyCompanionMemberInformations.ID;
        }

        public reset(): void {
            this.initiative = 0;
            this.lifePoints = 0;
            this.maxLifePoints = 0;
            this.prospecting = 0;
            this.regenRate = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_PartyCompanionMemberInformations(param1);
        }

        public serializeAs_PartyCompanionMemberInformations(param1: ICustomDataOutput): void {
            super.serializeAs_PartyCompanionBaseInformations(param1);
            if (this.initiative < 0) {
                throw new Error('Forbidden value (' + this.initiative + ') on element initiative.');
            }
            param1.writeVarShort(this.initiative);
            if (this.lifePoints < 0) {
                throw new Error('Forbidden value (' + this.lifePoints + ') on element lifePoints.');
            }
            param1.writeVarInt(this.lifePoints);
            if (this.maxLifePoints < 0) {
                throw new Error('Forbidden value (' + this.maxLifePoints + ') on element maxLifePoints.');
            }
            param1.writeVarInt(this.maxLifePoints);
            if (this.prospecting < 0) {
                throw new Error('Forbidden value (' + this.prospecting + ') on element prospecting.');
            }
            param1.writeVarShort(this.prospecting);
            if (this.regenRate < 0 || this.regenRate > 255) {
                throw new Error('Forbidden value (' + this.regenRate + ') on element regenRate.');
            }
            param1.writeByte(this.regenRate);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_PartyCompanionMemberInformations(param1);
        }

        public deserializeAs_PartyCompanionMemberInformations(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.initiative = param1.readVarUhShort();
            if (this.initiative < 0) {
                throw new Error('Forbidden value (' + this.initiative + ') on element of PartyCompanionMemberInformations.initiative.');
            }
            this.lifePoints = param1.readVarUhInt();
            if (this.lifePoints < 0) {
                throw new Error('Forbidden value (' + this.lifePoints + ') on element of PartyCompanionMemberInformations.lifePoints.');
            }
            this.maxLifePoints = param1.readVarUhInt();
            if (this.maxLifePoints < 0) {
                throw new Error('Forbidden value (' + this.maxLifePoints + ') on element of PartyCompanionMemberInformations.maxLifePoints.');
            }
            this.prospecting = param1.readVarUhShort();
            if (this.prospecting < 0) {
                throw new Error('Forbidden value (' + this.prospecting + ') on element of PartyCompanionMemberInformations.prospecting.');
            }
            this.regenRate = param1.readUnsignedByte();
            if (this.regenRate < 0 || this.regenRate > 255) {
                throw new Error('Forbidden value (' + this.regenRate + ') on element of PartyCompanionMemberInformations.regenRate.');
            }

        }
    }
    export class GameRolePlayNpcQuestFlag implements INetworkType {
        public static ID: number = 384;

        questsToValidId: number[];
        questsToStartId: number[];

        constructor() {
            this.questsToValidId = [];
            this.questsToStartId = [];
        }

        public getTypeId(): number {
            return GameRolePlayNpcQuestFlag.ID;
        }

        public reset(): void {
            this.questsToValidId = [];
            this.questsToStartId = [];
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GameRolePlayNpcQuestFlag(param1);
        }

        public serializeAs_GameRolePlayNpcQuestFlag(param1: ICustomDataOutput): void {
            param1.writeShort(this.questsToValidId.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.questsToValidId.length) {
                if (this.questsToValidId[_loc2_] < 0) {
                    throw new Error('Forbidden value (' + this.questsToValidId[_loc2_] + ') on element 1 (starting at 1) of questsToValidId.');
                }
                param1.writeVarShort(this.questsToValidId[_loc2_]);
                _loc2_++;
            }
            param1.writeShort(this.questsToStartId.length);
            var _loc3_: number = 0;
            while (_loc3_ < this.questsToStartId.length) {
                if (this.questsToStartId[_loc3_] < 0) {
                    throw new Error('Forbidden value (' + this.questsToStartId[_loc3_] + ') on element 2 (starting at 1) of questsToStartId.');
                }
                param1.writeVarShort(this.questsToStartId[_loc3_]);
                _loc3_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GameRolePlayNpcQuestFlag(param1);
        }

        public deserializeAs_GameRolePlayNpcQuestFlag(param1: ICustomDataInput): void {
            var _loc6_: number = 0;
            var _loc7_: number = 0;
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc6_ = param1.readVarUhShort();
                if (_loc6_ < 0) {
                    throw new Error('Forbidden value (' + _loc6_ + ') on elements of questsToValidId.');
                }
                this.questsToValidId.push(_loc6_);
                _loc3_++;
            }
            var _loc4_: number = param1.readUnsignedShort();
            var _loc5_: number = 0;
            while (_loc5_ < _loc4_) {
            _loc7_ = param1.readVarUhShort();
                if (_loc7_ < 0) {
                    throw new Error('Forbidden value (' + _loc7_ + ') on elements of questsToStartId.');
                }
                this.questsToStartId.push(_loc7_);
                _loc5_++;
            }

        }
    }
    export class QuestActiveInformations implements INetworkType {
        public static ID: number = 381;

        questId: number;

        constructor() {
            this.questId = 0;
        }

        public getTypeId(): number {
            return QuestActiveInformations.ID;
        }

        public reset(): void {
            this.questId = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_QuestActiveInformations(param1);
        }

        public serializeAs_QuestActiveInformations(param1: ICustomDataOutput): void {
            if (this.questId < 0) {
                throw new Error('Forbidden value (' + this.questId + ') on element questId.');
            }
            param1.writeVarShort(this.questId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_QuestActiveInformations(param1);
        }

        public deserializeAs_QuestActiveInformations(param1: ICustomDataInput): void {
            this.questId = param1.readVarUhShort();
            if (this.questId < 0) {
                throw new Error('Forbidden value (' + this.questId + ') on element of QuestActiveInformations.questId.');
            }

        }
    }
    export class QuestActiveDetailedInformations extends QuestActiveInformations implements INetworkType {
        public static ID: number = 382;

        stepId: number;
        objectives: QuestObjectiveInformations[];

        constructor() {
            this.stepId = 0;
            this.objectives = [];
            super();
        }

        public getTypeId(): number {
            return QuestActiveDetailedInformations.ID;
        }

        public reset(): void {
            this.stepId = 0;
            this.objectives = [];
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_QuestActiveDetailedInformations(param1);
        }

        public serializeAs_QuestActiveDetailedInformations(param1: ICustomDataOutput): void {
            super.serializeAs_QuestActiveInformations(param1);
            if (this.stepId < 0) {
                throw new Error('Forbidden value (' + this.stepId + ') on element stepId.');
            }
            param1.writeVarShort(this.stepId);
            param1.writeShort(this.objectives.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.objectives.length) {
                param1.writeShort((this.objectives[_loc2_]).getTypeId());
                (this.objectives[_loc2_]).serialize(param1);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_QuestActiveDetailedInformations(param1);
        }

        public deserializeAs_QuestActiveDetailedInformations(param1: ICustomDataInput): void {
            var _loc4_: number = 0;
            var _loc5_: QuestObjectiveInformations = null;
            super.deserialize(param1);
            this.stepId = param1.readVarUhShort();
            if (this.stepId < 0) {
                throw new Error('Forbidden value (' + this.stepId + ') on element of QuestActiveDetailedInformations.stepId.');
            }
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = param1.readUnsignedShort();
                _loc5_ = <QuestObjectiveInformations>ProtocolTypeManager.getInstance(QuestObjectiveInformations, _loc4_);
                _loc5_.deserialize(param1);
                this.objectives.push(_loc5_);
                _loc3_++;
            }

        }
    }
    export class QuestObjectiveInformations implements INetworkType {
        public static ID: number = 385;

        objectiveId: number;
        objectiveStatus: boolean;
        dialogParams: string[];

        constructor() {
            this.objectiveId = 0;
            this.objectiveStatus = false;
            this.dialogParams = [];
        }

        public getTypeId(): number {
            return QuestObjectiveInformations.ID;
        }

        public reset(): void {
            this.objectiveId = 0;
            this.objectiveStatus = false;
            this.dialogParams = [];
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_QuestObjectiveInformations(param1);
        }

        public serializeAs_QuestObjectiveInformations(param1: ICustomDataOutput): void {
            if (this.objectiveId < 0) {
                throw new Error('Forbidden value (' + this.objectiveId + ') on element objectiveId.');
            }
            param1.writeVarShort(this.objectiveId);
            param1.writeBoolean(this.objectiveStatus);
            param1.writeShort(this.dialogParams.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.dialogParams.length) {
                param1.writeUTF(this.dialogParams[_loc2_]);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_QuestObjectiveInformations(param1);
        }

        public deserializeAs_QuestObjectiveInformations(param1: ICustomDataInput): void {
            var _loc4_: string = null;
            this.objectiveId = param1.readVarUhShort();
            if (this.objectiveId < 0) {
                throw new Error('Forbidden value (' + this.objectiveId + ') on element of QuestObjectiveInformations.objectiveId.');
            }
            this.objectiveStatus = param1.readBoolean();
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = param1.readUTF();
                this.dialogParams.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class QuestObjectiveInformationsWithCompletion extends QuestObjectiveInformations implements INetworkType {
        public static ID: number = 386;

        curCompletion: number;
        maxCompletion: number;

        constructor() {
            this.curCompletion = 0;
            this.maxCompletion = 0;
            super();
        }

        public getTypeId(): number {
            return QuestObjectiveInformationsWithCompletion.ID;
        }

        public reset(): void {
            this.curCompletion = 0;
            this.maxCompletion = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_QuestObjectiveInformationsWithCompletion(param1);
        }

        public serializeAs_QuestObjectiveInformationsWithCompletion(param1: ICustomDataOutput): void {
            super.serializeAs_QuestObjectiveInformations(param1);
            if (this.curCompletion < 0) {
                throw new Error('Forbidden value (' + this.curCompletion + ') on element curCompletion.');
            }
            param1.writeVarShort(this.curCompletion);
            if (this.maxCompletion < 0) {
                throw new Error('Forbidden value (' + this.maxCompletion + ') on element maxCompletion.');
            }
            param1.writeVarShort(this.maxCompletion);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_QuestObjectiveInformationsWithCompletion(param1);
        }

        public deserializeAs_QuestObjectiveInformationsWithCompletion(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.curCompletion = param1.readVarUhShort();
            if (this.curCompletion < 0) {
                throw new Error('Forbidden value (' + this.curCompletion + ') on element of QuestObjectiveInformationsWithCompletion.curCompletion.');
            }
            this.maxCompletion = param1.readVarUhShort();
            if (this.maxCompletion < 0) {
                throw new Error('Forbidden value (' + this.maxCompletion + ') on element of QuestObjectiveInformationsWithCompletion.maxCompletion.');
            }

        }
    }
    export class PortalInformation implements INetworkType {
        public static ID: number = 466;

        portalId: number;
        areaId: number;

        constructor() {
            this.portalId = 0;
            this.areaId = 0;
        }

        public getTypeId(): number {
            return PortalInformation.ID;
        }

        public reset(): void {
            this.portalId = 0;
            this.areaId = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_PortalInformation(param1);
        }

        public serializeAs_PortalInformation(param1: ICustomDataOutput): void {
            if (this.portalId < 0) {
                throw new Error('Forbidden value (' + this.portalId + ') on element portalId.');
            }
            param1.writeVarShort(this.portalId);
            param1.writeShort(this.areaId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_PortalInformation(param1);
        }

        public deserializeAs_PortalInformation(param1: ICustomDataInput): void {
            this.portalId = param1.readVarUhShort();
            if (this.portalId < 0) {
                throw new Error('Forbidden value (' + this.portalId + ') on element of PortalInformation.portalId.');
            }
            this.areaId = param1.readShort();

        }
    }
    export class TreasureHuntFlag implements INetworkType {
        public static ID: number = 473;

        mapId: number;
        state: number;

        constructor() {
            this.mapId = 0;
            this.state = 0;
        }

        public getTypeId(): number {
            return TreasureHuntFlag.ID;
        }

        public reset(): void {
            this.mapId = 0;
            this.state = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_TreasureHuntFlag(param1);
        }

        public serializeAs_TreasureHuntFlag(param1: ICustomDataOutput): void {
            param1.writeInt(this.mapId);
            param1.writeByte(this.state);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_TreasureHuntFlag(param1);
        }

        public deserializeAs_TreasureHuntFlag(param1: ICustomDataInput): void {
            this.mapId = param1.readInt();
            this.state = param1.readByte();
            if (this.state < 0) {
                throw new Error('Forbidden value (' + this.state + ') on element of TreasureHuntFlag.state.');
            }

        }
    }
    export class TreasureHuntStep implements INetworkType {
        public static ID: number = 463;



        constructor() {

        }

        public getTypeId(): number {
            return TreasureHuntStep.ID;
        }

        public reset(): void {

        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_TreasureHuntStep(param1);
        }

        public serializeAs_TreasureHuntStep(param1: ICustomDataOutput): void {

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_TreasureHuntStep(param1);
        }

        public deserializeAs_TreasureHuntStep(param1: ICustomDataInput): void {

        }
    }
    export class TreasureHuntStepDig extends TreasureHuntStep implements INetworkType {
        public static ID: number = 465;



        constructor() {

            super();
        }

        public getTypeId(): number {
            return TreasureHuntStepDig.ID;
        }

        public reset(): void {

        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_TreasureHuntStepDig(param1);
        }

        public serializeAs_TreasureHuntStepDig(param1: ICustomDataOutput): void {

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_TreasureHuntStepDig(param1);
        }

        public deserializeAs_TreasureHuntStepDig(param1: ICustomDataInput): void {

        }
    }
    export class TreasureHuntStepFight extends TreasureHuntStep implements INetworkType {
        public static ID: number = 462;



        constructor() {

            super();
        }

        public getTypeId(): number {
            return TreasureHuntStepFight.ID;
        }

        public reset(): void {

        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_TreasureHuntStepFight(param1);
        }

        public serializeAs_TreasureHuntStepFight(param1: ICustomDataOutput): void {

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_TreasureHuntStepFight(param1);
        }

        public deserializeAs_TreasureHuntStepFight(param1: ICustomDataInput): void {

        }
    }
    export class TreasureHuntStepFollowDirection extends TreasureHuntStep implements INetworkType {
        public static ID: number = 468;

        direction: number;
        mapCount: number;

        constructor() {
            this.direction = 1;
            this.mapCount = 0;
            super();
        }

        public getTypeId(): number {
            return TreasureHuntStepFollowDirection.ID;
        }

        public reset(): void {
            this.direction = 1;
            this.mapCount = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_TreasureHuntStepFollowDirection(param1);
        }

        public serializeAs_TreasureHuntStepFollowDirection(param1: ICustomDataOutput): void {
            super.serializeAs_TreasureHuntStep(param1);
            param1.writeByte(this.direction);
            if (this.mapCount < 0) {
                throw new Error('Forbidden value (' + this.mapCount + ') on element mapCount.');
            }
            param1.writeVarShort(this.mapCount);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_TreasureHuntStepFollowDirection(param1);
        }

        public deserializeAs_TreasureHuntStepFollowDirection(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.direction = param1.readByte();
            if (this.direction < 0) {
                throw new Error('Forbidden value (' + this.direction + ') on element of TreasureHuntStepFollowDirection.direction.');
            }
            this.mapCount = param1.readVarUhShort();
            if (this.mapCount < 0) {
                throw new Error('Forbidden value (' + this.mapCount + ') on element of TreasureHuntStepFollowDirection.mapCount.');
            }

        }
    }
    export class TreasureHuntStepFollowDirectionToHint extends TreasureHuntStep implements INetworkType {
        public static ID: number = 472;

        direction: number;
        npcId: number;

        constructor() {
            this.direction = 1;
            this.npcId = 0;
            super();
        }

        public getTypeId(): number {
            return TreasureHuntStepFollowDirectionToHint.ID;
        }

        public reset(): void {
            this.direction = 1;
            this.npcId = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_TreasureHuntStepFollowDirectionToHint(param1);
        }

        public serializeAs_TreasureHuntStepFollowDirectionToHint(param1: ICustomDataOutput): void {
            super.serializeAs_TreasureHuntStep(param1);
            param1.writeByte(this.direction);
            if (this.npcId < 0) {
                throw new Error('Forbidden value (' + this.npcId + ') on element npcId.');
            }
            param1.writeVarShort(this.npcId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_TreasureHuntStepFollowDirectionToHint(param1);
        }

        public deserializeAs_TreasureHuntStepFollowDirectionToHint(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.direction = param1.readByte();
            if (this.direction < 0) {
                throw new Error('Forbidden value (' + this.direction + ') on element of TreasureHuntStepFollowDirectionToHint.direction.');
            }
            this.npcId = param1.readVarUhShort();
            if (this.npcId < 0) {
                throw new Error('Forbidden value (' + this.npcId + ') on element of TreasureHuntStepFollowDirectionToHint.npcId.');
            }

        }
    }
    export class TreasureHuntStepFollowDirectionToPOI extends TreasureHuntStep implements INetworkType {
        public static ID: number = 461;

        direction: number;
        poiLabelId: number;

        constructor() {
            this.direction = 1;
            this.poiLabelId = 0;
            super();
        }

        public getTypeId(): number {
            return TreasureHuntStepFollowDirectionToPOI.ID;
        }

        public reset(): void {
            this.direction = 1;
            this.poiLabelId = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_TreasureHuntStepFollowDirectionToPOI(param1);
        }

        public serializeAs_TreasureHuntStepFollowDirectionToPOI(param1: ICustomDataOutput): void {
            super.serializeAs_TreasureHuntStep(param1);
            param1.writeByte(this.direction);
            if (this.poiLabelId < 0) {
                throw new Error('Forbidden value (' + this.poiLabelId + ') on element poiLabelId.');
            }
            param1.writeVarShort(this.poiLabelId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_TreasureHuntStepFollowDirectionToPOI(param1);
        }

        public deserializeAs_TreasureHuntStepFollowDirectionToPOI(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.direction = param1.readByte();
            if (this.direction < 0) {
                throw new Error('Forbidden value (' + this.direction + ') on element of TreasureHuntStepFollowDirectionToPOI.direction.');
            }
            this.poiLabelId = param1.readVarUhShort();
            if (this.poiLabelId < 0) {
                throw new Error('Forbidden value (' + this.poiLabelId + ') on element of TreasureHuntStepFollowDirectionToPOI.poiLabelId.');
            }

        }
    }
    export class BidExchangerObjectInfo implements INetworkType {
        public static ID: number = 122;

        objectUID: number;
        effects: ObjectEffect[];
        prices: number[];

        constructor() {
            this.objectUID = 0;
            this.effects = [];
            this.prices = [];
        }

        public getTypeId(): number {
            return BidExchangerObjectInfo.ID;
        }

        public reset(): void {
            this.objectUID = 0;
            this.effects = [];
            this.prices = [];
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_BidExchangerObjectInfo(param1);
        }

        public serializeAs_BidExchangerObjectInfo(param1: ICustomDataOutput): void {
            if (this.objectUID < 0) {
                throw new Error('Forbidden value (' + this.objectUID + ') on element objectUID.');
            }
            param1.writeVarInt(this.objectUID);
            param1.writeShort(this.effects.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.effects.length) {
                param1.writeShort((this.effects[_loc2_]).getTypeId());
                (this.effects[_loc2_]).serialize(param1);
                _loc2_++;
            }
            param1.writeShort(this.prices.length);
            var _loc3_: number = 0;
            while (_loc3_ < this.prices.length) {
                if (this.prices[_loc3_] < 0) {
                    throw new Error('Forbidden value (' + this.prices[_loc3_] + ') on element 3 (starting at 1) of prices.');
                }
                param1.writeInt(this.prices[_loc3_]);
                _loc3_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_BidExchangerObjectInfo(param1);
        }

        public deserializeAs_BidExchangerObjectInfo(param1: ICustomDataInput): void {
            var _loc6_: number = 0;
            var _loc7_: ObjectEffect = null;
            var _loc8_: number = 0;
            this.objectUID = param1.readVarUhInt();
            if (this.objectUID < 0) {
                throw new Error('Forbidden value (' + this.objectUID + ') on element of BidExchangerObjectInfo.objectUID.');
            }
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc6_ = param1.readUnsignedShort();
                _loc7_ = <ObjectEffect>ProtocolTypeManager.getInstance(ObjectEffect, _loc6_);
                _loc7_.deserialize(param1);
                this.effects.push(_loc7_);
                _loc3_++;
            }
            var _loc4_: number = param1.readUnsignedShort();
            var _loc5_: number = 0;
            while (_loc5_ < _loc4_) {
            _loc8_ = param1.readInt();
                if (_loc8_ < 0) {
                    throw new Error('Forbidden value (' + _loc8_ + ') on elements of prices.');
                }
                this.prices.push(_loc8_);
                _loc5_++;
            }

        }
    }
    export class Item implements INetworkType {
        public static ID: number = 7;



        constructor() {

        }

        public getTypeId(): number {
            return Item.ID;
        }

        public reset(): void {

        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_Item(param1);
        }

        public serializeAs_Item(param1: ICustomDataOutput): void {

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_Item(param1);
        }

        public deserializeAs_Item(param1: ICustomDataInput): void {

        }
    }
    export class GoldItem extends Item implements INetworkType {
        public static ID: number = 123;

        sum: number;

        constructor() {
            this.sum = 0;
            super();
        }

        public getTypeId(): number {
            return GoldItem.ID;
        }

        public reset(): void {
            this.sum = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GoldItem(param1);
        }

        public serializeAs_GoldItem(param1: ICustomDataOutput): void {
            super.serializeAs_Item(param1);
            if (this.sum < 0) {
                throw new Error('Forbidden value (' + this.sum + ') on element sum.');
            }
            param1.writeVarInt(this.sum);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GoldItem(param1);
        }

        public deserializeAs_GoldItem(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.sum = param1.readVarUhInt();
            if (this.sum < 0) {
                throw new Error('Forbidden value (' + this.sum + ') on element of GoldItem.sum.');
            }

        }
    }
    export class ObjectItem extends Item implements INetworkType {
        public static ID: number = 37;

        position: number;
        objectGID: number;
        effects: ObjectEffect[];
        objectUID: number;
        quantity: number;

        constructor() {
            this.position = 63;
            this.objectGID = 0;
            this.effects = [];
            this.objectUID = 0;
            this.quantity = 0;
            super();
        }

        public getTypeId(): number {
            return ObjectItem.ID;
        }

        public reset(): void {
            this.position = 63;
            this.objectGID = 0;
            this.effects = [];
            this.objectUID = 0;
            this.quantity = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ObjectItem(param1);
        }

        public serializeAs_ObjectItem(param1: ICustomDataOutput): void {
            super.serializeAs_Item(param1);
            param1.writeByte(this.position);
            if (this.objectGID < 0) {
                throw new Error('Forbidden value (' + this.objectGID + ') on element objectGID.');
            }
            param1.writeVarShort(this.objectGID);
            param1.writeShort(this.effects.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.effects.length) {
                param1.writeShort((this.effects[_loc2_]).getTypeId());
                (this.effects[_loc2_]).serialize(param1);
                _loc2_++;
            }
            if (this.objectUID < 0) {
                throw new Error('Forbidden value (' + this.objectUID + ') on element objectUID.');
            }
            param1.writeVarInt(this.objectUID);
            if (this.quantity < 0) {
                throw new Error('Forbidden value (' + this.quantity + ') on element quantity.');
            }
            param1.writeVarInt(this.quantity);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ObjectItem(param1);
        }

        public deserializeAs_ObjectItem(param1: ICustomDataInput): void {
            var _loc4_: number = 0;
            var _loc5_: ObjectEffect = null;
            super.deserialize(param1);
            this.position = param1.readUnsignedByte();
            if (this.position < 0 || this.position > 255) {
                throw new Error('Forbidden value (' + this.position + ') on element of ObjectItem.position.');
            }
            this.objectGID = param1.readVarUhShort();
            if (this.objectGID < 0) {
                throw new Error('Forbidden value (' + this.objectGID + ') on element of ObjectItem.objectGID.');
            }
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = param1.readUnsignedShort();
                _loc5_ = <ObjectEffect>ProtocolTypeManager.getInstance(ObjectEffect, _loc4_);
                _loc5_.deserialize(param1);
                this.effects.push(_loc5_);
                _loc3_++;
            }
            this.objectUID = param1.readVarUhInt();
            if (this.objectUID < 0) {
                throw new Error('Forbidden value (' + this.objectUID + ') on element of ObjectItem.objectUID.');
            }
            this.quantity = param1.readVarUhInt();
            if (this.quantity < 0) {
                throw new Error('Forbidden value (' + this.quantity + ') on element of ObjectItem.quantity.');
            }

        }
    }
    export class ObjectItemGenericQuantity extends Item implements INetworkType {
        public static ID: number = 483;

        objectGID: number;
        quantity: number;

        constructor() {
            this.objectGID = 0;
            this.quantity = 0;
            super();
        }

        public getTypeId(): number {
            return ObjectItemGenericQuantity.ID;
        }

        public reset(): void {
            this.objectGID = 0;
            this.quantity = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ObjectItemGenericQuantity(param1);
        }

        public serializeAs_ObjectItemGenericQuantity(param1: ICustomDataOutput): void {
            super.serializeAs_Item(param1);
            if (this.objectGID < 0) {
                throw new Error('Forbidden value (' + this.objectGID + ') on element objectGID.');
            }
            param1.writeVarShort(this.objectGID);
            if (this.quantity < 0) {
                throw new Error('Forbidden value (' + this.quantity + ') on element quantity.');
            }
            param1.writeVarInt(this.quantity);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ObjectItemGenericQuantity(param1);
        }

        public deserializeAs_ObjectItemGenericQuantity(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.objectGID = param1.readVarUhShort();
            if (this.objectGID < 0) {
                throw new Error('Forbidden value (' + this.objectGID + ') on element of ObjectItemGenericQuantity.objectGID.');
            }
            this.quantity = param1.readVarUhInt();
            if (this.quantity < 0) {
                throw new Error('Forbidden value (' + this.quantity + ') on element of ObjectItemGenericQuantity.quantity.');
            }

        }
    }
    export class ObjectItemMinimalInformation extends Item implements INetworkType {
        public static ID: number = 124;

        objectGID: number;
        effects: ObjectEffect[];

        constructor() {
            this.objectGID = 0;
            this.effects = [];
            super();
        }

        public getTypeId(): number {
            return ObjectItemMinimalInformation.ID;
        }

        public reset(): void {
            this.objectGID = 0;
            this.effects = [];
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ObjectItemMinimalInformation(param1);
        }

        public serializeAs_ObjectItemMinimalInformation(param1: ICustomDataOutput): void {
            super.serializeAs_Item(param1);
            if (this.objectGID < 0) {
                throw new Error('Forbidden value (' + this.objectGID + ') on element objectGID.');
            }
            param1.writeVarShort(this.objectGID);
            param1.writeShort(this.effects.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.effects.length) {
                param1.writeShort((this.effects[_loc2_]).getTypeId());
                (this.effects[_loc2_]).serialize(param1);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ObjectItemMinimalInformation(param1);
        }

        public deserializeAs_ObjectItemMinimalInformation(param1: ICustomDataInput): void {
            var _loc4_: number = 0;
            var _loc5_: ObjectEffect = null;
            super.deserialize(param1);
            this.objectGID = param1.readVarUhShort();
            if (this.objectGID < 0) {
                throw new Error('Forbidden value (' + this.objectGID + ') on element of ObjectItemMinimalInformation.objectGID.');
            }
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = param1.readUnsignedShort();
                _loc5_ = <ObjectEffect>ProtocolTypeManager.getInstance(ObjectEffect, _loc4_);
                _loc5_.deserialize(param1);
                this.effects.push(_loc5_);
                _loc3_++;
            }

        }
    }
    export class ObjectItemInformationWithQuantity extends ObjectItemMinimalInformation implements INetworkType {
        public static ID: number = 387;

        quantity: number;

        constructor() {
            this.quantity = 0;
            super();
        }

        public getTypeId(): number {
            return ObjectItemInformationWithQuantity.ID;
        }

        public reset(): void {
            this.quantity = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ObjectItemInformationWithQuantity(param1);
        }

        public serializeAs_ObjectItemInformationWithQuantity(param1: ICustomDataOutput): void {
            super.serializeAs_ObjectItemMinimalInformation(param1);
            if (this.quantity < 0) {
                throw new Error('Forbidden value (' + this.quantity + ') on element quantity.');
            }
            param1.writeVarInt(this.quantity);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ObjectItemInformationWithQuantity(param1);
        }

        public deserializeAs_ObjectItemInformationWithQuantity(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.quantity = param1.readVarUhInt();
            if (this.quantity < 0) {
                throw new Error('Forbidden value (' + this.quantity + ') on element of ObjectItemInformationWithQuantity.quantity.');
            }

        }
    }
    export class ObjectItemNotInContainer extends Item implements INetworkType {
        public static ID: number = 134;

        objectGID: number;
        effects: ObjectEffect[];
        objectUID: number;
        quantity: number;

        constructor() {
            this.objectGID = 0;
            this.effects = [];
            this.objectUID = 0;
            this.quantity = 0;
            super();
        }

        public getTypeId(): number {
            return ObjectItemNotInContainer.ID;
        }

        public reset(): void {
            this.objectGID = 0;
            this.effects = [];
            this.objectUID = 0;
            this.quantity = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ObjectItemNotInContainer(param1);
        }

        public serializeAs_ObjectItemNotInContainer(param1: ICustomDataOutput): void {
            super.serializeAs_Item(param1);
            if (this.objectGID < 0) {
                throw new Error('Forbidden value (' + this.objectGID + ') on element objectGID.');
            }
            param1.writeVarShort(this.objectGID);
            param1.writeShort(this.effects.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.effects.length) {
                param1.writeShort((this.effects[_loc2_]).getTypeId());
                (this.effects[_loc2_]).serialize(param1);
                _loc2_++;
            }
            if (this.objectUID < 0) {
                throw new Error('Forbidden value (' + this.objectUID + ') on element objectUID.');
            }
            param1.writeVarInt(this.objectUID);
            if (this.quantity < 0) {
                throw new Error('Forbidden value (' + this.quantity + ') on element quantity.');
            }
            param1.writeVarInt(this.quantity);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ObjectItemNotInContainer(param1);
        }

        public deserializeAs_ObjectItemNotInContainer(param1: ICustomDataInput): void {
            var _loc4_: number = 0;
            var _loc5_: ObjectEffect = null;
            super.deserialize(param1);
            this.objectGID = param1.readVarUhShort();
            if (this.objectGID < 0) {
                throw new Error('Forbidden value (' + this.objectGID + ') on element of ObjectItemNotInContainer.objectGID.');
            }
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = param1.readUnsignedShort();
                _loc5_ = <ObjectEffect>ProtocolTypeManager.getInstance(ObjectEffect, _loc4_);
                _loc5_.deserialize(param1);
                this.effects.push(_loc5_);
                _loc3_++;
            }
            this.objectUID = param1.readVarUhInt();
            if (this.objectUID < 0) {
                throw new Error('Forbidden value (' + this.objectUID + ') on element of ObjectItemNotInContainer.objectUID.');
            }
            this.quantity = param1.readVarUhInt();
            if (this.quantity < 0) {
                throw new Error('Forbidden value (' + this.quantity + ') on element of ObjectItemNotInContainer.quantity.');
            }

        }
    }
    export class ObjectItemQuantity extends Item implements INetworkType {
        public static ID: number = 119;

        objectUID: number;
        quantity: number;

        constructor() {
            this.objectUID = 0;
            this.quantity = 0;
            super();
        }

        public getTypeId(): number {
            return ObjectItemQuantity.ID;
        }

        public reset(): void {
            this.objectUID = 0;
            this.quantity = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ObjectItemQuantity(param1);
        }

        public serializeAs_ObjectItemQuantity(param1: ICustomDataOutput): void {
            super.serializeAs_Item(param1);
            if (this.objectUID < 0) {
                throw new Error('Forbidden value (' + this.objectUID + ') on element objectUID.');
            }
            param1.writeVarInt(this.objectUID);
            if (this.quantity < 0) {
                throw new Error('Forbidden value (' + this.quantity + ') on element quantity.');
            }
            param1.writeVarInt(this.quantity);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ObjectItemQuantity(param1);
        }

        public deserializeAs_ObjectItemQuantity(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.objectUID = param1.readVarUhInt();
            if (this.objectUID < 0) {
                throw new Error('Forbidden value (' + this.objectUID + ') on element of ObjectItemQuantity.objectUID.');
            }
            this.quantity = param1.readVarUhInt();
            if (this.quantity < 0) {
                throw new Error('Forbidden value (' + this.quantity + ') on element of ObjectItemQuantity.quantity.');
            }

        }
    }
    export class ObjectItemToSell extends Item implements INetworkType {
        public static ID: number = 120;

        objectGID: number;
        effects: ObjectEffect[];
        objectUID: number;
        quantity: number;
        objectPrice: number;

        constructor() {
            this.objectGID = 0;
            this.effects = [];
            this.objectUID = 0;
            this.quantity = 0;
            this.objectPrice = 0;
            super();
        }

        public getTypeId(): number {
            return ObjectItemToSell.ID;
        }

        public reset(): void {
            this.objectGID = 0;
            this.effects = [];
            this.objectUID = 0;
            this.quantity = 0;
            this.objectPrice = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ObjectItemToSell(param1);
        }

        public serializeAs_ObjectItemToSell(param1: ICustomDataOutput): void {
            super.serializeAs_Item(param1);
            if (this.objectGID < 0) {
                throw new Error('Forbidden value (' + this.objectGID + ') on element objectGID.');
            }
            param1.writeVarShort(this.objectGID);
            param1.writeShort(this.effects.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.effects.length) {
                param1.writeShort((this.effects[_loc2_]).getTypeId());
                (this.effects[_loc2_]).serialize(param1);
                _loc2_++;
            }
            if (this.objectUID < 0) {
                throw new Error('Forbidden value (' + this.objectUID + ') on element objectUID.');
            }
            param1.writeVarInt(this.objectUID);
            if (this.quantity < 0) {
                throw new Error('Forbidden value (' + this.quantity + ') on element quantity.');
            }
            param1.writeVarInt(this.quantity);
            if (this.objectPrice < 0) {
                throw new Error('Forbidden value (' + this.objectPrice + ') on element objectPrice.');
            }
            param1.writeVarInt(this.objectPrice);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ObjectItemToSell(param1);
        }

        public deserializeAs_ObjectItemToSell(param1: ICustomDataInput): void {
            var _loc4_: number = 0;
            var _loc5_: ObjectEffect = null;
            super.deserialize(param1);
            this.objectGID = param1.readVarUhShort();
            if (this.objectGID < 0) {
                throw new Error('Forbidden value (' + this.objectGID + ') on element of ObjectItemToSell.objectGID.');
            }
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = param1.readUnsignedShort();
                _loc5_ = <ObjectEffect>ProtocolTypeManager.getInstance(ObjectEffect, _loc4_);
                _loc5_.deserialize(param1);
                this.effects.push(_loc5_);
                _loc3_++;
            }
            this.objectUID = param1.readVarUhInt();
            if (this.objectUID < 0) {
                throw new Error('Forbidden value (' + this.objectUID + ') on element of ObjectItemToSell.objectUID.');
            }
            this.quantity = param1.readVarUhInt();
            if (this.quantity < 0) {
                throw new Error('Forbidden value (' + this.quantity + ') on element of ObjectItemToSell.quantity.');
            }
            this.objectPrice = param1.readVarUhInt();
            if (this.objectPrice < 0) {
                throw new Error('Forbidden value (' + this.objectPrice + ') on element of ObjectItemToSell.objectPrice.');
            }

        }
    }
    export class ObjectItemToSellInBid extends ObjectItemToSell implements INetworkType {
        public static ID: number = 164;

        unsoldDelay: number;

        constructor() {
            this.unsoldDelay = 0;
            super();
        }

        public getTypeId(): number {
            return ObjectItemToSellInBid.ID;
        }

        public reset(): void {
            this.unsoldDelay = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ObjectItemToSellInBid(param1);
        }

        public serializeAs_ObjectItemToSellInBid(param1: ICustomDataOutput): void {
            super.serializeAs_ObjectItemToSell(param1);
            if (this.unsoldDelay < 0) {
                throw new Error('Forbidden value (' + this.unsoldDelay + ') on element unsoldDelay.');
            }
            param1.writeInt(this.unsoldDelay);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ObjectItemToSellInBid(param1);
        }

        public deserializeAs_ObjectItemToSellInBid(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.unsoldDelay = param1.readInt();
            if (this.unsoldDelay < 0) {
                throw new Error('Forbidden value (' + this.unsoldDelay + ') on element of ObjectItemToSellInBid.unsoldDelay.');
            }

        }
    }
    export class ObjectItemToSellInHumanVendorShop extends Item implements INetworkType {
        public static ID: number = 359;

        objectGID: number;
        effects: ObjectEffect[];
        objectUID: number;
        quantity: number;
        objectPrice: number;
        publicPrice: number;

        constructor() {
            this.objectGID = 0;
            this.effects = [];
            this.objectUID = 0;
            this.quantity = 0;
            this.objectPrice = 0;
            this.publicPrice = 0;
            super();
        }

        public getTypeId(): number {
            return ObjectItemToSellInHumanVendorShop.ID;
        }

        public reset(): void {
            this.objectGID = 0;
            this.effects = [];
            this.objectUID = 0;
            this.quantity = 0;
            this.objectPrice = 0;
            this.publicPrice = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ObjectItemToSellInHumanVendorShop(param1);
        }

        public serializeAs_ObjectItemToSellInHumanVendorShop(param1: ICustomDataOutput): void {
            super.serializeAs_Item(param1);
            if (this.objectGID < 0) {
                throw new Error('Forbidden value (' + this.objectGID + ') on element objectGID.');
            }
            param1.writeVarShort(this.objectGID);
            param1.writeShort(this.effects.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.effects.length) {
                param1.writeShort((this.effects[_loc2_]).getTypeId());
                (this.effects[_loc2_]).serialize(param1);
                _loc2_++;
            }
            if (this.objectUID < 0) {
                throw new Error('Forbidden value (' + this.objectUID + ') on element objectUID.');
            }
            param1.writeVarInt(this.objectUID);
            if (this.quantity < 0) {
                throw new Error('Forbidden value (' + this.quantity + ') on element quantity.');
            }
            param1.writeVarInt(this.quantity);
            if (this.objectPrice < 0) {
                throw new Error('Forbidden value (' + this.objectPrice + ') on element objectPrice.');
            }
            param1.writeVarInt(this.objectPrice);
            if (this.publicPrice < 0) {
                throw new Error('Forbidden value (' + this.publicPrice + ') on element publicPrice.');
            }
            param1.writeVarInt(this.publicPrice);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ObjectItemToSellInHumanVendorShop(param1);
        }

        public deserializeAs_ObjectItemToSellInHumanVendorShop(param1: ICustomDataInput): void {
            var _loc4_: number = 0;
            var _loc5_: ObjectEffect = null;
            super.deserialize(param1);
            this.objectGID = param1.readVarUhShort();
            if (this.objectGID < 0) {
                throw new Error('Forbidden value (' + this.objectGID + ') on element of ObjectItemToSellInHumanVendorShop.objectGID.');
            }
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = param1.readUnsignedShort();
                _loc5_ = <ObjectEffect>ProtocolTypeManager.getInstance(ObjectEffect, _loc4_);
                _loc5_.deserialize(param1);
                this.effects.push(_loc5_);
                _loc3_++;
            }
            this.objectUID = param1.readVarUhInt();
            if (this.objectUID < 0) {
                throw new Error('Forbidden value (' + this.objectUID + ') on element of ObjectItemToSellInHumanVendorShop.objectUID.');
            }
            this.quantity = param1.readVarUhInt();
            if (this.quantity < 0) {
                throw new Error('Forbidden value (' + this.quantity + ') on element of ObjectItemToSellInHumanVendorShop.quantity.');
            }
            this.objectPrice = param1.readVarUhInt();
            if (this.objectPrice < 0) {
                throw new Error('Forbidden value (' + this.objectPrice + ') on element of ObjectItemToSellInHumanVendorShop.objectPrice.');
            }
            this.publicPrice = param1.readVarUhInt();
            if (this.publicPrice < 0) {
                throw new Error('Forbidden value (' + this.publicPrice + ') on element of ObjectItemToSellInHumanVendorShop.publicPrice.');
            }

        }
    }
    export class ObjectItemToSellInNpcShop extends ObjectItemMinimalInformation implements INetworkType {
        public static ID: number = 352;

        objectPrice: number;
        buyCriterion: string;

        constructor() {
            this.objectPrice = 0;
            this.buyCriterion = '';
            super();
        }

        public getTypeId(): number {
            return ObjectItemToSellInNpcShop.ID;
        }

        public reset(): void {
            this.objectPrice = 0;
            this.buyCriterion = '';
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ObjectItemToSellInNpcShop(param1);
        }

        public serializeAs_ObjectItemToSellInNpcShop(param1: ICustomDataOutput): void {
            super.serializeAs_ObjectItemMinimalInformation(param1);
            if (this.objectPrice < 0) {
                throw new Error('Forbidden value (' + this.objectPrice + ') on element objectPrice.');
            }
            param1.writeVarInt(this.objectPrice);
            param1.writeUTF(this.buyCriterion);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ObjectItemToSellInNpcShop(param1);
        }

        public deserializeAs_ObjectItemToSellInNpcShop(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.objectPrice = param1.readVarUhInt();
            if (this.objectPrice < 0) {
                throw new Error('Forbidden value (' + this.objectPrice + ') on element of ObjectItemToSellInNpcShop.objectPrice.');
            }
            this.buyCriterion = param1.readUTF();

        }
    }
    export class SellerBuyerDescriptor implements INetworkType {
        public static ID: number = 121;

        quantities: number[];
        types: number[];
        taxPercentage: number;
        taxModificationPercentage: number;
        maxItemLevel: number;
        maxItemPerAccount: number;
        npcContextualId: number;
        unsoldDelay: number;

        constructor() {
            this.quantities = [];
            this.types = [];
            this.taxPercentage = 0;
            this.taxModificationPercentage = 0;
            this.maxItemLevel = 0;
            this.maxItemPerAccount = 0;
            this.npcContextualId = 0;
            this.unsoldDelay = 0;
        }

        public getTypeId(): number {
            return SellerBuyerDescriptor.ID;
        }

        public reset(): void {
            this.quantities = [];
            this.types = [];
            this.taxPercentage = 0;
            this.taxModificationPercentage = 0;
            this.maxItemLevel = 0;
            this.maxItemPerAccount = 0;
            this.npcContextualId = 0;
            this.unsoldDelay = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_SellerBuyerDescriptor(param1);
        }

        public serializeAs_SellerBuyerDescriptor(param1: ICustomDataOutput): void {
            param1.writeShort(this.quantities.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.quantities.length) {
                if (this.quantities[_loc2_] < 0) {
                    throw new Error('Forbidden value (' + this.quantities[_loc2_] + ') on element 1 (starting at 1) of quantities.');
                }
                param1.writeVarInt(this.quantities[_loc2_]);
                _loc2_++;
            }
            param1.writeShort(this.types.length);
            var _loc3_: number = 0;
            while (_loc3_ < this.types.length) {
                if (this.types[_loc3_] < 0) {
                    throw new Error('Forbidden value (' + this.types[_loc3_] + ') on element 2 (starting at 1) of types.');
                }
                param1.writeVarInt(this.types[_loc3_]);
                _loc3_++;
            }
            param1.writeFloat(this.taxPercentage);
            param1.writeFloat(this.taxModificationPercentage);
            if (this.maxItemLevel < 0 || this.maxItemLevel > 255) {
                throw new Error('Forbidden value (' + this.maxItemLevel + ') on element maxItemLevel.');
            }
            param1.writeByte(this.maxItemLevel);
            if (this.maxItemPerAccount < 0) {
                throw new Error('Forbidden value (' + this.maxItemPerAccount + ') on element maxItemPerAccount.');
            }
            param1.writeVarInt(this.maxItemPerAccount);
            param1.writeInt(this.npcContextualId);
            if (this.unsoldDelay < 0) {
                throw new Error('Forbidden value (' + this.unsoldDelay + ') on element unsoldDelay.');
            }
            param1.writeVarShort(this.unsoldDelay);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_SellerBuyerDescriptor(param1);
        }

        public deserializeAs_SellerBuyerDescriptor(param1: ICustomDataInput): void {
            var _loc6_: number = 0;
            var _loc7_: number = 0;
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc6_ = param1.readVarUhInt();
                if (_loc6_ < 0) {
                    throw new Error('Forbidden value (' + _loc6_ + ') on elements of quantities.');
                }
                this.quantities.push(_loc6_);
                _loc3_++;
            }
            var _loc4_: number = param1.readUnsignedShort();
            var _loc5_: number = 0;
            while (_loc5_ < _loc4_) {
            _loc7_ = param1.readVarUhInt();
                if (_loc7_ < 0) {
                    throw new Error('Forbidden value (' + _loc7_ + ') on elements of types.');
                }
                this.types.push(_loc7_);
                _loc5_++;
            }
            this.taxPercentage = param1.readFloat();
            this.taxModificationPercentage = param1.readFloat();
            this.maxItemLevel = param1.readUnsignedByte();
            if (this.maxItemLevel < 0 || this.maxItemLevel > 255) {
                throw new Error('Forbidden value (' + this.maxItemLevel + ') on element of SellerBuyerDescriptor.maxItemLevel.');
            }
            this.maxItemPerAccount = param1.readVarUhInt();
            if (this.maxItemPerAccount < 0) {
                throw new Error('Forbidden value (' + this.maxItemPerAccount + ') on element of SellerBuyerDescriptor.maxItemPerAccount.');
            }
            this.npcContextualId = param1.readInt();
            this.unsoldDelay = param1.readVarUhShort();
            if (this.unsoldDelay < 0) {
                throw new Error('Forbidden value (' + this.unsoldDelay + ') on element of SellerBuyerDescriptor.unsoldDelay.');
            }

        }
    }
    export class SpellItem extends Item implements INetworkType {
        public static ID: number = 49;

        position: number;
        spellId: number;
        spellLevel: number;

        constructor() {
            this.position = 0;
            this.spellId = 0;
            this.spellLevel = 0;
            super();
        }

        public getTypeId(): number {
            return SpellItem.ID;
        }

        public reset(): void {
            this.position = 0;
            this.spellId = 0;
            this.spellLevel = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_SpellItem(param1);
        }

        public serializeAs_SpellItem(param1: ICustomDataOutput): void {
            super.serializeAs_Item(param1);
            if (this.position < 63 || this.position > 255) {
                throw new Error('Forbidden value (' + this.position + ') on element position.');
            }
            param1.writeByte(this.position);
            param1.writeInt(this.spellId);
            if (this.spellLevel < 1 || this.spellLevel > 6) {
                throw new Error('Forbidden value (' + this.spellLevel + ') on element spellLevel.');
            }
            param1.writeByte(this.spellLevel);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_SpellItem(param1);
        }

        public deserializeAs_SpellItem(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.position = param1.readUnsignedByte();
            if (this.position < 63 || this.position > 255) {
                throw new Error('Forbidden value (' + this.position + ') on element of SpellItem.position.');
            }
            this.spellId = param1.readInt();
            this.spellLevel = param1.readByte();
            if (this.spellLevel < 1 || this.spellLevel > 6) {
                throw new Error('Forbidden value (' + this.spellLevel + ') on element of SpellItem.spellLevel.');
            }

        }
    }
    export class ObjectEffect implements INetworkType {
        public static ID: number = 76;

        actionId: number;

        constructor() {
            this.actionId = 0;
        }

        public getTypeId(): number {
            return ObjectEffect.ID;
        }

        public reset(): void {
            this.actionId = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ObjectEffect(param1);
        }

        public serializeAs_ObjectEffect(param1: ICustomDataOutput): void {
            if (this.actionId < 0) {
                throw new Error('Forbidden value (' + this.actionId + ') on element actionId.');
            }
            param1.writeVarShort(this.actionId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ObjectEffect(param1);
        }

        public deserializeAs_ObjectEffect(param1: ICustomDataInput): void {
            this.actionId = param1.readVarUhShort();
            if (this.actionId < 0) {
                throw new Error('Forbidden value (' + this.actionId + ') on element of ObjectEffect.actionId.');
            }

        }
    }
    export class ObjectEffectCreature extends ObjectEffect implements INetworkType {
        public static ID: number = 71;

        monsterFamilyId: number;

        constructor() {
            this.monsterFamilyId = 0;
            super();
        }

        public getTypeId(): number {
            return ObjectEffectCreature.ID;
        }

        public reset(): void {
            this.monsterFamilyId = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ObjectEffectCreature(param1);
        }

        public serializeAs_ObjectEffectCreature(param1: ICustomDataOutput): void {
            super.serializeAs_ObjectEffect(param1);
            if (this.monsterFamilyId < 0) {
                throw new Error('Forbidden value (' + this.monsterFamilyId + ') on element monsterFamilyId.');
            }
            param1.writeVarShort(this.monsterFamilyId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ObjectEffectCreature(param1);
        }

        public deserializeAs_ObjectEffectCreature(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.monsterFamilyId = param1.readVarUhShort();
            if (this.monsterFamilyId < 0) {
                throw new Error('Forbidden value (' + this.monsterFamilyId + ') on element of ObjectEffectCreature.monsterFamilyId.');
            }

        }
    }
    export class ObjectEffectDate extends ObjectEffect implements INetworkType {
        public static ID: number = 72;

        year: number;
        month: number;
        day: number;
        hour: number;
        minute: number;

        constructor() {
            this.year = 0;
            this.month = 0;
            this.day = 0;
            this.hour = 0;
            this.minute = 0;
            super();
        }

        public getTypeId(): number {
            return ObjectEffectDate.ID;
        }

        public reset(): void {
            this.year = 0;
            this.month = 0;
            this.day = 0;
            this.hour = 0;
            this.minute = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ObjectEffectDate(param1);
        }

        public serializeAs_ObjectEffectDate(param1: ICustomDataOutput): void {
            super.serializeAs_ObjectEffect(param1);
            if (this.year < 0) {
                throw new Error('Forbidden value (' + this.year + ') on element year.');
            }
            param1.writeVarShort(this.year);
            if (this.month < 0) {
                throw new Error('Forbidden value (' + this.month + ') on element month.');
            }
            param1.writeByte(this.month);
            if (this.day < 0) {
                throw new Error('Forbidden value (' + this.day + ') on element day.');
            }
            param1.writeByte(this.day);
            if (this.hour < 0) {
                throw new Error('Forbidden value (' + this.hour + ') on element hour.');
            }
            param1.writeByte(this.hour);
            if (this.minute < 0) {
                throw new Error('Forbidden value (' + this.minute + ') on element minute.');
            }
            param1.writeByte(this.minute);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ObjectEffectDate(param1);
        }

        public deserializeAs_ObjectEffectDate(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.year = param1.readVarUhShort();
            if (this.year < 0) {
                throw new Error('Forbidden value (' + this.year + ') on element of ObjectEffectDate.year.');
            }
            this.month = param1.readByte();
            if (this.month < 0) {
                throw new Error('Forbidden value (' + this.month + ') on element of ObjectEffectDate.month.');
            }
            this.day = param1.readByte();
            if (this.day < 0) {
                throw new Error('Forbidden value (' + this.day + ') on element of ObjectEffectDate.day.');
            }
            this.hour = param1.readByte();
            if (this.hour < 0) {
                throw new Error('Forbidden value (' + this.hour + ') on element of ObjectEffectDate.hour.');
            }
            this.minute = param1.readByte();
            if (this.minute < 0) {
                throw new Error('Forbidden value (' + this.minute + ') on element of ObjectEffectDate.minute.');
            }

        }
    }
    export class ObjectEffectDice extends ObjectEffect implements INetworkType {
        public static ID: number = 73;

        diceNum: number;
        diceSide: number;
        diceConst: number;

        constructor() {
            this.diceNum = 0;
            this.diceSide = 0;
            this.diceConst = 0;
            super();
        }

        public getTypeId(): number {
            return ObjectEffectDice.ID;
        }

        public reset(): void {
            this.diceNum = 0;
            this.diceSide = 0;
            this.diceConst = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ObjectEffectDice(param1);
        }

        public serializeAs_ObjectEffectDice(param1: ICustomDataOutput): void {
            super.serializeAs_ObjectEffect(param1);
            if (this.diceNum < 0) {
                throw new Error('Forbidden value (' + this.diceNum + ') on element diceNum.');
            }
            param1.writeVarShort(this.diceNum);
            if (this.diceSide < 0) {
                throw new Error('Forbidden value (' + this.diceSide + ') on element diceSide.');
            }
            param1.writeVarShort(this.diceSide);
            if (this.diceConst < 0) {
                throw new Error('Forbidden value (' + this.diceConst + ') on element diceConst.');
            }
            param1.writeVarShort(this.diceConst);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ObjectEffectDice(param1);
        }

        public deserializeAs_ObjectEffectDice(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.diceNum = param1.readVarUhShort();
            if (this.diceNum < 0) {
                throw new Error('Forbidden value (' + this.diceNum + ') on element of ObjectEffectDice.diceNum.');
            }
            this.diceSide = param1.readVarUhShort();
            if (this.diceSide < 0) {
                throw new Error('Forbidden value (' + this.diceSide + ') on element of ObjectEffectDice.diceSide.');
            }
            this.diceConst = param1.readVarUhShort();
            if (this.diceConst < 0) {
                throw new Error('Forbidden value (' + this.diceConst + ') on element of ObjectEffectDice.diceConst.');
            }

        }
    }
    export class ObjectEffectDuration extends ObjectEffect implements INetworkType {
        public static ID: number = 75;

        days: number;
        hours: number;
        minutes: number;

        constructor() {
            this.days = 0;
            this.hours = 0;
            this.minutes = 0;
            super();
        }

        public getTypeId(): number {
            return ObjectEffectDuration.ID;
        }

        public reset(): void {
            this.days = 0;
            this.hours = 0;
            this.minutes = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ObjectEffectDuration(param1);
        }

        public serializeAs_ObjectEffectDuration(param1: ICustomDataOutput): void {
            super.serializeAs_ObjectEffect(param1);
            if (this.days < 0) {
                throw new Error('Forbidden value (' + this.days + ') on element days.');
            }
            param1.writeVarShort(this.days);
            if (this.hours < 0) {
                throw new Error('Forbidden value (' + this.hours + ') on element hours.');
            }
            param1.writeByte(this.hours);
            if (this.minutes < 0) {
                throw new Error('Forbidden value (' + this.minutes + ') on element minutes.');
            }
            param1.writeByte(this.minutes);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ObjectEffectDuration(param1);
        }

        public deserializeAs_ObjectEffectDuration(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.days = param1.readVarUhShort();
            if (this.days < 0) {
                throw new Error('Forbidden value (' + this.days + ') on element of ObjectEffectDuration.days.');
            }
            this.hours = param1.readByte();
            if (this.hours < 0) {
                throw new Error('Forbidden value (' + this.hours + ') on element of ObjectEffectDuration.hours.');
            }
            this.minutes = param1.readByte();
            if (this.minutes < 0) {
                throw new Error('Forbidden value (' + this.minutes + ') on element of ObjectEffectDuration.minutes.');
            }

        }
    }
    export class ObjectEffectInteger extends ObjectEffect implements INetworkType {
        public static ID: number = 70;

        value: number;

        constructor() {
            this.value = 0;
            super();
        }

        public getTypeId(): number {
            return ObjectEffectInteger.ID;
        }

        public reset(): void {
            this.value = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ObjectEffectInteger(param1);
        }

        public serializeAs_ObjectEffectInteger(param1: ICustomDataOutput): void {
            super.serializeAs_ObjectEffect(param1);
            if (this.value < 0) {
                throw new Error('Forbidden value (' + this.value + ') on element value.');
            }
            param1.writeVarShort(this.value);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ObjectEffectInteger(param1);
        }

        public deserializeAs_ObjectEffectInteger(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.value = param1.readVarUhShort();
            if (this.value < 0) {
                throw new Error('Forbidden value (' + this.value + ') on element of ObjectEffectInteger.value.');
            }

        }
    }
    export class ObjectEffectLadder extends ObjectEffectCreature implements INetworkType {
        public static ID: number = 81;

        monsterCount: number;

        constructor() {
            this.monsterCount = 0;
            super();
        }

        public getTypeId(): number {
            return ObjectEffectLadder.ID;
        }

        public reset(): void {
            this.monsterCount = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ObjectEffectLadder(param1);
        }

        public serializeAs_ObjectEffectLadder(param1: ICustomDataOutput): void {
            super.serializeAs_ObjectEffectCreature(param1);
            if (this.monsterCount < 0) {
                throw new Error('Forbidden value (' + this.monsterCount + ') on element monsterCount.');
            }
            param1.writeVarInt(this.monsterCount);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ObjectEffectLadder(param1);
        }

        public deserializeAs_ObjectEffectLadder(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.monsterCount = param1.readVarUhInt();
            if (this.monsterCount < 0) {
                throw new Error('Forbidden value (' + this.monsterCount + ') on element of ObjectEffectLadder.monsterCount.');
            }

        }
    }
    export class ObjectEffectMinMax extends ObjectEffect implements INetworkType {
        public static ID: number = 82;

        min: number;
        max: number;

        constructor() {
            this.min = 0;
            this.max = 0;
            super();
        }

        public getTypeId(): number {
            return ObjectEffectMinMax.ID;
        }

        public reset(): void {
            this.min = 0;
            this.max = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ObjectEffectMinMax(param1);
        }

        public serializeAs_ObjectEffectMinMax(param1: ICustomDataOutput): void {
            super.serializeAs_ObjectEffect(param1);
            if (this.min < 0) {
                throw new Error('Forbidden value (' + this.min + ') on element min.');
            }
            param1.writeVarInt(this.min);
            if (this.max < 0) {
                throw new Error('Forbidden value (' + this.max + ') on element max.');
            }
            param1.writeVarInt(this.max);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ObjectEffectMinMax(param1);
        }

        public deserializeAs_ObjectEffectMinMax(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.min = param1.readVarUhInt();
            if (this.min < 0) {
                throw new Error('Forbidden value (' + this.min + ') on element of ObjectEffectMinMax.min.');
            }
            this.max = param1.readVarUhInt();
            if (this.max < 0) {
                throw new Error('Forbidden value (' + this.max + ') on element of ObjectEffectMinMax.max.');
            }

        }
    }
    export class ObjectEffectMount extends ObjectEffect implements INetworkType {
        public static ID: number = 179;

        mountId: number;
        date: number;
        modelId: number;

        constructor() {
            this.mountId = 0;
            this.date = 0;
            this.modelId = 0;
            super();
        }

        public getTypeId(): number {
            return ObjectEffectMount.ID;
        }

        public reset(): void {
            this.mountId = 0;
            this.date = 0;
            this.modelId = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ObjectEffectMount(param1);
        }

        public serializeAs_ObjectEffectMount(param1: ICustomDataOutput): void {
            super.serializeAs_ObjectEffect(param1);
            if (this.mountId < 0) {
                throw new Error('Forbidden value (' + this.mountId + ') on element mountId.');
            }
            param1.writeInt(this.mountId);
            if (this.date < -9.007199254740992E15 || this.date > 9.007199254740992E15) {
                throw new Error('Forbidden value (' + this.date + ') on element date.');
            }
            param1.writeDouble(this.date);
            if (this.modelId < 0) {
                throw new Error('Forbidden value (' + this.modelId + ') on element modelId.');
            }
            param1.writeVarShort(this.modelId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ObjectEffectMount(param1);
        }

        public deserializeAs_ObjectEffectMount(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.mountId = param1.readInt();
            if (this.mountId < 0) {
                throw new Error('Forbidden value (' + this.mountId + ') on element of ObjectEffectMount.mountId.');
            }
            this.date = param1.readDouble();
            if (this.date < -9.007199254740992E15 || this.date > 9.007199254740992E15) {
                throw new Error('Forbidden value (' + this.date + ') on element of ObjectEffectMount.date.');
            }
            this.modelId = param1.readVarUhShort();
            if (this.modelId < 0) {
                throw new Error('Forbidden value (' + this.modelId + ') on element of ObjectEffectMount.modelId.');
            }

        }
    }
    export class ObjectEffectString extends ObjectEffect implements INetworkType {
        public static ID: number = 74;

        value: string;

        constructor() {
            this.value = '';
            super();
        }

        public getTypeId(): number {
            return ObjectEffectString.ID;
        }

        public reset(): void {
            this.value = '';
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ObjectEffectString(param1);
        }

        public serializeAs_ObjectEffectString(param1: ICustomDataOutput): void {
            super.serializeAs_ObjectEffect(param1);
            param1.writeUTF(this.value);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ObjectEffectString(param1);
        }

        public deserializeAs_ObjectEffectString(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.value = param1.readUTF();

        }
    }
    export class ProtectedEntityWaitingForHelpInfo implements INetworkType {
        public static ID: number = 186;

        timeLeftBeforeFight: number;
        waitTimeForPlacement: number;
        nbPositionForDefensors: number;

        constructor() {
            this.timeLeftBeforeFight = 0;
            this.waitTimeForPlacement = 0;
            this.nbPositionForDefensors = 0;
        }

        public getTypeId(): number {
            return ProtectedEntityWaitingForHelpInfo.ID;
        }

        public reset(): void {
            this.timeLeftBeforeFight = 0;
            this.waitTimeForPlacement = 0;
            this.nbPositionForDefensors = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ProtectedEntityWaitingForHelpInfo(param1);
        }

        public serializeAs_ProtectedEntityWaitingForHelpInfo(param1: ICustomDataOutput): void {
            param1.writeInt(this.timeLeftBeforeFight);
            param1.writeInt(this.waitTimeForPlacement);
            if (this.nbPositionForDefensors < 0) {
                throw new Error('Forbidden value (' + this.nbPositionForDefensors + ') on element nbPositionForDefensors.');
            }
            param1.writeByte(this.nbPositionForDefensors);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ProtectedEntityWaitingForHelpInfo(param1);
        }

        public deserializeAs_ProtectedEntityWaitingForHelpInfo(param1: ICustomDataInput): void {
            this.timeLeftBeforeFight = param1.readInt();
            this.waitTimeForPlacement = param1.readInt();
            this.nbPositionForDefensors = param1.readByte();
            if (this.nbPositionForDefensors < 0) {
                throw new Error('Forbidden value (' + this.nbPositionForDefensors + ') on element of ProtectedEntityWaitingForHelpInfo.nbPositionForDefensors.');
            }

        }
    }
    export class AbstractContactInformations implements INetworkType {
        public static ID: number = 380;

        accountId: number;
        accountName: string;

        constructor() {
            this.accountId = 0;
            this.accountName = '';
        }

        public getTypeId(): number {
            return AbstractContactInformations.ID;
        }

        public reset(): void {
            this.accountId = 0;
            this.accountName = '';
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_AbstractContactInformations(param1);
        }

        public serializeAs_AbstractContactInformations(param1: ICustomDataOutput): void {
            if (this.accountId < 0) {
                throw new Error('Forbidden value (' + this.accountId + ') on element accountId.');
            }
            param1.writeInt(this.accountId);
            param1.writeUTF(this.accountName);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_AbstractContactInformations(param1);
        }

        public deserializeAs_AbstractContactInformations(param1: ICustomDataInput): void {
            this.accountId = param1.readInt();
            if (this.accountId < 0) {
                throw new Error('Forbidden value (' + this.accountId + ') on element of AbstractContactInformations.accountId.');
            }
            this.accountName = param1.readUTF();

        }
    }
    export class FriendInformations extends AbstractContactInformations implements INetworkType {
        public static ID: number = 78;

        playerState: number;
        lastConnection: number;
        achievementPoints: number;

        constructor() {
            this.playerState = 99;
            this.lastConnection = 0;
            this.achievementPoints = 0;
            super();
        }

        public getTypeId(): number {
            return FriendInformations.ID;
        }

        public reset(): void {
            this.playerState = 99;
            this.lastConnection = 0;
            this.achievementPoints = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_FriendInformations(param1);
        }

        public serializeAs_FriendInformations(param1: ICustomDataOutput): void {
            super.serializeAs_AbstractContactInformations(param1);
            param1.writeByte(this.playerState);
            if (this.lastConnection < 0) {
                throw new Error('Forbidden value (' + this.lastConnection + ') on element lastConnection.');
            }
            param1.writeVarShort(this.lastConnection);
            param1.writeInt(this.achievementPoints);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_FriendInformations(param1);
        }

        public deserializeAs_FriendInformations(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.playerState = param1.readByte();
            if (this.playerState < 0) {
                throw new Error('Forbidden value (' + this.playerState + ') on element of FriendInformations.playerState.');
            }
            this.lastConnection = param1.readVarUhShort();
            if (this.lastConnection < 0) {
                throw new Error('Forbidden value (' + this.lastConnection + ') on element of FriendInformations.lastConnection.');
            }
            this.achievementPoints = param1.readInt();

        }
    }
    export class FriendOnlineInformations extends FriendInformations implements INetworkType {
        public static ID: number = 92;

        playerId: number;
        playerName: string;
        level: number;
        alignmentSide: number;
        breed: number;
        sex: boolean;
        guildInfo: BasicGuildInformations;
        moodSmileyId: number;
        status: PlayerStatus;

        constructor() {
            this.playerId = 0;
            this.playerName = '';
            this.level = 0;
            this.alignmentSide = 0;
            this.breed = 0;
            this.sex = false;
            this.guildInfo = new BasicGuildInformations();
            this.moodSmileyId = 0;
            this.status = new PlayerStatus();
            super();
        }

        public getTypeId(): number {
            return FriendOnlineInformations.ID;
        }

        public reset(): void {
            this.playerId = 0;
            this.playerName = '';
            this.level = 0;
            this.alignmentSide = 0;
            this.breed = 0;
            this.sex = false;
            this.guildInfo = new BasicGuildInformations();
            this.moodSmileyId = 0;
            this.status = new PlayerStatus();
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_FriendOnlineInformations(param1);
        }

        public serializeAs_FriendOnlineInformations(param1: ICustomDataOutput): void {
            super.serializeAs_FriendInformations(param1);
            if (this.playerId < 0) {
                throw new Error('Forbidden value (' + this.playerId + ') on element playerId.');
            }
            param1.writeVarInt(this.playerId);
            param1.writeUTF(this.playerName);
            if (this.level < 0 || this.level > 200) {
                throw new Error('Forbidden value (' + this.level + ') on element level.');
            }
            param1.writeByte(this.level);
            param1.writeByte(this.alignmentSide);
            param1.writeByte(this.breed);
            param1.writeBoolean(this.sex);
            this.guildInfo.serializeAs_BasicGuildInformations(param1);
            if (this.moodSmileyId < 0) {
                throw new Error('Forbidden value (' + this.moodSmileyId + ') on element moodSmileyId.');
            }
            param1.writeVarShort(this.moodSmileyId);
            param1.writeShort(this.status.getTypeId());
            this.status.serialize(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_FriendOnlineInformations(param1);
        }

        public deserializeAs_FriendOnlineInformations(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.playerId = param1.readVarUhInt();
            if (this.playerId < 0) {
                throw new Error('Forbidden value (' + this.playerId + ') on element of FriendOnlineInformations.playerId.');
            }
            this.playerName = param1.readUTF();
            this.level = param1.readUnsignedByte();
            if (this.level < 0 || this.level > 200) {
                throw new Error('Forbidden value (' + this.level + ') on element of FriendOnlineInformations.level.');
            }
            this.alignmentSide = param1.readByte();
            this.breed = param1.readByte();
            if (this.breed < PlayableBreedEnum.Feca || this.breed > PlayableBreedEnum.Eliotrope) {
                throw new Error('Forbidden value (' + this.breed + ') on element of FriendOnlineInformations.breed.');
            }
            this.sex = param1.readBoolean();
            this.guildInfo = new BasicGuildInformations();
            this.guildInfo.deserialize(param1);
            this.moodSmileyId = param1.readVarUhShort();
            if (this.moodSmileyId < 0) {
                throw new Error('Forbidden value (' + this.moodSmileyId + ') on element of FriendOnlineInformations.moodSmileyId.');
            }
            var _loc2_: number = param1.readUnsignedShort();
            this.status = <PlayerStatus>ProtocolTypeManager.getInstance(PlayerStatus, _loc2_);
            this.status.deserialize(param1);

        }
    }
    export class FriendSpouseInformations implements INetworkType {
        public static ID: number = 77;

        spouseAccountId: number;
        spouseId: number;
        spouseName: string;
        spouseLevel: number;
        breed: number;
        sex: number;
        spouseEntityLook: EntityLook;
        guildInfo: BasicGuildInformations;
        alignmentSide: number;

        constructor() {
            this.spouseAccountId = 0;
            this.spouseId = 0;
            this.spouseName = '';
            this.spouseLevel = 0;
            this.breed = 0;
            this.sex = 0;
            this.spouseEntityLook = new EntityLook();
            this.guildInfo = new BasicGuildInformations();
            this.alignmentSide = 0;
        }

        public getTypeId(): number {
            return FriendSpouseInformations.ID;
        }

        public reset(): void {
            this.spouseAccountId = 0;
            this.spouseId = 0;
            this.spouseName = '';
            this.spouseLevel = 0;
            this.breed = 0;
            this.sex = 0;
            this.spouseEntityLook = new EntityLook();
            this.guildInfo = new BasicGuildInformations();
            this.alignmentSide = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_FriendSpouseInformations(param1);
        }

        public serializeAs_FriendSpouseInformations(param1: ICustomDataOutput): void {
            if (this.spouseAccountId < 0) {
                throw new Error('Forbidden value (' + this.spouseAccountId + ') on element spouseAccountId.');
            }
            param1.writeInt(this.spouseAccountId);
            if (this.spouseId < 0) {
                throw new Error('Forbidden value (' + this.spouseId + ') on element spouseId.');
            }
            param1.writeVarInt(this.spouseId);
            param1.writeUTF(this.spouseName);
            if (this.spouseLevel < 1 || this.spouseLevel > 200) {
                throw new Error('Forbidden value (' + this.spouseLevel + ') on element spouseLevel.');
            }
            param1.writeByte(this.spouseLevel);
            param1.writeByte(this.breed);
            param1.writeByte(this.sex);
            this.spouseEntityLook.serializeAs_EntityLook(param1);
            this.guildInfo.serializeAs_BasicGuildInformations(param1);
            param1.writeByte(this.alignmentSide);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_FriendSpouseInformations(param1);
        }

        public deserializeAs_FriendSpouseInformations(param1: ICustomDataInput): void {
            this.spouseAccountId = param1.readInt();
            if (this.spouseAccountId < 0) {
                throw new Error('Forbidden value (' + this.spouseAccountId + ') on element of FriendSpouseInformations.spouseAccountId.');
            }
            this.spouseId = param1.readVarUhInt();
            if (this.spouseId < 0) {
                throw new Error('Forbidden value (' + this.spouseId + ') on element of FriendSpouseInformations.spouseId.');
            }
            this.spouseName = param1.readUTF();
            this.spouseLevel = param1.readUnsignedByte();
            if (this.spouseLevel < 1 || this.spouseLevel > 200) {
                throw new Error('Forbidden value (' + this.spouseLevel + ') on element of FriendSpouseInformations.spouseLevel.');
            }
            this.breed = param1.readByte();
            this.sex = param1.readByte();
            this.spouseEntityLook = new EntityLook();
            this.spouseEntityLook.deserialize(param1);
            this.guildInfo = new BasicGuildInformations();
            this.guildInfo.deserialize(param1);
            this.alignmentSide = param1.readByte();

        }
    }
    export class FriendSpouseOnlineInformations extends FriendSpouseInformations implements INetworkType {
        public static ID: number = 93;

        mapId: number;
        subAreaId: number;
        inFight: boolean;
        followSpouse: boolean;

        constructor() {
            this.mapId = 0;
            this.subAreaId = 0;
            this.inFight = false;
            this.followSpouse = false;
            super();
        }

        public getTypeId(): number {
            return FriendSpouseOnlineInformations.ID;
        }

        public reset(): void {
            this.mapId = 0;
            this.subAreaId = 0;
            this.inFight = false;
            this.followSpouse = false;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_FriendSpouseOnlineInformations(param1);
        }

        public serializeAs_FriendSpouseOnlineInformations(param1: ICustomDataOutput): void {
            super.serializeAs_FriendSpouseInformations(param1);
            var _loc2_: number = 0;
            _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 0, this.inFight);
            _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 1, this.followSpouse);
            param1.writeByte(_loc2_);
            if (this.mapId < 0) {
                throw new Error('Forbidden value (' + this.mapId + ') on element mapId.');
            }
            param1.writeInt(this.mapId);
            if (this.subAreaId < 0) {
                throw new Error('Forbidden value (' + this.subAreaId + ') on element subAreaId.');
            }
            param1.writeVarShort(this.subAreaId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_FriendSpouseOnlineInformations(param1);
        }

        public deserializeAs_FriendSpouseOnlineInformations(param1: ICustomDataInput): void {
            super.deserialize(param1);
            var _loc2_: number = param1.readByte();
            this.inFight = BooleanByteWrapper.getFlag(_loc2_, 0);
            this.followSpouse = BooleanByteWrapper.getFlag(_loc2_, 1);
            this.mapId = param1.readInt();
            if (this.mapId < 0) {
                throw new Error('Forbidden value (' + this.mapId + ') on element of FriendSpouseOnlineInformations.mapId.');
            }
            this.subAreaId = param1.readVarUhShort();
            if (this.subAreaId < 0) {
                throw new Error('Forbidden value (' + this.subAreaId + ') on element of FriendSpouseOnlineInformations.subAreaId.');
            }

        }
    }
    export class IgnoredInformations extends AbstractContactInformations implements INetworkType {
        public static ID: number = 106;



        constructor() {

            super();
        }

        public getTypeId(): number {
            return IgnoredInformations.ID;
        }

        public reset(): void {

        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_IgnoredInformations(param1);
        }

        public serializeAs_IgnoredInformations(param1: ICustomDataOutput): void {
            super.serializeAs_AbstractContactInformations(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_IgnoredInformations(param1);
        }

        public deserializeAs_IgnoredInformations(param1: ICustomDataInput): void {
            super.deserialize(param1);

        }
    }
    export class IgnoredOnlineInformations extends IgnoredInformations implements INetworkType {
        public static ID: number = 105;

        playerId: number;
        playerName: string;
        breed: number;
        sex: boolean;

        constructor() {
            this.playerId = 0;
            this.playerName = '';
            this.breed = 0;
            this.sex = false;
            super();
        }

        public getTypeId(): number {
            return IgnoredOnlineInformations.ID;
        }

        public reset(): void {
            this.playerId = 0;
            this.playerName = '';
            this.breed = 0;
            this.sex = false;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_IgnoredOnlineInformations(param1);
        }

        public serializeAs_IgnoredOnlineInformations(param1: ICustomDataOutput): void {
            super.serializeAs_IgnoredInformations(param1);
            if (this.playerId < 0) {
                throw new Error('Forbidden value (' + this.playerId + ') on element playerId.');
            }
            param1.writeVarInt(this.playerId);
            param1.writeUTF(this.playerName);
            param1.writeByte(this.breed);
            param1.writeBoolean(this.sex);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_IgnoredOnlineInformations(param1);
        }

        public deserializeAs_IgnoredOnlineInformations(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.playerId = param1.readVarUhInt();
            if (this.playerId < 0) {
                throw new Error('Forbidden value (' + this.playerId + ') on element of IgnoredOnlineInformations.playerId.');
            }
            this.playerName = param1.readUTF();
            this.breed = param1.readByte();
            if (this.breed < PlayableBreedEnum.Feca || this.breed > PlayableBreedEnum.Eliotrope) {
                throw new Error('Forbidden value (' + this.breed + ') on element of IgnoredOnlineInformations.breed.');
            }
            this.sex = param1.readBoolean();

        }
    }
    export class GuildEmblem implements INetworkType {
        public static ID: number = 87;

        symbolShape: number;
        symbolColor: number;
        backgroundShape: number;
        backgroundColor: number;

        constructor() {
            this.symbolShape = 0;
            this.symbolColor = 0;
            this.backgroundShape = 0;
            this.backgroundColor = 0;
        }

        public getTypeId(): number {
            return GuildEmblem.ID;
        }

        public reset(): void {
            this.symbolShape = 0;
            this.symbolColor = 0;
            this.backgroundShape = 0;
            this.backgroundColor = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GuildEmblem(param1);
        }

        public serializeAs_GuildEmblem(param1: ICustomDataOutput): void {
            if (this.symbolShape < 0) {
                throw new Error('Forbidden value (' + this.symbolShape + ') on element symbolShape.');
            }
            param1.writeVarShort(this.symbolShape);
            param1.writeInt(this.symbolColor);
            if (this.backgroundShape < 0) {
                throw new Error('Forbidden value (' + this.backgroundShape + ') on element backgroundShape.');
            }
            param1.writeByte(this.backgroundShape);
            param1.writeInt(this.backgroundColor);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GuildEmblem(param1);
        }

        public deserializeAs_GuildEmblem(param1: ICustomDataInput): void {
            this.symbolShape = param1.readVarUhShort();
            if (this.symbolShape < 0) {
                throw new Error('Forbidden value (' + this.symbolShape + ') on element of GuildEmblem.symbolShape.');
            }
            this.symbolColor = param1.readInt();
            this.backgroundShape = param1.readByte();
            if (this.backgroundShape < 0) {
                throw new Error('Forbidden value (' + this.backgroundShape + ') on element of GuildEmblem.backgroundShape.');
            }
            this.backgroundColor = param1.readInt();

        }
    }
    export class GuildMember extends CharacterMinimalInformations implements INetworkType {
        public static ID: number = 88;

        breed: number;
        sex: boolean;
        rank: number;
        givenExperience: number;
        experienceGivenPercent: number;
        rights: number;
        connected: number;
        alignmentSide: number;
        hoursSinceLastConnection: number;
        moodSmileyId: number;
        accountId: number;
        achievementPoints: number;
        status: PlayerStatus;

        constructor() {
            this.breed = 0;
            this.sex = false;
            this.rank = 0;
            this.givenExperience = 0;
            this.experienceGivenPercent = 0;
            this.rights = 0;
            this.connected = 99;
            this.alignmentSide = 0;
            this.hoursSinceLastConnection = 0;
            this.moodSmileyId = 0;
            this.accountId = 0;
            this.achievementPoints = 0;
            this.status = new PlayerStatus();
            super();
        }

        public getTypeId(): number {
            return GuildMember.ID;
        }

        public reset(): void {
            this.breed = 0;
            this.sex = false;
            this.rank = 0;
            this.givenExperience = 0;
            this.experienceGivenPercent = 0;
            this.rights = 0;
            this.connected = 99;
            this.alignmentSide = 0;
            this.hoursSinceLastConnection = 0;
            this.moodSmileyId = 0;
            this.accountId = 0;
            this.achievementPoints = 0;
            this.status = new PlayerStatus();
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GuildMember(param1);
        }

        public serializeAs_GuildMember(param1: ICustomDataOutput): void {
            super.serializeAs_CharacterMinimalInformations(param1);
            param1.writeByte(this.breed);
            param1.writeBoolean(this.sex);
            if (this.rank < 0) {
                throw new Error('Forbidden value (' + this.rank + ') on element rank.');
            }
            param1.writeVarShort(this.rank);
            if (this.givenExperience < 0 || this.givenExperience > 9.007199254740992E15) {
                throw new Error('Forbidden value (' + this.givenExperience + ') on element givenExperience.');
            }
            param1.writeVarLong(this.givenExperience);
            if (this.experienceGivenPercent < 0 || this.experienceGivenPercent > 100) {
                throw new Error('Forbidden value (' + this.experienceGivenPercent + ') on element experienceGivenPercent.');
            }
            param1.writeByte(this.experienceGivenPercent);
            if (this.rights < 0) {
                throw new Error('Forbidden value (' + this.rights + ') on element rights.');
            }
            param1.writeVarInt(this.rights);
            param1.writeByte(this.connected);
            param1.writeByte(this.alignmentSide);
            if (this.hoursSinceLastConnection < 0 || this.hoursSinceLastConnection > 65535) {
                throw new Error('Forbidden value (' + this.hoursSinceLastConnection + ') on element hoursSinceLastConnection.');
            }
            param1.writeShort(this.hoursSinceLastConnection);
            if (this.moodSmileyId < 0) {
                throw new Error('Forbidden value (' + this.moodSmileyId + ') on element moodSmileyId.');
            }
            param1.writeVarShort(this.moodSmileyId);
            if (this.accountId < 0) {
                throw new Error('Forbidden value (' + this.accountId + ') on element accountId.');
            }
            param1.writeInt(this.accountId);
            param1.writeInt(this.achievementPoints);
            param1.writeShort(this.status.getTypeId());
            this.status.serialize(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GuildMember(param1);
        }

        public deserializeAs_GuildMember(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.breed = param1.readByte();
            this.sex = param1.readBoolean();
            this.rank = param1.readVarUhShort();
            if (this.rank < 0) {
                throw new Error('Forbidden value (' + this.rank + ') on element of GuildMember.rank.');
            }
            this.givenExperience = param1.readVarUhLong();
            if (this.givenExperience < 0 || this.givenExperience > 9.007199254740992E15) {
                throw new Error('Forbidden value (' + this.givenExperience + ') on element of GuildMember.givenExperience.');
            }
            this.experienceGivenPercent = param1.readByte();
            if (this.experienceGivenPercent < 0 || this.experienceGivenPercent > 100) {
                throw new Error('Forbidden value (' + this.experienceGivenPercent + ') on element of GuildMember.experienceGivenPercent.');
            }
            this.rights = param1.readVarUhInt();
            if (this.rights < 0) {
                throw new Error('Forbidden value (' + this.rights + ') on element of GuildMember.rights.');
            }
            this.connected = param1.readByte();
            if (this.connected < 0) {
                throw new Error('Forbidden value (' + this.connected + ') on element of GuildMember.connected.');
            }
            this.alignmentSide = param1.readByte();
            this.hoursSinceLastConnection = param1.readUnsignedShort();
            if (this.hoursSinceLastConnection < 0 || this.hoursSinceLastConnection > 65535) {
                throw new Error('Forbidden value (' + this.hoursSinceLastConnection + ') on element of GuildMember.hoursSinceLastConnection.');
            }
            this.moodSmileyId = param1.readVarUhShort();
            if (this.moodSmileyId < 0) {
                throw new Error('Forbidden value (' + this.moodSmileyId + ') on element of GuildMember.moodSmileyId.');
            }
            this.accountId = param1.readInt();
            if (this.accountId < 0) {
                throw new Error('Forbidden value (' + this.accountId + ') on element of GuildMember.accountId.');
            }
            this.achievementPoints = param1.readInt();
            var _loc2_: number = param1.readUnsignedShort();
            this.status = <PlayerStatus>ProtocolTypeManager.getInstance(PlayerStatus, _loc2_);
            this.status.deserialize(param1);

        }
    }
    export class AdditionalTaxCollectorInformations implements INetworkType {
        public static ID: number = 165;

        collectorCallerName: string;
        date: number;

        constructor() {
            this.collectorCallerName = '';
            this.date = 0;
        }

        public getTypeId(): number {
            return AdditionalTaxCollectorInformations.ID;
        }

        public reset(): void {
            this.collectorCallerName = '';
            this.date = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_AdditionalTaxCollectorInformations(param1);
        }

        public serializeAs_AdditionalTaxCollectorInformations(param1: ICustomDataOutput): void {
            param1.writeUTF(this.collectorCallerName);
            if (this.date < 0) {
                throw new Error('Forbidden value (' + this.date + ') on element date.');
            }
            param1.writeInt(this.date);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_AdditionalTaxCollectorInformations(param1);
        }

        public deserializeAs_AdditionalTaxCollectorInformations(param1: ICustomDataInput): void {
            this.collectorCallerName = param1.readUTF();
            this.date = param1.readInt();
            if (this.date < 0) {
                throw new Error('Forbidden value (' + this.date + ') on element of AdditionalTaxCollectorInformations.date.');
            }

        }
    }
    export class TaxCollectorBasicInformations implements INetworkType {
        public static ID: number = 96;

        firstNameId: number;
        lastNameId: number;
        worldX: number;
        worldY: number;
        mapId: number;
        subAreaId: number;

        constructor() {
            this.firstNameId = 0;
            this.lastNameId = 0;
            this.worldX = 0;
            this.worldY = 0;
            this.mapId = 0;
            this.subAreaId = 0;
        }

        public getTypeId(): number {
            return TaxCollectorBasicInformations.ID;
        }

        public reset(): void {
            this.firstNameId = 0;
            this.lastNameId = 0;
            this.worldX = 0;
            this.worldY = 0;
            this.mapId = 0;
            this.subAreaId = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_TaxCollectorBasicInformations(param1);
        }

        public serializeAs_TaxCollectorBasicInformations(param1: ICustomDataOutput): void {
            if (this.firstNameId < 0) {
                throw new Error('Forbidden value (' + this.firstNameId + ') on element firstNameId.');
            }
            param1.writeVarShort(this.firstNameId);
            if (this.lastNameId < 0) {
                throw new Error('Forbidden value (' + this.lastNameId + ') on element lastNameId.');
            }
            param1.writeVarShort(this.lastNameId);
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error('Forbidden value (' + this.worldX + ') on element worldX.');
            }
            param1.writeShort(this.worldX);
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error('Forbidden value (' + this.worldY + ') on element worldY.');
            }
            param1.writeShort(this.worldY);
            param1.writeInt(this.mapId);
            if (this.subAreaId < 0) {
                throw new Error('Forbidden value (' + this.subAreaId + ') on element subAreaId.');
            }
            param1.writeVarShort(this.subAreaId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_TaxCollectorBasicInformations(param1);
        }

        public deserializeAs_TaxCollectorBasicInformations(param1: ICustomDataInput): void {
            this.firstNameId = param1.readVarUhShort();
            if (this.firstNameId < 0) {
                throw new Error('Forbidden value (' + this.firstNameId + ') on element of TaxCollectorBasicInformations.firstNameId.');
            }
            this.lastNameId = param1.readVarUhShort();
            if (this.lastNameId < 0) {
                throw new Error('Forbidden value (' + this.lastNameId + ') on element of TaxCollectorBasicInformations.lastNameId.');
            }
            this.worldX = param1.readShort();
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error('Forbidden value (' + this.worldX + ') on element of TaxCollectorBasicInformations.worldX.');
            }
            this.worldY = param1.readShort();
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error('Forbidden value (' + this.worldY + ') on element of TaxCollectorBasicInformations.worldY.');
            }
            this.mapId = param1.readInt();
            this.subAreaId = param1.readVarUhShort();
            if (this.subAreaId < 0) {
                throw new Error('Forbidden value (' + this.subAreaId + ') on element of TaxCollectorBasicInformations.subAreaId.');
            }

        }
    }
    export class TaxCollectorComplementaryInformations implements INetworkType {
        public static ID: number = 448;



        constructor() {

        }

        public getTypeId(): number {
            return TaxCollectorComplementaryInformations.ID;
        }

        public reset(): void {

        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_TaxCollectorComplementaryInformations(param1);
        }

        public serializeAs_TaxCollectorComplementaryInformations(param1: ICustomDataOutput): void {

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_TaxCollectorComplementaryInformations(param1);
        }

        public deserializeAs_TaxCollectorComplementaryInformations(param1: ICustomDataInput): void {

        }
    }
    export class TaxCollectorFightersInformation implements INetworkType {
        public static ID: number = 169;

        collectorId: number;
        allyCharactersInformations: CharacterMinimalPlusLookInformations[];
        enemyCharactersInformations: CharacterMinimalPlusLookInformations[];

        constructor() {
            this.collectorId = 0;
            this.allyCharactersInformations = [];
            this.enemyCharactersInformations = [];
        }

        public getTypeId(): number {
            return TaxCollectorFightersInformation.ID;
        }

        public reset(): void {
            this.collectorId = 0;
            this.allyCharactersInformations = [];
            this.enemyCharactersInformations = [];
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_TaxCollectorFightersInformation(param1);
        }

        public serializeAs_TaxCollectorFightersInformation(param1: ICustomDataOutput): void {
            param1.writeInt(this.collectorId);
            param1.writeShort(this.allyCharactersInformations.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.allyCharactersInformations.length) {
                param1.writeShort((this.allyCharactersInformations[_loc2_]).getTypeId());
                (this.allyCharactersInformations[_loc2_]).serialize(param1);
                _loc2_++;
            }
            param1.writeShort(this.enemyCharactersInformations.length);
            var _loc3_: number = 0;
            while (_loc3_ < this.enemyCharactersInformations.length) {
                param1.writeShort((this.enemyCharactersInformations[_loc3_]).getTypeId());
                (this.enemyCharactersInformations[_loc3_]).serialize(param1);
                _loc3_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_TaxCollectorFightersInformation(param1);
        }

        public deserializeAs_TaxCollectorFightersInformation(param1: ICustomDataInput): void {
            var _loc6_: number = 0;
            var _loc7_: CharacterMinimalPlusLookInformations = null;
            var _loc8_: number = 0;
            var _loc9_: CharacterMinimalPlusLookInformations = null;
            this.collectorId = param1.readInt();
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc6_ = param1.readUnsignedShort();
                _loc7_ = <CharacterMinimalPlusLookInformations>ProtocolTypeManager.getInstance(CharacterMinimalPlusLookInformations, _loc6_);
                _loc7_.deserialize(param1);
                this.allyCharactersInformations.push(_loc7_);
                _loc3_++;
            }
            var _loc4_: number = param1.readUnsignedShort();
            var _loc5_: number = 0;
            while (_loc5_ < _loc4_) {
            _loc8_ = param1.readUnsignedShort();
                _loc9_ = <CharacterMinimalPlusLookInformations>ProtocolTypeManager.getInstance(CharacterMinimalPlusLookInformations, _loc8_);
                _loc9_.deserialize(param1);
                this.enemyCharactersInformations.push(_loc9_);
                _loc5_++;
            }

        }
    }
    export class TaxCollectorGuildInformations extends TaxCollectorComplementaryInformations implements INetworkType {
        public static ID: number = 446;

        guild: BasicGuildInformations;

        constructor() {
            this.guild = new BasicGuildInformations();
            super();
        }

        public getTypeId(): number {
            return TaxCollectorGuildInformations.ID;
        }

        public reset(): void {
            this.guild = new BasicGuildInformations();
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_TaxCollectorGuildInformations(param1);
        }

        public serializeAs_TaxCollectorGuildInformations(param1: ICustomDataOutput): void {
            super.serializeAs_TaxCollectorComplementaryInformations(param1);
            this.guild.serializeAs_BasicGuildInformations(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_TaxCollectorGuildInformations(param1);
        }

        public deserializeAs_TaxCollectorGuildInformations(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.guild = new BasicGuildInformations();
            this.guild.deserialize(param1);

        }
    }
    export class TaxCollectorInformations implements INetworkType {
        public static ID: number = 167;

        uniqueId: number;
        firtNameId: number;
        lastNameId: number;
        additionalInfos: AdditionalTaxCollectorInformations;
        worldX: number;
        worldY: number;
        subAreaId: number;
        state: number;
        look: EntityLook;
        complements: TaxCollectorComplementaryInformations[];

        constructor() {
            this.uniqueId = 0;
            this.firtNameId = 0;
            this.lastNameId = 0;
            this.additionalInfos = new AdditionalTaxCollectorInformations();
            this.worldX = 0;
            this.worldY = 0;
            this.subAreaId = 0;
            this.state = 0;
            this.look = new EntityLook();
            this.complements = [];
        }

        public getTypeId(): number {
            return TaxCollectorInformations.ID;
        }

        public reset(): void {
            this.uniqueId = 0;
            this.firtNameId = 0;
            this.lastNameId = 0;
            this.additionalInfos = new AdditionalTaxCollectorInformations();
            this.worldX = 0;
            this.worldY = 0;
            this.subAreaId = 0;
            this.state = 0;
            this.look = new EntityLook();
            this.complements = [];
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_TaxCollectorInformations(param1);
        }

        public serializeAs_TaxCollectorInformations(param1: ICustomDataOutput): void {
            param1.writeInt(this.uniqueId);
            if (this.firtNameId < 0) {
                throw new Error('Forbidden value (' + this.firtNameId + ') on element firtNameId.');
            }
            param1.writeVarShort(this.firtNameId);
            if (this.lastNameId < 0) {
                throw new Error('Forbidden value (' + this.lastNameId + ') on element lastNameId.');
            }
            param1.writeVarShort(this.lastNameId);
            this.additionalInfos.serializeAs_AdditionalTaxCollectorInformations(param1);
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error('Forbidden value (' + this.worldX + ') on element worldX.');
            }
            param1.writeShort(this.worldX);
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error('Forbidden value (' + this.worldY + ') on element worldY.');
            }
            param1.writeShort(this.worldY);
            if (this.subAreaId < 0) {
                throw new Error('Forbidden value (' + this.subAreaId + ') on element subAreaId.');
            }
            param1.writeVarShort(this.subAreaId);
            param1.writeByte(this.state);
            this.look.serializeAs_EntityLook(param1);
            param1.writeShort(this.complements.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.complements.length) {
                param1.writeShort((this.complements[_loc2_]).getTypeId());
                (this.complements[_loc2_]).serialize(param1);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_TaxCollectorInformations(param1);
        }

        public deserializeAs_TaxCollectorInformations(param1: ICustomDataInput): void {
            var _loc4_: number = 0;
            var _loc5_: TaxCollectorComplementaryInformations = null;
            this.uniqueId = param1.readInt();
            this.firtNameId = param1.readVarUhShort();
            if (this.firtNameId < 0) {
                throw new Error('Forbidden value (' + this.firtNameId + ') on element of TaxCollectorInformations.firtNameId.');
            }
            this.lastNameId = param1.readVarUhShort();
            if (this.lastNameId < 0) {
                throw new Error('Forbidden value (' + this.lastNameId + ') on element of TaxCollectorInformations.lastNameId.');
            }
            this.additionalInfos = new AdditionalTaxCollectorInformations();
            this.additionalInfos.deserialize(param1);
            this.worldX = param1.readShort();
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error('Forbidden value (' + this.worldX + ') on element of TaxCollectorInformations.worldX.');
            }
            this.worldY = param1.readShort();
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error('Forbidden value (' + this.worldY + ') on element of TaxCollectorInformations.worldY.');
            }
            this.subAreaId = param1.readVarUhShort();
            if (this.subAreaId < 0) {
                throw new Error('Forbidden value (' + this.subAreaId + ') on element of TaxCollectorInformations.subAreaId.');
            }
            this.state = param1.readByte();
            if (this.state < 0) {
                throw new Error('Forbidden value (' + this.state + ') on element of TaxCollectorInformations.state.');
            }
            this.look = new EntityLook();
            this.look.deserialize(param1);
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = param1.readUnsignedShort();
                _loc5_ = <TaxCollectorComplementaryInformations>ProtocolTypeManager.getInstance(TaxCollectorComplementaryInformations, _loc4_);
                _loc5_.deserialize(param1);
                this.complements.push(_loc5_);
                _loc3_++;
            }

        }
    }
    export class TaxCollectorLootInformations extends TaxCollectorComplementaryInformations implements INetworkType {
        public static ID: number = 372;

        kamas: number;
        experience: number;
        pods: number;
        itemsValue: number;

        constructor() {
            this.kamas = 0;
            this.experience = 0;
            this.pods = 0;
            this.itemsValue = 0;
            super();
        }

        public getTypeId(): number {
            return TaxCollectorLootInformations.ID;
        }

        public reset(): void {
            this.kamas = 0;
            this.experience = 0;
            this.pods = 0;
            this.itemsValue = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_TaxCollectorLootInformations(param1);
        }

        public serializeAs_TaxCollectorLootInformations(param1: ICustomDataOutput): void {
            super.serializeAs_TaxCollectorComplementaryInformations(param1);
            if (this.kamas < 0) {
                throw new Error('Forbidden value (' + this.kamas + ') on element kamas.');
            }
            param1.writeVarInt(this.kamas);
            if (this.experience < 0 || this.experience > 9.007199254740992E15) {
                throw new Error('Forbidden value (' + this.experience + ') on element experience.');
            }
            param1.writeVarLong(this.experience);
            if (this.pods < 0) {
                throw new Error('Forbidden value (' + this.pods + ') on element pods.');
            }
            param1.writeVarInt(this.pods);
            if (this.itemsValue < 0) {
                throw new Error('Forbidden value (' + this.itemsValue + ') on element itemsValue.');
            }
            param1.writeVarInt(this.itemsValue);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_TaxCollectorLootInformations(param1);
        }

        public deserializeAs_TaxCollectorLootInformations(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.kamas = param1.readVarUhInt();
            if (this.kamas < 0) {
                throw new Error('Forbidden value (' + this.kamas + ') on element of TaxCollectorLootInformations.kamas.');
            }
            this.experience = param1.readVarUhLong();
            if (this.experience < 0 || this.experience > 9.007199254740992E15) {
                throw new Error('Forbidden value (' + this.experience + ') on element of TaxCollectorLootInformations.experience.');
            }
            this.pods = param1.readVarUhInt();
            if (this.pods < 0) {
                throw new Error('Forbidden value (' + this.pods + ') on element of TaxCollectorLootInformations.pods.');
            }
            this.itemsValue = param1.readVarUhInt();
            if (this.itemsValue < 0) {
                throw new Error('Forbidden value (' + this.itemsValue + ') on element of TaxCollectorLootInformations.itemsValue.');
            }

        }
    }
    export class TaxCollectorWaitingForHelpInformations extends TaxCollectorComplementaryInformations implements INetworkType {
        public static ID: number = 447;

        waitingForHelpInfo: ProtectedEntityWaitingForHelpInfo;

        constructor() {
            this.waitingForHelpInfo = new ProtectedEntityWaitingForHelpInfo();
            super();
        }

        public getTypeId(): number {
            return TaxCollectorWaitingForHelpInformations.ID;
        }

        public reset(): void {
            this.waitingForHelpInfo = new ProtectedEntityWaitingForHelpInfo();
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_TaxCollectorWaitingForHelpInformations(param1);
        }

        public serializeAs_TaxCollectorWaitingForHelpInformations(param1: ICustomDataOutput): void {
            super.serializeAs_TaxCollectorComplementaryInformations(param1);
            this.waitingForHelpInfo.serializeAs_ProtectedEntityWaitingForHelpInfo(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_TaxCollectorWaitingForHelpInformations(param1);
        }

        public deserializeAs_TaxCollectorWaitingForHelpInformations(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.waitingForHelpInfo = new ProtectedEntityWaitingForHelpInfo();
            this.waitingForHelpInfo.deserialize(param1);

        }
    }
    export class AccountHouseInformations implements INetworkType {
        public static ID: number = 390;

        houseId: number;
        modelId: number;
        worldX: number;
        worldY: number;
        mapId: number;
        subAreaId: number;

        constructor() {
            this.houseId = 0;
            this.modelId = 0;
            this.worldX = 0;
            this.worldY = 0;
            this.mapId = 0;
            this.subAreaId = 0;
        }

        public getTypeId(): number {
            return AccountHouseInformations.ID;
        }

        public reset(): void {
            this.houseId = 0;
            this.modelId = 0;
            this.worldX = 0;
            this.worldY = 0;
            this.mapId = 0;
            this.subAreaId = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_AccountHouseInformations(param1);
        }

        public serializeAs_AccountHouseInformations(param1: ICustomDataOutput): void {
            if (this.houseId < 0) {
                throw new Error('Forbidden value (' + this.houseId + ') on element houseId.');
            }
            param1.writeVarInt(this.houseId);
            if (this.modelId < 0) {
                throw new Error('Forbidden value (' + this.modelId + ') on element modelId.');
            }
            param1.writeVarShort(this.modelId);
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error('Forbidden value (' + this.worldX + ') on element worldX.');
            }
            param1.writeShort(this.worldX);
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error('Forbidden value (' + this.worldY + ') on element worldY.');
            }
            param1.writeShort(this.worldY);
            param1.writeInt(this.mapId);
            if (this.subAreaId < 0) {
                throw new Error('Forbidden value (' + this.subAreaId + ') on element subAreaId.');
            }
            param1.writeVarShort(this.subAreaId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_AccountHouseInformations(param1);
        }

        public deserializeAs_AccountHouseInformations(param1: ICustomDataInput): void {
            this.houseId = param1.readVarUhInt();
            if (this.houseId < 0) {
                throw new Error('Forbidden value (' + this.houseId + ') on element of AccountHouseInformations.houseId.');
            }
            this.modelId = param1.readVarUhShort();
            if (this.modelId < 0) {
                throw new Error('Forbidden value (' + this.modelId + ') on element of AccountHouseInformations.modelId.');
            }
            this.worldX = param1.readShort();
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error('Forbidden value (' + this.worldX + ') on element of AccountHouseInformations.worldX.');
            }
            this.worldY = param1.readShort();
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error('Forbidden value (' + this.worldY + ') on element of AccountHouseInformations.worldY.');
            }
            this.mapId = param1.readInt();
            this.subAreaId = param1.readVarUhShort();
            if (this.subAreaId < 0) {
                throw new Error('Forbidden value (' + this.subAreaId + ') on element of AccountHouseInformations.subAreaId.');
            }

        }
    }
    export class HouseInformations implements INetworkType {
        public static ID: number = 111;

        houseId: number;
        doorsOnMap: number[];
        ownerName: string;
        isOnSale: boolean;
        isSaleLocked: boolean;
        modelId: number;

        constructor() {
            this.houseId = 0;
            this.doorsOnMap = [];
            this.ownerName = '';
            this.isOnSale = false;
            this.isSaleLocked = false;
            this.modelId = 0;
        }

        public getTypeId(): number {
            return HouseInformations.ID;
        }

        public reset(): void {
            this.houseId = 0;
            this.doorsOnMap = [];
            this.ownerName = '';
            this.isOnSale = false;
            this.isSaleLocked = false;
            this.modelId = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_HouseInformations(param1);
        }

        public serializeAs_HouseInformations(param1: ICustomDataOutput): void {
            var _loc2_: number = 0;
            _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 0, this.isOnSale);
            _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 1, this.isSaleLocked);
            param1.writeByte(_loc2_);
            if (this.houseId < 0) {
                throw new Error('Forbidden value (' + this.houseId + ') on element houseId.');
            }
            param1.writeVarInt(this.houseId);
            param1.writeShort(this.doorsOnMap.length);
            var _loc3_: number = 0;
            while (_loc3_ < this.doorsOnMap.length) {
                if (this.doorsOnMap[_loc3_] < 0) {
                    throw new Error('Forbidden value (' + this.doorsOnMap[_loc3_] + ') on element 2 (starting at 1) of doorsOnMap.');
                }
                param1.writeInt(this.doorsOnMap[_loc3_]);
                _loc3_++;
            }
            param1.writeUTF(this.ownerName);
            if (this.modelId < 0) {
                throw new Error('Forbidden value (' + this.modelId + ') on element modelId.');
            }
            param1.writeVarShort(this.modelId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_HouseInformations(param1);
        }

        public deserializeAs_HouseInformations(param1: ICustomDataInput): void {
            var _loc5_: number = 0;
            var _loc2_: number = param1.readByte();
            this.isOnSale = BooleanByteWrapper.getFlag(_loc2_, 0);
            this.isSaleLocked = BooleanByteWrapper.getFlag(_loc2_, 1);
            this.houseId = param1.readVarUhInt();
            if (this.houseId < 0) {
                throw new Error('Forbidden value (' + this.houseId + ') on element of HouseInformations.houseId.');
            }
            var _loc3_: number = param1.readUnsignedShort();
            var _loc4_: number = 0;
            while (_loc4_ < _loc3_) {
            _loc5_ = param1.readInt();
                if (_loc5_ < 0) {
                    throw new Error('Forbidden value (' + _loc5_ + ') on elements of doorsOnMap.');
                }
                this.doorsOnMap.push(_loc5_);
                _loc4_++;
            }
            this.ownerName = param1.readUTF();
            this.modelId = param1.readVarUhShort();
            if (this.modelId < 0) {
                throw new Error('Forbidden value (' + this.modelId + ') on element of HouseInformations.modelId.');
            }

        }
    }
    export class HouseInformationsExtended extends HouseInformations implements INetworkType {
        public static ID: number = 112;

        guildInfo: GuildInformations;

        constructor() {
            this.guildInfo = new GuildInformations();
            super();
        }

        public getTypeId(): number {
            return HouseInformationsExtended.ID;
        }

        public reset(): void {
            this.guildInfo = new GuildInformations();
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_HouseInformationsExtended(param1);
        }

        public serializeAs_HouseInformationsExtended(param1: ICustomDataOutput): void {
            super.serializeAs_HouseInformations(param1);
            this.guildInfo.serializeAs_GuildInformations(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_HouseInformationsExtended(param1);
        }

        public deserializeAs_HouseInformationsExtended(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.guildInfo = new GuildInformations();
            this.guildInfo.deserialize(param1);

        }
    }
    export class HouseInformationsForGuild implements INetworkType {
        public static ID: number = 170;

        houseId: number;
        modelId: number;
        ownerName: string;
        worldX: number;
        worldY: number;
        mapId: number;
        subAreaId: number;
        skillListIds: number[];
        guildshareParams: number;

        constructor() {
            this.houseId = 0;
            this.modelId = 0;
            this.ownerName = '';
            this.worldX = 0;
            this.worldY = 0;
            this.mapId = 0;
            this.subAreaId = 0;
            this.skillListIds = [];
            this.guildshareParams = 0;
        }

        public getTypeId(): number {
            return HouseInformationsForGuild.ID;
        }

        public reset(): void {
            this.houseId = 0;
            this.modelId = 0;
            this.ownerName = '';
            this.worldX = 0;
            this.worldY = 0;
            this.mapId = 0;
            this.subAreaId = 0;
            this.skillListIds = [];
            this.guildshareParams = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_HouseInformationsForGuild(param1);
        }

        public serializeAs_HouseInformationsForGuild(param1: ICustomDataOutput): void {
            if (this.houseId < 0) {
                throw new Error('Forbidden value (' + this.houseId + ') on element houseId.');
            }
            param1.writeVarInt(this.houseId);
            if (this.modelId < 0) {
                throw new Error('Forbidden value (' + this.modelId + ') on element modelId.');
            }
            param1.writeVarInt(this.modelId);
            param1.writeUTF(this.ownerName);
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error('Forbidden value (' + this.worldX + ') on element worldX.');
            }
            param1.writeShort(this.worldX);
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error('Forbidden value (' + this.worldY + ') on element worldY.');
            }
            param1.writeShort(this.worldY);
            param1.writeInt(this.mapId);
            if (this.subAreaId < 0) {
                throw new Error('Forbidden value (' + this.subAreaId + ') on element subAreaId.');
            }
            param1.writeVarShort(this.subAreaId);
            param1.writeShort(this.skillListIds.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.skillListIds.length) {
                param1.writeInt(this.skillListIds[_loc2_]);
                _loc2_++;
            }
            if (this.guildshareParams < 0) {
                throw new Error('Forbidden value (' + this.guildshareParams + ') on element guildshareParams.');
            }
            param1.writeVarInt(this.guildshareParams);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_HouseInformationsForGuild(param1);
        }

        public deserializeAs_HouseInformationsForGuild(param1: ICustomDataInput): void {
            var _loc4_: any = 0;
            this.houseId = param1.readVarUhInt();
            if (this.houseId < 0) {
                throw new Error('Forbidden value (' + this.houseId + ') on element of HouseInformationsForGuild.houseId.');
            }
            this.modelId = param1.readVarUhInt();
            if (this.modelId < 0) {
                throw new Error('Forbidden value (' + this.modelId + ') on element of HouseInformationsForGuild.modelId.');
            }
            this.ownerName = param1.readUTF();
            this.worldX = param1.readShort();
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error('Forbidden value (' + this.worldX + ') on element of HouseInformationsForGuild.worldX.');
            }
            this.worldY = param1.readShort();
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error('Forbidden value (' + this.worldY + ') on element of HouseInformationsForGuild.worldY.');
            }
            this.mapId = param1.readInt();
            this.subAreaId = param1.readVarUhShort();
            if (this.subAreaId < 0) {
                throw new Error('Forbidden value (' + this.subAreaId + ') on element of HouseInformationsForGuild.subAreaId.');
            }
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = param1.readInt();
                this.skillListIds.push(_loc4_);
                _loc3_++;
            }
            this.guildshareParams = param1.readVarUhInt();
            if (this.guildshareParams < 0) {
                throw new Error('Forbidden value (' + this.guildshareParams + ') on element of HouseInformationsForGuild.guildshareParams.');
            }

        }
    }
    export class HouseInformationsForSell implements INetworkType {
        public static ID: number = 221;

        modelId: number;
        ownerName: string;
        ownerConnected: boolean;
        worldX: number;
        worldY: number;
        subAreaId: number;
        nbRoom: number;
        nbChest: number;
        skillListIds: number[];
        isLocked: boolean;
        price: number;

        constructor() {
            this.modelId = 0;
            this.ownerName = '';
            this.ownerConnected = false;
            this.worldX = 0;
            this.worldY = 0;
            this.subAreaId = 0;
            this.nbRoom = 0;
            this.nbChest = 0;
            this.skillListIds = [];
            this.isLocked = false;
            this.price = 0;
        }

        public getTypeId(): number {
            return HouseInformationsForSell.ID;
        }

        public reset(): void {
            this.modelId = 0;
            this.ownerName = '';
            this.ownerConnected = false;
            this.worldX = 0;
            this.worldY = 0;
            this.subAreaId = 0;
            this.nbRoom = 0;
            this.nbChest = 0;
            this.skillListIds = [];
            this.isLocked = false;
            this.price = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_HouseInformationsForSell(param1);
        }

        public serializeAs_HouseInformationsForSell(param1: ICustomDataOutput): void {
            if (this.modelId < 0) {
                throw new Error('Forbidden value (' + this.modelId + ') on element modelId.');
            }
            param1.writeVarInt(this.modelId);
            param1.writeUTF(this.ownerName);
            param1.writeBoolean(this.ownerConnected);
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error('Forbidden value (' + this.worldX + ') on element worldX.');
            }
            param1.writeShort(this.worldX);
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error('Forbidden value (' + this.worldY + ') on element worldY.');
            }
            param1.writeShort(this.worldY);
            if (this.subAreaId < 0) {
                throw new Error('Forbidden value (' + this.subAreaId + ') on element subAreaId.');
            }
            param1.writeVarShort(this.subAreaId);
            param1.writeByte(this.nbRoom);
            param1.writeByte(this.nbChest);
            param1.writeShort(this.skillListIds.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.skillListIds.length) {
                param1.writeInt(this.skillListIds[_loc2_]);
                _loc2_++;
            }
            param1.writeBoolean(this.isLocked);
            if (this.price < 0) {
                throw new Error('Forbidden value (' + this.price + ') on element price.');
            }
            param1.writeVarInt(this.price);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_HouseInformationsForSell(param1);
        }

        public deserializeAs_HouseInformationsForSell(param1: ICustomDataInput): void {
            var _loc4_: any = 0;
            this.modelId = param1.readVarUhInt();
            if (this.modelId < 0) {
                throw new Error('Forbidden value (' + this.modelId + ') on element of HouseInformationsForSell.modelId.');
            }
            this.ownerName = param1.readUTF();
            this.ownerConnected = param1.readBoolean();
            this.worldX = param1.readShort();
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error('Forbidden value (' + this.worldX + ') on element of HouseInformationsForSell.worldX.');
            }
            this.worldY = param1.readShort();
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error('Forbidden value (' + this.worldY + ') on element of HouseInformationsForSell.worldY.');
            }
            this.subAreaId = param1.readVarUhShort();
            if (this.subAreaId < 0) {
                throw new Error('Forbidden value (' + this.subAreaId + ') on element of HouseInformationsForSell.subAreaId.');
            }
            this.nbRoom = param1.readByte();
            this.nbChest = param1.readByte();
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = param1.readInt();
                this.skillListIds.push(_loc4_);
                _loc3_++;
            }
            this.isLocked = param1.readBoolean();
            this.price = param1.readVarUhInt();
            if (this.price < 0) {
                throw new Error('Forbidden value (' + this.price + ') on element of HouseInformationsForSell.price.');
            }

        }
    }
    export class HouseInformationsInside implements INetworkType {
        public static ID: number = 218;

        houseId: number;
        modelId: number;
        ownerId: number;
        ownerName: string;
        worldX: number;
        worldY: number;
        price: number;
        isLocked: boolean;

        constructor() {
            this.houseId = 0;
            this.modelId = 0;
            this.ownerId = 0;
            this.ownerName = '';
            this.worldX = 0;
            this.worldY = 0;
            this.price = 0;
            this.isLocked = false;
        }

        public getTypeId(): number {
            return HouseInformationsInside.ID;
        }

        public reset(): void {
            this.houseId = 0;
            this.modelId = 0;
            this.ownerId = 0;
            this.ownerName = '';
            this.worldX = 0;
            this.worldY = 0;
            this.price = 0;
            this.isLocked = false;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_HouseInformationsInside(param1);
        }

        public serializeAs_HouseInformationsInside(param1: ICustomDataOutput): void {
            if (this.houseId < 0) {
                throw new Error('Forbidden value (' + this.houseId + ') on element houseId.');
            }
            param1.writeVarInt(this.houseId);
            if (this.modelId < 0) {
                throw new Error('Forbidden value (' + this.modelId + ') on element modelId.');
            }
            param1.writeVarShort(this.modelId);
            param1.writeInt(this.ownerId);
            param1.writeUTF(this.ownerName);
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error('Forbidden value (' + this.worldX + ') on element worldX.');
            }
            param1.writeShort(this.worldX);
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error('Forbidden value (' + this.worldY + ') on element worldY.');
            }
            param1.writeShort(this.worldY);
            if (this.price < 0) {
                throw new Error('Forbidden value (' + this.price + ') on element price.');
            }
            param1.writeInt(this.price);
            param1.writeBoolean(this.isLocked);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_HouseInformationsInside(param1);
        }

        public deserializeAs_HouseInformationsInside(param1: ICustomDataInput): void {
            this.houseId = param1.readVarUhInt();
            if (this.houseId < 0) {
                throw new Error('Forbidden value (' + this.houseId + ') on element of HouseInformationsInside.houseId.');
            }
            this.modelId = param1.readVarUhShort();
            if (this.modelId < 0) {
                throw new Error('Forbidden value (' + this.modelId + ') on element of HouseInformationsInside.modelId.');
            }
            this.ownerId = param1.readInt();
            this.ownerName = param1.readUTF();
            this.worldX = param1.readShort();
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error('Forbidden value (' + this.worldX + ') on element of HouseInformationsInside.worldX.');
            }
            this.worldY = param1.readShort();
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error('Forbidden value (' + this.worldY + ') on element of HouseInformationsInside.worldY.');
            }
            this.price = param1.readInt();
            if (this.price < 0) {
                throw new Error('Forbidden value (' + this.price + ') on element of HouseInformationsInside.price.');
            }
            this.isLocked = param1.readBoolean();

        }
    }
    export class Idol implements INetworkType {
        public static ID: number = 489;

        id: number;
        xpBonusPercent: number;
        dropBonusPercent: number;

        constructor() {
            this.id = 0;
            this.xpBonusPercent = 0;
            this.dropBonusPercent = 0;
        }

        public getTypeId(): number {
            return Idol.ID;
        }

        public reset(): void {
            this.id = 0;
            this.xpBonusPercent = 0;
            this.dropBonusPercent = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_Idol(param1);
        }

        public serializeAs_Idol(param1: ICustomDataOutput): void {
            if (this.id < 0) {
                throw new Error('Forbidden value (' + this.id + ') on element id.');
            }
            param1.writeVarShort(this.id);
            if (this.xpBonusPercent < 0) {
                throw new Error('Forbidden value (' + this.xpBonusPercent + ') on element xpBonusPercent.');
            }
            param1.writeVarShort(this.xpBonusPercent);
            if (this.dropBonusPercent < 0) {
                throw new Error('Forbidden value (' + this.dropBonusPercent + ') on element dropBonusPercent.');
            }
            param1.writeVarShort(this.dropBonusPercent);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_Idol(param1);
        }

        public deserializeAs_Idol(param1: ICustomDataInput): void {
            this.id = param1.readVarUhShort();
            if (this.id < 0) {
                throw new Error('Forbidden value (' + this.id + ') on element of Idol.id.');
            }
            this.xpBonusPercent = param1.readVarUhShort();
            if (this.xpBonusPercent < 0) {
                throw new Error('Forbidden value (' + this.xpBonusPercent + ') on element of Idol.xpBonusPercent.');
            }
            this.dropBonusPercent = param1.readVarUhShort();
            if (this.dropBonusPercent < 0) {
                throw new Error('Forbidden value (' + this.dropBonusPercent + ') on element of Idol.dropBonusPercent.');
            }

        }
    }
    export class PartyIdol extends Idol implements INetworkType {
        public static ID: number = 490;

        ownersIds: number[];

        constructor() {
            this.ownersIds = [];
            super();
        }

        public getTypeId(): number {
            return PartyIdol.ID;
        }

        public reset(): void {
            this.ownersIds = [];
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_PartyIdol(param1);
        }

        public serializeAs_PartyIdol(param1: ICustomDataOutput): void {
            super.serializeAs_Idol(param1);
            param1.writeShort(this.ownersIds.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.ownersIds.length) {
                param1.writeInt(this.ownersIds[_loc2_]);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_PartyIdol(param1);
        }

        public deserializeAs_PartyIdol(param1: ICustomDataInput): void {
            var _loc4_: any = 0;
            super.deserialize(param1);
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = param1.readInt();
                this.ownersIds.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class InteractiveElement implements INetworkType {
        public static ID: number = 80;

        elementId: number;
        elementTypeId: number;
        enabledSkills: InteractiveElementSkill[];
        disabledSkills: InteractiveElementSkill[];

        constructor() {
            this.elementId = 0;
            this.elementTypeId = 0;
            this.enabledSkills = [];
            this.disabledSkills = [];
        }

        public getTypeId(): number {
            return InteractiveElement.ID;
        }

        public reset(): void {
            this.elementId = 0;
            this.elementTypeId = 0;
            this.enabledSkills = [];
            this.disabledSkills = [];
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_InteractiveElement(param1);
        }

        public serializeAs_InteractiveElement(param1: ICustomDataOutput): void {
            if (this.elementId < 0) {
                throw new Error('Forbidden value (' + this.elementId + ') on element elementId.');
            }
            param1.writeInt(this.elementId);
            param1.writeInt(this.elementTypeId);
            param1.writeShort(this.enabledSkills.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.enabledSkills.length) {
                param1.writeShort((this.enabledSkills[_loc2_]).getTypeId());
                (this.enabledSkills[_loc2_]).serialize(param1);
                _loc2_++;
            }
            param1.writeShort(this.disabledSkills.length);
            var _loc3_: number = 0;
            while (_loc3_ < this.disabledSkills.length) {
                param1.writeShort((this.disabledSkills[_loc3_]).getTypeId());
                (this.disabledSkills[_loc3_]).serialize(param1);
                _loc3_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_InteractiveElement(param1);
        }

        public deserializeAs_InteractiveElement(param1: ICustomDataInput): void {
            var _loc6_: number = 0;
            var _loc7_: InteractiveElementSkill = null;
            var _loc8_: number = 0;
            var _loc9_: InteractiveElementSkill = null;
            this.elementId = param1.readInt();
            if (this.elementId < 0) {
                throw new Error('Forbidden value (' + this.elementId + ') on element of InteractiveElement.elementId.');
            }
            this.elementTypeId = param1.readInt();
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc6_ = param1.readUnsignedShort();
                _loc7_ = <InteractiveElementSkill>ProtocolTypeManager.getInstance(InteractiveElementSkill, _loc6_);
                _loc7_.deserialize(param1);
                this.enabledSkills.push(_loc7_);
                _loc3_++;
            }
            var _loc4_: number = param1.readUnsignedShort();
            var _loc5_: number = 0;
            while (_loc5_ < _loc4_) {
            _loc8_ = param1.readUnsignedShort();
                _loc9_ = <InteractiveElementSkill>ProtocolTypeManager.getInstance(InteractiveElementSkill, _loc8_);
                _loc9_.deserialize(param1);
                this.disabledSkills.push(_loc9_);
                _loc5_++;
            }

        }
    }
    export class InteractiveElementSkill implements INetworkType {
        public static ID: number = 219;

        skillId: number;
        skillInstanceUid: number;

        constructor() {
            this.skillId = 0;
            this.skillInstanceUid = 0;
        }

        public getTypeId(): number {
            return InteractiveElementSkill.ID;
        }

        public reset(): void {
            this.skillId = 0;
            this.skillInstanceUid = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_InteractiveElementSkill(param1);
        }

        public serializeAs_InteractiveElementSkill(param1: ICustomDataOutput): void {
            if (this.skillId < 0) {
                throw new Error('Forbidden value (' + this.skillId + ') on element skillId.');
            }
            param1.writeVarInt(this.skillId);
            if (this.skillInstanceUid < 0) {
                throw new Error('Forbidden value (' + this.skillInstanceUid + ') on element skillInstanceUid.');
            }
            param1.writeInt(this.skillInstanceUid);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_InteractiveElementSkill(param1);
        }

        public deserializeAs_InteractiveElementSkill(param1: ICustomDataInput): void {
            this.skillId = param1.readVarUhInt();
            if (this.skillId < 0) {
                throw new Error('Forbidden value (' + this.skillId + ') on element of InteractiveElementSkill.skillId.');
            }
            this.skillInstanceUid = param1.readInt();
            if (this.skillInstanceUid < 0) {
                throw new Error('Forbidden value (' + this.skillInstanceUid + ') on element of InteractiveElementSkill.skillInstanceUid.');
            }

        }
    }
    export class InteractiveElementNamedSkill extends InteractiveElementSkill implements INetworkType {
        public static ID: number = 220;

        nameId: number;

        constructor() {
            this.nameId = 0;
            super();
        }

        public getTypeId(): number {
            return InteractiveElementNamedSkill.ID;
        }

        public reset(): void {
            this.nameId = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_InteractiveElementNamedSkill(param1);
        }

        public serializeAs_InteractiveElementNamedSkill(param1: ICustomDataOutput): void {
            super.serializeAs_InteractiveElementSkill(param1);
            if (this.nameId < 0) {
                throw new Error('Forbidden value (' + this.nameId + ') on element nameId.');
            }
            param1.writeVarInt(this.nameId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_InteractiveElementNamedSkill(param1);
        }

        public deserializeAs_InteractiveElementNamedSkill(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.nameId = param1.readVarUhInt();
            if (this.nameId < 0) {
                throw new Error('Forbidden value (' + this.nameId + ') on element of InteractiveElementNamedSkill.nameId.');
            }

        }
    }
    export class InteractiveElementWithAgeBonus extends InteractiveElement implements INetworkType {
        public static ID: number = 398;

        ageBonus: number;

        constructor() {
            this.ageBonus = 0;
            super();
        }

        public getTypeId(): number {
            return InteractiveElementWithAgeBonus.ID;
        }

        public reset(): void {
            this.ageBonus = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_InteractiveElementWithAgeBonus(param1);
        }

        public serializeAs_InteractiveElementWithAgeBonus(param1: ICustomDataOutput): void {
            super.serializeAs_InteractiveElement(param1);
            if (this.ageBonus < -1 || this.ageBonus > 1000) {
                throw new Error('Forbidden value (' + this.ageBonus + ') on element ageBonus.');
            }
            param1.writeShort(this.ageBonus);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_InteractiveElementWithAgeBonus(param1);
        }

        public deserializeAs_InteractiveElementWithAgeBonus(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.ageBonus = param1.readShort();
            if (this.ageBonus < -1 || this.ageBonus > 1000) {
                throw new Error('Forbidden value (' + this.ageBonus + ') on element of InteractiveElementWithAgeBonus.ageBonus.');
            }

        }
    }
    export class MapObstacle implements INetworkType {
        public static ID: number = 200;

        obstacleCellId: number;
        state: number;

        constructor() {
            this.obstacleCellId = 0;
            this.state = 0;
        }

        public getTypeId(): number {
            return MapObstacle.ID;
        }

        public reset(): void {
            this.obstacleCellId = 0;
            this.state = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_MapObstacle(param1);
        }

        public serializeAs_MapObstacle(param1: ICustomDataOutput): void {
            if (this.obstacleCellId < 0 || this.obstacleCellId > 559) {
                throw new Error('Forbidden value (' + this.obstacleCellId + ') on element obstacleCellId.');
            }
            param1.writeVarShort(this.obstacleCellId);
            param1.writeByte(this.state);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_MapObstacle(param1);
        }

        public deserializeAs_MapObstacle(param1: ICustomDataInput): void {
            this.obstacleCellId = param1.readVarUhShort();
            if (this.obstacleCellId < 0 || this.obstacleCellId > 559) {
                throw new Error('Forbidden value (' + this.obstacleCellId + ') on element of MapObstacle.obstacleCellId.');
            }
            this.state = param1.readByte();
            if (this.state < 0) {
                throw new Error('Forbidden value (' + this.state + ') on element of MapObstacle.state.');
            }

        }
    }
    export class StatedElement implements INetworkType {
        public static ID: number = 108;

        elementId: number;
        elementCellId: number;
        elementState: number;

        constructor() {
            this.elementId = 0;
            this.elementCellId = 0;
            this.elementState = 0;
        }

        public getTypeId(): number {
            return StatedElement.ID;
        }

        public reset(): void {
            this.elementId = 0;
            this.elementCellId = 0;
            this.elementState = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_StatedElement(param1);
        }

        public serializeAs_StatedElement(param1: ICustomDataOutput): void {
            if (this.elementId < 0) {
                throw new Error('Forbidden value (' + this.elementId + ') on element elementId.');
            }
            param1.writeInt(this.elementId);
            if (this.elementCellId < 0 || this.elementCellId > 559) {
                throw new Error('Forbidden value (' + this.elementCellId + ') on element elementCellId.');
            }
            param1.writeVarShort(this.elementCellId);
            if (this.elementState < 0) {
                throw new Error('Forbidden value (' + this.elementState + ') on element elementState.');
            }
            param1.writeVarInt(this.elementState);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_StatedElement(param1);
        }

        public deserializeAs_StatedElement(param1: ICustomDataInput): void {
            this.elementId = param1.readInt();
            if (this.elementId < 0) {
                throw new Error('Forbidden value (' + this.elementId + ') on element of StatedElement.elementId.');
            }
            this.elementCellId = param1.readVarUhShort();
            if (this.elementCellId < 0 || this.elementCellId > 559) {
                throw new Error('Forbidden value (' + this.elementCellId + ') on element of StatedElement.elementCellId.');
            }
            this.elementState = param1.readVarUhInt();
            if (this.elementState < 0) {
                throw new Error('Forbidden value (' + this.elementState + ') on element of StatedElement.elementState.');
            }

        }
    }
    export class SkillActionDescription implements INetworkType {
        public static ID: number = 102;

        skillId: number;

        constructor() {
            this.skillId = 0;
        }

        public getTypeId(): number {
            return SkillActionDescription.ID;
        }

        public reset(): void {
            this.skillId = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_SkillActionDescription(param1);
        }

        public serializeAs_SkillActionDescription(param1: ICustomDataOutput): void {
            if (this.skillId < 0) {
                throw new Error('Forbidden value (' + this.skillId + ') on element skillId.');
            }
            param1.writeVarShort(this.skillId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_SkillActionDescription(param1);
        }

        public deserializeAs_SkillActionDescription(param1: ICustomDataInput): void {
            this.skillId = param1.readVarUhShort();
            if (this.skillId < 0) {
                throw new Error('Forbidden value (' + this.skillId + ') on element of SkillActionDescription.skillId.');
            }

        }
    }
    export class SkillActionDescriptionTimed extends SkillActionDescription implements INetworkType {
        public static ID: number = 103;

        time: number;

        constructor() {
            this.time = 0;
            super();
        }

        public getTypeId(): number {
            return SkillActionDescriptionTimed.ID;
        }

        public reset(): void {
            this.time = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_SkillActionDescriptionTimed(param1);
        }

        public serializeAs_SkillActionDescriptionTimed(param1: ICustomDataOutput): void {
            super.serializeAs_SkillActionDescription(param1);
            if (this.time < 0 || this.time > 255) {
                throw new Error('Forbidden value (' + this.time + ') on element time.');
            }
            param1.writeByte(this.time);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_SkillActionDescriptionTimed(param1);
        }

        public deserializeAs_SkillActionDescriptionTimed(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.time = param1.readUnsignedByte();
            if (this.time < 0 || this.time > 255) {
                throw new Error('Forbidden value (' + this.time + ') on element of SkillActionDescriptionTimed.time.');
            }

        }
    }
    export class SkillActionDescriptionCollect extends SkillActionDescriptionTimed implements INetworkType {
        public static ID: number = 99;

        min: number;
        max: number;

        constructor() {
            this.min = 0;
            this.max = 0;
            super();
        }

        public getTypeId(): number {
            return SkillActionDescriptionCollect.ID;
        }

        public reset(): void {
            this.min = 0;
            this.max = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_SkillActionDescriptionCollect(param1);
        }

        public serializeAs_SkillActionDescriptionCollect(param1: ICustomDataOutput): void {
            super.serializeAs_SkillActionDescriptionTimed(param1);
            if (this.min < 0) {
                throw new Error('Forbidden value (' + this.min + ') on element min.');
            }
            param1.writeVarShort(this.min);
            if (this.max < 0) {
                throw new Error('Forbidden value (' + this.max + ') on element max.');
            }
            param1.writeVarShort(this.max);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_SkillActionDescriptionCollect(param1);
        }

        public deserializeAs_SkillActionDescriptionCollect(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.min = param1.readVarUhShort();
            if (this.min < 0) {
                throw new Error('Forbidden value (' + this.min + ') on element of SkillActionDescriptionCollect.min.');
            }
            this.max = param1.readVarUhShort();
            if (this.max < 0) {
                throw new Error('Forbidden value (' + this.max + ') on element of SkillActionDescriptionCollect.max.');
            }

        }
    }
    export class SkillActionDescriptionCraft extends SkillActionDescription implements INetworkType {
        public static ID: number = 100;

        probability: number;

        constructor() {
            this.probability = 0;
            super();
        }

        public getTypeId(): number {
            return SkillActionDescriptionCraft.ID;
        }

        public reset(): void {
            this.probability = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_SkillActionDescriptionCraft(param1);
        }

        public serializeAs_SkillActionDescriptionCraft(param1: ICustomDataOutput): void {
            super.serializeAs_SkillActionDescription(param1);
            if (this.probability < 0) {
                throw new Error('Forbidden value (' + this.probability + ') on element probability.');
            }
            param1.writeByte(this.probability);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_SkillActionDescriptionCraft(param1);
        }

        public deserializeAs_SkillActionDescriptionCraft(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.probability = param1.readByte();
            if (this.probability < 0) {
                throw new Error('Forbidden value (' + this.probability + ') on element of SkillActionDescriptionCraft.probability.');
            }

        }
    }
    export class IdolsPreset implements INetworkType {
        public static ID: number = 491;

        presetId: number;
        symbolId: number;
        idolId: number[];

        constructor() {
            this.presetId = 0;
            this.symbolId = 0;
            this.idolId = [];
        }

        public getTypeId(): number {
            return IdolsPreset.ID;
        }

        public reset(): void {
            this.presetId = 0;
            this.symbolId = 0;
            this.idolId = [];
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_IdolsPreset(param1);
        }

        public serializeAs_IdolsPreset(param1: ICustomDataOutput): void {
            if (this.presetId < 0) {
                throw new Error('Forbidden value (' + this.presetId + ') on element presetId.');
            }
            param1.writeByte(this.presetId);
            if (this.symbolId < 0) {
                throw new Error('Forbidden value (' + this.symbolId + ') on element symbolId.');
            }
            param1.writeByte(this.symbolId);
            param1.writeShort(this.idolId.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.idolId.length) {
                if (this.idolId[_loc2_] < 0) {
                    throw new Error('Forbidden value (' + this.idolId[_loc2_] + ') on element 3 (starting at 1) of idolId.');
                }
                param1.writeVarShort(this.idolId[_loc2_]);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_IdolsPreset(param1);
        }

        public deserializeAs_IdolsPreset(param1: ICustomDataInput): void {
            var _loc4_: number = 0;
            this.presetId = param1.readByte();
            if (this.presetId < 0) {
                throw new Error('Forbidden value (' + this.presetId + ') on element of IdolsPreset.presetId.');
            }
            this.symbolId = param1.readByte();
            if (this.symbolId < 0) {
                throw new Error('Forbidden value (' + this.symbolId + ') on element of IdolsPreset.symbolId.');
            }
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = param1.readVarUhShort();
                if (_loc4_ < 0) {
                    throw new Error('Forbidden value (' + _loc4_ + ') on elements of idolId.');
                }
                this.idolId.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class Preset implements INetworkType {
        public static ID: number = 355;

        presetId: number;
        symbolId: number;
        mount: boolean;
        objects: PresetItem[];

        constructor() {
            this.presetId = 0;
            this.symbolId = 0;
            this.mount = false;
            this.objects = [];
        }

        public getTypeId(): number {
            return Preset.ID;
        }

        public reset(): void {
            this.presetId = 0;
            this.symbolId = 0;
            this.mount = false;
            this.objects = [];
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_Preset(param1);
        }

        public serializeAs_Preset(param1: ICustomDataOutput): void {
            if (this.presetId < 0) {
                throw new Error('Forbidden value (' + this.presetId + ') on element presetId.');
            }
            param1.writeByte(this.presetId);
            if (this.symbolId < 0) {
                throw new Error('Forbidden value (' + this.symbolId + ') on element symbolId.');
            }
            param1.writeByte(this.symbolId);
            param1.writeBoolean(this.mount);
            param1.writeShort(this.objects.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.objects.length) {
                (this.objects[_loc2_]).serializeAs_PresetItem(param1);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_Preset(param1);
        }

        public deserializeAs_Preset(param1: ICustomDataInput): void {
            var _loc4_: PresetItem = null;
            this.presetId = param1.readByte();
            if (this.presetId < 0) {
                throw new Error('Forbidden value (' + this.presetId + ') on element of Preset.presetId.');
            }
            this.symbolId = param1.readByte();
            if (this.symbolId < 0) {
                throw new Error('Forbidden value (' + this.symbolId + ') on element of Preset.symbolId.');
            }
            this.mount = param1.readBoolean();
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = new PresetItem();
                _loc4_.deserialize(param1);
                this.objects.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class PresetItem implements INetworkType {
        public static ID: number = 354;

        position: number;
        objGid: number;
        objUid: number;

        constructor() {
            this.position = 63;
            this.objGid = 0;
            this.objUid = 0;
        }

        public getTypeId(): number {
            return PresetItem.ID;
        }

        public reset(): void {
            this.position = 63;
            this.objGid = 0;
            this.objUid = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_PresetItem(param1);
        }

        public serializeAs_PresetItem(param1: ICustomDataOutput): void {
            param1.writeByte(this.position);
            if (this.objGid < 0) {
                throw new Error('Forbidden value (' + this.objGid + ') on element objGid.');
            }
            param1.writeVarShort(this.objGid);
            if (this.objUid < 0) {
                throw new Error('Forbidden value (' + this.objUid + ') on element objUid.');
            }
            param1.writeVarInt(this.objUid);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_PresetItem(param1);
        }

        public deserializeAs_PresetItem(param1: ICustomDataInput): void {
            this.position = param1.readUnsignedByte();
            if (this.position < 0 || this.position > 255) {
                throw new Error('Forbidden value (' + this.position + ') on element of PresetItem.position.');
            }
            this.objGid = param1.readVarUhShort();
            if (this.objGid < 0) {
                throw new Error('Forbidden value (' + this.objGid + ') on element of PresetItem.objGid.');
            }
            this.objUid = param1.readVarUhInt();
            if (this.objUid < 0) {
                throw new Error('Forbidden value (' + this.objUid + ') on element of PresetItem.objUid.');
            }

        }
    }
    export class EntityLook implements INetworkType {
        public static ID: number = 55;

        bonesId: number;
        skins: number[];
        indexedColors: number[];
        scales: number[];
        subentities: SubEntity[];

        constructor() {
            this.bonesId = 0;
            this.skins = [];
            this.indexedColors = [];
            this.scales = [];
            this.subentities = [];
        }

        public getTypeId(): number {
            return EntityLook.ID;
        }

        public reset(): void {
            this.bonesId = 0;
            this.skins = [];
            this.indexedColors = [];
            this.scales = [];
            this.subentities = [];
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_EntityLook(param1);
        }

        public serializeAs_EntityLook(param1: ICustomDataOutput): void {
            if (this.bonesId < 0) {
                throw new Error('Forbidden value (' + this.bonesId + ') on element bonesId.');
            }
            param1.writeVarShort(this.bonesId);
            param1.writeShort(this.skins.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.skins.length) {
                if (this.skins[_loc2_] < 0) {
                    throw new Error('Forbidden value (' + this.skins[_loc2_] + ') on element 2 (starting at 1) of skins.');
                }
                param1.writeVarShort(this.skins[_loc2_]);
                _loc2_++;
            }
            param1.writeShort(this.indexedColors.length);
            var _loc3_: number = 0;
            while (_loc3_ < this.indexedColors.length) {
                param1.writeInt(this.indexedColors[_loc3_]);
                _loc3_++;
            }
            param1.writeShort(this.scales.length);
            var _loc4_: number = 0;
            while (_loc4_ < this.scales.length) {
                param1.writeVarShort(this.scales[_loc4_]);
                _loc4_++;
            }
            param1.writeShort(this.subentities.length);
            var _loc5_: number = 0;
            while (_loc5_ < this.subentities.length) {
                (this.subentities[_loc5_]).serializeAs_SubEntity(param1);
                _loc5_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_EntityLook(param1);
        }

        public deserializeAs_EntityLook(param1: ICustomDataInput): void {
            var _loc10_: number = 0;
            var _loc11_: any = 0;
            var _loc12_: any = 0;
            var _loc13_: SubEntity = null;
            this.bonesId = param1.readVarUhShort();
            if (this.bonesId < 0) {
                throw new Error('Forbidden value (' + this.bonesId + ') on element of EntityLook.bonesId.');
            }
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc10_ = param1.readVarUhShort();
                if (_loc10_ < 0) {
                    throw new Error('Forbidden value (' + _loc10_ + ') on elements of skins.');
                }
                this.skins.push(_loc10_);
                _loc3_++;
            }
            var _loc4_: number = param1.readUnsignedShort();
            var _loc5_: number = 0;
            while (_loc5_ < _loc4_) {
            _loc11_ = param1.readInt();
                this.indexedColors.push(_loc11_);
                _loc5_++;
            }
            var _loc6_: number = param1.readUnsignedShort();
            var _loc7_: number = 0;
            while (_loc7_ < _loc6_) {
            _loc12_ = param1.readVarShort();
                this.scales.push(_loc12_);
                _loc7_++;
            }
            var _loc8_: number = param1.readUnsignedShort();
            var _loc9_: number = 0;
            while (_loc9_ < _loc8_) {
            _loc13_ = new SubEntity();
                _loc13_.deserialize(param1);
                this.subentities.push(_loc13_);
                _loc9_++;
            }

        }
    }
    export class IndexedEntityLook implements INetworkType {
        public static ID: number = 405;

        look: EntityLook;
        index: number;

        constructor() {
            this.look = new EntityLook();
            this.index = 0;
        }

        public getTypeId(): number {
            return IndexedEntityLook.ID;
        }

        public reset(): void {
            this.look = new EntityLook();
            this.index = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_IndexedEntityLook(param1);
        }

        public serializeAs_IndexedEntityLook(param1: ICustomDataOutput): void {
            this.look.serializeAs_EntityLook(param1);
            if (this.index < 0) {
                throw new Error('Forbidden value (' + this.index + ') on element index.');
            }
            param1.writeByte(this.index);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_IndexedEntityLook(param1);
        }

        public deserializeAs_IndexedEntityLook(param1: ICustomDataInput): void {
            this.look = new EntityLook();
            this.look.deserialize(param1);
            this.index = param1.readByte();
            if (this.index < 0) {
                throw new Error('Forbidden value (' + this.index + ') on element of IndexedEntityLook.index.');
            }

        }
    }
    export class SubEntity implements INetworkType {
        public static ID: number = 54;

        bindingPointCategory: number;
        bindingPointIndex: number;
        subEntityLook: EntityLook;

        constructor() {
            this.bindingPointCategory = 0;
            this.bindingPointIndex = 0;
            this.subEntityLook = new EntityLook();
        }

        public getTypeId(): number {
            return SubEntity.ID;
        }

        public reset(): void {
            this.bindingPointCategory = 0;
            this.bindingPointIndex = 0;
            this.subEntityLook = new EntityLook();
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_SubEntity(param1);
        }

        public serializeAs_SubEntity(param1: ICustomDataOutput): void {
            param1.writeByte(this.bindingPointCategory);
            if (this.bindingPointIndex < 0) {
                throw new Error('Forbidden value (' + this.bindingPointIndex + ') on element bindingPointIndex.');
            }
            param1.writeByte(this.bindingPointIndex);
            this.subEntityLook.serializeAs_EntityLook(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_SubEntity(param1);
        }

        public deserializeAs_SubEntity(param1: ICustomDataInput): void {
            this.bindingPointCategory = param1.readByte();
            if (this.bindingPointCategory < 0) {
                throw new Error('Forbidden value (' + this.bindingPointCategory + ') on element of SubEntity.bindingPointCategory.');
            }
            this.bindingPointIndex = param1.readByte();
            if (this.bindingPointIndex < 0) {
                throw new Error('Forbidden value (' + this.bindingPointIndex + ') on element of SubEntity.bindingPointIndex.');
            }
            this.subEntityLook = new EntityLook();
            this.subEntityLook.deserialize(param1);

        }
    }
    export class ItemDurability implements INetworkType {
        public static ID: number = 168;

        durability: number;
        durabilityMax: number;

        constructor() {
            this.durability = 0;
            this.durabilityMax = 0;
        }

        public getTypeId(): number {
            return ItemDurability.ID;
        }

        public reset(): void {
            this.durability = 0;
            this.durabilityMax = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ItemDurability(param1);
        }

        public serializeAs_ItemDurability(param1: ICustomDataOutput): void {
            param1.writeShort(this.durability);
            param1.writeShort(this.durabilityMax);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ItemDurability(param1);
        }

        public deserializeAs_ItemDurability(param1: ICustomDataInput): void {
            this.durability = param1.readShort();
            this.durabilityMax = param1.readShort();

        }
    }
    export class MountClientData implements INetworkType {
        public static ID: number = 178;

        id: number;
        model: number;
        ancestor: number[];
        behaviors: number[];
        name: string;
        sex: boolean;
        ownerId: number;
        experience: number;
        experienceForLevel: number;
        experienceForNextLevel: number;
        level: number;
        isRideable: boolean;
        maxPods: number;
        isWild: boolean;
        stamina: number;
        staminaMax: number;
        maturity: number;
        maturityForAdult: number;
        energy: number;
        energyMax: number;
        serenity: number;
        aggressivityMax: number;
        serenityMax: number;
        love: number;
        loveMax: number;
        fecondationTime: number;
        isFecondationReady: boolean;
        boostLimiter: number;
        boostMax: number;
        reproductionCount: number;
        reproductionCountMax: number;
        effectList: ObjectEffectInteger[];

        constructor() {
            this.id = 0;
            this.model = 0;
            this.ancestor = [];
            this.behaviors = [];
            this.name = '';
            this.sex = false;
            this.ownerId = 0;
            this.experience = 0;
            this.experienceForLevel = 0;
            this.experienceForNextLevel = 0;
            this.level = 0;
            this.isRideable = false;
            this.maxPods = 0;
            this.isWild = false;
            this.stamina = 0;
            this.staminaMax = 0;
            this.maturity = 0;
            this.maturityForAdult = 0;
            this.energy = 0;
            this.energyMax = 0;
            this.serenity = 0;
            this.aggressivityMax = 0;
            this.serenityMax = 0;
            this.love = 0;
            this.loveMax = 0;
            this.fecondationTime = 0;
            this.isFecondationReady = false;
            this.boostLimiter = 0;
            this.boostMax = 0;
            this.reproductionCount = 0;
            this.reproductionCountMax = 0;
            this.effectList = [];
        }

        public getTypeId(): number {
            return MountClientData.ID;
        }

        public reset(): void {
            this.id = 0;
            this.model = 0;
            this.ancestor = [];
            this.behaviors = [];
            this.name = '';
            this.sex = false;
            this.ownerId = 0;
            this.experience = 0;
            this.experienceForLevel = 0;
            this.experienceForNextLevel = 0;
            this.level = 0;
            this.isRideable = false;
            this.maxPods = 0;
            this.isWild = false;
            this.stamina = 0;
            this.staminaMax = 0;
            this.maturity = 0;
            this.maturityForAdult = 0;
            this.energy = 0;
            this.energyMax = 0;
            this.serenity = 0;
            this.aggressivityMax = 0;
            this.serenityMax = 0;
            this.love = 0;
            this.loveMax = 0;
            this.fecondationTime = 0;
            this.isFecondationReady = false;
            this.boostLimiter = 0;
            this.boostMax = 0;
            this.reproductionCount = 0;
            this.reproductionCountMax = 0;
            this.effectList = [];
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_MountClientData(param1);
        }

        public serializeAs_MountClientData(param1: ICustomDataOutput): void {
            var _loc2_: number = 0;
            _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 0, this.sex);
            _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 1, this.isRideable);
            _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 2, this.isWild);
            _loc2_ = BooleanByteWrapper.setFlag(_loc2_, 3, this.isFecondationReady);
            param1.writeByte(_loc2_);
            if (this.id < -9.007199254740992E15 || this.id > 9.007199254740992E15) {
                throw new Error('Forbidden value (' + this.id + ') on element id.');
            }
            param1.writeDouble(this.id);
            if (this.model < 0) {
                throw new Error('Forbidden value (' + this.model + ') on element model.');
            }
            param1.writeVarInt(this.model);
            param1.writeShort(this.ancestor.length);
            var _loc3_: number = 0;
            while (_loc3_ < this.ancestor.length) {
                if (this.ancestor[_loc3_] < 0) {
                    throw new Error('Forbidden value (' + this.ancestor[_loc3_] + ') on element 3 (starting at 1) of ancestor.');
                }
                param1.writeInt(this.ancestor[_loc3_]);
                _loc3_++;
            }
            param1.writeShort(this.behaviors.length);
            var _loc4_: number = 0;
            while (_loc4_ < this.behaviors.length) {
                if (this.behaviors[_loc4_] < 0) {
                    throw new Error('Forbidden value (' + this.behaviors[_loc4_] + ') on element 4 (starting at 1) of behaviors.');
                }
                param1.writeInt(this.behaviors[_loc4_]);
                _loc4_++;
            }
            param1.writeUTF(this.name);
            if (this.ownerId < 0) {
                throw new Error('Forbidden value (' + this.ownerId + ') on element ownerId.');
            }
            param1.writeInt(this.ownerId);
            if (this.experience < 0 || this.experience > 9.007199254740992E15) {
                throw new Error('Forbidden value (' + this.experience + ') on element experience.');
            }
            param1.writeVarLong(this.experience);
            if (this.experienceForLevel < 0 || this.experienceForLevel > 9.007199254740992E15) {
                throw new Error('Forbidden value (' + this.experienceForLevel + ') on element experienceForLevel.');
            }
            param1.writeVarLong(this.experienceForLevel);
            if (this.experienceForNextLevel < -9.007199254740992E15 || this.experienceForNextLevel > 9.007199254740992E15) {
                throw new Error('Forbidden value (' + this.experienceForNextLevel + ') on element experienceForNextLevel.');
            }
            param1.writeDouble(this.experienceForNextLevel);
            if (this.level < 0) {
                throw new Error('Forbidden value (' + this.level + ') on element level.');
            }
            param1.writeByte(this.level);
            if (this.maxPods < 0) {
                throw new Error('Forbidden value (' + this.maxPods + ') on element maxPods.');
            }
            param1.writeVarInt(this.maxPods);
            if (this.stamina < 0) {
                throw new Error('Forbidden value (' + this.stamina + ') on element stamina.');
            }
            param1.writeVarInt(this.stamina);
            if (this.staminaMax < 0) {
                throw new Error('Forbidden value (' + this.staminaMax + ') on element staminaMax.');
            }
            param1.writeVarInt(this.staminaMax);
            if (this.maturity < 0) {
                throw new Error('Forbidden value (' + this.maturity + ') on element maturity.');
            }
            param1.writeVarInt(this.maturity);
            if (this.maturityForAdult < 0) {
                throw new Error('Forbidden value (' + this.maturityForAdult + ') on element maturityForAdult.');
            }
            param1.writeVarInt(this.maturityForAdult);
            if (this.energy < 0) {
                throw new Error('Forbidden value (' + this.energy + ') on element energy.');
            }
            param1.writeVarInt(this.energy);
            if (this.energyMax < 0) {
                throw new Error('Forbidden value (' + this.energyMax + ') on element energyMax.');
            }
            param1.writeVarInt(this.energyMax);
            param1.writeInt(this.serenity);
            param1.writeInt(this.aggressivityMax);
            if (this.serenityMax < 0) {
                throw new Error('Forbidden value (' + this.serenityMax + ') on element serenityMax.');
            }
            param1.writeVarInt(this.serenityMax);
            if (this.love < 0) {
                throw new Error('Forbidden value (' + this.love + ') on element love.');
            }
            param1.writeVarInt(this.love);
            if (this.loveMax < 0) {
                throw new Error('Forbidden value (' + this.loveMax + ') on element loveMax.');
            }
            param1.writeVarInt(this.loveMax);
            param1.writeInt(this.fecondationTime);
            if (this.boostLimiter < 0) {
                throw new Error('Forbidden value (' + this.boostLimiter + ') on element boostLimiter.');
            }
            param1.writeInt(this.boostLimiter);
            if (this.boostMax < -9.007199254740992E15 || this.boostMax > 9.007199254740992E15) {
                throw new Error('Forbidden value (' + this.boostMax + ') on element boostMax.');
            }
            param1.writeDouble(this.boostMax);
            param1.writeInt(this.reproductionCount);
            if (this.reproductionCountMax < 0) {
                throw new Error('Forbidden value (' + this.reproductionCountMax + ') on element reproductionCountMax.');
            }
            param1.writeVarInt(this.reproductionCountMax);
            param1.writeShort(this.effectList.length);
            var _loc5_: number = 0;
            while (_loc5_ < this.effectList.length) {
                (this.effectList[_loc5_]).serializeAs_ObjectEffectInteger(param1);
                _loc5_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_MountClientData(param1);
        }

        public deserializeAs_MountClientData(param1: ICustomDataInput): void {
            var _loc9_: number = 0;
            var _loc10_: number = 0;
            var _loc11_: ObjectEffectInteger = null;
            var _loc2_: number = param1.readByte();
            this.sex = BooleanByteWrapper.getFlag(_loc2_, 0);
            this.isRideable = BooleanByteWrapper.getFlag(_loc2_, 1);
            this.isWild = BooleanByteWrapper.getFlag(_loc2_, 2);
            this.isFecondationReady = BooleanByteWrapper.getFlag(_loc2_, 3);
            this.id = param1.readDouble();
            if (this.id < -9.007199254740992E15 || this.id > 9.007199254740992E15) {
                throw new Error('Forbidden value (' + this.id + ') on element of MountClientData.id.');
            }
            this.model = param1.readVarUhInt();
            if (this.model < 0) {
                throw new Error('Forbidden value (' + this.model + ') on element of MountClientData.model.');
            }
            var _loc3_: number = param1.readUnsignedShort();
            var _loc4_: number = 0;
            while (_loc4_ < _loc3_) {
            _loc9_ = param1.readInt();
                if (_loc9_ < 0) {
                    throw new Error('Forbidden value (' + _loc9_ + ') on elements of ancestor.');
                }
                this.ancestor.push(_loc9_);
                _loc4_++;
            }
            var _loc5_: number = param1.readUnsignedShort();
            var _loc6_: number = 0;
            while (_loc6_ < _loc5_) {
            _loc10_ = param1.readInt();
                if (_loc10_ < 0) {
                    throw new Error('Forbidden value (' + _loc10_ + ') on elements of behaviors.');
                }
                this.behaviors.push(_loc10_);
                _loc6_++;
            }
            this.name = param1.readUTF();
            this.ownerId = param1.readInt();
            if (this.ownerId < 0) {
                throw new Error('Forbidden value (' + this.ownerId + ') on element of MountClientData.ownerId.');
            }
            this.experience = param1.readVarUhLong();
            if (this.experience < 0 || this.experience > 9.007199254740992E15) {
                throw new Error('Forbidden value (' + this.experience + ') on element of MountClientData.experience.');
            }
            this.experienceForLevel = param1.readVarUhLong();
            if (this.experienceForLevel < 0 || this.experienceForLevel > 9.007199254740992E15) {
                throw new Error('Forbidden value (' + this.experienceForLevel + ') on element of MountClientData.experienceForLevel.');
            }
            this.experienceForNextLevel = param1.readDouble();
            if (this.experienceForNextLevel < -9.007199254740992E15 || this.experienceForNextLevel > 9.007199254740992E15) {
                throw new Error('Forbidden value (' + this.experienceForNextLevel + ') on element of MountClientData.experienceForNextLevel.');
            }
            this.level = param1.readByte();
            if (this.level < 0) {
                throw new Error('Forbidden value (' + this.level + ') on element of MountClientData.level.');
            }
            this.maxPods = param1.readVarUhInt();
            if (this.maxPods < 0) {
                throw new Error('Forbidden value (' + this.maxPods + ') on element of MountClientData.maxPods.');
            }
            this.stamina = param1.readVarUhInt();
            if (this.stamina < 0) {
                throw new Error('Forbidden value (' + this.stamina + ') on element of MountClientData.stamina.');
            }
            this.staminaMax = param1.readVarUhInt();
            if (this.staminaMax < 0) {
                throw new Error('Forbidden value (' + this.staminaMax + ') on element of MountClientData.staminaMax.');
            }
            this.maturity = param1.readVarUhInt();
            if (this.maturity < 0) {
                throw new Error('Forbidden value (' + this.maturity + ') on element of MountClientData.maturity.');
            }
            this.maturityForAdult = param1.readVarUhInt();
            if (this.maturityForAdult < 0) {
                throw new Error('Forbidden value (' + this.maturityForAdult + ') on element of MountClientData.maturityForAdult.');
            }
            this.energy = param1.readVarUhInt();
            if (this.energy < 0) {
                throw new Error('Forbidden value (' + this.energy + ') on element of MountClientData.energy.');
            }
            this.energyMax = param1.readVarUhInt();
            if (this.energyMax < 0) {
                throw new Error('Forbidden value (' + this.energyMax + ') on element of MountClientData.energyMax.');
            }
            this.serenity = param1.readInt();
            this.aggressivityMax = param1.readInt();
            this.serenityMax = param1.readVarUhInt();
            if (this.serenityMax < 0) {
                throw new Error('Forbidden value (' + this.serenityMax + ') on element of MountClientData.serenityMax.');
            }
            this.love = param1.readVarUhInt();
            if (this.love < 0) {
                throw new Error('Forbidden value (' + this.love + ') on element of MountClientData.love.');
            }
            this.loveMax = param1.readVarUhInt();
            if (this.loveMax < 0) {
                throw new Error('Forbidden value (' + this.loveMax + ') on element of MountClientData.loveMax.');
            }
            this.fecondationTime = param1.readInt();
            this.boostLimiter = param1.readInt();
            if (this.boostLimiter < 0) {
                throw new Error('Forbidden value (' + this.boostLimiter + ') on element of MountClientData.boostLimiter.');
            }
            this.boostMax = param1.readDouble();
            if (this.boostMax < -9.007199254740992E15 || this.boostMax > 9.007199254740992E15) {
                throw new Error('Forbidden value (' + this.boostMax + ') on element of MountClientData.boostMax.');
            }
            this.reproductionCount = param1.readInt();
            this.reproductionCountMax = param1.readVarUhInt();
            if (this.reproductionCountMax < 0) {
                throw new Error('Forbidden value (' + this.reproductionCountMax + ') on element of MountClientData.reproductionCountMax.');
            }
            var _loc7_: number = param1.readUnsignedShort();
            var _loc8_: number = 0;
            while (_loc8_ < _loc7_) {
            _loc11_ = new ObjectEffectInteger();
                _loc11_.deserialize(param1);
                this.effectList.push(_loc11_);
                _loc8_++;
            }

        }
    }
    export class UpdateMountBoost implements INetworkType {
        public static ID: number = 356;

        type: number;

        constructor() {
            this.type = 0;
        }

        public getTypeId(): number {
            return UpdateMountBoost.ID;
        }

        public reset(): void {
            this.type = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_UpdateMountBoost(param1);
        }

        public serializeAs_UpdateMountBoost(param1: ICustomDataOutput): void {
            param1.writeByte(this.type);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_UpdateMountBoost(param1);
        }

        public deserializeAs_UpdateMountBoost(param1: ICustomDataInput): void {
            this.type = param1.readByte();
            if (this.type < 0) {
                throw new Error('Forbidden value (' + this.type + ') on element of UpdateMountBoost.type.');
            }

        }
    }
    export class UpdateMountIntBoost extends UpdateMountBoost implements INetworkType {
        public static ID: number = 357;

        value: number;

        constructor() {
            this.value = 0;
            super();
        }

        public getTypeId(): number {
            return UpdateMountIntBoost.ID;
        }

        public reset(): void {
            this.value = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_UpdateMountIntBoost(param1);
        }

        public serializeAs_UpdateMountIntBoost(param1: ICustomDataOutput): void {
            super.serializeAs_UpdateMountBoost(param1);
            param1.writeInt(this.value);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_UpdateMountIntBoost(param1);
        }

        public deserializeAs_UpdateMountIntBoost(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.value = param1.readInt();

        }
    }
    export class MountInformationsForPaddock implements INetworkType {
        public static ID: number = 184;

        modelId: number;
        name: string;
        ownerName: string;

        constructor() {
            this.modelId = 0;
            this.name = '';
            this.ownerName = '';
        }

        public getTypeId(): number {
            return MountInformationsForPaddock.ID;
        }

        public reset(): void {
            this.modelId = 0;
            this.name = '';
            this.ownerName = '';
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_MountInformationsForPaddock(param1);
        }

        public serializeAs_MountInformationsForPaddock(param1: ICustomDataOutput): void {
            if (this.modelId < 0) {
                throw new Error('Forbidden value (' + this.modelId + ') on element modelId.');
            }
            param1.writeByte(this.modelId);
            param1.writeUTF(this.name);
            param1.writeUTF(this.ownerName);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_MountInformationsForPaddock(param1);
        }

        public deserializeAs_MountInformationsForPaddock(param1: ICustomDataInput): void {
            this.modelId = param1.readByte();
            if (this.modelId < 0) {
                throw new Error('Forbidden value (' + this.modelId + ') on element of MountInformationsForPaddock.modelId.');
            }
            this.name = param1.readUTF();
            this.ownerName = param1.readUTF();

        }
    }
    export class PaddockInformations implements INetworkType {
        public static ID: number = 132;

        maxOutdoorMount: number;
        maxItems: number;

        constructor() {
            this.maxOutdoorMount = 0;
            this.maxItems = 0;
        }

        public getTypeId(): number {
            return PaddockInformations.ID;
        }

        public reset(): void {
            this.maxOutdoorMount = 0;
            this.maxItems = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_PaddockInformations(param1);
        }

        public serializeAs_PaddockInformations(param1: ICustomDataOutput): void {
            if (this.maxOutdoorMount < 0) {
                throw new Error('Forbidden value (' + this.maxOutdoorMount + ') on element maxOutdoorMount.');
            }
            param1.writeVarShort(this.maxOutdoorMount);
            if (this.maxItems < 0) {
                throw new Error('Forbidden value (' + this.maxItems + ') on element maxItems.');
            }
            param1.writeVarShort(this.maxItems);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_PaddockInformations(param1);
        }

        public deserializeAs_PaddockInformations(param1: ICustomDataInput): void {
            this.maxOutdoorMount = param1.readVarUhShort();
            if (this.maxOutdoorMount < 0) {
                throw new Error('Forbidden value (' + this.maxOutdoorMount + ') on element of PaddockInformations.maxOutdoorMount.');
            }
            this.maxItems = param1.readVarUhShort();
            if (this.maxItems < 0) {
                throw new Error('Forbidden value (' + this.maxItems + ') on element of PaddockInformations.maxItems.');
            }

        }
    }
    export class PaddockBuyableInformations extends PaddockInformations implements INetworkType {
        public static ID: number = 130;

        price: number;
        locked: boolean;

        constructor() {
            this.price = 0;
            this.locked = false;
            super();
        }

        public getTypeId(): number {
            return PaddockBuyableInformations.ID;
        }

        public reset(): void {
            this.price = 0;
            this.locked = false;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_PaddockBuyableInformations(param1);
        }

        public serializeAs_PaddockBuyableInformations(param1: ICustomDataOutput): void {
            super.serializeAs_PaddockInformations(param1);
            if (this.price < 0) {
                throw new Error('Forbidden value (' + this.price + ') on element price.');
            }
            param1.writeVarInt(this.price);
            param1.writeBoolean(this.locked);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_PaddockBuyableInformations(param1);
        }

        public deserializeAs_PaddockBuyableInformations(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.price = param1.readVarUhInt();
            if (this.price < 0) {
                throw new Error('Forbidden value (' + this.price + ') on element of PaddockBuyableInformations.price.');
            }
            this.locked = param1.readBoolean();

        }
    }
    export class PaddockAbandonnedInformations extends PaddockBuyableInformations implements INetworkType {
        public static ID: number = 133;

        guildId: number;

        constructor() {
            this.guildId = 0;
            super();
        }

        public getTypeId(): number {
            return PaddockAbandonnedInformations.ID;
        }

        public reset(): void {
            this.guildId = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_PaddockAbandonnedInformations(param1);
        }

        public serializeAs_PaddockAbandonnedInformations(param1: ICustomDataOutput): void {
            super.serializeAs_PaddockBuyableInformations(param1);
            param1.writeInt(this.guildId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_PaddockAbandonnedInformations(param1);
        }

        public deserializeAs_PaddockAbandonnedInformations(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.guildId = param1.readInt();

        }
    }
    export class PaddockContentInformations extends PaddockInformations implements INetworkType {
        public static ID: number = 183;

        paddockId: number;
        worldX: number;
        worldY: number;
        mapId: number;
        subAreaId: number;
        abandonned: boolean;
        mountsInformations: MountInformationsForPaddock[];

        constructor() {
            this.paddockId = 0;
            this.worldX = 0;
            this.worldY = 0;
            this.mapId = 0;
            this.subAreaId = 0;
            this.abandonned = false;
            this.mountsInformations = [];
            super();
        }

        public getTypeId(): number {
            return PaddockContentInformations.ID;
        }

        public reset(): void {
            this.paddockId = 0;
            this.worldX = 0;
            this.worldY = 0;
            this.mapId = 0;
            this.subAreaId = 0;
            this.abandonned = false;
            this.mountsInformations = [];
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_PaddockContentInformations(param1);
        }

        public serializeAs_PaddockContentInformations(param1: ICustomDataOutput): void {
            super.serializeAs_PaddockInformations(param1);
            param1.writeInt(this.paddockId);
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error('Forbidden value (' + this.worldX + ') on element worldX.');
            }
            param1.writeShort(this.worldX);
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error('Forbidden value (' + this.worldY + ') on element worldY.');
            }
            param1.writeShort(this.worldY);
            param1.writeInt(this.mapId);
            if (this.subAreaId < 0) {
                throw new Error('Forbidden value (' + this.subAreaId + ') on element subAreaId.');
            }
            param1.writeVarShort(this.subAreaId);
            param1.writeBoolean(this.abandonned);
            param1.writeShort(this.mountsInformations.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.mountsInformations.length) {
                (this.mountsInformations[_loc2_]).serializeAs_MountInformationsForPaddock(param1);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_PaddockContentInformations(param1);
        }

        public deserializeAs_PaddockContentInformations(param1: ICustomDataInput): void {
            var _loc4_: MountInformationsForPaddock = null;
            super.deserialize(param1);
            this.paddockId = param1.readInt();
            this.worldX = param1.readShort();
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error('Forbidden value (' + this.worldX + ') on element of PaddockContentInformations.worldX.');
            }
            this.worldY = param1.readShort();
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error('Forbidden value (' + this.worldY + ') on element of PaddockContentInformations.worldY.');
            }
            this.mapId = param1.readInt();
            this.subAreaId = param1.readVarUhShort();
            if (this.subAreaId < 0) {
                throw new Error('Forbidden value (' + this.subAreaId + ') on element of PaddockContentInformations.subAreaId.');
            }
            this.abandonned = param1.readBoolean();
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = new MountInformationsForPaddock();
                _loc4_.deserialize(param1);
                this.mountsInformations.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class PaddockInformationsForSell implements INetworkType {
        public static ID: number = 222;

        guildOwner: string;
        worldX: number;
        worldY: number;
        subAreaId: number;
        nbMount: number;
        nbObject: number;
        price: number;

        constructor() {
            this.guildOwner = '';
            this.worldX = 0;
            this.worldY = 0;
            this.subAreaId = 0;
            this.nbMount = 0;
            this.nbObject = 0;
            this.price = 0;
        }

        public getTypeId(): number {
            return PaddockInformationsForSell.ID;
        }

        public reset(): void {
            this.guildOwner = '';
            this.worldX = 0;
            this.worldY = 0;
            this.subAreaId = 0;
            this.nbMount = 0;
            this.nbObject = 0;
            this.price = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_PaddockInformationsForSell(param1);
        }

        public serializeAs_PaddockInformationsForSell(param1: ICustomDataOutput): void {
            param1.writeUTF(this.guildOwner);
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error('Forbidden value (' + this.worldX + ') on element worldX.');
            }
            param1.writeShort(this.worldX);
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error('Forbidden value (' + this.worldY + ') on element worldY.');
            }
            param1.writeShort(this.worldY);
            if (this.subAreaId < 0) {
                throw new Error('Forbidden value (' + this.subAreaId + ') on element subAreaId.');
            }
            param1.writeVarShort(this.subAreaId);
            param1.writeByte(this.nbMount);
            param1.writeByte(this.nbObject);
            if (this.price < 0) {
                throw new Error('Forbidden value (' + this.price + ') on element price.');
            }
            param1.writeVarInt(this.price);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_PaddockInformationsForSell(param1);
        }

        public deserializeAs_PaddockInformationsForSell(param1: ICustomDataInput): void {
            this.guildOwner = param1.readUTF();
            this.worldX = param1.readShort();
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error('Forbidden value (' + this.worldX + ') on element of PaddockInformationsForSell.worldX.');
            }
            this.worldY = param1.readShort();
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error('Forbidden value (' + this.worldY + ') on element of PaddockInformationsForSell.worldY.');
            }
            this.subAreaId = param1.readVarUhShort();
            if (this.subAreaId < 0) {
                throw new Error('Forbidden value (' + this.subAreaId + ') on element of PaddockInformationsForSell.subAreaId.');
            }
            this.nbMount = param1.readByte();
            this.nbObject = param1.readByte();
            this.price = param1.readVarUhInt();
            if (this.price < 0) {
                throw new Error('Forbidden value (' + this.price + ') on element of PaddockInformationsForSell.price.');
            }

        }
    }
    export class PaddockItem extends ObjectItemInRolePlay implements INetworkType {
        public static ID: number = 185;

        durability: ItemDurability;

        constructor() {
            this.durability = new ItemDurability();
            super();
        }

        public getTypeId(): number {
            return PaddockItem.ID;
        }

        public reset(): void {
            this.durability = new ItemDurability();
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_PaddockItem(param1);
        }

        public serializeAs_PaddockItem(param1: ICustomDataOutput): void {
            super.serializeAs_ObjectItemInRolePlay(param1);
            this.durability.serializeAs_ItemDurability(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_PaddockItem(param1);
        }

        public deserializeAs_PaddockItem(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.durability = new ItemDurability();
            this.durability.deserialize(param1);

        }
    }
    export class PaddockPrivateInformations extends PaddockAbandonnedInformations implements INetworkType {
        public static ID: number = 131;

        guildInfo: GuildInformations;

        constructor() {
            this.guildInfo = new GuildInformations();
            super();
        }

        public getTypeId(): number {
            return PaddockPrivateInformations.ID;
        }

        public reset(): void {
            this.guildInfo = new GuildInformations();
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_PaddockPrivateInformations(param1);
        }

        public serializeAs_PaddockPrivateInformations(param1: ICustomDataOutput): void {
            super.serializeAs_PaddockAbandonnedInformations(param1);
            this.guildInfo.serializeAs_GuildInformations(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_PaddockPrivateInformations(param1);
        }

        public deserializeAs_PaddockPrivateInformations(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.guildInfo = new GuildInformations();
            this.guildInfo.deserialize(param1);

        }
    }
    export class PrismInformation implements INetworkType {
        public static ID: number = 428;

        typeId: number;
        state: number;
        nextVulnerabilityDate: number;
        placementDate: number;
        rewardTokenCount: number;

        constructor() {
            this.typeId = 0;
            this.state = 1;
            this.nextVulnerabilityDate = 0;
            this.placementDate = 0;
            this.rewardTokenCount = 0;
        }

        public getTypeId(): number {
            return PrismInformation.ID;
        }

        public reset(): void {
            this.typeId = 0;
            this.state = 1;
            this.nextVulnerabilityDate = 0;
            this.placementDate = 0;
            this.rewardTokenCount = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_PrismInformation(param1);
        }

        public serializeAs_PrismInformation(param1: ICustomDataOutput): void {
            if (this.typeId < 0) {
                throw new Error('Forbidden value (' + this.typeId + ') on element typeId.');
            }
            param1.writeByte(this.typeId);
            param1.writeByte(this.state);
            if (this.nextVulnerabilityDate < 0) {
                throw new Error('Forbidden value (' + this.nextVulnerabilityDate + ') on element nextVulnerabilityDate.');
            }
            param1.writeInt(this.nextVulnerabilityDate);
            if (this.placementDate < 0) {
                throw new Error('Forbidden value (' + this.placementDate + ') on element placementDate.');
            }
            param1.writeInt(this.placementDate);
            if (this.rewardTokenCount < 0) {
                throw new Error('Forbidden value (' + this.rewardTokenCount + ') on element rewardTokenCount.');
            }
            param1.writeVarInt(this.rewardTokenCount);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_PrismInformation(param1);
        }

        public deserializeAs_PrismInformation(param1: ICustomDataInput): void {
            this.typeId = param1.readByte();
            if (this.typeId < 0) {
                throw new Error('Forbidden value (' + this.typeId + ') on element of PrismInformation.typeId.');
            }
            this.state = param1.readByte();
            if (this.state < 0) {
                throw new Error('Forbidden value (' + this.state + ') on element of PrismInformation.state.');
            }
            this.nextVulnerabilityDate = param1.readInt();
            if (this.nextVulnerabilityDate < 0) {
                throw new Error('Forbidden value (' + this.nextVulnerabilityDate + ') on element of PrismInformation.nextVulnerabilityDate.');
            }
            this.placementDate = param1.readInt();
            if (this.placementDate < 0) {
                throw new Error('Forbidden value (' + this.placementDate + ') on element of PrismInformation.placementDate.');
            }
            this.rewardTokenCount = param1.readVarUhInt();
            if (this.rewardTokenCount < 0) {
                throw new Error('Forbidden value (' + this.rewardTokenCount + ') on element of PrismInformation.rewardTokenCount.');
            }

        }
    }
    export class AllianceInsiderPrismInformation extends PrismInformation implements INetworkType {
        public static ID: number = 431;

        lastTimeSlotModificationDate: number;
        lastTimeSlotModificationAuthorGuildId: number;
        lastTimeSlotModificationAuthorId: number;
        lastTimeSlotModificationAuthorName: string;
        modulesObjects: ObjectItem[];

        constructor() {
            this.lastTimeSlotModificationDate = 0;
            this.lastTimeSlotModificationAuthorGuildId = 0;
            this.lastTimeSlotModificationAuthorId = 0;
            this.lastTimeSlotModificationAuthorName = '';
            this.modulesObjects = [];
            super();
        }

        public getTypeId(): number {
            return AllianceInsiderPrismInformation.ID;
        }

        public reset(): void {
            this.lastTimeSlotModificationDate = 0;
            this.lastTimeSlotModificationAuthorGuildId = 0;
            this.lastTimeSlotModificationAuthorId = 0;
            this.lastTimeSlotModificationAuthorName = '';
            this.modulesObjects = [];
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_AllianceInsiderPrismInformation(param1);
        }

        public serializeAs_AllianceInsiderPrismInformation(param1: ICustomDataOutput): void {
            super.serializeAs_PrismInformation(param1);
            if (this.lastTimeSlotModificationDate < 0) {
                throw new Error('Forbidden value (' + this.lastTimeSlotModificationDate + ') on element lastTimeSlotModificationDate.');
            }
            param1.writeInt(this.lastTimeSlotModificationDate);
            if (this.lastTimeSlotModificationAuthorGuildId < 0) {
                throw new Error('Forbidden value (' + this.lastTimeSlotModificationAuthorGuildId + ') on element lastTimeSlotModificationAuthorGuildId.');
            }
            param1.writeVarInt(this.lastTimeSlotModificationAuthorGuildId);
            if (this.lastTimeSlotModificationAuthorId < 0) {
                throw new Error('Forbidden value (' + this.lastTimeSlotModificationAuthorId + ') on element lastTimeSlotModificationAuthorId.');
            }
            param1.writeVarInt(this.lastTimeSlotModificationAuthorId);
            param1.writeUTF(this.lastTimeSlotModificationAuthorName);
            param1.writeShort(this.modulesObjects.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.modulesObjects.length) {
                (this.modulesObjects[_loc2_]).serializeAs_ObjectItem(param1);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_AllianceInsiderPrismInformation(param1);
        }

        public deserializeAs_AllianceInsiderPrismInformation(param1: ICustomDataInput): void {
            var _loc4_: ObjectItem = null;
            super.deserialize(param1);
            this.lastTimeSlotModificationDate = param1.readInt();
            if (this.lastTimeSlotModificationDate < 0) {
                throw new Error('Forbidden value (' + this.lastTimeSlotModificationDate + ') on element of AllianceInsiderPrismInformation.lastTimeSlotModificationDate.');
            }
            this.lastTimeSlotModificationAuthorGuildId = param1.readVarUhInt();
            if (this.lastTimeSlotModificationAuthorGuildId < 0) {
                throw new Error('Forbidden value (' + this.lastTimeSlotModificationAuthorGuildId + ') on element of AllianceInsiderPrismInformation.lastTimeSlotModificationAuthorGuildId.');
            }
            this.lastTimeSlotModificationAuthorId = param1.readVarUhInt();
            if (this.lastTimeSlotModificationAuthorId < 0) {
                throw new Error('Forbidden value (' + this.lastTimeSlotModificationAuthorId + ') on element of AllianceInsiderPrismInformation.lastTimeSlotModificationAuthorId.');
            }
            this.lastTimeSlotModificationAuthorName = param1.readUTF();
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = new ObjectItem();
                _loc4_.deserialize(param1);
                this.modulesObjects.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class AlliancePrismInformation extends PrismInformation implements INetworkType {
        public static ID: number = 427;

        alliance: AllianceInformations;

        constructor() {
            this.alliance = new AllianceInformations();
            super();
        }

        public getTypeId(): number {
            return AlliancePrismInformation.ID;
        }

        public reset(): void {
            this.alliance = new AllianceInformations();
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_AlliancePrismInformation(param1);
        }

        public serializeAs_AlliancePrismInformation(param1: ICustomDataOutput): void {
            super.serializeAs_PrismInformation(param1);
            this.alliance.serializeAs_AllianceInformations(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_AlliancePrismInformation(param1);
        }

        public deserializeAs_AlliancePrismInformation(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.alliance = new AllianceInformations();
            this.alliance.deserialize(param1);

        }
    }
    export class PrismFightersInformation implements INetworkType {
        public static ID: number = 443;

        subAreaId: number;
        waitingForHelpInfo: ProtectedEntityWaitingForHelpInfo;
        allyCharactersInformations: CharacterMinimalPlusLookInformations[];
        enemyCharactersInformations: CharacterMinimalPlusLookInformations[];

        constructor() {
            this.subAreaId = 0;
            this.waitingForHelpInfo = new ProtectedEntityWaitingForHelpInfo();
            this.allyCharactersInformations = [];
            this.enemyCharactersInformations = [];
        }

        public getTypeId(): number {
            return PrismFightersInformation.ID;
        }

        public reset(): void {
            this.subAreaId = 0;
            this.waitingForHelpInfo = new ProtectedEntityWaitingForHelpInfo();
            this.allyCharactersInformations = [];
            this.enemyCharactersInformations = [];
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_PrismFightersInformation(param1);
        }

        public serializeAs_PrismFightersInformation(param1: ICustomDataOutput): void {
            if (this.subAreaId < 0) {
                throw new Error('Forbidden value (' + this.subAreaId + ') on element subAreaId.');
            }
            param1.writeVarShort(this.subAreaId);
            this.waitingForHelpInfo.serializeAs_ProtectedEntityWaitingForHelpInfo(param1);
            param1.writeShort(this.allyCharactersInformations.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.allyCharactersInformations.length) {
                param1.writeShort((this.allyCharactersInformations[_loc2_]).getTypeId());
                (this.allyCharactersInformations[_loc2_]).serialize(param1);
                _loc2_++;
            }
            param1.writeShort(this.enemyCharactersInformations.length);
            var _loc3_: number = 0;
            while (_loc3_ < this.enemyCharactersInformations.length) {
                param1.writeShort((this.enemyCharactersInformations[_loc3_]).getTypeId());
                (this.enemyCharactersInformations[_loc3_]).serialize(param1);
                _loc3_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_PrismFightersInformation(param1);
        }

        public deserializeAs_PrismFightersInformation(param1: ICustomDataInput): void {
            var _loc6_: number = 0;
            var _loc7_: CharacterMinimalPlusLookInformations = null;
            var _loc8_: number = 0;
            var _loc9_: CharacterMinimalPlusLookInformations = null;
            this.subAreaId = param1.readVarUhShort();
            if (this.subAreaId < 0) {
                throw new Error('Forbidden value (' + this.subAreaId + ') on element of PrismFightersInformation.subAreaId.');
            }
            this.waitingForHelpInfo = new ProtectedEntityWaitingForHelpInfo();
            this.waitingForHelpInfo.deserialize(param1);
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc6_ = param1.readUnsignedShort();
                _loc7_ = <CharacterMinimalPlusLookInformations>ProtocolTypeManager.getInstance(CharacterMinimalPlusLookInformations, _loc6_);
                _loc7_.deserialize(param1);
                this.allyCharactersInformations.push(_loc7_);
                _loc3_++;
            }
            var _loc4_: number = param1.readUnsignedShort();
            var _loc5_: number = 0;
            while (_loc5_ < _loc4_) {
            _loc8_ = param1.readUnsignedShort();
                _loc9_ = <CharacterMinimalPlusLookInformations>ProtocolTypeManager.getInstance(CharacterMinimalPlusLookInformations, _loc8_);
                _loc9_.deserialize(param1);
                this.enemyCharactersInformations.push(_loc9_);
                _loc5_++;
            }

        }
    }
    export class PrismSubareaEmptyInfo implements INetworkType {
        public static ID: number = 438;

        subAreaId: number;
        allianceId: number;

        constructor() {
            this.subAreaId = 0;
            this.allianceId = 0;
        }

        public getTypeId(): number {
            return PrismSubareaEmptyInfo.ID;
        }

        public reset(): void {
            this.subAreaId = 0;
            this.allianceId = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_PrismSubareaEmptyInfo(param1);
        }

        public serializeAs_PrismSubareaEmptyInfo(param1: ICustomDataOutput): void {
            if (this.subAreaId < 0) {
                throw new Error('Forbidden value (' + this.subAreaId + ') on element subAreaId.');
            }
            param1.writeVarShort(this.subAreaId);
            if (this.allianceId < 0) {
                throw new Error('Forbidden value (' + this.allianceId + ') on element allianceId.');
            }
            param1.writeVarInt(this.allianceId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_PrismSubareaEmptyInfo(param1);
        }

        public deserializeAs_PrismSubareaEmptyInfo(param1: ICustomDataInput): void {
            this.subAreaId = param1.readVarUhShort();
            if (this.subAreaId < 0) {
                throw new Error('Forbidden value (' + this.subAreaId + ') on element of PrismSubareaEmptyInfo.subAreaId.');
            }
            this.allianceId = param1.readVarUhInt();
            if (this.allianceId < 0) {
                throw new Error('Forbidden value (' + this.allianceId + ') on element of PrismSubareaEmptyInfo.allianceId.');
            }

        }
    }
    export class PrismGeolocalizedInformation extends PrismSubareaEmptyInfo implements INetworkType {
        public static ID: number = 434;

        worldX: number;
        worldY: number;
        mapId: number;
        prism: PrismInformation;

        constructor() {
            this.worldX = 0;
            this.worldY = 0;
            this.mapId = 0;
            this.prism = new PrismInformation();
            super();
        }

        public getTypeId(): number {
            return PrismGeolocalizedInformation.ID;
        }

        public reset(): void {
            this.worldX = 0;
            this.worldY = 0;
            this.mapId = 0;
            this.prism = new PrismInformation();
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_PrismGeolocalizedInformation(param1);
        }

        public serializeAs_PrismGeolocalizedInformation(param1: ICustomDataOutput): void {
            super.serializeAs_PrismSubareaEmptyInfo(param1);
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error('Forbidden value (' + this.worldX + ') on element worldX.');
            }
            param1.writeShort(this.worldX);
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error('Forbidden value (' + this.worldY + ') on element worldY.');
            }
            param1.writeShort(this.worldY);
            param1.writeInt(this.mapId);
            param1.writeShort(this.prism.getTypeId());
            this.prism.serialize(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_PrismGeolocalizedInformation(param1);
        }

        public deserializeAs_PrismGeolocalizedInformation(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.worldX = param1.readShort();
            if (this.worldX < -255 || this.worldX > 255) {
                throw new Error('Forbidden value (' + this.worldX + ') on element of PrismGeolocalizedInformation.worldX.');
            }
            this.worldY = param1.readShort();
            if (this.worldY < -255 || this.worldY > 255) {
                throw new Error('Forbidden value (' + this.worldY + ') on element of PrismGeolocalizedInformation.worldY.');
            }
            this.mapId = param1.readInt();
            var _loc2_: number = param1.readUnsignedShort();
            this.prism = <PrismInformation>ProtocolTypeManager.getInstance(PrismInformation, _loc2_);
            this.prism.deserialize(param1);

        }
    }
    export class Shortcut implements INetworkType {
        public static ID: number = 369;

        slot: number;

        constructor() {
            this.slot = 0;
        }

        public getTypeId(): number {
            return Shortcut.ID;
        }

        public reset(): void {
            this.slot = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_Shortcut(param1);
        }

        public serializeAs_Shortcut(param1: ICustomDataOutput): void {
            if (this.slot < 0 || this.slot > 99) {
                throw new Error('Forbidden value (' + this.slot + ') on element slot.');
            }
            param1.writeByte(this.slot);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_Shortcut(param1);
        }

        public deserializeAs_Shortcut(param1: ICustomDataInput): void {
            this.slot = param1.readByte();
            if (this.slot < 0 || this.slot > 99) {
                throw new Error('Forbidden value (' + this.slot + ') on element of Shortcut.slot.');
            }

        }
    }
    export class ShortcutEmote extends Shortcut implements INetworkType {
        public static ID: number = 389;

        emoteId: number;

        constructor() {
            this.emoteId = 0;
            super();
        }

        public getTypeId(): number {
            return ShortcutEmote.ID;
        }

        public reset(): void {
            this.emoteId = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ShortcutEmote(param1);
        }

        public serializeAs_ShortcutEmote(param1: ICustomDataOutput): void {
            super.serializeAs_Shortcut(param1);
            if (this.emoteId < 0 || this.emoteId > 255) {
                throw new Error('Forbidden value (' + this.emoteId + ') on element emoteId.');
            }
            param1.writeByte(this.emoteId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ShortcutEmote(param1);
        }

        public deserializeAs_ShortcutEmote(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.emoteId = param1.readUnsignedByte();
            if (this.emoteId < 0 || this.emoteId > 255) {
                throw new Error('Forbidden value (' + this.emoteId + ') on element of ShortcutEmote.emoteId.');
            }

        }
    }
    export class ShortcutObject extends Shortcut implements INetworkType {
        public static ID: number = 367;



        constructor() {

            super();
        }

        public getTypeId(): number {
            return ShortcutObject.ID;
        }

        public reset(): void {

        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ShortcutObject(param1);
        }

        public serializeAs_ShortcutObject(param1: ICustomDataOutput): void {
            super.serializeAs_Shortcut(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ShortcutObject(param1);
        }

        public deserializeAs_ShortcutObject(param1: ICustomDataInput): void {
            super.deserialize(param1);

        }
    }
    export class ShortcutObjectIdolsPreset extends ShortcutObject implements INetworkType {
        public static ID: number = 492;

        presetId: number;

        constructor() {
            this.presetId = 0;
            super();
        }

        public getTypeId(): number {
            return ShortcutObjectIdolsPreset.ID;
        }

        public reset(): void {
            this.presetId = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ShortcutObjectIdolsPreset(param1);
        }

        public serializeAs_ShortcutObjectIdolsPreset(param1: ICustomDataOutput): void {
            super.serializeAs_ShortcutObject(param1);
            if (this.presetId < 0) {
                throw new Error('Forbidden value (' + this.presetId + ') on element presetId.');
            }
            param1.writeByte(this.presetId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ShortcutObjectIdolsPreset(param1);
        }

        public deserializeAs_ShortcutObjectIdolsPreset(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.presetId = param1.readByte();
            if (this.presetId < 0) {
                throw new Error('Forbidden value (' + this.presetId + ') on element of ShortcutObjectIdolsPreset.presetId.');
            }

        }
    }
    export class ShortcutObjectItem extends ShortcutObject implements INetworkType {
        public static ID: number = 371;

        itemUID: number;
        itemGID: number;

        constructor() {
            this.itemUID = 0;
            this.itemGID = 0;
            super();
        }

        public getTypeId(): number {
            return ShortcutObjectItem.ID;
        }

        public reset(): void {
            this.itemUID = 0;
            this.itemGID = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ShortcutObjectItem(param1);
        }

        public serializeAs_ShortcutObjectItem(param1: ICustomDataOutput): void {
            super.serializeAs_ShortcutObject(param1);
            param1.writeInt(this.itemUID);
            param1.writeInt(this.itemGID);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ShortcutObjectItem(param1);
        }

        public deserializeAs_ShortcutObjectItem(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.itemUID = param1.readInt();
            this.itemGID = param1.readInt();

        }
    }
    export class ShortcutObjectPreset extends ShortcutObject implements INetworkType {
        public static ID: number = 370;

        presetId: number;

        constructor() {
            this.presetId = 0;
            super();
        }

        public getTypeId(): number {
            return ShortcutObjectPreset.ID;
        }

        public reset(): void {
            this.presetId = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ShortcutObjectPreset(param1);
        }

        public serializeAs_ShortcutObjectPreset(param1: ICustomDataOutput): void {
            super.serializeAs_ShortcutObject(param1);
            if (this.presetId < 0) {
                throw new Error('Forbidden value (' + this.presetId + ') on element presetId.');
            }
            param1.writeByte(this.presetId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ShortcutObjectPreset(param1);
        }

        public deserializeAs_ShortcutObjectPreset(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.presetId = param1.readByte();
            if (this.presetId < 0) {
                throw new Error('Forbidden value (' + this.presetId + ') on element of ShortcutObjectPreset.presetId.');
            }

        }
    }
    export class ShortcutSmiley extends Shortcut implements INetworkType {
        public static ID: number = 388;

        smileyId: number;

        constructor() {
            this.smileyId = 0;
            super();
        }

        public getTypeId(): number {
            return ShortcutSmiley.ID;
        }

        public reset(): void {
            this.smileyId = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ShortcutSmiley(param1);
        }

        public serializeAs_ShortcutSmiley(param1: ICustomDataOutput): void {
            super.serializeAs_Shortcut(param1);
            if (this.smileyId < 0) {
                throw new Error('Forbidden value (' + this.smileyId + ') on element smileyId.');
            }
            param1.writeVarShort(this.smileyId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ShortcutSmiley(param1);
        }

        public deserializeAs_ShortcutSmiley(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.smileyId = param1.readVarUhShort();
            if (this.smileyId < 0) {
                throw new Error('Forbidden value (' + this.smileyId + ') on element of ShortcutSmiley.smileyId.');
            }

        }
    }
    export class ShortcutSpell extends Shortcut implements INetworkType {
        public static ID: number = 368;

        spellId: number;

        constructor() {
            this.spellId = 0;
            super();
        }

        public getTypeId(): number {
            return ShortcutSpell.ID;
        }

        public reset(): void {
            this.spellId = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ShortcutSpell(param1);
        }

        public serializeAs_ShortcutSpell(param1: ICustomDataOutput): void {
            super.serializeAs_Shortcut(param1);
            if (this.spellId < 0) {
                throw new Error('Forbidden value (' + this.spellId + ') on element spellId.');
            }
            param1.writeVarShort(this.spellId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ShortcutSpell(param1);
        }

        public deserializeAs_ShortcutSpell(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.spellId = param1.readVarUhShort();
            if (this.spellId < 0) {
                throw new Error('Forbidden value (' + this.spellId + ') on element of ShortcutSpell.spellId.');
            }

        }
    }
    export class AllianceFactSheetInformations extends AllianceInformations implements INetworkType {
        public static ID: number = 421;

        creationDate: number;

        constructor() {
            this.creationDate = 0;
            super();
        }

        public getTypeId(): number {
            return AllianceFactSheetInformations.ID;
        }

        public reset(): void {
            this.creationDate = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_AllianceFactSheetInformations(param1);
        }

        public serializeAs_AllianceFactSheetInformations(param1: ICustomDataOutput): void {
            super.serializeAs_AllianceInformations(param1);
            if (this.creationDate < 0) {
                throw new Error('Forbidden value (' + this.creationDate + ') on element creationDate.');
            }
            param1.writeInt(this.creationDate);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_AllianceFactSheetInformations(param1);
        }

        public deserializeAs_AllianceFactSheetInformations(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.creationDate = param1.readInt();
            if (this.creationDate < 0) {
                throw new Error('Forbidden value (' + this.creationDate + ') on element of AllianceFactSheetInformations.creationDate.');
            }

        }
    }
    export class AllianceVersatileInformations implements INetworkType {
        public static ID: number = 432;

        allianceId: number;
        nbGuilds: number;
        nbMembers: number;
        nbSubarea: number;

        constructor() {
            this.allianceId = 0;
            this.nbGuilds = 0;
            this.nbMembers = 0;
            this.nbSubarea = 0;
        }

        public getTypeId(): number {
            return AllianceVersatileInformations.ID;
        }

        public reset(): void {
            this.allianceId = 0;
            this.nbGuilds = 0;
            this.nbMembers = 0;
            this.nbSubarea = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_AllianceVersatileInformations(param1);
        }

        public serializeAs_AllianceVersatileInformations(param1: ICustomDataOutput): void {
            if (this.allianceId < 0) {
                throw new Error('Forbidden value (' + this.allianceId + ') on element allianceId.');
            }
            param1.writeVarInt(this.allianceId);
            if (this.nbGuilds < 0) {
                throw new Error('Forbidden value (' + this.nbGuilds + ') on element nbGuilds.');
            }
            param1.writeVarShort(this.nbGuilds);
            if (this.nbMembers < 0) {
                throw new Error('Forbidden value (' + this.nbMembers + ') on element nbMembers.');
            }
            param1.writeVarShort(this.nbMembers);
            if (this.nbSubarea < 0) {
                throw new Error('Forbidden value (' + this.nbSubarea + ') on element nbSubarea.');
            }
            param1.writeVarShort(this.nbSubarea);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_AllianceVersatileInformations(param1);
        }

        public deserializeAs_AllianceVersatileInformations(param1: ICustomDataInput): void {
            this.allianceId = param1.readVarUhInt();
            if (this.allianceId < 0) {
                throw new Error('Forbidden value (' + this.allianceId + ') on element of AllianceVersatileInformations.allianceId.');
            }
            this.nbGuilds = param1.readVarUhShort();
            if (this.nbGuilds < 0) {
                throw new Error('Forbidden value (' + this.nbGuilds + ') on element of AllianceVersatileInformations.nbGuilds.');
            }
            this.nbMembers = param1.readVarUhShort();
            if (this.nbMembers < 0) {
                throw new Error('Forbidden value (' + this.nbMembers + ') on element of AllianceVersatileInformations.nbMembers.');
            }
            this.nbSubarea = param1.readVarUhShort();
            if (this.nbSubarea < 0) {
                throw new Error('Forbidden value (' + this.nbSubarea + ') on element of AllianceVersatileInformations.nbSubarea.');
            }

        }
    }
    export class AlliancedGuildFactSheetInformations extends GuildInformations implements INetworkType {
        public static ID: number = 422;

        allianceInfos: BasicNamedAllianceInformations;

        constructor() {
            this.allianceInfos = new BasicNamedAllianceInformations();
            super();
        }

        public getTypeId(): number {
            return AlliancedGuildFactSheetInformations.ID;
        }

        public reset(): void {
            this.allianceInfos = new BasicNamedAllianceInformations();
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_AlliancedGuildFactSheetInformations(param1);
        }

        public serializeAs_AlliancedGuildFactSheetInformations(param1: ICustomDataOutput): void {
            super.serializeAs_GuildInformations(param1);
            this.allianceInfos.serializeAs_BasicNamedAllianceInformations(param1);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_AlliancedGuildFactSheetInformations(param1);
        }

        public deserializeAs_AlliancedGuildFactSheetInformations(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.allianceInfos = new BasicNamedAllianceInformations();
            this.allianceInfos.deserialize(param1);

        }
    }
    export class GuildFactSheetInformations extends GuildInformations implements INetworkType {
        public static ID: number = 424;

        leaderId: number;
        guildLevel: number;
        nbMembers: number;

        constructor() {
            this.leaderId = 0;
            this.guildLevel = 0;
            this.nbMembers = 0;
            super();
        }

        public getTypeId(): number {
            return GuildFactSheetInformations.ID;
        }

        public reset(): void {
            this.leaderId = 0;
            this.guildLevel = 0;
            this.nbMembers = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GuildFactSheetInformations(param1);
        }

        public serializeAs_GuildFactSheetInformations(param1: ICustomDataOutput): void {
            super.serializeAs_GuildInformations(param1);
            if (this.leaderId < 0) {
                throw new Error('Forbidden value (' + this.leaderId + ') on element leaderId.');
            }
            param1.writeVarInt(this.leaderId);
            if (this.guildLevel < 0 || this.guildLevel > 255) {
                throw new Error('Forbidden value (' + this.guildLevel + ') on element guildLevel.');
            }
            param1.writeByte(this.guildLevel);
            if (this.nbMembers < 0) {
                throw new Error('Forbidden value (' + this.nbMembers + ') on element nbMembers.');
            }
            param1.writeVarShort(this.nbMembers);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GuildFactSheetInformations(param1);
        }

        public deserializeAs_GuildFactSheetInformations(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.leaderId = param1.readVarUhInt();
            if (this.leaderId < 0) {
                throw new Error('Forbidden value (' + this.leaderId + ') on element of GuildFactSheetInformations.leaderId.');
            }
            this.guildLevel = param1.readUnsignedByte();
            if (this.guildLevel < 0 || this.guildLevel > 255) {
                throw new Error('Forbidden value (' + this.guildLevel + ') on element of GuildFactSheetInformations.guildLevel.');
            }
            this.nbMembers = param1.readVarUhShort();
            if (this.nbMembers < 0) {
                throw new Error('Forbidden value (' + this.nbMembers + ') on element of GuildFactSheetInformations.nbMembers.');
            }

        }
    }
    export class GuildVersatileInformations implements INetworkType {
        public static ID: number = 435;

        guildId: number;
        leaderId: number;
        guildLevel: number;
        nbMembers: number;

        constructor() {
            this.guildId = 0;
            this.leaderId = 0;
            this.guildLevel = 0;
            this.nbMembers = 0;
        }

        public getTypeId(): number {
            return GuildVersatileInformations.ID;
        }

        public reset(): void {
            this.guildId = 0;
            this.leaderId = 0;
            this.guildLevel = 0;
            this.nbMembers = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GuildVersatileInformations(param1);
        }

        public serializeAs_GuildVersatileInformations(param1: ICustomDataOutput): void {
            if (this.guildId < 0) {
                throw new Error('Forbidden value (' + this.guildId + ') on element guildId.');
            }
            param1.writeVarInt(this.guildId);
            if (this.leaderId < 0) {
                throw new Error('Forbidden value (' + this.leaderId + ') on element leaderId.');
            }
            param1.writeVarInt(this.leaderId);
            if (this.guildLevel < 1 || this.guildLevel > 200) {
                throw new Error('Forbidden value (' + this.guildLevel + ') on element guildLevel.');
            }
            param1.writeByte(this.guildLevel);
            if (this.nbMembers < 1 || this.nbMembers > 240) {
                throw new Error('Forbidden value (' + this.nbMembers + ') on element nbMembers.');
            }
            param1.writeByte(this.nbMembers);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GuildVersatileInformations(param1);
        }

        public deserializeAs_GuildVersatileInformations(param1: ICustomDataInput): void {
            this.guildId = param1.readVarUhInt();
            if (this.guildId < 0) {
                throw new Error('Forbidden value (' + this.guildId + ') on element of GuildVersatileInformations.guildId.');
            }
            this.leaderId = param1.readVarUhInt();
            if (this.leaderId < 0) {
                throw new Error('Forbidden value (' + this.leaderId + ') on element of GuildVersatileInformations.leaderId.');
            }
            this.guildLevel = param1.readUnsignedByte();
            if (this.guildLevel < 1 || this.guildLevel > 200) {
                throw new Error('Forbidden value (' + this.guildLevel + ') on element of GuildVersatileInformations.guildLevel.');
            }
            this.nbMembers = param1.readUnsignedByte();
            if (this.nbMembers < 1 || this.nbMembers > 240) {
                throw new Error('Forbidden value (' + this.nbMembers + ') on element of GuildVersatileInformations.nbMembers.');
            }

        }
    }
    export class GuildInAllianceVersatileInformations extends GuildVersatileInformations implements INetworkType {
        public static ID: number = 437;

        allianceId: number;

        constructor() {
            this.allianceId = 0;
            super();
        }

        public getTypeId(): number {
            return GuildInAllianceVersatileInformations.ID;
        }

        public reset(): void {
            this.allianceId = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GuildInAllianceVersatileInformations(param1);
        }

        public serializeAs_GuildInAllianceVersatileInformations(param1: ICustomDataOutput): void {
            super.serializeAs_GuildVersatileInformations(param1);
            if (this.allianceId < 0) {
                throw new Error('Forbidden value (' + this.allianceId + ') on element allianceId.');
            }
            param1.writeVarInt(this.allianceId);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GuildInAllianceVersatileInformations(param1);
        }

        public deserializeAs_GuildInAllianceVersatileInformations(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.allianceId = param1.readVarUhInt();
            if (this.allianceId < 0) {
                throw new Error('Forbidden value (' + this.allianceId + ') on element of GuildInAllianceVersatileInformations.allianceId.');
            }

        }
    }
    export class GuildInsiderFactSheetInformations extends GuildFactSheetInformations implements INetworkType {
        public static ID: number = 423;

        leaderName: string;
        nbConnectedMembers: number;
        nbTaxCollectors: number;
        lastActivity: number;
        enabled: boolean;

        constructor() {
            this.leaderName = '';
            this.nbConnectedMembers = 0;
            this.nbTaxCollectors = 0;
            this.lastActivity = 0;
            this.enabled = false;
            super();
        }

        public getTypeId(): number {
            return GuildInsiderFactSheetInformations.ID;
        }

        public reset(): void {
            this.leaderName = '';
            this.nbConnectedMembers = 0;
            this.nbTaxCollectors = 0;
            this.lastActivity = 0;
            this.enabled = false;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_GuildInsiderFactSheetInformations(param1);
        }

        public serializeAs_GuildInsiderFactSheetInformations(param1: ICustomDataOutput): void {
            super.serializeAs_GuildFactSheetInformations(param1);
            param1.writeUTF(this.leaderName);
            if (this.nbConnectedMembers < 0) {
                throw new Error('Forbidden value (' + this.nbConnectedMembers + ') on element nbConnectedMembers.');
            }
            param1.writeVarShort(this.nbConnectedMembers);
            if (this.nbTaxCollectors < 0) {
                throw new Error('Forbidden value (' + this.nbTaxCollectors + ') on element nbTaxCollectors.');
            }
            param1.writeByte(this.nbTaxCollectors);
            if (this.lastActivity < 0) {
                throw new Error('Forbidden value (' + this.lastActivity + ') on element lastActivity.');
            }
            param1.writeInt(this.lastActivity);
            param1.writeBoolean(this.enabled);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_GuildInsiderFactSheetInformations(param1);
        }

        public deserializeAs_GuildInsiderFactSheetInformations(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.leaderName = param1.readUTF();
            this.nbConnectedMembers = param1.readVarUhShort();
            if (this.nbConnectedMembers < 0) {
                throw new Error('Forbidden value (' + this.nbConnectedMembers + ') on element of GuildInsiderFactSheetInformations.nbConnectedMembers.');
            }
            this.nbTaxCollectors = param1.readByte();
            if (this.nbTaxCollectors < 0) {
                throw new Error('Forbidden value (' + this.nbTaxCollectors + ') on element of GuildInsiderFactSheetInformations.nbTaxCollectors.');
            }
            this.lastActivity = param1.readInt();
            if (this.lastActivity < 0) {
                throw new Error('Forbidden value (' + this.lastActivity + ') on element of GuildInsiderFactSheetInformations.lastActivity.');
            }
            this.enabled = param1.readBoolean();

        }
    }
    export class StartupActionAddObject implements INetworkType {
        public static ID: number = 52;

        uid: number;
        title: string;
        text: string;
        descUrl: string;
        pictureUrl: string;
        items: ObjectItemInformationWithQuantity[];

        constructor() {
            this.uid = 0;
            this.title = '';
            this.text = '';
            this.descUrl = '';
            this.pictureUrl = '';
            this.items = [];
        }

        public getTypeId(): number {
            return StartupActionAddObject.ID;
        }

        public reset(): void {
            this.uid = 0;
            this.title = '';
            this.text = '';
            this.descUrl = '';
            this.pictureUrl = '';
            this.items = [];
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_StartupActionAddObject(param1);
        }

        public serializeAs_StartupActionAddObject(param1: ICustomDataOutput): void {
            if (this.uid < 0) {
                throw new Error('Forbidden value (' + this.uid + ') on element uid.');
            }
            param1.writeInt(this.uid);
            param1.writeUTF(this.title);
            param1.writeUTF(this.text);
            param1.writeUTF(this.descUrl);
            param1.writeUTF(this.pictureUrl);
            param1.writeShort(this.items.length);
            var _loc2_: number = 0;
            while (_loc2_ < this.items.length) {
                (this.items[_loc2_]).serializeAs_ObjectItemInformationWithQuantity(param1);
                _loc2_++;
            }

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_StartupActionAddObject(param1);
        }

        public deserializeAs_StartupActionAddObject(param1: ICustomDataInput): void {
            var _loc4_: ObjectItemInformationWithQuantity = null;
            this.uid = param1.readInt();
            if (this.uid < 0) {
                throw new Error('Forbidden value (' + this.uid + ') on element of StartupActionAddObject.uid.');
            }
            this.title = param1.readUTF();
            this.text = param1.readUTF();
            this.descUrl = param1.readUTF();
            this.pictureUrl = param1.readUTF();
            var _loc2_: number = param1.readUnsignedShort();
            var _loc3_: number = 0;
            while (_loc3_ < _loc2_) {
            _loc4_ = new ObjectItemInformationWithQuantity();
                _loc4_.deserialize(param1);
                this.items.push(_loc4_);
                _loc3_++;
            }

        }
    }
    export class TrustCertificate implements INetworkType {
        public static ID: number = 377;

        id: number;
        hash: string;

        constructor() {
            this.id = 0;
            this.hash = '';
        }

        public getTypeId(): number {
            return TrustCertificate.ID;
        }

        public reset(): void {
            this.id = 0;
            this.hash = '';
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_TrustCertificate(param1);
        }

        public serializeAs_TrustCertificate(param1: ICustomDataOutput): void {
            if (this.id < 0) {
                throw new Error('Forbidden value (' + this.id + ') on element id.');
            }
            param1.writeInt(this.id);
            param1.writeUTF(this.hash);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_TrustCertificate(param1);
        }

        public deserializeAs_TrustCertificate(param1: ICustomDataInput): void {
            this.id = param1.readInt();
            if (this.id < 0) {
                throw new Error('Forbidden value (' + this.id + ') on element of TrustCertificate.id.');
            }
            this.hash = param1.readUTF();

        }
    }
    export class ContentPart implements INetworkType {
        public static ID: number = 350;

        id: string;
        state: number;

        constructor() {
            this.id = '';
            this.state = 0;
        }

        public getTypeId(): number {
            return ContentPart.ID;
        }

        public reset(): void {
            this.id = '';
            this.state = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_ContentPart(param1);
        }

        public serializeAs_ContentPart(param1: ICustomDataOutput): void {
            param1.writeUTF(this.id);
            param1.writeByte(this.state);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_ContentPart(param1);
        }

        public deserializeAs_ContentPart(param1: ICustomDataInput): void {
            this.id = param1.readUTF();
            this.state = param1.readByte();
            if (this.state < 0) {
                throw new Error('Forbidden value (' + this.state + ') on element of ContentPart.state.');
            }

        }
    }
    export class Version implements INetworkType {
        public static ID: number = 11;

        major: number;
        minor: number;
        release: number;
        revision: number;
        patch: number;
        buildType: number;

        constructor() {
            this.major = 0;
            this.minor = 0;
            this.release = 0;
            this.revision = 0;
            this.patch = 0;
            this.buildType = 0;
        }

        public getTypeId(): number {
            return Version.ID;
        }

        public reset(): void {
            this.major = 0;
            this.minor = 0;
            this.release = 0;
            this.revision = 0;
            this.patch = 0;
            this.buildType = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_Version(param1);
        }

        public serializeAs_Version(param1: ICustomDataOutput): void {
            if (this.major < 0) {
                throw new Error('Forbidden value (' + this.major + ') on element major.');
            }
            param1.writeByte(this.major);
            if (this.minor < 0) {
                throw new Error('Forbidden value (' + this.minor + ') on element minor.');
            }
            param1.writeByte(this.minor);
            if (this.release < 0) {
                throw new Error('Forbidden value (' + this.release + ') on element release.');
            }
            param1.writeByte(this.release);
            if (this.revision < 0) {
                throw new Error('Forbidden value (' + this.revision + ') on element revision.');
            }
            param1.writeInt(this.revision);
            if (this.patch < 0) {
                throw new Error('Forbidden value (' + this.patch + ') on element patch.');
            }
            param1.writeByte(this.patch);
            param1.writeByte(this.buildType);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_Version(param1);
        }

        public deserializeAs_Version(param1: ICustomDataInput): void {
            this.major = param1.readByte();
            if (this.major < 0) {
                throw new Error('Forbidden value (' + this.major + ') on element of Version.major.');
            }
            this.minor = param1.readByte();
            if (this.minor < 0) {
                throw new Error('Forbidden value (' + this.minor + ') on element of Version.minor.');
            }
            this.release = param1.readByte();
            if (this.release < 0) {
                throw new Error('Forbidden value (' + this.release + ') on element of Version.release.');
            }
            this.revision = param1.readInt();
            if (this.revision < 0) {
                throw new Error('Forbidden value (' + this.revision + ') on element of Version.revision.');
            }
            this.patch = param1.readByte();
            if (this.patch < 0) {
                throw new Error('Forbidden value (' + this.patch + ') on element of Version.patch.');
            }
            this.buildType = param1.readByte();
            if (this.buildType < 0) {
                throw new Error('Forbidden value (' + this.buildType + ') on element of Version.buildType.');
            }

        }
    }
    export class VersionExtended extends Version implements INetworkType {
        public static ID: number = 393;

        install: number;
        technology: number;

        constructor() {
            this.install = 0;
            this.technology = 0;
            super();
        }

        public getTypeId(): number {
            return VersionExtended.ID;
        }

        public reset(): void {
            this.install = 0;
            this.technology = 0;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_VersionExtended(param1);
        }

        public serializeAs_VersionExtended(param1: ICustomDataOutput): void {
            super.serializeAs_Version(param1);
            param1.writeByte(this.install);
            param1.writeByte(this.technology);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_VersionExtended(param1);
        }

        public deserializeAs_VersionExtended(param1: ICustomDataInput): void {
            super.deserialize(param1);
            this.install = param1.readByte();
            if (this.install < 0) {
                throw new Error('Forbidden value (' + this.install + ') on element of VersionExtended.install.');
            }
            this.technology = param1.readByte();
            if (this.technology < 0) {
                throw new Error('Forbidden value (' + this.technology + ') on element of VersionExtended.technology.');
            }

        }
    }
    export class KrosmasterFigure implements INetworkType {
        public static ID: number = 397;

        uid: string;
        figure: number;
        pedestal: number;
        bound: boolean;

        constructor() {
            this.uid = '';
            this.figure = 0;
            this.pedestal = 0;
            this.bound = false;
        }

        public getTypeId(): number {
            return KrosmasterFigure.ID;
        }

        public reset(): void {
            this.uid = '';
            this.figure = 0;
            this.pedestal = 0;
            this.bound = false;
        }

        public serialize(param1: ICustomDataOutput): void {
            this.serializeAs_KrosmasterFigure(param1);
        }

        public serializeAs_KrosmasterFigure(param1: ICustomDataOutput): void {
            param1.writeUTF(this.uid);
            if (this.figure < 0) {
                throw new Error('Forbidden value (' + this.figure + ') on element figure.');
            }
            param1.writeVarShort(this.figure);
            if (this.pedestal < 0) {
                throw new Error('Forbidden value (' + this.pedestal + ') on element pedestal.');
            }
            param1.writeVarShort(this.pedestal);
            param1.writeBoolean(this.bound);

        }

        public deserialize(param1: ICustomDataInput): void {
            this.deserializeAs_KrosmasterFigure(param1);
        }

        public deserializeAs_KrosmasterFigure(param1: ICustomDataInput): void {
            this.uid = param1.readUTF();
            this.figure = param1.readVarUhShort();
            if (this.figure < 0) {
                throw new Error('Forbidden value (' + this.figure + ') on element of KrosmasterFigure.figure.');
            }
            this.pedestal = param1.readVarUhShort();
            if (this.pedestal < 0) {
                throw new Error('Forbidden value (' + this.pedestal + ') on element of KrosmasterFigure.pedestal.');
            }
            this.bound = param1.readBoolean();

        }
    }
}

export = Protocol;
